This is cvsbook.info, produced by makeinfo version 4.0b from main.texi.

START-INFO-DIR-ENTRY
* El libro de CVS: (cvsbook).           Un tutorial de CVS y referencia.
END-INFO-DIR-ENTRY

Copyright (C) 1999, 2000 Karl Fogel <kfogel@red-bean.com>

This document is free software; you can redistribute and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This document is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

Este manual describe como usar y administrar CVS (Concurrent Versions
System). Es parte un trabajo mayor titulado `Desarrollo de Código
Abierto con CVS'; por favor, lea la introducción para más detalles.

Esta es la versión 1.21 de este manual.


File: cvsbook.info,  Node: List Of Keywords,  Prev: Controlling Keyword Expansion,  Up: Claves de Sustitucion (Claves RCS)

List Of Keywords
----------------

These are all the dollar-sign-delimited keywords that CVS recognizes.
Following is a list of the keyword, a brief description, and an example
of its expanded form:

   * $Author: jfs $ - Author of the change:

          $Author: jfs $

   * $Date: 2002/12/05 19:10:27 $ - The date and time of the change, in
     UTC (GMT):

          $Date: 2002/12/05 19:10:27 $

   * $Header: /home/cvs/lucas/doc-cvsbook-es/chapter-9.texi,v 1.6
     2002/12/05 19:10:27 jfs Exp $ - Various pieces of information
     thought to be useful: full path to the RCS file in the repository,
     revision, date (in UTC), author, state, and locker. (Lockers are
     rare; although in the following example, qsmith has a lock.):

          $Header: /usr/local/newrepos/myproj/hello.c,v 1.1 1999/06/01 \
          03:21:13 jrandom Exp qsmith $

   * $Id: chapter-9.texi,v 1.6 2002/12/05 19:10:27 jfs Exp $ - Like
     $Header: /home/cvs/lucas/doc-cvsbook-es/chapter-9.texi,v 1.6
     2002/12/05 19:10:27 jfs Exp $, but without the full path to the
     RCS file:

          $Id: chapter-9.texi,v 1.6 2002/12/05 19:10:27 jfs Exp $

   * $Log: chapter-9.texi,v $ Revision 1.6  2002/12/05 19:10:27  jfs
     Ahora el documento compila incluyendo los acentos en castellano,
     he seguido los consejos de
     http://www.geocities.com/sl_edu_colombia/soluciones/vladimir/linux_esp.html
     Sin embargo sería conveniente revisar por qué los nombres de nodo
     que se referencian no pueden estar con ISO-latin1... ¿problema de
     TexInfo?

     Revision 1.5  2002/12/05 17:12:19  jfs Actualizado el LEAME y
     traducido (un poco) el capítulo 9

     Revision 1.4  2002/12/03 13:04:59  carlosgarcia Traduccion de
     main, introduction e index

     Revision 1.3  2002/11/27 16:25:32  carlosgarcia Falta traducir el
     final del fichero  - The log message of this revision, along with
     the revision number, date, and author.  Unlike other keywords, the
     previous expansions are not replaced.  Instead, they are pushed
     down, so that the newest expansion appears at the top of an
     ever-growing stack of $Log: chapter-9.texi,v $ newest expansion
     appears at the top of an ever-growing stack of Revision 1.6
     2002/12/05 19:10:27  jfs newest expansion appears at the top of an
     ever-growing stack of Ahora el documento compila incluyendo los
     acentos en castellano, he seguido newest expansion appears at the
     top of an ever-growing stack of los consejos de newest expansion
     appears at the top of an ever-growing stack of
     http://www.geocities.com/sl_edu_colombia/soluciones/vladimir/linux_esp.html
     newest expansion appears at the top of an ever-growing stack of
     Sin embargo sería conveniente revisar por qué los nombres de nodo
     que se newest expansion appears at the top of an ever-growing
     stack of referencian no pueden estar con ISO-latin1... ¿problema
     de TexInfo?  newest expansion appears at the top of an
     ever-growing stack of newest expansion appears at the top of an
     ever-growing stack of Revision 1.5  2002/12/05 17:12:19  jfs
     newest expansion appears at the top of an ever-growing stack of
     Actualizado el LEAME y traducido (un poco) el capítulo 9 newest
     expansion appears at the top of an ever-growing stack of newest
     expansion appears at the top of an ever-growing stack of Revision
     1.4  2002/12/03 13:04:59  carlosgarcia newest expansion appears at
     the top of an ever-growing stack of Traduccion de main,
     introduction e index newest expansion appears at the top of an
     ever-growing stack of newest expansion appears at the top of an
     ever-growing stack of Revision 1.3  2002/11/27 16:25:32
     carlosgarcia newest expansion appears at the top of an
     ever-growing stack of Falta traducir el final del fichero newest
     expansion appears at the top of an ever-growing stack of messages:

          $Log: chapter-9.texi,v $
          Revision 1.6  2002/12/05 19:10:27  jfs
          Ahora el documento compila incluyendo los acentos en castellano, he seguido
          los consejos de
          http://www.geocities.com/sl_edu_colombia/soluciones/vladimir/linux_esp.html
          Sin embargo sería conveniente revisar por qué los nombres de nodo que se
          referencian no pueden estar con ISO-latin1... ¿problema de TexInfo?
          
          Revision 1.5  2002/12/05 17:12:19  jfs
          Actualizado el LEAME y traducido (un poco) el capítulo 9
          
          Revision 1.4  2002/12/03 13:04:59  carlosgarcia
          Traduccion de main, introduction e index
          
          Revision 1.3  2002/11/27 16:25:32  carlosgarcia
          Falta traducir el final del fichero
              Revision 1.12  1999/07/19 06:12:43  jrandom
              say hello in Aramaic

     	Any text preceding the $Log: chapter-9.texi,v $ 	Any text preceding
     the Revision 1.6  2002/12/05 19:10:27  jfs 	Any text preceding the
     Ahora el documento compila incluyendo los acentos en castellano,
     he seguido 	Any text preceding the los consejos de 	Any text
     preceding the
     http://www.geocities.com/sl_edu_colombia/soluciones/vladimir/linux_esp.html
     Any text preceding the Sin embargo sería conveniente revisar por
     qué los nombres de nodo que se 	Any text preceding the referencian
     no pueden estar con ISO-latin1... ¿problema de TexInfo?
     Any text preceding the 	Any text preceding the Revision 1.5
     2002/12/05 17:12:19  jfs 	Any text preceding the
     Actualizado el LEAME y traducido (un poco) el capítulo 9
     Any text preceding the 	Any text preceding the Revision 1.4
     2002/12/03 13:04:59  carlosgarcia 	Any text preceding the
     Traduccion de main, introduction e index 	Any text
     preceding the 	Any text preceding the Revision 1.3  2002/11/27
     16:25:32  carlosgarcia 	Any text preceding the Falta
     traducir el final del fichero 	Any text preceding the keyword on
     the same line will be prepended to the downward expansions too;
     this is so that if you use it in a comment in a program source
     file, all of the expansion is commented, too.

   * $Locker:  $ - Name of the person who has a lock on this revision
     (usually no one):

          $Locker:  $

   * $Name:  $ - Name of the sticky tag:

          $Name:  $

   * $RCSfile: chapter-9.texi,v $ - Name of the RCS file in the
     repository:

          $RCSfile: chapter-9.texi,v $

   * $Revision: 1.6 $ - Revision number:

          $Revision: 1.6 $

   * $Source: /home/cvs/lucas/doc-cvsbook-es/chapter-9.texi,v $ - Full
     path to the RCS file in the repository:

          $Source: /home/cvs/lucas/doc-cvsbook-es/chapter-9.texi,v $

   * $State: Exp $ - State of this revision:

          $State: Exp $



File: cvsbook.info,  Node: Ficheros de Administracion del Repositorio,  Next: Ficheros de Control de Ejecucion,  Prev: Claves de Sustitucion (Claves RCS),  Up: Referencia de CVS

Ficheros de Administracion del Repositorio
==========================================

The repository's administrative files are stored in the CVSROOT
subdirectory of the repository.  These files control various aspects of
CVS's behavior (in that repository only, of course).

You may also want to refer to the discussion of administrative files in
*Note Administracion del Repositorio::, which includes examples.

* Menu:

* Storage And Editing::      How to make changes to the administrative files.
* Shared Syntax::            Most administrative files share a common syntax.
* Shared Variables::         Some administrative files can expand variables.
* User Variables::           How to expand run-time variables set by users.
* checkoutlist::             The `checkoutlist' file.
* commitinfo::               The `commitinfo' file.
* config::                   The `config' file.
* cvsignore::                The `cvsignore' file.
* cvswrappers::              The `cvswrappers' file.
* editinfo::                 The `editinfo' file.
* history file::             The `history' file.
* loginfo::                  The `loginfo' file.
* modules::                  The `modules' file.
* notify::                   The `notify' file.
* passwd::                   The `passwd' file.
* rcsinfo::                  The `rcsinfo' file.
* taginfo::                  The `taginfo' file.
* users::                    The `users' file.
* val-tags::                 The `val-tags' file.
* verifymsg::                The `verifymsg' file.


File: cvsbook.info,  Node: Storage And Editing,  Next: Shared Syntax,  Up: Ficheros de Administracion del Repositorio

Storage And Editing
-------------------

Generally, the administrative files are kept under revision control just
like any other file in the repository (the exceptions are noted).
However, unlike other files, checked-out copies of the administrative
files are stored in the repository, right next to their corresponding
RCS files in the `CVSROOT' subdirectory.  It is these checked-out
copies which actually govern CVS's behavior.

The normal way to modify the administrative files is to check out a
working copy of the CVSROOT module, make your changes, and commit.  CVS
updates the checked-out copies in the repository automatically.  (See
*Note checkoutlist::.)  In an emergency, however, it is also possible to
edit the checked-out copies in the repository directly.


File: cvsbook.info,  Node: Shared Syntax,  Next: Shared Variables,  Prev: Storage And Editing,  Up: Ficheros de Administracion del Repositorio

Shared Syntax
-------------

In all of the administrative files, a `#' at the beginning of a line
signifies a comment; that line is ignored by CVS.  A backslash preceding
a newline quotes the newline out of existence.

Some of the files (commitinfo, loginfo, taginfo, and rcsinfo) share more
syntactic conventions as well.  In these files, on the left of each line
is a regular expression (which is matched against a file or directory
name), and the rest of the line is a program, possibly with arguments,
which is invoked if something is done to a file matching the regular
expression.  The program is run with its working directory set to the
top of the repository.

In these files, there are two special regular expressions that may be
used: ALL and DEFAULT.  ALL matches any file or directory, whether or
not there is some other match for it, and DEFAULT matches only if
nothing else matched.


File: cvsbook.info,  Node: Shared Variables,  Next: User Variables,  Prev: Shared Syntax,  Up: Ficheros de Administracion del Repositorio

Shared Variables
----------------

The info files also allow certain variables to be expanded at runtime.
To expand a variable, precede it with a dollar sign (and put it in curly
braces just to be safe).  Here are the variables CVS knows about:

   * ${CVSROOT} - The top of the repository.

   * ${RCSBIN} - (Obsolete) Don't use this variable.  It is only
     applicable in CVS Version 1.9.18 and older.  Specifying it now may
     result in an error.

   * ${CVSEDITOR} ${VISUAL} ${EDITOR} - These all expand to the editor
     that CVS is using for a log message.

   * ${USER} - The user running CVS (on the server side).



File: cvsbook.info,  Node: User Variables,  Next: checkoutlist,  Prev: Shared Variables,  Up: Ficheros de Administracion del Repositorio

User Variables
--------------

Users can also set their own variables when they run any CVS command.
(See the -s global option.)  These variables can be accessed in the
`*info' files by preceding them with an equal sign, as in ${=VAR}.


File: cvsbook.info,  Node: checkoutlist,  Next: commitinfo,  Prev: User Variables,  Up: Ficheros de Administracion del Repositorio

checkoutlist
------------

This contains a list of files for which checked-out copies should be
kept in the repository.  Each line gives the file name and an error
message for CVS to print if, for some reason, the file cannot be checked
out in the repository:

     FILENAME  ERROR_MESSAGE

Because CVS already knows to keep checked-out copies of the existing
administrative files, they do not need to be listed in checkoutlist.
Specifically, the following files never need entries in checkoutlist:
loginfo, rcsinfo, editinfo, verifymsg, commitinfo, taginfo, ignore,
checkoutlist, cvswrappers, notify, modules, readers, writers, and
config.


File: cvsbook.info,  Node: commitinfo,  Next: config,  Prev: checkoutlist,  Up: Ficheros de Administracion del Repositorio

commitinfo
----------

Specifies programs to run at commit time, based on what's being
committed.  Each line consists of a regular expression followed by a
command template:

     REGULAR_EXPRESSION PROGRAM [ARGUMENTS]

The PROGRAM is passed additional arguments following any arguments you
may have written into the template.  These additional arguments are the
full path to the repository, followed by the name of each file about to
be committed.  These files can be examined by PROGRAM; their contents
are the same as those of the working copy files about to be committed.
If PROGRAM exits with nonzero status, the commit fails; otherwise, it
succeeds.  (See also *Note Shared Syntax:: earlier in this chapter.)


File: cvsbook.info,  Node: config,  Next: cvsignore,  Prev: commitinfo,  Up: Ficheros de Administracion del Repositorio

config
------

Controls various global (non-project-specific) repository parameters.
The syntax of each line is

     ParameterName=yes|no

except for the LockDir parameter, which takes an absolute pathname as
argument.

The following parameters are supported:

   * RCSBIN (default: `=no') - (Obsolete) This option is silently
     accepted for backwards compatibility, but no longer has any effect.

   * SystemAuth (default: `=no') - If `yes', CVS pserver authentication
     tries the system user database - usually `/etc/passwd' - if a
     username is not found in `CVSROOT/passwd'.  If `no', the user must
     exist in `CVSROOT/passwd' to gain access via the `:pserver:'
     method.

   * PreservePermissions (default: `=no') - If `yes', CVS tries to
     preserve permissions and other special file system information
     (such as device numbers and symbolic link targets) for files.  You
     probably don't want to do this, as it does not necessarily behave
     as expected. (See the node `Special Files' in the Cederqvist
     manual for details.)

   * TopLevelAdmin (default: `=no') - If `yes', checkouts create a
     `CVS/' subdirectory next to each working copy tree (in the parent
     directory of the working copy).  This can be useful if you will be
     checking out many working copies from the same repository; on the
     other hand, setting it here affects everyone who uses this
     repository.

   * LockDir (unset by default) - The argument after the equal sign is a
     path to a directory in which CVS can create lockfiles.  If not set,
     lockfiles are created in the repository, in locations
     corresponding to each project's RCS files.  This means that users
     of those projects must have file-system-level write access to
     those repository directories.



File: cvsbook.info,  Node: cvsignore,  Next: cvswrappers,  Prev: config,  Up: Ficheros de Administracion del Repositorio

cvsignore
---------

Ignores certain files when doing updates, imports, or releases.  By
default, CVS already ignores some kinds of files. (For a full list, see
the -I option to import, earlier in this chapter.)  You can add to this
list by putting additional file names or wildcard patterns in the
cvsignore file.  Each line gives a file name or pattern, for example:

     README.msdos
     *.html
     blah?.out

This causes CVS to ignore any file named `README.msdos', any file
ending in `.html', and any file beginning with `blah' and ending with
`.out'.  (Technically, you can name multiple files or patterns on each
line, separated by whitespace, but it is more readable to keep them to
one per line.  The whitespace separation rule does, unfortunately, mean
that there's no way to specify a space in a file name, except to use
wildcards.)

A `!' anywhere in the list cancels all previous entries.  (See *Note
$CVSIGNORE:: in the section *Note Environment Variables:: in this
chapter for a fuller discussion of ignore processing.)


File: cvsbook.info,  Node: cvswrappers,  Next: editinfo,  Prev: cvsignore,  Up: Ficheros de Administracion del Repositorio

cvswrappers
-----------

Specifies certain filtering behaviors based on file name.  Each line has
a file-globbing pattern (that is, a file name or file wildcards),
followed by an option indicating the filter type and an argument for the
option.

Options:

   * -m - Specifies an update method.  Possible arguments are MERGE,
     which means to merge changes into working files automatically, and
     COPY, which means don't try to automerge but present the user with
     both versions of the file and let them work it out.  MERGE is the
     default, except for binary files (those whose keyword substitution
     mode is -kb).  (See the *Note Claves de Sustitucion (Claves RCS)::
     section in this chapter.)  Files marked as binary automatically
     use the COPY method, so there is no need to make a -m COPY wrapper
     for them.

   * -k - Specifies a keyword substitution mode.  All of the usual
     modes are possible.  (See the *Note Claves de Sustitucion (Claves
     RCS):: section in this chapter for a complete list.)


Here is an example cvswrappers file:

     *.blob    -m COPY
     *.blink   -k o

This cvswrappers file says to not attempt merges on files ending in
`.blob' and suppress keyword substitution for files ending in `.blink'.
(See also the file `.cvswrappers' in the *Note Working Copy Files::
section in this chapter.)


File: cvsbook.info,  Node: editinfo,  Next: history file,  Prev: cvswrappers,  Up: Ficheros de Administracion del Repositorio

editinfo
--------

This file is obsolete.  Very.


File: cvsbook.info,  Node: history file,  Next: loginfo,  Prev: editinfo,  Up: Ficheros de Administracion del Repositorio

history file
------------

Stores an ever-accumulating history of activity in the repository, for
use by the cvs history command.  To disable this feature, simply remove
the history file.  If you don't remove the file, you should probably
make it world-writeable to avoid permission problems later.

The contents of this file do not modify CVS's behavior in any way
(except for the output of cvs history, of course).


File: cvsbook.info,  Node: loginfo,  Next: modules,  Prev: history file,  Up: Ficheros de Administracion del Repositorio

loginfo
-------

Specifies programs to run on the log message for each commit, based on
what's being committed.  Each line consists of a regular expression
followed by a command template:

     REGULAR_EXPRESSION PROGRAM [ARGUMENTS]

The PROGRAM is passed the log message on its standard input.

Several special codes are available for use in the arguments: `%s'
expands to the names of the files being committed, `%V' expands to the
old revisions from before the commit, and `%v' expands to the new
revisions after the commit.  When there are multiple files involved,
each element of the expansion is separated from the others by
whitespace.  For example, in a commit involving two files, `%s' might
expand into `hello.c README.txt', and `%v' into `1.17 1.12'.

You may combine codes inside curly braces, in which case, each unit of
expansion is internally separated by commas and externally separated
from the other units by whitespace.  Continuing the previous example,
`%{sv}' expands into `hello.c,1.17 README.txt,1.12'.

If any `%' expansion is done at all, the expansion is prefixed by the
path to the project subdirectory (relative to the top of the
repository).  So that last expansion would actually be:

     myproj  hello.c,1.17  README.txt,1.12

If PROGRAM exits with nonzero status, the commit fails; otherwise, it
succeeds.  (See also the *Note Shared Syntax:: section in this chapter.)


File: cvsbook.info,  Node: modules,  Next: notify,  Prev: loginfo,  Up: Ficheros de Administracion del Repositorio

modules
-------

This maps names to repository directories.  The general syntax of each
line is:

     MODULE [OPTIONS] [&OTHERMODULE...] [DIR] [FILES]

DIR need not be a top-level project directory - it could be a
subdirectory.  If any FILES are specified, the module consists of only
those files from the directory.

An ampersand followed by a module name means to include the expansion of
that module's line in place.

Options:

   * -a - This is an "alias" module, meaning it expands literally to
     everything after the OPTIONS.  In this case, the usual DIR/FILES
     behavior is turned off, and everything after the OPTIONS is
     treated as other modules or repository directories.

     If you use the -a option, you may exclude certain directories from
     other modules by putting them after an exclamation point (!).  For
     example

          top_proj -a !myproj/a-subdir !myproj/b-subdir myproj

     means that checking out `top_proj' will get all of `myproj' except
     `a-subdir' and `b-subdir'.

   * -d NAME - Names the working directory NAME instead of the module
     name.

   * -e PROGRAM - Runs PROGRAM whenever files in this module are
     exported.

   * -i PROGRAM - Runs PROGRAM whenever files in this module are
     committed.  The program is given a single argument - the full
     pathname in the repository of the file in question. (See *Note
     commitinfo::, *Note loginfo::, and *Note verifymsg:: for more
     sophisticated ways to run commit-triggered programs.)

   * -o PROGRAM - Runs PROGRAM whenever files in this module are checked
     out.  The program is given a single argument, the name of the
     module.

   * -s STATUS - Declares a status for the module.  When the modules
     file is printed (with cvs checkout -s), the modules are sorted by
     module status and then by name.  This option has no other effects
     in CVS, so go wild.  You can use it to sort anything - status,
     person responsible for the module, or the module's file language,
     for example.

   * -t PROGRAM - Runs PROGRAM whenever files in this module are tagged
     with cvs rtag.  The program is passed two arguments: the name of
     the module and the tag name.  The program is not used for tag,
     only for rtag.  I have no idea why this distinction is made.  You
     may find the taginfo file more useful if you want to run programs
     at tag time.

   * -u PROGRAM - Runs PROGRAM whenever a working copy of the module is
     updated from its top-level directory.  The program is given a
     single argument, the full path to the module's repository.



File: cvsbook.info,  Node: notify,  Next: passwd,  Prev: modules,  Up: Ficheros de Administracion del Repositorio

notify
------

Controls how the notifications for watched files are performed. (You may
want to read up on the watch and edit commands, or see the section
*Note Alarmas (CVS como telefono):: in *Note CVS avanzado::.)  Each
line is of the usual form:

REGULAR_EXPRESSION PROGRAM [ARGUMENTS]

A `%s' in ARGUMENTS is expanded to the name of the user to be notified,
and the rest of the information regarding the notification is passed to
PROGRAM on standard input (usually this information is a brief message
suitable for emailing to the user).  (See the section *Note Shared
Syntax:: earlier in this chapter.)

As shipped with CVS, the notify file has one line

     ALL mail %s -s "CVS notification"

which is often all you need.


File: cvsbook.info,  Node: passwd,  Next: rcsinfo,  Prev: notify,  Up: Ficheros de Administracion del Repositorio

passwd
------

Provides authentication information for the pserver access method.  Each
line is of the form:

USER:ENCRYPTED_PASSWORD[:SYSTEM_USER]

If no SYSTEM_USER is given, USER is taken as the system username.


File: cvsbook.info,  Node: rcsinfo,  Next: taginfo,  Prev: passwd,  Up: Ficheros de Administracion del Repositorio

rcsinfo
-------

Specifies a form that should be filled out for log messages that are
written with an interactive editor.  Each line of rcsinfo looks like:

REGULAR_EXPRESSION FILE_CONTAINING_TEMPLATE

This template is brought to remote working copies at checkout time, so
if the template file or rcsinfo file changes after checkout, the remote
copies won't know about it and will continue to use the old template.
(See also the section *Note Shared Syntax:: in this chapter.)


File: cvsbook.info,  Node: taginfo,  Next: users,  Prev: rcsinfo,  Up: Ficheros de Administracion del Repositorio

taginfo
-------

Runs a program at tag time (usually done to check that the tag name
matches some pattern).  Each line is of the form:

REGULAR_EXPRESSION PROGRAM

The program is handed a set group of arguments.  In order, they are the
tag name, the operation (see below), the repository, and then as many
file name/revision-number pairs as there are files involved in the tag.
The file/revision pairs are separated by whitespace, like the rest of
the arguments.

The operation is one of `add', `mov', or `del' (`mov' means the -F
option to tag was used).

If PROGRAM exits with nonzero status, the tag operation will not
succeed.  (See also the section *Note Shared Syntax:: in this chapter.)


File: cvsbook.info,  Node: users,  Next: val-tags,  Prev: taginfo,  Up: Ficheros de Administracion del Repositorio

users
-----

Maps usernames to email addresses.  Each line looks like:

USERNAME:EMAIL_ADDRESS

This sends watch notifications to EMAIL_ADDRESS instead of to USERNAME
at the repository machine.  (All this really does is control the
expansion of %s in the notify file.)  If EMAIL_ADDRESS includes
whitespace, make sure to surround it with quotes.

If user aliasing is being used in the passwd file, the username that
will be matched is the CVS username (the one on the left), not the
system username (the one on the right, if any).


File: cvsbook.info,  Node: val-tags,  Next: verifymsg,  Prev: users,  Up: Ficheros de Administracion del Repositorio

val-tags
--------

Caches valid tag names for speedier lookups.  You should never need to
edit this file, but you may need to change its permissions, or even
ownership, if people are having trouble retrieving or creating tags.


File: cvsbook.info,  Node: verifymsg,  Prev: val-tags,  Up: Ficheros de Administracion del Repositorio

verifymsg
---------

Used in conjunction with rcsinfo to verify the format of log messages.
Each line is of the form:

REGULAR_EXPRESSION PROGRAM [ARGUMENTS]

The full path to the current log message template (see *Note rcsinfo::
earlier in this chapter) is appended after the last argument written in
the verifymsg file.  If PROGRAM exits with nonzero status, the commit
fails.


File: cvsbook.info,  Node: Ficheros de Control de Ejecucion,  Next: Working Copy Files,  Prev: Ficheros de Administracion del Repositorio,  Up: Referencia de CVS

Ficheros de Control de Ejecucion
================================

There are a few files on the client (working copy) side that affect
CVS's behavior.  In some cases, they are analogs of repository
administrative files; in other cases, they control behaviors that are
only appropriate for the client side.

`.cvsrc'
--------

Specifies options that you want to be used automatically with every CVS
command.  The format of each line is

COMMAND OPTIONS

where each COMMAND is an unabbreviated CVS command, such as checkout or
update (but not co or up).  The OPTIONS are those that you want to
always be in effect when you run that command.  Here is a common
`.cvsrc' line:

     update -d -P

To specify global options, simple use cvs as the COMMAND.

`.cvsignore'
------------

Specifies additional ignore patterns.  (See *Note cvsignore:: in the
*Note Ficheros de Administracion del Repositorio:: section in this
chapter for the syntax.)

You can have a .cvsignore file in your home directory, which will apply
every time you use CVS.  You can also have directory-specific ones in
each project directory of a working copy (these last only apply to the
directory where the .cvsignore is located, and not to its
subdirectories).

(See *Note $CVSIGNORE:: in the section *Note Environment Variables:: in
this chapter, for a fuller discussion of ignore processing.)

`.cvspass'
----------

Stores passwords for each repository accessed via the pserver method.
Each line is of the form:

REPOSITORY LIGHTLY_SCRAMBLED_PASSWORD

The password is essentially stored in cleartext - a very mild
scrambling is done to prevent accidental compromises (such as the root
user unintentionally looking inside the file).  However, this scrambling
will not deter any serious-minded person from gaining the password if
they get access to the file.

The .cvspass file is portable.  You can copy it from one machine to
another and have all of your passwords at the new machine, without ever
having run cvs login there.  (See also the *Note login:: and *Note
logout:: commands.)

`.cvswrappers'
--------------

This is a client side version of the cvswrappers file.  (See the *Note
Ficheros de Administracion del Repositorio:: section in this chapter.)
There can be a `.cvswrappers' file in your home directory and in each
directory of a working copy directory, just as with `.cvsignore'.


File: cvsbook.info,  Node: Working Copy Files,  Next: Environment Variables,  Prev: Ficheros de Control de Ejecucion,  Up: Referencia de CVS

Working Copy Files
==================

The CVS/ administrative subdirectories in each working copy contain some
subset of the following files.

   * CVS/Base/

   * CVS/Baserev

   * CVS/Baserev.tmp

   * CVS/Checkin.prog

   * CVS/Entries

   * CVS/Entries.Backup

   * CVS/Entries.Log

   * CVS/Entries.Static

   * CVS/Notify

   * CVS/Notify.tmp

   * CVS/Repository

   * CVS/Root

   * CVS/Tag

   * CVS/Template

   * CVS/Update.prog

Here is what each file or directory does:

`CVS/Base/'  (directory)
------------------------

If watches are on, `cvs edit' stores the original copy of the file in
this directory.  That way, `cvs unedit' can work even if it can't reach
the server.

`CVS/Baserev'
-------------

Lists the revision for each file in `Base/'.  Each line looks like this:

     FILE/REVISION/EXPANSION

EXPANSION is currently ignored to allow for, well, future expansion.

`CVS/Baserev.tmp'
-----------------

This is the temp file for the preceding.  (See `CVS/Notify.tmp' or
`CVS/Entries.Backup' later on for further explanation.)

`CVS/Checkin.prog'
------------------

Records the name of the program specified by the -i option in the
modules file.  (See the *Note Ficheros de Administracion del
Repositorio:: section in this chapter.)

`CVS/Entries'
-------------

Stores the revisions for the files in this directory.  Each line is of
the form:

     [CODE_LETTER]/FILE/REVISION/DATE/[KEYWORD_MODE]/[STICKY_OPTION]

If CODE_LETTER is present, it must be `D' for directory (anything else
is silently ignored by CVS, to allow for future expansion), and the
rest of the items on the line are absent.

This file is always present.

`CVS/Entries.Backup'
--------------------

This is just a temp file.  If you're writing some program to modify the
`Entries' file, have it write the new contents to `Entries.backup' and
then atomically rename it to `Entries'.

`CVS/Entries.Log'
-----------------

This is basically a patch file to be applied to `Entries' after
`Entries' has been read (this is an efficiency hack, to avoid having to
rewrite all of `Entries' for every little change).  The format is the
same as `Entries', except that there is an additional mandatory code
letter at the front of every line: An `A' means this line is to be
added to what's in `Entries'; `R' means it's to be removed from what's
in `Entries'.  Any other letters should be silently ignored, to allow
for future expansion.

`CVS/Entries.Static'
--------------------

If this file exists, it means only part of the directory was fetched
from the repository, and CVS will not create additional files in that
directory.  This condition can usually be cleared by using `update -d'.

`CVS/Notify'
------------

Stores notifications that have not yet been sent to the server.

`CVS/Notify.tmp'
----------------

Temp file for `Notify'.  The usual procedure for modifying `Notify' is
to write out `Notify.tmp' and then rename it to `Notify'.

`CVS/Repository'
----------------

The path to the project-specific subdirectory in the repository.  This
may be an absolute path, or it may be relative to the path given in
Root.

This file is always present.

`CVS/Root'
----------

This is the repository; that is, the value of the `$CVSROOT'
environment variable or the argument to the -d global option.

This file is always present.

`CVS/Tag'
---------

If there is a sticky tag or date on this directory, it is recorded in
the first line of the file.  The first character is a single letter
indicating the type of tag: `T', `N', or `D', for branch tag, nonbranch
tag, or date respectively.  The rest of the line is the tag or date
itself.

`CVS/Template'
--------------

Contains a log message template as specified by the rcsinfo file.  (See
*Note Ficheros de Administracion del Repositorio:: earlier in this
chapter.)  It is relevant only for remote working copies; working
copies on the same machine as the repository just read rcsinfo directly.

`CVS/Update.prog'
-----------------

Records the name of the program specified by the -u option in the
modules file.  (See the *Note Ficheros de Administracion del
Repositorio:: section in this chapter.)


File: cvsbook.info,  Node: Environment Variables,  Prev: Working Copy Files,  Up: Referencia de CVS

Environment Variables
=====================

These are all the environment variables that affect CVS.

* Menu:

* $COMSPEC::
* $CVS_CLIENT_LOG::
* $CVS_CLIENT_PORT::
* $CVSEDITOR::
* $CVSIGNORE::
* $CVS_IGNORE_REMOTE_ROOT::
* $CVS_PASSFILE::
* $CVS_RCMD_PORT::
* $CVSREAD::
* $CVSROOT::
* $CVS_RSH::
* $CVS_SERVER::
* $CVS_SERVER_SLEEP::
* $CVSUMASK::
* $CVSWRAPPERS::
* $EDITOR::
* $HOME %HOMEDRIVE% %HOMEPATH%::
* $PATH::
* $TEMP $TMP $TMPDIR::
* $VISUAL::


File: cvsbook.info,  Node: $COMSPEC,  Next: $CVS_CLIENT_LOG,  Up: Environment Variables

$COMSPEC
--------

This is used in OS/2 only; it specifies the name of the command
interpreter.  It defaults to `CMD.EXE'.


File: cvsbook.info,  Node: $CVS_CLIENT_LOG,  Next: $CVS_CLIENT_PORT,  Prev: $COMSPEC,  Up: Environment Variables

$CVS_CLIENT_LOG
---------------

Used for debugging the client/server protocol.  Set this variable to a
file name before you start using CVS; all traffic to the server will be
logged in filename.in, and everything from the server will be logged in
filename.out.


File: cvsbook.info,  Node: $CVS_CLIENT_PORT,  Next: $CVSEDITOR,  Prev: $CVS_CLIENT_LOG,  Up: Environment Variables

$CVS_CLIENT_PORT
----------------

Used in Kerberos-authenticated client/server access.


File: cvsbook.info,  Node: $CVSEDITOR,  Next: $CVSIGNORE,  Prev: $CVS_CLIENT_PORT,  Up: Environment Variables

$CVSEDITOR
----------

Specifies the program to use to edit log messages for commits.  This
overrides `$EDITOR' and `$VISUAL'.


File: cvsbook.info,  Node: $CVSIGNORE,  Next: $CVS_IGNORE_REMOTE_ROOT,  Prev: $CVSEDITOR,  Up: Environment Variables

$CVSIGNORE
----------

A whitespace-separated list of file names and wildcard patterns that CVS
should ignore.  (See also the -I option to the *Note import:: command.)

This variable is appended last to the ignore list during a command.  The
list is built up in this order: `CVSROOT/cvsignore', the `.cvsignore'
file in your home directory, the `$CVSIGNORE' variable, any -I command
option, and finally the contents of `.cvsignore' files in the working
copy used as CVS works in each directory.  A `!' as the ignore
specification at any point nullifies the entire ignore list built up to
that point.


File: cvsbook.info,  Node: $CVS_IGNORE_REMOTE_ROOT,  Next: $CVS_PASSFILE,  Prev: $CVSIGNORE,  Up: Environment Variables

$CVS_IGNORE_REMOTE_ROOT
-----------------------

Recently obsolete.


File: cvsbook.info,  Node: $CVS_PASSFILE,  Next: $CVS_RCMD_PORT,  Prev: $CVS_IGNORE_REMOTE_ROOT,  Up: Environment Variables

$CVS_PASSFILE
-------------

Tells CVS to use some file other than .cvspass in your home directory.
(See the file `.cvspass' in the *Note Ficheros de Control de
Ejecucion:: section in this chapter.)


File: cvsbook.info,  Node: $CVS_RCMD_PORT,  Next: $CVSREAD,  Prev: $CVS_PASSFILE,  Up: Environment Variables

$CVS_RCMD_PORT
--------------

Specifies the port number to contact the rcmd daemon on the server side.
(This variable is currently ignored in Unix CVS clients.)


File: cvsbook.info,  Node: $CVSREAD,  Next: $CVSROOT,  Prev: $CVS_RCMD_PORT,  Up: Environment Variables

$CVSREAD
--------

Makes working copy files read-only on checkout and update, if possible
(the default is for them to be read-write).  (See also the -r global
option.)


File: cvsbook.info,  Node: $CVSROOT,  Next: $CVS_RSH,  Prev: $CVSREAD,  Up: Environment Variables

$CVSROOT
--------

This specifies the path to the repository.  This is overridden with the
-d global option and by the ambient repository for a given working copy.
The path to the repository may be preceded by an access method,
username, and host, according to the following syntax:

     [[:METHOD:][[USER@]HOST]:]/REPOSITORY_PATH

See the -d global option, in the section *Note Opciones Globales:: near
the beginning of this chapter, for a list of valid methods.


File: cvsbook.info,  Node: $CVS_RSH,  Next: $CVS_SERVER,  Prev: $CVSROOT,  Up: Environment Variables

$CVS_RSH
--------

Specifies an external program for connecting to the server when using
the `:ext:' access method.  Defaults to `rsh', but `ssh' is a common
replacement value.


File: cvsbook.info,  Node: $CVS_SERVER,  Next: $CVS_SERVER_SLEEP,  Prev: $CVS_RSH,  Up: Environment Variables

$CVS_SERVER
-----------

Program to invoke for CVS on the server side.  Defaults to `cvs', of
course.


File: cvsbook.info,  Node: $CVS_SERVER_SLEEP,  Next: $CVSUMASK,  Prev: $CVS_SERVER,  Up: Environment Variables

$CVS_SERVER_SLEEP
-----------------

Delays the start of the server child process by the specified number of
seconds.  This is used only for debugging, to allow time for a debugger
to connect.


File: cvsbook.info,  Node: $CVSUMASK,  Next: $CVSWRAPPERS,  Prev: $CVS_SERVER_SLEEP,  Up: Environment Variables

$CVSUMASK
---------

Permissions for files and directories in the repository.  (You probably
don't want to set this; it doesn't work for client/server anyway.)


File: cvsbook.info,  Node: $CVSWRAPPERS,  Next: $EDITOR,  Prev: $CVSUMASK,  Up: Environment Variables

$CVSWRAPPERS
------------

A whitespace-separated list of file names, wildcards, and arguments that
CVS should use as wrappers. (See *Note cvswrappers:: in the *Note
Ficheros de Administracion del Repositorio:: section in this chapter for
more information.)


File: cvsbook.info,  Node: $EDITOR,  Next: $HOME %HOMEDRIVE% %HOMEPATH%,  Prev: $CVSWRAPPERS,  Up: Environment Variables

$EDITOR
-------

(See *Note $CVSEDITOR::.)


File: cvsbook.info,  Node: $HOME %HOMEDRIVE% %HOMEPATH%,  Next: $PATH,  Prev: $EDITOR,  Up: Environment Variables

$HOME %HOMEDRIVE% %HOMEPATH%
----------------------------

Where the `.cvsrc', `.cvspass', and other such files are found (under
Unix, only `$HOME' is used).  In Windows NT, `%HOMEDRIVE%' and
`%HOMEPATH%' might be set for you; in Windows 95, you may need to set
them for yourself.

In Windows 95, you may also need to set `%HOME%'.  Make sure not to
give it a trailing backslash; use set `HOME=C:' or something similar.


File: cvsbook.info,  Node: $PATH,  Next: $TEMP $TMP $TMPDIR,  Prev: $HOME %HOMEDRIVE% %HOMEPATH%,  Up: Environment Variables

$PATH
-----

Obsolete.


File: cvsbook.info,  Node: $TEMP $TMP $TMPDIR,  Next: $VISUAL,  Prev: $PATH,  Up: Environment Variables

$TEMP $TMP $TMPDIR
------------------

Where temporary files go (the server uses TMPDIR; Windows NT uses TMP).
Setting this on the client side will not affect the server.  Setting
this on either side will not affect where CVS stores temporary lock
files.  (See *Note config:: in the *Note Ficheros de Administracion del
Repositorio:: section in this chapter for more information.)


File: cvsbook.info,  Node: $VISUAL,  Prev: $TEMP $TMP $TMPDIR,  Up: Environment Variables

$VISUAL
-------

(See *Note $CVSEDITOR::.)


File: cvsbook.info,  Node: Herramientas de terceros,  Next: Índice,  Prev: Referencia de CVS,  Up: Top

Herramientas de terceros
************************

Mucha gente ha escrito programas para mejorar CVS.  Yo los llamo
"herramientas de terceros" porque tienen sus propios mantenedores,
independientes del equipo de desarrollo de CVS.  La mayoría de estos
programas no se distribuyen con CVS aunque algunos sí lo hacen.  Este
capítulo está dedicado a las herramientas de terceros que he encontrado
útiles pero que no se distribuyen con CVS.

Aunque hay algunas interfaces para CVS no Unix en línea de órdenes que
gozan de gran popularidad y son de amplio uso (los sitios de descarga
aparecen listados en *Note Administracion del Repositorio::) en este
capítulo no hablaremos de ellas.  Su popularidad hace que resulte
sencillo obtener información sobre ellas en listas de correo y grupos de
noticias.  Como clara excepción tenemos la interfaz pcl-cvs para Emacs
que aunque resulta muy útil a veces es algo compleja de instalar.

* Menu:

* pcl-cvs -- Una interfaz de Emacs para CVS::
* cvsutils -- Utilidades genéricas para usar con CVS::
* cvs2cl -- Genera ChangeLogs al estilo GNU::
* cvslock -- Bloquea los repositorios para evitar la atomicidad::
* cvsq -- Encola órdenes CVS para una posterior conexión::
* Otros paquetes::
* Escribir sus propias herramientas::


File: cvsbook.info,  Node: pcl-cvs -- Una interfaz de Emacs para CVS,  Next: cvsutils -- Utilidades genéricas para usar con CVS,  Up: Herramientas de terceros

pcl-cvs - Una interfaz de Emacs para CVS
========================================

Depende de: Emacs, Elib

URLs:

   * `ftp://rum.cs.yale.edu/pub/monnier/pcl-cvs/'

   * `ftp://ftp.lysator.liu.se/pub/emacs/pcl-cvs-1.05.tar.gz'

   * `ftp://ftp.red-bean.com/pub/kfogel/pcl-cvs-1.05.tar.gz'

Autores: Per Cederqvist y Stefan Monnier (mantenedor actual)

`pcl-cvs' es una de las dos interfaces de CVS para Emacs.  La otra es
la interfaz nativa VC (Control de Versiones) integrada en Emacs.  Yo
prefiero pcl-cvs porque se escribió para CVS en exclusiva y, por tanto,
funciona muy bien con la manera que tiene CVS de hacer las cosas.  VC,
por otra parte, se diseñó para funcionar con sistemas de control de
versiones muy diferentes (RCS y SCCS, así como CVS) y no está realmente
"optimizado" para CVS.  Por ejemplo, VC presenta una interfaz basada más
en archivos que en directorios para el control de revisiones.

Las ventajas de pcl-cvs son suficientes como para que mucha gente elija
descargarlo e instalarlo en vez de usar VC.  Desgraciadamente pcl-cvs
tiene dos desventajas: su instalación puede resultar algo compleja (una
gran parte de esta sección está dedicada a solucionar posibles problemas
durante la misma) y sus versiones más recientes se han mostrado algo
inestables.

Este último problema es temporal pero hace que nos preguntemos qué
versión usar.  Stefan Monnier se ha hecho cargo recientemente del
mantenimiento de pcl-cvs.  La última versión, 2.9.6 (disponible en la
primera URL de la lista anterior), resultaba un tanto problemática
cuando la probé.  No dude que los problemas desaparecerán pronto pero,
mientras tanto, quizá quiera usar una versión más antigua.  Aquí voy a
documentar la versión 1.05 pues es la que he estado usando a diario
durante bastante tiempo y se ha portado bastante bien.  Por suerte los
procesos de instalación no cambian mucho de versión en versión.  Si
decide utilizar pcl-cvs le sugiero que busque en el sitio de descarga de
Monnier una versión más reciente que la 2.9.6; si la hay, pruébela antes
de intentarlo con la 1.05.

Se habrá dado cuenta de que he puesto dos URLs para la versión 1.05.
La primera es del sitio de Per Cederqvist, donde aún puede encontrarse
un archivo antiguo de pcl-cvs.  No obstante, como no estoy seguro de
por cuánto tiempo permanecerá su archivo en línea, también he puesto a
disposición pública la versión 1.05 en ftp.red-bean.com.

Aunque en el resto de estas instrucciones se utilizan ejemplos tomados
de la versión 1.05 deberían poder aplicarse igualmente a versiones
posteriores.

* Menu:

* Instalar pcl-cvs::
* Usar pcl-cvs::
* Manejo de errores en pcl-cvs::
* El futuro de pcl-cvs::


File: cvsbook.info,  Node: Instalar pcl-cvs,  Next: Usar pcl-cvs,  Up: pcl-cvs -- Una interfaz de Emacs para CVS

Instalar pcl-cvs
----------------

Si no está acostumbrado a trastear con la instalación de Emacs ni con
asuntos relacionados con el mantenimiento de sitios el proceso de
instalación de pcl-cvs puede parecerle un tanto intimidatorio.  Quizá
le ayude algo de información acerca de cómo funciona Emacs.

La mayoría de las prestaciones de alto nivel de Emacs están escritas en
un lenguaje llamado "Emacs Lisp" (Emacs en sí es esencialmente un
intérprete de este lenguaje).  La gente añade nuevas funcionalidades a
Emacs distribuyendo archivos de código en Emacs Lisp. `pcl-cvs' está
escrito en este lenguaje y depende de una librería de útiles funciones
Emacs Lisp genéricas que se conoce como "Elib" (también escrita en
parte por Per Cederqvist, pero distribuida de manera independiente a
pcl-cvs).

Elib no se incluye en la distribución estándar de Emacs (al menos no en
la del Emacs de la FSF; desconozco si ocurre lo mismo con XEmacs), por
lo que tendrá que descargarla e instalarla usted mismo antes de que
pueda utilizar pcl-cvs.  Puede hacerse con ella en
`ftp://ftp.lysator.liu.se/pub/emacs/elib-1.0.tar.gz'.  Las
instrucciones de instalación se encuentran en el mismo paquete.

Una vez se ha instalado Elib ya estamos listos para compilar e instalar
pcl-cvs.  Estas instrucciones son aplicables tanto a la versión 1.05
como a la serie 2.x (aunque debería comprobar los archivos NEWS e
INSTALL de las distribuciones más recientes para ver qué ha cambiado).

Pare empezar desempaquete pcl-cvs (yo estoy usando la versión 1.05 pero
podría tratarse perfectamente de la 2.9.6)

     floss$ zcat pcl-cvs-1.05.tar.gz | tar xvf -
     pcl-cvs-1.05/
     pcl-cvs-1.05/README
     pcl-cvs-1.05/NEWS
     pcl-cvs-1.05/INSTALL
     pcl-cvs-1.05/ChangeLog
     pcl-cvs-1.05/pcl-cvs.el
     pcl-cvs-1.05/pcl-cvs.texinfo
     pcl-cvs-1.05/compile-all.el
     pcl-cvs-1.05/pcl-cvs-lucid.el
     pcl-cvs-1.05/pcl-cvs-startup.el
     pcl-cvs-1.05/pcl-cvs.info
     pcl-cvs-1.05/Makefile
     pcl-cvs-1.05/texinfo.tex

y sitúese en el nivel más alto del directorio que contiene las fuentes:

     floss$ cd pcl-cvs-1.05/

Aquí se le proporciona un Makefile.  De acuerdo con las instrucciones
del archivo INSTALL tiene que editar unas cuantas rutas en la parte
superior del Makefile y ejecutar luego:

     floss$ make install

Si eso funciona, fantástico.  No obstante, esto a veces puede resultar
en un error (aunque el propio código de pcl-cvs es muy portable los
procedimientos para su instalación a veces no lo son tanto).  De
encontrarse con un error haga esto:

     floss$ make clean
     floss$ make

Si todo va bien estas órdenes llevan a cabo una parte significativa de
la instalación compilando a "byte-code" todos los archivos Emacs Lisp.
(Al compilar a "byte-code" convierte un archivo de código Emacs Lisp
perfectamente legible, un archivo .el, en una representación más
compacta y eficiente, un archivo .elc.  Emacs puede cargar y ejecutar
los archivos .elc con un mejor rendimiento que los archivos .el).

Continuaré como si la compilación a "byte-code" se hubiese llevado a
cabo con éxito.  Si no ha sido así no se preocupe: los archivos .elc son
un lujo, no una necesidad.  Mejoran ligeramente el rendimiento pero
puede correr pcl-cvs directamente desde los archivos .el sin problemas.

Si el "make install" falló el siguiente paso es colocar el Emacs Lisp
(.el o .elc) en un directorio donde Emacs pueda cargarlo
automáticamente.  Emacs tiene un directorio designado en el sistema para
el Lisp instalado localmente.  Para encontrar ese directorio (habrá un
archivo llamado `default.el' en él) mire en los siguientes lugares por
este orden:

  1. /usr/share/emacs/site-lisp/

  2. /usr/local/share/emacs/site-lisp/

  3. /usr/lib/emacs/site-lisp/

  4. /usr/local/lib/emacs/site-lisp/

En cuanto haya encontrado su directorio site-lisp copie todos los
archivos Lips en él (puede necesitar ser root para hacer esto):

     floss# cp -f *.el *.elc /usr/share/emacs/site-lisp/

El último paso es comunicarle a Emacs los puntos de entrada a pcl-cvs
(siendo el principal la función cvs-update) para que sea capaz de cargar
el código de pcl-cvs bajo demanda.  Como Emacs siempre lee el archivo
default.el cuando arranca ahí es donde necesitará listar los puntos de
entrada a pcl-cvs.

Por suerte pcl-cvs ya viene con el contenido necesario para default.el.
Simplemente coloque el contenido de pcl-cvs-startup.el en default.el (o
quizá en su .emacs si sólo lo instala para usted) y reinicie Emacs.

Quizá quiera copiar también los archivos .info a su árbol info y añadir
pcl-cvs al índice de contenidos del archivo dir.

