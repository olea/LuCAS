This is cvsbook.info, produced by makeinfo version 4.0b from main.texi.

START-INFO-DIR-ENTRY
* El libro de CVS: (cvsbook).           Un tutorial de CVS y referencia.
END-INFO-DIR-ENTRY

Copyright (C) 1999, 2000 Karl Fogel <kfogel@red-bean.com>

This document is free software; you can redistribute and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This document is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

Este manual describe como usar y administrar CVS (Concurrent Versions
System). Es parte un trabajo mayor titulado `Desarrollo de Código
Abierto con CVS'; por favor, lea la introducción para más detalles.

Esta es la versión 1.21 de este manual.


File: cvsbook.info,  Node: Referencia de CVS,  Next: Herramientas de terceros,  Prev: Problemas y Soluciones,  Up: Top

Referencia de CVS
*****************

This chapter is a complete reference to CVS commands, repository
administrative files, keyword substitution, run control files, working
copy files, and environment variables - everything in CVS as of CVS
version 1.10.7 (more accurately, as of August 20, 1999).

* Menu:

* Ordenes y Opciones::                  Todos las opciones y ordenes CVS globales
* Claves de Sustitucion (Claves RCS)::  CVS puede mantener texto por vd.
* Ficheros de Administracion del Repositorio::      Ficheos en el lado del servidor que afecta a CVS.
* Ficheros de Control de Ejecucion::                    Ficheros en el lado del cliente que afectan a CVS.
* Working Copy Files::                   Administrivia in the working copy.
* Environment Variables::                Environment variables affecting CVS.


File: cvsbook.info,  Node: Ordenes y Opciones,  Next: Claves de Sustitucion (Claves RCS),  Up: Referencia de CVS

Ordenes y Opciones
==================

Esta sección es una referencia de todos los mandatos CVS. Si usted no
está familiarizado con las convenciones sintácticas compartidas por la
mayoría de los mandatos CVS, se sugiere leer las subsecciones
relevantes antes de echar un vistazo a cualquier mandato en particular.

* Menu:

* Organización y Convenciones::             Cómo leer esta sección.
* Patrones Generales En Los Mandatos CVS::    Los mandatos CVS comparten algunas propiedades.
* Formatos de Fecha::                         CVS acepta una variedad de formatos de fecha.
* Opciones Globales::                         Una lista de todas las opciones globales de CVS.
* add::                                       Mandato `add'.
* admin::                                     Mandato `admin'.
* annotate::                                  Mandato `annotate'.
* checkout::                                  Mandato `checkout'.
* commit::                                    Mandato `commit'.
* diff::                                      Mandato `diff'.
* edit::                                      Mandato `edit'.
* editors::                                   Mandato `editors'.
* export::                                    Mandato `export'.
* gserver::                                   Mandato `gserver'.
* import::                                    Mandato `import'.
* init::                                      Mandato `init'.
* kserver::                                   Mandato `kserver'.
* log::                                       Mandato `log'.
* login::                                     Mandato `login'.
* logout::                                    Mandato `logout'.
* pserver::                                   Mandato `pserver'.
* rdiff::                                     Mandato `rdiff'.
* release::                                   Mandato `release'.
* remove::                                    Mandato `remove'.
* rtag::                                      Mandato `rtag'.
* server::                                    Mandato `server'.
* status::                                    Mandato `status'.
* tag::                                       Mandato `tag'.
* unedit::                                    Mandato `unedit'.
* update::                                    Mandato `update'.
* watch::                                     Mandato `watch'.
* watchers::                                  Mandato `watchers'.


File: cvsbook.info,  Node: Organización y Convenciones,  Next: Patrones Generales En Los Mandatos CVS,  Up: Ordenes y Opciones

Organización y Convenciones
---------------------------

Esta sección está organizada alfabéticamente para hacerle fácil
encontrar un mandato u opción particular. Las siguiente convenciones
son usadas:

   * Los argumentos a mandatos y opciones tienen todos sus caracteres en
     may\'usculas en la sinopsis que encabeza cada explicación.  (Nota:
     en la versión treeware del libro, los meta-argumentos están en
     cursiva además de estar en mayúsculas; debido a la limitación de
     las fuentes estándar de terminal, he omitido la cursiva aquí).

   * Los ítems opcionales aparecen entre corchetes: `[ ]'.  (Esto
     funciona correctamente porque los corchetes no son usados en la
     sintaxis de CVS).

   * Si debe elegir una opción de una lista, las elecciones se separan
     por barras, como esto: `x|y|z'. (Y, por tanto, las barras (`/') se
     deberían interpretar literalmente - no dividen elecciones de una
     lista).

   * Los plurales y los puntos suspensivos indican múltiples opciones,
     usualmente separadas por espacio. Por ejemplo, FILES significa uno
     o más ficheros, pero [FILES] significa cero o más ficheros. La
     entrada [&MOD...] significa un ampersand seguido inmediatamente
     por el nombre de un módulo, depués espacio, después tal vez otro
     ampersand-módulo, y así sucesivamente, cero o más veces.  (Los
     puntos suspensivos se usan porque un plural podría no dejar claro
     si el ampersand se necesita sólo la primera vez o todas para cada
     módulo).

     Cuando un plural está entre paréntesis, como en FILE(S), significa
     que aunque técnicamente puede haber dos o más ficheros, usualmente
     sólo hay uno.

   * REV se utiliza habitualmente para referir a un argumento de
     revisión.  Esto es normalmente, bien un número de revisión, bien
     un nombre de etiqueta. Hay pocos sitios en CVS en que puede usar
     uno, pero no el otro, y estos sitios están señalados en el texto.



File: cvsbook.info,  Node: Patrones Generales En Los Mandatos CVS,  Next: Formatos de Fecha,  Prev: Organización y Convenciones,  Up: Ordenes y Opciones

Patrones Generales En Los Mandatos CVS
--------------------------------------

Los mandatos de CVS poseen este formato:

     cvs [OPCIONES_GLOBALES] MANDATO [OPCIONES] [FICHEROS]

El segundo juego de opciones se llama a veces "opciones de mandato".
Debido a que hay tantos, sin embargo, lo llamaré simplemente "opciones"
en la mayoría de los sitios para ahorrar espacio.

Muchos mandatos están pensados para ejecutarse en la copia de trabajo y,
por tanto, pueden ser invocados sin argumentos de fichero. Estos
mandatos se ejecutarán en todos los ficheros del directorio actual e
inferiores. Así, cuando me refiera al "fichero" o "ficheros" en el
texto, estoy hablando acerca de los ficheros en los que CVS actúa.
Dependiendo de cómo invoca CVS, estos ficheros pueden, o no, haber sido
mencionados explícitamente en la línea de mandatos.


File: cvsbook.info,  Node: Formatos de Fecha,  Next: Opciones Globales,  Prev: Patrones Generales En Los Mandatos CVS,  Up: Ordenes y Opciones

Formatos de Fecha
-----------------

Muchas opciones toman un argumento de fecha. CVS acepta una gran
variedad de formatos de fecha - demasiados para ser listados aquí.
Cuando dude, use el formato estándar ISO 8601:

     1999-08-23

Esto significa "23 de agosto de 1999" (de hecho, en inglés "23 August
1999" es una especificador de fecha perfectamente válido también,
siempre y cuando recuerde encerrarlo entre comillas). Si necesita la
hora de un día también, puede hacer esto:

     "1999-08-23 21:20:30 CDT"

Puede incluso usar ciertas construcciones en inglés, como "now" (hoy),
"yesterday" (ayer), y "12 days ago" (hace doce días). En general, puede
experimentar con seguridad con formatos de fecha; si CVS entiende su
formato, muy fácilmente lo entenderá en el modo en que usted trataba de
expresarlo. Si no lo entiende, saldrá con un error inmediatamente.


File: cvsbook.info,  Node: Opciones Globales,  Next: add,  Prev: Formatos de Fecha,  Up: Ordenes y Opciones

Opciones Globales
-----------------

Aquí están todas las opciones globales de CVS.

`--allow-root=REPOSITORY'
=========================

La primera opción global alfabéticamente es una que no se usa nunca en
la línea de mandatos. La opción -alow-root se usa con el mandato
`pserver' para permitir acceso acreditado al repositorio dicho (que es
el nivel alto de un repositorio, como `/usr/local/newrepos', no un
subdirectorio de proyecto como `/usr/local/newrepos/myproj').

Esta opción global no se usa virtualmente nunca en la línea de
mandatos. Normalmente el único sitio donde lo usaría es en los ficheros
`/etc/inetd.conf' (ver *Note Administracion del Repositorio::), que es
también casi el único sitio donde el mandato `pserver' se usa.

Cada repositorio a ser accedido vía `cvs pserver' en un servidor dado,
necesita la correspondiente opción -allow-root en `/etc/inetd.conf'.
Éste es un dispositivo de seguridad, pensado para asegurar que
cualquiera no puede usar un pserver de CVS para conseguir acceso a
repositorios privados.

(Ver *Note El servidor de autentificacion de contrasen~as:: también en
el nodo `Servidor Acreditado por Clave' en el manual Cederqvist.)

`-a'
====

Esto acredita todas las comunicaciones con el servidor. Esta opción no
tiene efecto a no ser que se esté conectado vía servidor GSSAPI
(gserver). Las conexiones GSSAPI no se cubren en este libro, porque son
todavía usadas raramente (aunque esto puede cambiar). (Ver las notas
`Opciones Globales' y `Acreditación GSSAPI' en el manual Cederqvist
para obtener más información.)

`-b' (Caído en desuso)
======================

Esta opción especifica formalmente el directorio donde los ejecutables
del RCS se encuentran. CVS ahora implementa las funciones RCS
internamente, por lo que esta opción no surte efecto (se mantiene sólo
por compatibilidad retrospectiva).

`-d' REPOSITORIO
================

Esto especifica el repositorio, que puede ser una ruta absoluta o una
expresión más compleja involucrando método de conexión, nombre de
usuario, servidor y ruta. Si es una expresión especificando un método
de conexión, la sintaxis general es:

     :MÉTODO:USUARIO@NOMBRE_DEL_SERVIDOR:RUTA_AL_REPOSITORIO

Aquí hay ejemplos usando cada uno de los métodos de conexión:

   * `:ext:jcualquiera@floss.red-bean.com:/usr/local/newrepos' - Conecta
     usando `rsh', `ssh', o algún otro programa de conexión externo. Si
     la variable de entorno `$CVS_RSH' no está especificada, la opción
     por omisión es `rsh'; de otro modo, usa el valor de esta variable.

   * `:server:jcualquiera@floss.red-bean.com:/usr/local/newrepos' - Como
     `:ext:', pero usa la implementación interna de rsh. (Esto puede no
     estar disponible en todas las plataformas.)

   * `:pserver:jcualquiera@floss.red-bean.com:/usr/local/newrepos' -
     Conecta usando el servidor de acreditación de claves (ver *Note El
     servidor de autentificacion de contrasen~as:: en *Note
     Administracion del Repositorio::; ver también el mandato *Note
     login::.)

   * `:kserver:jrandom@floss.red-bean.com:/usr/local/newrepos' -
     Conecta usando acreditación Kerberos.

   * `:gserver:jrandom@floss.red-bean.com:/usr/local/newrepos' -
     Conecta usando acreditación GSSAPI.

   * `:fork:jcualquiera@floss.red-bean.com:/usr/local/newrepos' -
     Conecta a un repositorio local, pero usando el protocolo de red
     cliente/servidor en vez de acceder directamente a los ficheros del
     repositorio. Esto es útil para comprobar y depurar comportamientos
     de CVS en remoto desde su máquina local.

   * `:local:jcualquiera@floss.red-bean.com:/usr/local/newrepos' -
     Accede a un repositorio local directamente, como si se diera sólo
     la ruta absoluta al respositorio.


`-e' EDITOR
===========

Invoca EDITOR para su mensaje de entrega, si el mensaje de entrega no
se especifica en la línea de mandatos con la opción -m.  Normalmente,
si no da un mensaje con la opción -m, CVS invoca el editor basado en
las variables de entorno `$CVSEDITOR', `$VISUAL', o `$EDITOR', que
comprueba en este orden. Fallado esto, invoca el editor popular de Unix
`vi'.

Si pasa tanto la opción -e como la -m en una entrega, el -e no se tiene
en cuenta a favor del mensaje de entrega dado en la línea de mandatos
(de este modo es seguro usar -e en un fichero `.cvsrc').

`-f'
====

Esta opción global suprime la lectura del fichero `.cvsrc'.

`--help' [MANDATO] o `-H' [MANDATO]
===================================

Estas dos opciones son sinónimas. Si no se especifica MANDATO, se
imprime un mensaje de uso básico a la salida estándar. Si se especifica
MANDATO, se imprime un mensaje de uso para ese mandato.

`--help-options'
================

Imprime una lista con todas las opciones globales de CVS, con breves
explicaciones.

`--help-synonyms'
=================

Imprime una lista de mandatos CVS y sus formatos cortos ("up" para
"update", y así sucesivamente).

`-l'
====

Suprime el registro del mandato en el fichero `CVSROOT/history' en el
repositorio. El mandato se ejecuta normalmente, pero no se realiza
ninguna archivación en el fichero de historial.

`-n'
====

No cambia ningún fichero en la copia de trabajo o en el repositorio.
En otras palabras, el mandato se ejecuta como una "ejecución en seco" -
CVS corre a través de la mayoría de los pasos del mandato pero evita
cualquier clase de ejecución.

Ésto es útil cuando quiere ver qué habría hecho el mandato si usted lo
hubiera ejecutado. Un escenario común es cuando quiere ver qué ficheros
de su directorio de trabajo han sido alterados, pero no una
actualización completa (que podrí traer cambios del repositorio).
Ejecutando `cvs -n update', puede ver un sumario de qué ha sido hecho
localmente, sin cambiar su copia de trabajo.

`-q'
====

Esto pide a CVS ser moderadamente silencioso, suprimiendo la impresión
de mensajes de información no importantes. Qué es considerado
"importante" depende del mandato. Por ejemplo, en actualizaciones, los
mensajes que CVS imprime normalmente al entrar en cada subdirectorio de
la copia de trabajo se suprimen, pero los mensajes de estado de una
línea para los ficheros modificados o actualizados se siguen
imprimiendo.

`-Q'
====

Esto pide a CVS ser muy silencioso suprimiendo toda la salida excepto
los que son absolutamente necesario para completar el mandato. Los
mandatos cuyo único propósito es producir alguna salida (como `diff' o
`annotate'), de hecho, siguen dando esa salida.  Sin embargo, los
mandatos que podrían tener un efecto independiente de cualquier mensaje
que pudieran imprimir (como `update' o `commit') no imprimen nada.

`-r'
====

Hace que los ficheros de trabajo sean creados como de sólo lectura (el
mismo efecto que configurando la variable de entorno `CVSREAD').

Si usted pasa esta opción, las obtenciones y las entregas hacen los
ficheros de sólo lectura en su copia de trabajo (asumiendo que su
sistema operativo lo permita). Francamente, no sé por qué alguien
podría querer usar alguna vez esta opción.

`-s' VARIABLE`='VALOR
=====================

Esto asigna el VALOR a la variable interna de CVS llamada VARIABLE.

En el lado del repositorio, los fichero disparadores `CVSROOT/*info'
puede expandir tales variables a valores que fueron asignados en la
opción -s. Por ejemplo, si `CVSROOT/loginfo' contiene una línea como
esta

     miproyecto  /usr/local/bin/foo.pl ${=PEZ}

y alguien ejecuta una entrega desde una copia de trabajo miproyecto así

     floss$ cvs -s PEZ=carpa commit -m "arreglado el bug cebo"

el script `foo.pl' se invoca con `carpa' como un argumento.  Note la
sintaxis chula, así: El signo del dólar, igual y las llaves son todas
necesarias - si alguno de ellos falta, la expansión no toma lugar (al
menos no como se trataba). Los nombres de variables sólo pueden
contener alfanuméricos y subrayados.  Aunque no se requiere que estén
en mayúsculas, la mayoría de la gente parece seguir esta convención.

Puede usar el indicador -s tantas veces como quiera en un mandato
simple. Sin embargo, si el script disparador se refiere a variables que
no son asignadas en una invocación particular de CVS, el mandato
también tiene éxito, pero ninguna de las variables se expande, y el
usuario ve un aviso. Por ejemplo, si loginfo tiene esto

     miproyecto  /usr/local/bin/foo.pl  ${=PEZ}  ${=AVE}

pero el mismo mandato de antes se ejecuta

     floss$ cvs -s PEZ=carpa commit -m "arreglado el bug cebo"

la persona que ejecuta el mandato ve un mensaje de aviso como este
(puesto al final de la salida)

     loginfo:31: no such user variable ${=AVE}

(loginfo:31: variable de usuario inexistente) y el script `foo.pl' se
invoca sin argumentos. Pero si se ejecuta este mandato

     floss$ cvs -s PEZ=carpa -s AVE=buitre commit -m "arreglado el bug cebo"

aquí no habría aviso, y tanto `${=PEZ}' como `${=AVE}' en loginfo
estarían correctamente expandidos.  En cualquier caso, la entrega en sí
misma, tendría éxito.

Aunque estos ejemplos usan todos `commit', la expansión de variables
puede hacerse con cualquier mandato CVS que pueda ser notificado en un
fichero disparador `CVSROOT/' - que es por lo que la opción -s es
global.

(Vea la sección *Note Ficheros de Administracion del Repositorio:: más
adelante en este capítulo para obtener más detalles sobre la expansión
de variables en ficheros disparadores.)

`-T' DIRECTORIO
===============

Guarda cualquier fichero temporal en el DIRECTORIO en vez de donde CVS
lo pone normalmente (específicamente, esto sustituye el valor de la
variable de entorno `$TMPDIR', si existiera). DIRECTORIO debería ser
una ruta absoluta.

Esta opción es útil cuando usted no tiene que permiso de escritura (y,
por tanto, CVS tampoco) a los directorios temporales usuales.

`-t'
====

Traza la ejecución del mandato de CVS. Esto hace a CVS imprimir
mensajes mostrando los pasos que se dan a lo largo de la ejecución de
un mandato. Puede encontrarlo particularmente útil en conjunción con la
opción global -n, para prever los efectos de un mandato poco familiar
antes de ejecutarlo de verdad. También puede ser útil cuando intenta
descubrir por qué un mandato falló.

`-v' o `--version'
==================

Hace que CVS imprima información de sus versiones y derechos de copia y
después salga sin error.

`-w'
====

Hace que los ficheros de trabajo sean creados como lectura-escritura
(remplaza cualquier configuración de las variables de entorno
`$CVSREAD'). Debido, de todos modos, a que los ficheros se crean por
omisión en modo lectura-escritura, esta opción se usa raramente.

Si tanto -r como -w se pasan, -w domina.

`-x'
====

Encripta todas las comunicaciones con el servidor. Esta opción no tiene
efecto a no ser que esté conectando vía servidor GSSAPI (gserver). Las
conexiones GSSAPI no se cubren en este libro, porque son todavía
raramente usadas (aunque esto puede cambiar).  (Ver los nodos `Opciones
Globales' y `Acreditación GSSAPI' en el manual Cederqvist para ampliar
información.)

`-z' NIVEL-GZIP
===============

Ajusta el nivel de compresión en las comunicaciones con el servidor.
El argumento NIVEL-GZIP debe ser un número entre el uno y el nueve.  El
nivel uno es compresión mínima (muy rápida, pero poca compresión). El
nivel nueve es la compresión más alta (aunque es mucho tiempo de CPU,
pero asegura que comprime los datos). El nivel nueve es solamente útil
en conexiones de red muy rapidas. La mayor parte de la gente encuentra
los niveles entre el tres y el cinco los más benificiosos.

Un espacio entre -z y su argumento es opcional.


File: cvsbook.info,  Node: add,  Next: admin,  Prev: Opciones Globales,  Up: Ordenes y Opciones

add
---

Sinopsis: add [OPCIONES] FICHEROS

   * Nombres alternativos - ad, new

   * Requiere - Copia de trabajo, repositorio

   * Cambia - Copia de trabajo

Añade un fichero o ficheros nuevos a un proyecto existente. Aunque se
conecta con el repositorio para obtener confirmación, el fichero no
aparece en el acto en él hasta que se realiza la siguiente llamada a
commit (Ver también *Note remove:: e *Note import::.)

Opciones:

   * -kCLAVE_DE_MODO_DE_SUSTITUCIÓN - Especifica que el fichero va a ser
     almacenado con la clave de sustitución de RCS dada. No hay espacio
     entre -k y su argumento. (Ver la sección *Note Claves de
     Sustitucion (Claves RCS):: más adelante en este capítulo para
     tener una lista completa de modos válidos y ejemplos.)

   * -m MENSAJE - Graba el MENSAJE como mensaje de creación, o
     descripción, para el fichero. Éste es diferente de un mensaje de
     registro por revisión - cada campo tiene una sola descripción. Las
     descripciones son opcionales.

     Hasta la versión 1.10.7, hay un bug en CVS por el que la
     descripción se pierde se añade un fichero via CVS
     cliente/servidor. El resto del proceso de añadido funciona
     correctamente, sin embargo, si sirve de consuelo.



File: cvsbook.info,  Node: admin,  Next: annotate,  Prev: add,  Up: Ordenes y Opciones

admin
-----

Synopsis: admin [OPCIONES] [FICHEROS]

   * Nombres alternativos - adm, rcs

   * Requiere - Copia de trabajo, repositorio

   * Cambios - Repositorio

Este mandato es una interfaz a las distintas tareas de administración -
especialmente, tareas aplicables a ficheros RCS individuales en el
repositorio, como cambiar la clave de sustitución o cambiar un mensaje
de registro después de que haya sido entregado.

Aunque admin se comporta recursivamente, si no hay ficheros dados como
argumentos, normalmente usted querrá nombrarlos explícitamente.  Es muy
raro que un mandato admin suelto tenga sentido cuando se aplica a todos
los ficheros en un proyecto, o incluso un directorio. De este modo,
cuando las siguientes explicaciones se refieran al "fichero", quere
decir el fichero o (raramente) los ficheros pasados como argumentos al
mandato admin.

Si hay un grupo de sistema llamado `cvsadmin' en la máquina del
repositorio, sólo los miembros de este grupo pueden ejecutar admin (con
la excepción de la orden `cvs admin -k', que siempre se permite). Así,
usted puede impedir admin para todos los usuarios configurando el grupo
para no tener usuarios.

Opciones:

   * -AFICHERO_VIEJO - (En desuso) Adjunta la lista de accesos RCS del
     FICHERO_VIEJO  a la lista de accesos del fichero que es el
     argumento de admin. CVS no tiene en cuenta las listas de acceso
     RCS, así que esta opción es inútil.

   * -a USUARIO1 [,USUARIO2...] - (En desuso) Adjunta los usuarios en la
     lista separada por comas a la lista de acceso del fichero. Como -A,
     esta opción es inútil en CVS.

   * -bREV - Especifica la revisión de la rama por omisión del fichero
     (usualmente el tronco) a REV. No necesita normalmente esta opción,
     pero podría usarla para volver a una versión de un vendedor si
     está usando ramas de vendedores. No debe haber espacio entre la
     opción -b y su argumento.

   * -cPREFIJO_DE_COMENTARIO - (En desuso) Especifica la cabecera de
     comentario del fichero a PREFIJO_DE_COMENTARIO. El encabezamiento
     del comentario no se usa por CVS ni incluso por recientes
     versiones de RCS; así, esta opción es inútil y se incluye sólo por
     compatibilidad retrospectiva.

   * -eUSUARIO1[,USUARIO2...] - (En desuso) Quita los nombres de
     usuario que aparecen en la lista separada por comas de la lista de
     acceso del fichero RCS. Como -a y -A, esta opción es ya inútil en
     CVS.

   * -i o -I - Estas dos han caído tan en desuso que ni siquiera voy a
     contarle qué hacían. (Ver el manual Cederqvist si siente
     curiosidad).

   * -kMODO - Especifica la clave de sustitución por omisión del
     fichero a MODO. Esta opción se comporta como la opción -k para
     añadir, sólo le proporciona una manera de cambiar el modo de un
     fichero después de que haya sido añadido. (Ver la sección *Note
     Claves de Sustitucion (Claves RCS):: más adelante en el capítulo
     para ver modos válidos).  No debe haber espacio entre -k y su
     argumento.

   * -L - Configura el candado a `strict'. (Ver -l abajo.)

   * -l[REV] - Cierra la revisión del fichero a REV. Si REV es omitido,
     cierra la última revisión en la rama por omisión (usualmente el
     tronco). Si REV es una rama, cierra la última revisión de la rama.

     La intención de esta opción es proporcionarle un modo de hacer
     "obtenciones reservadas", donde sólo un usuario a la vez puede
     estar editando un fichero. No estoy seguro de lo útil que es esto
     realmente, pero si quiere probarlo, debe probablemente hacerlo en
     conjunción con el script `rcslock.pl' en el directorio de la
     distribución `contrib/'. Ver comentarios en este fichero para
     obtener más información. Entre otras cosas, estos comentarios
     indican que el bloqueo debe ser configurado a `strict'. (Ver -L.)
     No hay espacio entre -l y su argumento.

   * -mREV:MENSAJE - Cambia el registro de mensajes para la revisión REV
     a MENSAJE. Muy útil - junto con -k, esta es probablemente la opción
     de administración más usada. No hay espacio entre la opción y los
     argumentos o alrededor de las comas entre dos argumentos. De hecho,
     MENSAJE puede contener espacios dentro (en tal caso, recuerde
     rodearlo por comillas para que el shell sepa que todo ello es una
     sola cosa).

   * -NNOMBRE[:[REV]] - Igual que -n, excepto que fuerza el remplazo de
     cualquier asignamiento existente del nombre simbólico NOMBRE, en
     vez de salir con un error.

   * -nNOMBRE[:[REV]] - Éste es un interfaz genérico a asignar,
     renombrar y borrar etiquetas. No hay razón, que yo sepa, de
     preferirlo al mandato tag y las variadas opciones disponibles ahí
     (-d, -r, -b, -f, y esas). Recomiendo usar, en cambio, el mandato
     tag. El NOMBRE y la REVisión opcional pueden ser combinadas de las
     siguientes formas:

        * Si sólo se da el argumento NOMBRE, el nombre simbólico
          (etiqueta) llamado NOMBRE se borra.

        * Si NOMBRE: se da pero no REV, NOMBRE se asigna a la última
          revisión en la rama por omisión (usualmente el tronco).

        * Si NOMBRE:REV se da, el NOMBRE se asigna a esa revisión. REV
          puede ser un nombre simbólico en sí mismo, en este caso se
          traduce a un número de revisión primero (puede ser un número
          de rama).

        * Si REV es un número de rama y le sigue un punto (`.'), NOMBRE
          se adjunta a la revisión más alta de esa rama. Si REV es
          simplemente $, NOMBRE se adjunta a los números de revisión
          encontrados en las cadenas de claves en los ficheros de
          trabajo.

          En todos los casos donde NOMBRE se asigna, CVS sale con un
          error si había una etiqueta llamada NOMBRE en el fichero
          (pero vea -N). No hay espacios entre -n y sus argumentos.


   * -oRANGO - Borra las revisiones especificadas por RANGO (también
     conocido como "anticuar", de ahí la -o). El rango puede ser
     especificado de uno de las siguientes modos:

        * REV1::REV2 - Colapsa todas las revisiones intermedias entre
          REV1 y REV2, de modo que el historial de revisiones vaya
          directamente de REV1 a REV2. Después de esto, cualquier
          revisión entre las dos ya no existirá, y habrá un salto
          discontinuo en la secuencia de números de revisiones.

        * ::REV - Colapsa todas las revisiones entre el principio de la
          rama de REVisión (que puede ser el principio del tronco) y la
          REVisión, no inclusive, por supuesto. REV es la primera
          revisión de esta línea.

        * REV:: - Colapsa todas las revisiones entre REV y el final de
          su rama (que puede ser el tronco). REV es entonces la última
          revisión de esta línea.

        * REV - Borra la revisión REV (-o1.8 sería equivalente a
          -o1.7::1.9).

        * REV1:REV2 - Borra las revisiones de REV1 a REV2, incluídas.
          Deben estar en la misma rama. Después de esto, no puede
          recuperar REV1, REV2, o cualquier otra de las revisiones
          entre ellas.

        * :REV - Borra las revisiones entre el comienzo de la rama (o
          tronco) a REV, incluída. (Ver el aviso precedente.)

          Note que las revisiones que se borran pueden tener ramas o
          bloqueos.  Si cualquiera de las revisiones tiene nombres
          simbólicos adjuntos, deberá borrarlos primero con tag -d o
          admin -n. (De hecho, ahora mismo CVS sólo protege contra el
          borrado de revisiones con nombres simbólicos si está usando
          una de las sintaxis ::, pero las sintaxis con coma tal vez
          cambien pronto a este comportamiento también).

          En vez de usar esta opción para deshacer una entrega mala,
          puede entregar una nueva revisión de deshaga el cambio
          erróneo. No hay espacios entre -o y sus argumentos.


   * -q - Dice a CVS que se ejecute silenciosamente - no se imprimen
     mensajes de diagnóstico (simplemente como la opción global -q).

   * -sESTADO[:REV] - Configura el atributo de estado de la revisión
     REV a ESTADO. Si REV se omite, la última revisión en la rama por
     omisión (usualmente el tronco) se usa. Si REV es una etiqueta de
     rama o número, se usa la última revisión de esta rama.

     Cualquier cadena de letras o números es aceptable para ESTADO;
     unos estados comúnmente usados son Exp para Experimental, Stab para
     Estable y Rel para Lanzamiento. (De hecho, CVS ajusta el estado a
     Exp cuando un fichero se crea).  Note que CVS usa el estado "dead"
     para sus propios propósitos, así que no lo especifique.

     Los estados se muestran en la salida de registro de CVS y en las
     claves RCS $Log y $State en los ficheros. No hay espacio entre -s
     y sus argumentos.

   * -t[FICHERO_DESC] - Remplaza la descripción (mensaje de creación)
     para el fichero con contenidos FICHERO_DESC, o lo lee de la entrada
     estándar si no se especifica FICHERO_DESC.

     Esta útil opción, desafortunadamente, no funciona actualmente en
     CVS cliente/servidor. Además, si lo itenta en cliente/servidor y
     omite FICHERO_DESC, cualquier descripción existente para el
     fichero es cortada y remplazada por una cadena vacía. Si necesita
     reescribir la descripción de un fichero, hágalo bien usando sólo
     CVS local en la misma máquina que el repositorio o -t-CADENA (ver
     adelante). No hay espacio entre -t y su argumento. FICHERO_DESC
     puede no comanzar con guión (`-').

   * -t-CADENA - Como -t, excepto que CADENA es tomada directamente como
     la nueva descripción. CADENA puede contener espacios, en cuyo caso
     debe rodearla por comillas. A diferencia de la otra sintaxis para
     -t, esta funciona tanto en cliente/servidor como localmente.

   * -U - Configura el bloqueo a no-estricto. (Ver opciones -l y -L,
     discutidas anteriormente.)

   * -u[REV] - Libera la revisión REV. (Ver -l). Si se omite REV, CVS
     libera el último bloqueo mantenido por el solicitante. Si algún
     otro que el dueño de un bloqueo lo rompe, un mensaje por correo
     electrónico se envía al dueño original del bloqueo. El contenido
     de este mensaje se solicita en la entrada estándar de la persona
     que rompe el bloqueo. No hay espacio entre -u y su argumento.

   * -VNÚMERO_DE_VERSIÓN_CVS - (En desuso) Esto solía ser un modo de
     pedir a CVS producir ficheros RCS aceptables para versiones
     anteriores de RCS. Ahora el formato RCS usado por CVS está
     quedándose lejos del formato RCS usado por RCS, así que la opción
     es inútil.  Especificarla acaba en un error.

   * -xSUFIJO - (En desuso) Teóricamente, esto le da un modo de
     especificar el sufijo de los nombres de fichero RCS. Sin embargo,
     CVS y las herramientas relacionadas dependen todos del sufijo por
     omisión (,v), así que esta opción no hace nada.



File: cvsbook.info,  Node: annotate,  Next: checkout,  Prev: admin,  Up: Ordenes y Opciones

annotate
--------

Sinopsis: annotate [OPCIONES] [FICHERO]

   * Nombre alternativo - ann

   * Requiere - Copia de trabajo, repositorio

   * Cambia - Nada

Muestra información de quién ha sido el último en modificar cada línea
de salida correspondiente a una línea del fichero.  De izquierda a
derecha, la línea muestra el número de revisión de la última
modificación de esa l\'inea, una expresión entre paréntesis conteniendo
el usuario y la fecha de la modificación, una coma, y los contenidos de
la línea en el fichero.

Por ejemplo, si un fichero tiene este aspecto

     este es un fichero de prueba
     tiene muchas líneas
     quiero decir "dos"

las anotaciones para este fichero podrían parecer esto

     1.1          (jcualquiera  22-Aug-99): este es un fichero de prueba
     1.1          (jcualquiera  22-Aug-99): tiene muchas líneas
     1.2          (jcualquiera  22-Aug-99): quiero decir "dos"

de donde puede saber que las primeras dos líneas se escribieron en la
revisión inicial, y la última fue añadida o modificada (también por
jcualquiera) en la Revisión 1.2.

Opciones:

   * -D FECHA - Muestra las anotaciones de la última revisión no más
     antigua que FECHA.

   * -f - Fuerza el uso de una revisión de la etiqueta especificada o
     si la fecha no se encuentra. Puede usar esto en combinación con -D
     o -r para asegurar que hay alguna salida del mandato annotate,
     incluso si sólo se muestra la revisión 1.1 del fichero.

   * -l - Local.  Ejecutar sólo en el directorio de trabajo actual.  No
     desciende dentro de los subdirectorios.

   * -R - Recursivo.  Desciende dentro de los subdirectorios (por
     omisión).  El punto en la opción -R se hace para sustituir
     cualquier opción -l puesta en un fichero .cvsrc.

   * -r REV - Muestra las anotaciones de la revisión REV (puede ser un
     número de revisión o una etiqueta).



File: cvsbook.info,  Node: checkout,  Next: commit,  Prev: annotate,  Up: Ordenes y Opciones

checkout
--------

Sinopsis: checkout [OPCIONES] PROYECTO(S)

   * Nombres alternativos - co, get

   * Requiere - Repository

   * Cambios - Current directory

Obtiene un módulo del repositorio en una copia de trabajo. La copia de
trabajo se crea si no existe ya y se actualiza si existe. (Ver también
*Note update::.)

Opciones:

   * -A - Borra cualquier etiqueta adhesiva, fechas adhesivas, o -k
     adhesivas (clave de modo de sustitución RCS). Esto es como la
     opción -A para actualizar y es probablemente usada más a menudo
     que con la obtención.

   * -c - No obtiene; simplemente imprime el fichero `CVSROOT/modules',
     ordenado, en la salida estándar.  Es un buen modo de obtener un
     resumen de qué proyectos están en el repositorio.  Sin embargo, un
     proyecto sin una entrada en modules no aparece (esta situación es
     muy normal porque el nombre del directorio de alto nivel del
     proyecto en el repositorio funciona como el nombre por omisión del
     módulo del proyecto).

   * -D FECHA - Obtiene la última revisión no más vieja que FECHA.
     Esta opción es adhesiva, así que no podrá entregar desde la copia
     de trabajo sin borrar la fecha adhesiva. (Ver -A). Esta opci\on
     también implica -P, descrita más tarde.

   * -d DIR - Crea la copia de trabajo en un directorio llamado DIR, en
     vez de crear el directorio con el mismo nombre que el módulo
     obtenido.  Si obtiene sólo una porción de un proyecto y la porción
     está ubicada en cualquier parte que no sea el nivel más alto del
     proyecto, los directorios son omitidos. Puede usar -N para
     suprimir este comportamiento de colapso de directorios.

   * -f - Fuerza la obtención de la revisión de cabecera si la etiqueta
     especificada o la fecha no se encuentra.  Se usa muy a menudo en
     combinación con -D o -R para asegurar que algo siempre se obtiene.

   * -j REV[:FECHA] o -j REV1[:FECHA] -j REV2[:FECHA] - Une (mezcla)
     dos líneas de desarrollo.  Esto es simplemente como la opción -j
     para actualizar, donde es más comúnmente usado. (Vea *Note update::
     para detalles.)

   * -k MODO - Sustituye la clave RCS de acuerdo con MODO (que puede
     sustituir los modos por omisión de los ficheros). (Vea la sección
     *Note Claves de Sustitucion (Claves RCS):: más adelante en este
     capítulo con los modos válidos.) El modo elegideo será adhesivo -
     futuras actualizaciones de la copia de trabajo mantendrán este
     modo.

   * -l - Local.  Obtiene sólo el directorio de alto nivel del proyecto.
     No procesa subdirectorios.

   * -N - Suprime el colapso de directorios vacíos con la opción -d
     (Vea -d.)

   * -n - No ejecuta ningún programa que fue especificado con -o en
     `CVSROOT/modules'.  (Ver la sección *Note Ficheros de
     Administracion del Repositorio:: más adelante en este cap\'itulo
     para obtener más información.)

   * -P - Poda directorios vacíos de la copia de trabajo (como la
     opción -P de update).

   * -p - Obtiene a la salida estándar, no a ficheros (como la opción
     -p de update).

   * -R - Obtiene también subdirectorios (por omisión).  (Ver también
     la opción -f.)

   * -r ETIQUETA - Obtiene el proyecto con revisión ETIQUETA (no tendría
     sentido especificar una revisión numérica para ETIQUETA, aunque CVS
     se lo permita).  Esta opción es adhesiva e implica -P.

   * -s - Como -c, pero muestra el estado de cada módulo y ordena por
     estado.  (Ver *Note modules:: en la sección *Note Ficheros de
     Administracion del Repositorio:: para ampliar información.)



File: cvsbook.info,  Node: commit,  Next: diff,  Prev: checkout,  Up: Ordenes y Opciones

commit
------

Synopsis: commit [OPCIONES] [FICHEROS]

   * Nombres alternativos - ci, com

   * Requiere - Copia de trabajo, repositorio

   * Cambia - Repositorio (Y área administrativa de la copia de trabajo)

Entrega los cambios de una copia de trabajo al repositorio.

Opciones:

   * -F FICHERO_MSJ - Usa los contenidos de FICHERO_MSJ para los
     mensajes de registro en vez de invocar un editor.  Esta opción no
     puede combinarse con -m.

   * -f - Fuerza la entrega de una nueva revisión incluso si no se han
     hecho cambios a los ficheros.  `commit' no es recursivo con esta
     opción (implica -l).  Puede forzar la recursión con -R.

     El significado de -f no concuerda con su significado usual
     ("forzar a la revisión de cabecera") en los mandatos de CVS.

   * -l - Local.  Entrega los cambios del directorio actual sólo.  No
     desciende a los subdirectorios.

   * -m MENSAJE - Usa MENSAJE como mensaje de registro en vez de
     invocar un editor.  No puede ser usado con -F.

   * -n - No ejecuta ningún programa de módulo. (Ver la sección *Note
     Ficheros de Administracion del Repositorio:: en este capítulo para
     obtener más información sobre los programas de módulo.

   * -R - Entrega los cambios de los subdirectorios al igual que desde
     el directorio actual (por omisión).  Esta opción se usa sólo para
     contrarrestar el efecto de un -l en `.cvsrc'.

   * -r REV - Entrega hasta la revisión REV, que debe ser, o una rama,
     o una revisión en el tronco que es más alta que cualquier revisión
     existente.  Al entregar en una rama siempre se va al extremo de la
     rama (extendiéndola); no puede entregar a una expecífica revisión
     de una rama.  El uso de esta opción configura la nueva revisión
     como un sticky tag del fichero.  Esto puede ser borrado con update
     -A.

     La opción -r REV implica -f también.  Una nueva revisión se
     entrega incluso si no hay cambios que entregar.



File: cvsbook.info,  Node: diff,  Next: edit,  Prev: commit,  Up: Ordenes y Opciones

diff
----

Synopsis: diff [OPCIONES] [FICHEROS]

   * Nombres alternativos - di, dif

   * Requiere - Copia de trabajo, repositorio

   * Cambia - Nada

Muestra las diferencias entre dos revisiones (un formato diff de Unix).
Cuando es invocado sin opciones, CVS diferencia la revisión base del
repositorio entre los (posiblemente no entregados) contenidos de la
copia de trabajo. Las revisiones "base" son las últimas revisiones en
esta copia recogida del repositorio; note que podría haber incluso
revisiones posteriores en el repositorio, si otro entregó cambios pero
la copia de trabajo todavía no se ha actualizado.  (Ver también *Note
rdiff::).

Opciones:

   * -D FECHA - Diferencia entre las últimas revisiones no posteriores a
     FECHA.  Se comporta como -r REV, excepto que usa las fechas en vez
     de revisiones.  (Ver -r para obtener más detalles).

   * -k MODO - Expande las claves RCS en las diferencias de acuerdo al
     MODO.  (Ver la sección *Note Claves de Sustitucion (Claves RCS)::
     en este capítulo para posibles modos.)

   * -l - Local.  Si no hay ficheros especificados como argumentos, esta
     opción diferencia en el directorio actual, pero no desciende dentro
     de los subdirectorios.

   * -R - Recursivo.  Esta opción es la contraria a -l.  Este es el
     comportamiento por omisión, así que la única razón para
     especificar -R es contrarrestar un -l en un fichero `.cvsrc'.

   * -r REV or -r REV1 -r REV2 - Diferencia entre las revisiones
     especificadas.  Con una opción -r, se diferencian revisiones REV
     contra su copia de trabajo de este fichero (así cuando múltiples
     ficheros están siendo diferenciados, REV es casi siempre una
     etiqueta).  Con dos opciones -r, diferencia REV1 entre REV2 para
     cada fichero (y la copia de trabajo es, por tanto, irrelevante).
     Las dos revisiones pueden estar en cualquier orden - REV1 no tiene
     tiene por qué ser una revisión anterior a REV2.  La salida refleja
     las direcciones del cambio.  Con ninguna opción -r, muestra las
     diferencias entre el fichero de trabajo y la revisión en la que
     está basado.


Opciones de Compatibilidad de Diff

Además de las opciones precedentes, cvs diff también comparte multitud
de opciones con la versión GNU del programa de l\'inea de mantados diff
estándar. Lo que sigue es una lista completa de estas opciones, junto
con una explicación de algunos de los más comúnmente usados. (Ver la
documentación del GNU diff para las otras).

     -0 -1 -2 -3 -4 -5 -6 -7 -8 -9
         --binary
         --brief
         --changed-group-format=ARG
         -c
           -C NL\'INEAS
           --context[=L\'INEAS]
         -e --ed
         -t --expand-tabs
         -f --forward-ed
         --horizon-lines=ARG
         --ifdef=ARG
         -w --ignore-all-space
         -B --ignore-blank-lines
         -i --ignore-case
         -I REGEXP
            --ignore-matching-lines=REGEXP
         -h
         -b --ignore-space-change
         -T --initial-tab
         -L ETIQUETA
           --label=ETIQUETA
         --left-column
         -d --minimal
         -N --new-file
         --new-line-format=ARG
         --old-line-format=ARG
         --paginate
         -n --rcs
         -s --report-identical-files
         -p
         --show-c-function
         -y --side-by-side
         -F REGEXP
         --show-function-line=REGEXP
         -H --speed-large-files
         --suppress-common-lines
         -a --text
         --unchanged-group-format=ARG
         -u
           -U NL\'INEAS
           --unified[=L\'INEAS]
         -V ARG
         -W COLUMNAS
           --width=COLUMNAS

Lo que sigue son las opciones del GNU diff más frecuentemente usadas
con cvs diff.

   * -B - No tiene en cuenta las diferencias que son meramente inserción
     o borrado de líneas vacías (líneas que no contienen nada más que
     caracteres de espacio).

   * -b - No tiene en cuenta las diferencias en la cantidad de espacios.
     Esta opción trata todas las secuencias de espacios como si fueran
     iguales y no hace caso de los espacios en el final de la línea.
     Más técnicamente, esta opción colapsa cada secuencia de espacios
     en la salida a un simple espacio y quita cualquier espacio del
     final de cada línea, antes de realizar la diferenciación.  (Ver
     también -w).

   * -c - Muestra la salida en el contexto del formato diff, tomando
     por omisión tres líneas de contexto por diferencia (en beneficio
     del programa patch, que requiere como mínimo dos líneas de
     contexto).

   * -C NUM - context=NUM - Como -c, pero con NUM líneas de contexto.

   * -i - Compara sin tener en cuenta mayúsculas/minúsculas.  Trata las
     versiones de mayúsculas y minúsculas de una letra como la misma.

   * -u - Muestra la salida en un formato unificado diff.

   * -w - No tiene en cuenta todas las diferencias de espacios, incluso
     cuando una cara de la entrada tiene espacios donde las otras no
     tenían.  Esencialmente una versión más fuerte de -b.



File: cvsbook.info,  Node: edit,  Next: editors,  Prev: diff,  Up: Ordenes y Opciones

edit
----

Synopsis: edit [OPCIONES] [FICHEROS]

   * Nombres alternativos - ninguno

   * Requiere - Copia de trabajo, repositorio

   * Cambia - Permisos en la copia de trabajo, lista de observaciones
     en el repositorio

Señala que esta a punto de empezar a editar un fichero o ficheros
observados.  Atambién le añade como un observador temporal a la lista
de observadores del fichero (será quitado cuando haga cvs unedit). (Ver
también *Note watch::, *Note watchers::, *Note unedit:: y *Note
editors::.)

Opciones:

   * -a ACCIONES - Especifica para qué acciones quiere ser un observador
     temporal.  Las ACCIONES pueden ser edit, unedit, commit, all o
     none.  (Si no usa -a, la observación temporal será para todas las
     acciones.)

   * -l - Se\~ala la edición de los ficheros sólo para el directorio de
     trabajo actual.

   * -R - Recursivo (ésto es por omisión).  Contrario de b; necesitaría
     pasar -R sólo para contrarrestar un -l en un fichero `.cvsrc'.



File: cvsbook.info,  Node: editors,  Next: export,  Prev: edit,  Up: Ordenes y Opciones

editors
-------

Synopsis: editors [OPCIONES] [FICHEROS]

   * Nombres alternativos - ninguno

   * Requiere - Copia de trabajo, repositorio

   * Cambia - Nada

Muestra quién está actualmente editando un fichero observado (Ver
también *Note watch::, *Note watchers::, *Note edit:: y *Note unedit::.)

Opciones:

   * -l - Local.  Mustra los editores de ficheros en el directorio de
     trabajo actual sólo.

   * -R - Recursivo.  Muestra los editores para los ficheros en este
     directorio y sus subdirectorios (por omisión).  Necesitará pasar
     -R para contrarrestar un -l en un fichero `.cvsrc', no obstante.



File: cvsbook.info,  Node: export,  Next: gserver,  Prev: editors,  Up: Ordenes y Opciones

export
------

Synopsis: export [OPCIONES] PROYECTO(S)

   * Nombres alternativos - exp, ex

   * Requiere - Repositorio

   * Cambia - Directorio actual

Exporta los ficheros del repositorio para crear un árbol de proyecto
que no es una copia de trabajo (no tiene subdirectorios CVS/
administrativos).  Útil principalmente para empaquetar distribuciones.

Opciones:

   * -D FECHA - Exporta las últimas revisiones no posteriores a FECHA.

   * -d DIR - Exporta en DIR (en otro caso, por omisión es en el nombre
     del módulo).

   * -f - Fuerza el uso de revisiones de cabecera, si una etiqueta dada
     o una fecha resulta en que no se encuentra nada (para usar con -D
     o -r).

   * -k MODO - Expande una clave RCS de acuerdo al MODO.  (Ver la
     sección *Note Claves de Sustitucion (Claves RCS):: más adelante en
     este caítulo.)

   * -l - Local.  Exporta sólo el nivel alto del proyecto, no los
     subdirectorios.

   * -N - No "colapsa" directorios itermedios vacíos.  Esta opción es
     como la opción -N para la obtención (*note checkout::).

   * -n - No ejecuta un programa de módulo como podría ser especificado
     en `CVSROOT/modules'.  (Ver *Note Ficheros de Administracion del
     Repositorio:: más adelante en este campítulo para obtener más
     detalles acerca de esto).

   * -P - Borra directorios vacíos (como la opción -P para la obtención
     o actualización).

   * -R - Recursivo.  Exporta todos los subdirectorios del proyecto (por
     omisión).  La única razón para especificar -R es para contrarrestar
     un -l en un fichero `.cvsrc'.

   * -r REV - Exporta la revisión REV.  Rev es casi ciertamente un
     nombre de etiqueta, no una revisión numérica.


