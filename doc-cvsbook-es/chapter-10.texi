@c -------------------------------------------------------------
@node Herramientas de terceros
@unnumbered Herramientas de terceros

Mucha gente ha escrito programas para mejorar CVS.  Yo los llamo
@dfn{herramientas de terceros} porque tienen sus propios mantenedores,
independientes del equipo de desarrollo de CVS.  La mayoría de estos
programas no se distribuyen con CVS aunque algunos sí lo hacen.  Este
capítulo está dedicado a las herramientas de terceros que he encontrado
útiles pero que no se distribuyen con CVS.

Aunque hay algunas interfaces para CVS no Unix en línea de órdenes que
gozan de gran popularidad y son de amplio uso (los sitios de descarga
aparecen listados en @ref{Administracion del Repositorio}) en este
capítulo no hablaremos de ellas.  Su popularidad hace que resulte
sencillo obtener información sobre ellas en listas de correo y grupos de
noticias.  Como clara excepción tenemos la interfaz pcl-cvs para Emacs que
aunque resulta muy útil a veces es algo compleja de instalar.

@menu
* pcl-cvs -- Una interfaz de Emacs para CVS::
* cvsutils -- Utilidades genéricas para usar con CVS::
* cvs2cl -- Genera ChangeLogs al estilo GNU::
* cvslock -- Bloquea los repositorios para evitar la atomicidad::
* cvsq -- Encola órdenes CVS para una posterior conexión::
* Otros paquetes::
* Escribir sus propias herramientas::
@end menu

@c -------------------------------------------------------
@node pcl-cvs -- Una interfaz de Emacs para CVS
@section pcl-cvs -- Una interfaz de Emacs para CVS

Depende de: Emacs, Elib

URLs:

@itemize
@item @uref{ftp://rum.cs.yale.edu/pub/monnier/pcl-cvs/}
@item @uref{ftp://ftp.lysator.liu.se/pub/emacs/pcl-cvs-1.05.tar.gz}
@item @uref{ftp://ftp.red-bean.com/pub/kfogel/pcl-cvs-1.05.tar.gz}
@end itemize

Autores: Per Cederqvist y Stefan Monnier (mantenedor actual)

@code{pcl-cvs} es una de las dos interfaces de CVS para Emacs.  La otra
es la interfaz nativa VC (Control de Versiones) integrada en Emacs.  Yo
prefiero pcl-cvs porque se escribió para CVS en exclusiva y, por tanto,
funciona muy bien con la manera que tiene CVS de hacer las cosas.  VC,
por otra parte, se diseñó para funcionar con sistemas de control de
versiones muy diferentes (RCS y SCCS, así como CVS) y no está realmente
"optimizado" para CVS.  Por ejemplo, VC presenta una interfaz basada más
en archivos que en directorios para el control de revisiones.

Las ventajas de pcl-cvs son suficientes como para que mucha gente elija
descargarlo e instalarlo en vez de usar VC.  Desgraciadamente pcl-cvs
tiene dos desventajas: su instalación puede resultar algo compleja (una
gran parte de esta sección está dedicada a solucionar posibles problemas
durante la misma) y sus versiones más recientes se han mostrado
algo inestables.

Este último problema es temporal pero hace que nos preguntemos qué
versión usar.  Stefan Monnier se ha hecho cargo recientemente del
mantenimiento de pcl-cvs.  La última versión, 2.9.6 (disponible en la
primera URL de la lista anterior), resultaba un tanto problemática
cuando la probé.  No dude que los problemas desaparecerán pronto pero,
mientras tanto, quizá quiera usar una versión más antigua.  Aquí voy a
documentar la versión 1.05 pues es la que he estado usando a diario
durante bastante tiempo y se ha portado bastante bien.  Por suerte los
procesos de instalación no cambian mucho de versión en versión.  Si
decide utilizar pcl-cvs le sugiero que busque en el sitio de descarga de
Monnier una versión más reciente que la 2.9.6; si la hay, pruébela antes
de intentarlo con la 1.05.

Se habrá dado cuenta de que he puesto dos URLs para la versión 1.05.
La primera es del sitio de Per Cederqvist, donde aún puede encontrarse
un archivo antiguo de pcl-cvs.  No obstante, como no estoy seguro de
por cuánto tiempo permanecerá su archivo en línea, también he puesto a
disposición pública la versión 1.05 en ftp.red-bean.com.

Aunque en el resto de estas instrucciones se utilizan ejemplos tomados
de la versión 1.05 deberían poder aplicarse igualmente a versiones
posteriores.

@menu
* Instalar pcl-cvs::
* Usar pcl-cvs::
* Manejo de errores en pcl-cvs::
* El futuro de pcl-cvs::
@end menu

@c --------------------------------------------------------
@node Instalar pcl-cvs
@subsection Instalar pcl-cvs

Si no está acostumbrado a trastear con la instalación de Emacs ni con
asuntos relacionados con el mantenimiento de sitios el proceso de
instalación de pcl-cvs puede parecerle un tanto intimidatorio.  Quizá
le ayude algo de información acerca de cómo funciona Emacs.

La mayoría de las prestaciones de alto nivel de Emacs están escritas en
un lenguaje llamado "Emacs Lisp" (Emacs en sí es esencialmente un
intérprete de este lenguaje).  La gente añade nuevas funcionalidades a
Emacs distribuyendo archivos de código en Emacs Lisp. @code{pcl-cvs}
está escrito en este lenguaje y depende de una librería de útiles
funciones Emacs Lisp genéricas que se conoce como @dfn{Elib} (también
escrita en parte por Per Cederqvist, pero distribuida de manera
independiente a pcl-cvs).

Elib no se incluye en la distribución estándar de Emacs (al menos no en
la del Emacs de la FSF; desconozco si ocurre lo mismo con XEmacs), por
lo que tendrá que descargarla e instalarla usted mismo antes de que
pueda utilizar pcl-cvs.  Puede hacerse con ella en
@uref{ftp://ftp.lysator.liu.se/pub/emacs/elib-1.0.tar.gz}.  Las
instrucciones de instalación se encuentran en el mismo paquete.

Una vez se ha instalado Elib ya estamos listos para compilar e instalar
pcl-cvs.  Estas instrucciones son aplicables tanto a la versión 1.05
como a la serie 2.x (aunque debería comprobar los archivos NEWS e
INSTALL de las distribuciones más recientes para ver qué ha cambiado).

Pare empezar desempaquete pcl-cvs (yo estoy usando la versión 1.05 pero
podría tratarse perfectamente de la 2.9.6)

@example
floss$ zcat pcl-cvs-1.05.tar.gz | tar xvf -
pcl-cvs-1.05/
pcl-cvs-1.05/README
pcl-cvs-1.05/NEWS
pcl-cvs-1.05/INSTALL
pcl-cvs-1.05/ChangeLog
pcl-cvs-1.05/pcl-cvs.el
pcl-cvs-1.05/pcl-cvs.texinfo
pcl-cvs-1.05/compile-all.el
pcl-cvs-1.05/pcl-cvs-lucid.el
pcl-cvs-1.05/pcl-cvs-startup.el
pcl-cvs-1.05/pcl-cvs.info
pcl-cvs-1.05/Makefile
pcl-cvs-1.05/texinfo.tex
@end example

y sitúese en el nivel más alto del directorio que contiene las fuentes:

@example
floss$ cd pcl-cvs-1.05/
@end example

Aquí se le proporciona un Makefile.  De acuerdo con las instrucciones
del archivo INSTALL tiene que editar unas cuantas rutas en la parte
superior del Makefile y ejecutar luego:

@example
floss$ make install
@end example

Si eso funciona, fantástico.  No obstante, esto a veces puede resultar en
un error (aunque el propio código de pcl-cvs es muy portable los 
procedimientos para su instalación a veces no lo son tanto).  De 
encontrarse con un error haga esto:

@example
floss$ make clean
floss$ make
@end example

Si todo va bien estas órdenes llevan a cabo una parte significativa de
la instalación compilando a "byte-code" todos los archivos Emacs
Lisp. (Al compilar a "byte-code" convierte un archivo de código Emacs
Lisp perfectamente legible, un archivo .el, en una representación más
compacta y eficiente, un archivo .elc.  Emacs puede cargar y ejecutar
los archivos .elc con un mejor rendimiento que los archivos .el).

Continuaré como si la compilación a "byte-code" se hubiese llevado a
cabo con éxito.  Si no ha sido así no se preocupe: los archivos .elc son
un lujo, no una necesidad.  Mejoran ligeramente el rendimiento pero
puede correr pcl-cvs directamente desde los archivos .el sin problemas.

Si el "make install" falló el siguiente paso es colocar el Emacs Lisp
(.el o .elc) en un directorio donde Emacs pueda cargarlo
automáticamente.  Emacs tiene un directorio designado en el sistema para
el Lisp instalado localmente.  Para encontrar ese directorio (habrá un
archivo llamado @file{default.el} en él) mire en los siguientes lugares
por este orden:

@enumerate
@item /usr/share/emacs/site-lisp/
@item /usr/local/share/emacs/site-lisp/
@item /usr/lib/emacs/site-lisp/
@item /usr/local/lib/emacs/site-lisp/
@end enumerate

En cuanto haya encontrado su directorio site-lisp copie todos los
archivos Lips en él (puede necesitar ser root para hacer esto):

@example
floss# cp -f *.el *.elc /usr/share/emacs/site-lisp/
@end example

El último paso es comunicarle a Emacs los puntos de entrada a pcl-cvs
(siendo el principal la función cvs-update) para que sea capaz de cargar
el código de pcl-cvs bajo demanda.  Como Emacs siempre lee el archivo
default.el cuando arranca ahí es donde necesitará listar los puntos de
entrada a pcl-cvs.

Por suerte pcl-cvs ya viene con el contenido necesario para default.el.
Simplemente coloque el contenido de pcl-cvs-startup.el en default.el (o
quizá en su .emacs si sólo lo instala para usted) y reinicie Emacs.

Quizá quiera copiar también los archivos .info a su árbol info y añadir
pcl-cvs al índice de contenidos del archivo dir.


@c ----------------------------------------------------------
@node Usar pcl-cvs
@subsection Usar pcl-cvs

Una vez instalado pcl-cvs es muy fácil de usar.  Ejecute simplemente la
función cvs-update y pcl-cvs le mostrará un búfer con los archivos de su
copia de trabajo que se hayan modificado o actualizado.  A partir de ahí
puede hacer "commits", "diffs" y demás.

Al ser cvs-update el punto de entrada principal le sugiero que lo enlace
con un atajo de teclado conveniente antes de que continuemos.  Yo lo
tengo enlazado a @kbd{Ctrl+c v} en mi .emacs:

@example
(global-set-key "\C-cv" 'cvs-update)
@end example

De otra manera también puede ejecutarlo tecleando @kbd{M-x cvs-update}
(también conocido como @kbd{Esc-x cvs-update}).

Cuando invoca a cvs-update éste ejecuta cvs update como si estuviese en
el directorio del archivo que se encuentre en el búfer (tal y como si
hubiese tecleado cvs update estando en ese directorio desde la línea de
órdenes).  He aquí un ejemplo de lo que podría ver desde Emacs:

@example
PCL-CVS release 1.05 from CVS release $Name:  $.
Copyright (C) 1992, 1993 Per Cederqvist
Pcl-cvs comes with absolutely no warranty; for details consult the manual.
This is free software, and you are welcome to redistribute it under certain
conditions; again, consult the TeXinfo manual for details.
 Modified ci README.txt
 Modified ci fish.c
---------- End ----
@end example

Se han modificado dos archivos localmente (en algunas versiones de
pcl-cvs se muestran los subdirectorios donde se encuentran los
archivos).  Lo siguiente es hacer "commit" sobre ambos archivos o sobre
uno de ellos, que es lo que significa el ci en cada línea. Vaya a su línea 
y escriba @kbd{c}.  Se le conducirá a un búfer de mensajes de cambios
donde podrá escribir un mensaje de cambios tan largo como quiera (la
edición real de los mensajes con los cambios es la mayor ventaja de
pcl-cvs sobre la línea de órdenes).  Introduzca @kbd{Ctrl+c Ctrl+c}
cuando haya acabado para completa el "commit".

Si desea hacer "commit" sobre múltiples archivos a la vez de manera que
compartan un mismo mensaje de cambios use primero m para marcar los
archivos sobre los que pretendar hacer un "commit".  Aparecerá un
asterisco junto a cada archivo conforme los vaya marcando:

@example
PCL-CVS release 1.05 from CVS release $Name:  $.
Copyright (C) 1992, 1993 Per Cederqvist
Pcl-cvs comes with absolutely no warranty; for details consult the manual.
This is free software, and you are welcome to redistribute it under certain
conditions; again, consult the TeXinfo manual for details.
* Modified ci README.txt
* Modified ci fish.c
---------- End ----
@end example

Ahora cuando escriba c en cualquier lugar se aplicará a todos los
archivos marcados (y únicamente a ellos).  Escriba el mensaje con los
cambios y haga "commit" con @kbd{Ctrl+C Ctrl+C} como antes.

También puede escribir @kbd{d} para ejecutar cvs diff sobre un archivo
(o sobre unos archivos marcados) y @kbd{f} para editarlo con Emacs.  Hay
más órdenes disponibles, use @kbd{Ctrl+h} m en el búfer de actualización
para ver qué más puede hacer.

@c --------------------------------------------------------------
@node Manejo de errores en pcl-cvs
@subsection Manejo de errores en pcl-cvs

El programa pcl-cvs ha tenido históricamente una manera un tanto
singular de manejar los mensajes de error e informativos de CVS (aunque
quizá esto se haya corregido en las últimas versiones).  Cuando se
encuentra con un mensaje de CVS que no entiende se pone histérico y le
envía a un búfer de correo listo para enviar un informe de error
previamente generado al autor de pcl-cvs.  Desgraciadamente, entre los
mensajes de CVS que pcl-cvs puede no entender se encuentran los
asociados con la resolución de conflictos los cuales, aunque no son muy
comunes, ocurren ciertamente de vez en cuando.

Si pcl-cvs le envía repentinamente a un búfer de correo no se asuste.
Lea el contenido del búfer con cuidado (la salida de CVS culpable
debería aparecer en algún lugar.  Si parece una fusión puede deshacerse
tranquilamente del búfer y volver a ejecutar cvs-update.  Ahora debería
tener éxito al no tener que mostrar ya CVS ningún mensaje sobre la
fusión (porque ya ha tenido lugar).

(Actualización: este problema parece haberse arreglado en las versiones
más recientes de pcl-cvs por lo que puede ignorar este aviso casi con
total seguridad).

@c ----------------------------------------------------
@node El futuro de pcl-cvs
@subsection El futuro pcl-cvs

Aunque pueda estar dándole la impresión de que pcl-cvs apenas se
mantiene y supone una inversión de riesgo la inestabilidad parece ser
temporal.  Stefan Monnier es un mantenedor despierto (me he puesto en
contacto con él muchas veces mientras escribía este capítulo y siempre
me ha respondido; ya se encuentra en vías de corregir algunos errores de
la versión 2.9.6).  Seguramente cuando esto se publique podrá descargar
la versión 2.9.7 o posterior con toda tranquilidad.

De hecho, recibí hace poco un correo de Greg Woods, un mantenedor
anterior de pcl-cvs, sobre este asunto que reproduzco aquí con su
permiso:

@example
De: woods@@most.weird.com (Greg A. Woods)
Sobre: Re: ¿ Estado del mantenimiento de pcl-cvs, estabilidad de las
"versiones" recientes ?
Para: kfogel@@red-bean.com
Fecha: Sáb, 29 Ago 1999 18:59:19 -0400 (EDT)

[...]
He estado usando las versiones de Stefan desde hace ya tiempo y de hecho
he abandonado mi propia rama.

Ha hecho un trabajo realmente bueno con PCL-CVS y excepto por algunos
extraños errores en la versión 2.9.6 lo uso a diario y me resulta
bastante usable (¡e infinitamente más usable con el CVS moderno que con
el que venía con la distribución de CVS! ;-).

He añadido un archivo pcl-cvs.README a mi sitio FTP para indicar que los
archivos que hay son bastante antiguos (¡al menos según el tiempo de
Internet! ;-) y también para proporcionar un enlace al sitio FTP de
Stefan.

[...]
@end example

En un mensaje posterior Greg me dijo que la FSF está considerando incluir
pcl-cvs en su próxima versión de Emacs (20.5) lo que dejaría obsoletos
los consejos anteriores sobre su instalación. En fin, a veces es difícil
lidiar con el software libre.

@c ---------------------------------------------------------------
@node cvsutils -- Utilidades genéricas para usar con CVS
@section cvsutils -- Utilidades genéricas para usar con CVS

Dependen de: Perl

URLs:

@itemize
@item @uref{http://www.red-bean.com/cvsutils}
@end itemize

Autores: Tom Tromey (autor original) y Pavel Roskin (mantenedor actual)

El conjunto de pequeños programas conocido como @code{cvsutils}
genralmente (aunque no siempre) llevan a cabo operaciones @dfn{estando
desconectados} en la copia de trabajo de CVS.  Las operaciones estando
desconectado son aquellas que pueden realizarse sin tener que ponerse en
contacto con el repositorio al tiempo que se mantiene la copia de
trabajo en un estado consistente para la próxima vez que contactemos
con el repositorio.  El comportamiento sin línea puede llegar a sernos
extremadamente útil cuando nuestra conexión de red con el repositorio
sea lenta o nada eficaz.

Los programas cvsutils se listan abajo en un orden de utilidad
aproximado (según mi opinión) siendo los primeros los más útiles.  Esto
también los ordena según su seguridad.  La seguridad es algo a tener muy
en cuenta ya que algunas de estas utilidades pueden causar pérdidas de 
modificaciones en local o archivos de su copia de trabajo aún operando de 
manera correcta.  Por esto, lea las descripciones cuidadosamente antes de 
usar estas utilidades.

Esta documentación se centra en la versión 0.1.4.  Asegúrese de leer el
archivo README en cualquier versión posterior para una información más
actualizada.

@menu
* cvsu::
* cvsdo::
* cvschroot::
* cvsrmadm::
* cvspurge::
* cvsdiscard::
* cvsco::
* cvsdate::
@end menu

@c ----------------------------------------------------------
@node cvsu
@subsection cvsu

Nivel de peligrosidad: ninguna

Contacta con el repositorio: no

Lleva a cabo un cvs update estando desconectado comparando las marcas
temporales de los archivos del disco con las registradas en CVS/Entries.
Así puede averiguar qué archivos se han modificado localmente y cuáles
parece no controlar CVS.  A diferencia de @w{@code{cvs update}} cvsu no
se trae los cambios del repositorio.

Aunque acepta varias opciones cvsu suele invocarse la mayoría de las
veces sin ellas:

@example
floss$ cvsu
? ./bar
? ./chapter-10.html
M ./chapter-10.sgml
D ./out
? ./safe.sh
D ./tools
@end example

Los códigos de la izquierda son como la salida de cvs update excepto
@code{D} que signfica directorio.  En este ejemplo se muestra que
chapter-10.sgml se ha modificado localmente.  Lo que no aparece en el
ejemplo es que cvsu se ejecutó instantáneamente mientras que un cvs
update normal hubiese requerido medio minuto más o menos con una
conexión lenta.  Ejecute

@example
floss$ cvsu --help
@end example

para ver una lista de opciones.

@c ----------------------------------------------------------
@node cvsdo
@subsection cvsdo

Nivel de peligrosidad: casi ninguna

Contacta con el repositorio: no 

Esto puede simular los efectos de cvs add y cvs remove sobre nuestra
copia de trabajo pero sin ponerse en contacto con el repositorio.  Está
claro que aún tendrá que hacer "commit" de los cambios para que tengan
efecto en el repositorio pero al menos las órdenes add y remove en sí
mismas pueden acelerarse de esta manera.
He aquí como usarlo

@example
floss$ cvsdo add FILENAME
@end example

o

@example
floss$ cvsdo remove FILENAME
@end example

Para ver una lista con el resto de opciones ejecute:

@example
floss$ cvsdo --help
@end example

@c ----------------------------------------------------------
@node cvschroot 
@subsection cvschroot 

Nivel de peligrosidad: baja

Contacta con el repositorio: no 

Esto maneja un movimiento del repositorio haciendo que nuestra copia de
trabajo apunte al nuevo.  Esto resulta útil cuando se copia un
repositorio en masa a un nuevo lugar.  Cuando eso sucede no suele
afectar a ninguna de las revisiones pero los archivos CVS/Root (y
posiblemente CVS/Repository) de cada copia de trabajo deben actualizarse
para que apunten al nuevo emplazamiento.  Usar cvschroot es mucho más
rápido que traerse una nueva copia.  Otra ventaja es que no perderá los
cambios que pueda haber hecho en local.

Uso:

@example
floss$ cvschroot NEW_REPOS
@end example

Por ejemplo:

@example
floss$ cvschroot :pserver:newuser@@newhost.wherever.com:/home/cvs/myproj
@end example

@c ----------------------------------------------------------
@node cvsrmadm
@subsection cvsrmadm

Nivel de peligrosidad: bajo a medio

Contacta con el repositorio: no 

Esto elimina todos los subdirectorios administrativos CVS/ de su copia
de trabajo dejando una estructura similar a la que crea cvs export.

Aunque no perderá ningún cambio local usando cvsrmadm su copia de
trabajo dejará de serlo.

Úselo con precaución.

@c ----------------------------------------------------------
@node cvspurge
@subsection cvspurge

Nivel de peligrosidad: medio

Contacta con el repositorio: no 

Elimina todos los archivos no controlados por CVS de su copia de
trabajo.  No deshace ningún cambio local en los archivos que controle
CVS.

Uselo con precaución.

@c ----------------------------------------------------------
@node cvsdiscard
@subsection cvsdiscard

Nivel de peligrosidad: medio a alto

Contacta con el repositorio: quizá

Complemento de cvspurge, en vez de eliminar los archivos desconocidos
pero manteniendo los cambios locales cvsdiscard deshace los cambios
hechos en local (sustituyendo esos archivos con copias nuevas del
repositorio) pero manteniendo los archivos desconocidos.

Uselo con extrema precaución.

@c ----------------------------------------------------------
@node cvsco
@subsection cvsco

Nivel de peligrosidad: alto

Contacta con el repositorio: quizá 

Esto es la unión de cvspurge y cvsdiscard.  Deshace cualquier cambio
local y elimina los archivos desconocidos de la copia de trabajo.

Uselo con precaución auténticamente paranoica.

@c ----------------------------------------------------------
@node cvsdate
@subsection cvsdate

Este guión se encuentra aparentemente incompleto y quizá nunca se acabe.
(Acuda al archivo README para más detalles).

@c ------------------------------------------------------------
@node cvs2cl -- Genera ChangeLogs al estilo GNU
@section cvs2cl -- Genera ChangeLogs al estilo GNU

Depende de: Perl

URL: @uref{http://www.red-bean.com/~kfogel/cvs2cl.shtml}

cvs2cl.pl condensa y reformatea la salida del registro de cvs para crear
un archivo ChangeLog al estilo GNU para su proyecto.  Los ChangeLogs son
documentos organizados cronológicamente en los que se muestra el
historial de cambios de un proyecto con un formato diseñado
especialmente para su legibilidad (fíjese en los siguientes ejemplos).

El problema con la orden @w{@code{cvs log}} es que presenta su salida
basándose en cada archivo sin tener en cuenta que un mismo mensaje de
cambios, si aparece prácticamente al mismo tiempo en archivos
diferentes, implica que esas revisiones formaron parte de un único
"commit".  Por esto, resulta desesperante ir leyendo la salida del
registro para hacerse una idea del estado en el que se encuentra el
desarrollo del proyecto.  Realmente sólo puede ver la historia de un
archivo al mismo tiempo.

En el ChangeLog producido por cvs2cl.pl los mensajes de cambios
idénticos se unen de manera que si un único "commit" implica a un grupo
de archivos eso aparece como una única entrada.  Por ejemplo:

@example
floss$ cvs2cl.pl -r
cvs log: Logging .
cvs log: Logging a-subdir
cvs log: Logging a-subdir/subsubdir
cvs log: Logging b-subdir
floss$ cat ChangeLog
...
1999-08-29 05:44  jrandom

   * README (1.6), hello.c (2.1), a-subdir/whatever.c (2.1),
   a-subdir/subsubdir/fish.c (2.1): Haciendo commit desde pcl-cvs 2.9,
	sólo para ir abriendo boca.

1999-08-23 22:48  jrandom

   * README (1.5): [no log message]

1999-08-22 19:34  jrandom

   * README (1.4): trivial change
...
floss$ 
@end example

La primera entrada muestra que se hizo "commit" de cuatro archivos al
mismo tiempo con el mensaje de cambios "Haciendo commit desde pcl-cvs
2.9 sólo para ir abriendo boca".  (Se usó la opción -r para mostrar el 
número de revisión de cada archivo asociado a ese mensaje de cambios.)

Al igual que el propio CVS, cvs2cl.pl toma el directorio actual como una
variable implícita pero trabaja sobre archivos individuales si se le
proporcionan variables de nombre de archivo.
Éstas son algunas de las opciones más usadas:

@itemize

@item

@code{h}, @code{--help}

Muestra su uso (incluyendo una completa lista de opciones).

@item

@code{-r}, @code{--revisions}

Muestra los números de revisión en la salida.  Si se usa junto con -b
las ramas se muestran como NOMBREDELARAMA.N siendo N la revisión de esa
rama.

@item

@code{-t}, @code{--tags}

Muestra las etiquetas (nombres simbólicos) en las revisiones que las tengan.

@item

@code{-b}, @code{--branches}

Muestra el nombre de la rama para las revisiones de esa rama.  (Vea también -r.)

@item

@w{@code{-g OPTS}}, @w{@code{--global-opts OPTS}}

Pasa OPTS como una variable global para cvs.  Internamente cvs2cl.pl
invoca a cvs para hacerse con los datos de registro en crudo; es
entonces cuando OPTS se pasa al cvs en esa invocación.  Por ejemplo,
para obtener un comportamiento tranquilo y compresión, puede hacer esto:

@example
floss$ cvs2cl.pl -g "-Q -z3"
@end example

@item

@w{@code{-l OPTS}}, @w{@code{--log-opts OPTS}}

Similar a -g, sólo que OPTS se pasa como opciones de la orden en vez de
como opciones globales.  Para generar un ChangeLog en el que aparezcan
únicamente los "commits" que tuvieron lugar entre el 26 de Julio y el 15
de Agosto puede hacer esto:

@example
floss$ cvs2cl.pl -l "'-d1999-07-26<1999-08-15'"
@end example

Fíjese en el entrecomillado doble, necesario en Unix porque la shell que
invoca a cvs log (desde dentro de cvs2cl.pl) interpreta el @code{<} como
un símbolo de redirección en shell.  Por esto, las comillas tienen que
colocarse como parte de la variable haciéndose necesario envolverlo todo
con unas comillas adicionales.

@item

@code{-d}, @code{--distributed}

Coloca un ChangeLog individual en cada subdirectorio cubriendo sólo los
"commits" a ese subdirectorio (contrario a crear un ChangeLog que cubra
el directorio desde el que se invoca cvs2cl.pl y todos sus
subdirectorios).

@end itemize

@c -------------------------------------------------------------------
@node cvsq -- Encola órdenes CVS para una posterior conexión
@section cvsq -- Encola órdenes CVS para una posterior conexión

Depende de: Bash

URL: @uref{http://www.volny.cz/v.slavik/lt/cvsq.html}

Esto es lo que tiene que decir Vaclav Slavik <v.slavik@@volny.cz>, el autor 
de cvsq, sobre él:

cvsq significa "cvs encolado" y es un pequeño guión de bash que envuelve
el CVS de Cyclic.  Hace más fácil el trabajo con repositorios CVS para
la gente con conexiones de marcado telefónico porque permite encolar
órdenes CVS y pasárselas al "verdadero cvs" posteriormente.

Por ejemplo, puede hacer "commit" sobre los archivos inmediatamente tras
editarlos, estando desconectado, así que no se olvide de ellos:

@example
    cvsq commit -m "change 1" file1.c
    cvsq commit -m "change 2" file2.c
    cvsq commit -m "change 3" file3.c
@end example

Y luego, cuando se conecte, sólo tendrá que escribir:

@example
    cvsq upload
@end example

y todos los cambios se aplicarán en el repositorio.  Si ocurre algún
error durante el envío de algún archivo éste no se perderá.  En vez de
eso aparecerá un mensaje de error y el archivo continuará en la cola de
cvsq.

Puede utilizar cvsq incluso con órdenes que no tengan sentido estando
desconectado.  En ese caso, la orden se pasa inmediatamente a cvs y no
se encola.  Por ejemplo, puede hacer un cvsq update y éste no se pondrá
en la cola sino que se ejecutará inmediatamente.  De hecho, puede
comenzar a utilizar cvsq como un sustituto de cvs.

cvsq es de dominio público.

@c -------------------------------------------------------------------
@node cvslock -- Bloquea los repositorios para evitar la atomicidad
@section cvslock -- Bloquea los repositorios para evitar la atomicidad

Depende de: compilador de C para la instalación, nada para la ejecución

URL: @uref{ftp://riemann.iam.uni-bonn.de/pub/users/roessler/cvslock/}

Este programa bloquea un repositorio CVS (ya sea su lectura o la
escritura en él) de la misma manera en que lo hace CVS por lo que éste
respetará el bloqueo.  Esto puede resultar útil cuando, por ejemplo,
necesita realizar una copia del repositorio completo y quiera evitar
capturar partes de "commits" o archivos de bloqueo de otra gente.

La distribución de cvslock se encuentra excelentemente empaquete y puede
instalarse de acuerdo con los procedimientos GNU habituales.  He aquí
la transcripción de una sesión de instalación típica:

@example
floss$ zcat cvslock-0.1.tar.gz | tar xvf -
cvslock-0.1/
cvslock-0.1/Makefile.in
cvslock-0.1/README
cvslock-0.1/COPYING
cvslock-0.1/Makefile.am
cvslock-0.1/acconfig.h
cvslock-0.1/aclocal.m4
cvslock-0.1/config.h.in
cvslock-0.1/configure
cvslock-0.1/configure.in
cvslock-0.1/install-sh
cvslock-0.1/missing
cvslock-0.1/mkinstalldirs
cvslock-0.1/stamp-h.in
cvslock-0.1/cvslock.c
cvslock-0.1/cvslock.1
cvslock-0.1/snprintf.c
cvslock-0.1/cvslssh
cvslock-0.1/VERSION
floss$ cd cvslock-0.1
floss$ ./configure
 ...
floss$ make
gcc -DHAVE_CONFIG_H -I. -I. -I.   -g -O2 -c cvslock.c
gcc -g -O2  -o cvslock  cvslock.o  
floss$ make install
 ...
floss$ 
@end example

(Tenga en cuenta que quizá necesite llevar a cabo el make install como
root).

Ahora cvslock ya se encuentra instalado como /usr/local/bin/cvslock.
Cuando lo invoque puede especificar el repositorio con -d o mediante la
variable de entorno $CVSROOT tal y como haría con CVS (en los siguientes
ejemplo se usa -d).  La única variable que se requiere es el nombre de
directorio a bloquear en relación con la raíz del repositorio.  En este
ejemplo no hay subdirectorios por lo que sólo se crea un archivo de
bloqueo:

@example
floss$ ls /usr/local/newrepos/myproj/b-subdir/
random.c,v
floss$ cvslock -d /usr/local/newrepos  myproj/b-subdir
floss$ ls /usr/local/newrepos/myproj/b-subdir/
#cvs.rfl.cvslock.floss.27378  random.c,v
floss$ cvslock -u -p 27378 -d /usr/local/newrepos  myproj/b-subdir
floss$ ls /usr/local/newrepos/myproj/b-subdir/
random.c,v
floss$ 
@end example

Fíjese en que cuando retiré el bloqueo (-u para @code{desbloquear}) tuve
que especificar @w{@code{-p 27378}}.  Eso es porque cvslock usa los ID
de los procesos de Unix al crear los nombres de los archivos de bloqueo
para asegurarse de que sus bloqueos son únicos.  Al desbloquear tiene
que counicarle a cvslock qué instancia de bloqueo eliminar incluso si
sólo hay una.  Por esto, la opción -p le dice a cvslock de qué instancia
previa de sí mismo se está deshaciendo (no obstante, puede usar -p con o
sin -u).

Si va a estar trabajando con el repositorio por un tiempo, realizando
varias operaciones directamente en el sistema de archivos, puede usar la
opción -s para que cvslock inicie una nueva shell por usted.  Consultará
entonces la variable de entorno @code{$SHELL} en su shell actual para
determinar qué intérprete de órdenes usar:

@example
floss$ cvslock -s -d /usr/local/newrepos myproj
@end example

Los bloqueos permanecen hasta que salga del intérprete, momento en el
que se eliminarán automáticamente.  También puede utilizar la opción -c
para ejecutar orden mientras se bloquea el repositorio.  Al igual que
con -s, los archivos de bloqueo se colocan antes de que se inicie la
orden y se retiran una vez haya acabado.  En el siguiente ejemplo
bloqueamos el repositorio durante el tiempo suficiente para mostrar una
lista con todos los archivos de bloqueo:

@example
floss$ cvslock -c 'find . -name "*cvslock*" ' -d /usr/local/newrepos myproj
cvslock: '/usr/local/newrepos/myproj' locked successfully.
cvslock: Starting 'find . -name "*cvslock*" -print'...
./a-subdir/subsubdir/#cvs.rfl.cvslock.floss.27452
./a-subdir/#cvs.rfl.cvslock.floss.27452
./b-subdir/#cvs.rfl.cvslock.floss.27452
./#cvs.rfl.cvslock.floss.27452
floss$ find /usr/local/newrepos/myproj -name "*cvslock*" -print
floss$ 
@end example

La orden (el parámetro de la opción -c) se ejecuta con el directorio del
repositorio especificado como su directorio de trabajo.

De manera predeterminada cvslock crea bloqueos de lectura.  Puede
decirle que use bloqueos de escritura mediante la opción -W.  (Puede
pasarle -R para especificar bloqueos de lectura pero de todas formas ése
es el comportamiento predeterminado.)  Quite siempre todos los bloqueos
una vez haya acabado de manera que los procesos CVS del resto de
usuarios no tengan que esperar innecesariamente.

Tenga en cuenta que cvslock debe ejecutarse en la máquina en la que
reside el repositorio, no puede especificar un repositorio remoto.
(Para más información ejecute @w{@code{man cvslock}}, página de manual
que se habrá instalado al hacer @w{@code{make install}}.)

@c -----------------------------------------------------------
@node Otros paquetes
@section Otros paquetes

Hay disponibles muchos otros paquetes de terceros para CVS.  Los
siguientes son algunos de ellos.

@heading CVSUp (Parte del proyecto FreeBSD)

CVSUp es una eficiente herramienta de replicado genérico con soporte
especial integrado para replicar repositorios CVS.  El sistema operativo
FreeBSD lo usa para distribuir los cambios desde su repositorio
principal de manera que los usuarios pueden mantenerse actualizados de
una manera conveniente.

Para más información sobre CVSUp en general acuda a 
@uref{http://www.polstra.com/projects/freeware/CVSup/}.

Para su uso en FreeBSD en particular mire
@uref{http://www.freebsd.org/handbook/synching.html#CVSUP}.

@heading CVSWeb: una interfaz web para repositorios CVS

CVSWeb ofrece una interfaz web para moverse por repositorios CVS.  Un
nombre más adecuado puede ser "RCSWeb" porque lo que realmente hace es
permitirle es moverse por las revisiones directamente en un repositorio
viendo los mensajes de cambios y los diffs.  Aunque nunca he encontrado
que sea una interfaz particularmente convincente tengo que admitir que
es suficientemente intuitiva y se usa en muchos sitios.

Aunque el software lo desarrolló originalmente Bill Fenner, la versión
que se encuentra actualmente en un desarrollo más activo es la de Henner
Zeller en @uref{http://linux.fh-heilbronn.de/~zeller/cgi/cvsweb.cgi/}.

Quizá también quiera visitar el sitio original de Fenner
@uref{http://www.freebsd.org/~fenner/cvsweb/} y posiblemente el resúmen
de lo que se cuece entorno a CVSWeb que realiza Cyclic Software en
@uref{http://www.cyclic.com/cyclic-pages/web-cvsweb.html}.

Finalmente, si le apeteciese ver a CVSWeb en acción, puede encontrar un
buen ejemplo en @uref{http://sourceware.cygnus.com/cgi-bin/cvsweb.cgi/}.

@heading El directorio contrib/ de CVS

Tal y como mencionamos en @ref{Administracion del Repositorio} CVS viene
con unas cuantas herramientas de terceros que se recogen en el
directorio contrib/.  Aunque no conozco ninguna regla formal para
determinar qué herramientas se distribuyen con CVS puede estar en marcha
un esfuerzo para recopilar las herramientas de terceros más usadas y
colocarlas en contrib/ para que la gente sepa dónde encontrarlas.  Hasta
que eso suceda la mejor manera de encontrar esas herramientas es mirar
en contrib/, en varios sitios web sobre CVS y preguntar en la lista de
correo.

@c ------------------------------------------------------------------
@node Escribir sus propias herramientas
@section Escribir sus propias herramientas

CVS puede parecer a veces una desconcertante recopilación de estándares
improvisados.  Tenemos el formato RCS, varios formatos de salida
(histórico, anotado, de registro, de actualización y muchos otros),
muchos formatos de archivo para la administración de repositorios,
formatos de archivo para las copias de trabajo, el protocolo
cliente/servidor, el protocolo de los archivos de bloqueo... (¿Se ha
mareado ya?  Pues sabe bien qué podría seguir y seguir.)

Por suerte estos estándares guardan bastante consistencia de versión en
versión por lo que si quiere escribir una herramienta para trabajar con
CVS al menos no tendrá que preocuparse de ir detrás de un objetivo en
constante movimiento.  Para cada estándar interno suelen haber unas
pocas personas en la lista de correo @email{info-cvs@@gnu.org} que lo
conocen extremadamente bien (muchos de ellos me ayudaron durante la
redacción de este libro).  También hay documentación que viene con con
la distribución de CVS (especialmente doc/cvs.texinfo,
doc/cvsclient.texi y doc/RCSFILES).  Finalmente está el código fuente de
CVS en sí, la última palabra sobre cualquier cuestión relativa a la
implementación o a su comportamiento.

Con todo esto a su disposición no hay razón para las dudas.  Si se le
ocurre alguna utilidad que haría la vida con CVS más fácil escríbala.
Es muy probable que haya más gente que también la quiera.  A diferencia
de un cambio al propio CVS una pequeña utilidad externa puede alcanzar
una mayor distribución con gran rapidez resultando en una
retroalimentación más rápida para el autor así como una corrección más
rápida de los errores para todos los usuarios.
