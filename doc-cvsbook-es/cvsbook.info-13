This is cvsbook.info, produced by makeinfo version 4.0b from main.texi.

START-INFO-DIR-ENTRY
* El libro de CVS: (cvsbook).           Un tutorial de CVS y referencia.
END-INFO-DIR-ENTRY

Copyright (C) 1999, 2000 Karl Fogel <kfogel@red-bean.com>

This document is free software; you can redistribute and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This document is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

Este manual describe como usar y administrar CVS (Concurrent Versions
System). Es parte un trabajo mayor titulado `Desarrollo de Código
Abierto con CVS'; por favor, lea la introducción para más detalles.

Esta es la versión 1.21 de este manual.


File: cvsbook.info,  Node: Usar pcl-cvs,  Next: Manejo de errores en pcl-cvs,  Prev: Instalar pcl-cvs,  Up: pcl-cvs -- Una interfaz de Emacs para CVS

Usar pcl-cvs
------------

Una vez instalado pcl-cvs es muy fácil de usar.  Ejecute simplemente la
función cvs-update y pcl-cvs le mostrará un búfer con los archivos de su
copia de trabajo que se hayan modificado o actualizado.  A partir de ahí
puede hacer "commits", "diffs" y demás.

Al ser cvs-update el punto de entrada principal le sugiero que lo enlace
con un atajo de teclado conveniente antes de que continuemos.  Yo lo
tengo enlazado a `Ctrl+c v' en mi .emacs:

     (global-set-key "\C-cv" 'cvs-update)

De otra manera también puede ejecutarlo tecleando `M-x cvs-update'
(también conocido como `Esc-x cvs-update').

Cuando invoca a cvs-update éste ejecuta cvs update como si estuviese en
el directorio del archivo que se encuentre en el búfer (tal y como si
hubiese tecleado cvs update estando en ese directorio desde la línea de
órdenes).  He aquí un ejemplo de lo que podría ver desde Emacs:

     PCL-CVS release 1.05 from CVS release $Name:  $.
     Copyright (C) 1992, 1993 Per Cederqvist
     Pcl-cvs comes with absolutely no warranty; for details consult the manual.
     This is free software, and you are welcome to redistribute it under certain
     conditions; again, consult the TeXinfo manual for details.
      Modified ci README.txt
      Modified ci fish.c
     ---------- End ----

Se han modificado dos archivos localmente (en algunas versiones de
pcl-cvs se muestran los subdirectorios donde se encuentran los
archivos).  Lo siguiente es hacer "commit" sobre ambos archivos o sobre
uno de ellos, que es lo que significa el ci en cada línea. Vaya a su
línea y escriba `c'.  Se le conducirá a un búfer de mensajes de cambios
donde podrá escribir un mensaje de cambios tan largo como quiera (la
edición real de los mensajes con los cambios es la mayor ventaja de
pcl-cvs sobre la línea de órdenes).  Introduzca `Ctrl+c Ctrl+c' cuando
haya acabado para completa el "commit".

Si desea hacer "commit" sobre múltiples archivos a la vez de manera que
compartan un mismo mensaje de cambios use primero m para marcar los
archivos sobre los que pretendar hacer un "commit".  Aparecerá un
asterisco junto a cada archivo conforme los vaya marcando:

     PCL-CVS release 1.05 from CVS release $Name:  $.
     Copyright (C) 1992, 1993 Per Cederqvist
     Pcl-cvs comes with absolutely no warranty; for details consult the manual.
     This is free software, and you are welcome to redistribute it under certain
     conditions; again, consult the TeXinfo manual for details.
     * Modified ci README.txt
     * Modified ci fish.c
     ---------- End ----

Ahora cuando escriba c en cualquier lugar se aplicará a todos los
archivos marcados (y únicamente a ellos).  Escriba el mensaje con los
cambios y haga "commit" con `Ctrl+C Ctrl+C' como antes.

También puede escribir `d' para ejecutar cvs diff sobre un archivo (o
sobre unos archivos marcados) y `f' para editarlo con Emacs.  Hay más
órdenes disponibles, use `Ctrl+h' m en el búfer de actualización para
ver qué más puede hacer.


File: cvsbook.info,  Node: Manejo de errores en pcl-cvs,  Next: El futuro de pcl-cvs,  Prev: Usar pcl-cvs,  Up: pcl-cvs -- Una interfaz de Emacs para CVS

Manejo de errores en pcl-cvs
----------------------------

El programa pcl-cvs ha tenido históricamente una manera un tanto
singular de manejar los mensajes de error e informativos de CVS (aunque
quizá esto se haya corregido en las últimas versiones).  Cuando se
encuentra con un mensaje de CVS que no entiende se pone histérico y le
envía a un búfer de correo listo para enviar un informe de error
previamente generado al autor de pcl-cvs.  Desgraciadamente, entre los
mensajes de CVS que pcl-cvs puede no entender se encuentran los
asociados con la resolución de conflictos los cuales, aunque no son muy
comunes, ocurren ciertamente de vez en cuando.

Si pcl-cvs le envía repentinamente a un búfer de correo no se asuste.
Lea el contenido del búfer con cuidado (la salida de CVS culpable
debería aparecer en algún lugar.  Si parece una fusión puede deshacerse
tranquilamente del búfer y volver a ejecutar cvs-update.  Ahora debería
tener éxito al no tener que mostrar ya CVS ningún mensaje sobre la
fusión (porque ya ha tenido lugar).

(Actualización: este problema parece haberse arreglado en las versiones
más recientes de pcl-cvs por lo que puede ignorar este aviso casi con
total seguridad).


File: cvsbook.info,  Node: El futuro de pcl-cvs,  Prev: Manejo de errores en pcl-cvs,  Up: pcl-cvs -- Una interfaz de Emacs para CVS

El futuro pcl-cvs
-----------------

Aunque pueda estar dándole la impresión de que pcl-cvs apenas se
mantiene y supone una inversión de riesgo la inestabilidad parece ser
temporal.  Stefan Monnier es un mantenedor despierto (me he puesto en
contacto con él muchas veces mientras escribía este capítulo y siempre
me ha respondido; ya se encuentra en vías de corregir algunos errores de
la versión 2.9.6).  Seguramente cuando esto se publique podrá descargar
la versión 2.9.7 o posterior con toda tranquilidad.

De hecho, recibí hace poco un correo de Greg Woods, un mantenedor
anterior de pcl-cvs, sobre este asunto que reproduzco aquí con su
permiso:

     De: woods@most.weird.com (Greg A. Woods)
     Sobre: Re: ¿ Estado del mantenimiento de pcl-cvs, estabilidad de las
     "versiones" recientes ?
     Para: kfogel@red-bean.com
     Fecha: Sáb, 29 Ago 1999 18:59:19 -0400 (EDT)
     
     [...]
     He estado usando las versiones de Stefan desde hace ya tiempo y de hecho
     he abandonado mi propia rama.
     
     Ha hecho un trabajo realmente bueno con PCL-CVS y excepto por algunos
     extraños errores en la versión 2.9.6 lo uso a diario y me resulta
     bastante usable (¡e infinitamente más usable con el CVS moderno que con
     el que venía con la distribución de CVS! ;-).
     
     He añadido un archivo pcl-cvs.README a mi sitio FTP para indicar que los
     archivos que hay son bastante antiguos (¡al menos según el tiempo de
     Internet! ;-) y también para proporcionar un enlace al sitio FTP de
     Stefan.
     
     [...]

En un mensaje posterior Greg me dijo que la FSF está considerando
incluir pcl-cvs en su próxima versión de Emacs (20.5) lo que dejaría
obsoletos los consejos anteriores sobre su instalación. En fin, a veces
es difícil lidiar con el software libre.


File: cvsbook.info,  Node: cvsutils -- Utilidades genéricas para usar con CVS,  Next: cvs2cl -- Genera ChangeLogs al estilo GNU,  Prev: pcl-cvs -- Una interfaz de Emacs para CVS,  Up: Herramientas de terceros

cvsutils - Utilidades genéricas para usar con CVS
=================================================

Dependen de: Perl

URLs:

   * `http://www.red-bean.com/cvsutils'

Autores: Tom Tromey (autor original) y Pavel Roskin (mantenedor actual)

El conjunto de pequeños programas conocido como `cvsutils' genralmente
(aunque no siempre) llevan a cabo operaciones "estando desconectados"
en la copia de trabajo de CVS.  Las operaciones estando desconectado
son aquellas que pueden realizarse sin tener que ponerse en contacto
con el repositorio al tiempo que se mantiene la copia de trabajo en un
estado consistente para la próxima vez que contactemos con el
repositorio.  El comportamiento sin línea puede llegar a sernos
extremadamente útil cuando nuestra conexión de red con el repositorio
sea lenta o nada eficaz.

Los programas cvsutils se listan abajo en un orden de utilidad
aproximado (según mi opinión) siendo los primeros los más útiles.  Esto
también los ordena según su seguridad.  La seguridad es algo a tener muy
en cuenta ya que algunas de estas utilidades pueden causar pérdidas de
modificaciones en local o archivos de su copia de trabajo aún operando
de manera correcta.  Por esto, lea las descripciones cuidadosamente
antes de usar estas utilidades.

Esta documentación se centra en la versión 0.1.4.  Asegúrese de leer el
archivo README en cualquier versión posterior para una información más
actualizada.

* Menu:

* cvsu::
* cvsdo::
* cvschroot::
* cvsrmadm::
* cvspurge::
* cvsdiscard::
* cvsco::
* cvsdate::


File: cvsbook.info,  Node: cvsu,  Next: cvsdo,  Up: cvsutils -- Utilidades genéricas para usar con CVS

cvsu
----

Nivel de peligrosidad: ninguna

Contacta con el repositorio: no

Lleva a cabo un cvs update estando desconectado comparando las marcas
temporales de los archivos del disco con las registradas en CVS/Entries.
Así puede averiguar qué archivos se han modificado localmente y cuáles
parece no controlar CVS.  A diferencia de `cvs update' cvsu no se trae
los cambios del repositorio.

Aunque acepta varias opciones cvsu suele invocarse la mayoría de las
veces sin ellas:

     floss$ cvsu
     ? ./bar
     ? ./chapter-10.html
     M ./chapter-10.sgml
     D ./out
     ? ./safe.sh
     D ./tools

Los códigos de la izquierda son como la salida de cvs update excepto
`D' que signfica directorio.  En este ejemplo se muestra que
chapter-10.sgml se ha modificado localmente.  Lo que no aparece en el
ejemplo es que cvsu se ejecutó instantáneamente mientras que un cvs
update normal hubiese requerido medio minuto más o menos con una
conexión lenta.  Ejecute

     floss$ cvsu --help

para ver una lista de opciones.


File: cvsbook.info,  Node: cvsdo,  Next: cvschroot,  Prev: cvsu,  Up: cvsutils -- Utilidades genéricas para usar con CVS

cvsdo
-----

Nivel de peligrosidad: casi ninguna

Contacta con el repositorio: no

Esto puede simular los efectos de cvs add y cvs remove sobre nuestra
copia de trabajo pero sin ponerse en contacto con el repositorio.  Está
claro que aún tendrá que hacer "commit" de los cambios para que tengan
efecto en el repositorio pero al menos las órdenes add y remove en sí
mismas pueden acelerarse de esta manera.  He aquí como usarlo

     floss$ cvsdo add FILENAME

o

     floss$ cvsdo remove FILENAME

Para ver una lista con el resto de opciones ejecute:

     floss$ cvsdo --help


File: cvsbook.info,  Node: cvschroot,  Next: cvsrmadm,  Prev: cvsdo,  Up: cvsutils -- Utilidades genéricas para usar con CVS

cvschroot
---------

Nivel de peligrosidad: baja

Contacta con el repositorio: no

Esto maneja un movimiento del repositorio haciendo que nuestra copia de
trabajo apunte al nuevo.  Esto resulta útil cuando se copia un
repositorio en masa a un nuevo lugar.  Cuando eso sucede no suele
afectar a ninguna de las revisiones pero los archivos CVS/Root (y
posiblemente CVS/Repository) de cada copia de trabajo deben actualizarse
para que apunten al nuevo emplazamiento.  Usar cvschroot es mucho más
rápido que traerse una nueva copia.  Otra ventaja es que no perderá los
cambios que pueda haber hecho en local.

Uso:

     floss$ cvschroot NEW_REPOS

Por ejemplo:

     floss$ cvschroot :pserver:newuser@newhost.wherever.com:/home/cvs/myproj


File: cvsbook.info,  Node: cvsrmadm,  Next: cvspurge,  Prev: cvschroot,  Up: cvsutils -- Utilidades genéricas para usar con CVS

cvsrmadm
--------

Nivel de peligrosidad: bajo a medio

Contacta con el repositorio: no

Esto elimina todos los subdirectorios administrativos CVS/ de su copia
de trabajo dejando una estructura similar a la que crea cvs export.

Aunque no perderá ningún cambio local usando cvsrmadm su copia de
trabajo dejará de serlo.

Úselo con precaución.


File: cvsbook.info,  Node: cvspurge,  Next: cvsdiscard,  Prev: cvsrmadm,  Up: cvsutils -- Utilidades genéricas para usar con CVS

cvspurge
--------

Nivel de peligrosidad: medio

Contacta con el repositorio: no

Elimina todos los archivos no controlados por CVS de su copia de
trabajo.  No deshace ningún cambio local en los archivos que controle
CVS.

Uselo con precaución.


File: cvsbook.info,  Node: cvsdiscard,  Next: cvsco,  Prev: cvspurge,  Up: cvsutils -- Utilidades genéricas para usar con CVS

cvsdiscard
----------

Nivel de peligrosidad: medio a alto

Contacta con el repositorio: quizá

Complemento de cvspurge, en vez de eliminar los archivos desconocidos
pero manteniendo los cambios locales cvsdiscard deshace los cambios
hechos en local (sustituyendo esos archivos con copias nuevas del
repositorio) pero manteniendo los archivos desconocidos.

Uselo con extrema precaución.


File: cvsbook.info,  Node: cvsco,  Next: cvsdate,  Prev: cvsdiscard,  Up: cvsutils -- Utilidades genéricas para usar con CVS

cvsco
-----

Nivel de peligrosidad: alto

Contacta con el repositorio: quizá

Esto es la unión de cvspurge y cvsdiscard.  Deshace cualquier cambio
local y elimina los archivos desconocidos de la copia de trabajo.

Uselo con precaución auténticamente paranoica.


File: cvsbook.info,  Node: cvsdate,  Prev: cvsco,  Up: cvsutils -- Utilidades genéricas para usar con CVS

cvsdate
-------

Este guión se encuentra aparentemente incompleto y quizá nunca se acabe.
(Acuda al archivo README para más detalles).


File: cvsbook.info,  Node: cvs2cl -- Genera ChangeLogs al estilo GNU,  Next: cvslock -- Bloquea los repositorios para evitar la atomicidad,  Prev: cvsutils -- Utilidades genéricas para usar con CVS,  Up: Herramientas de terceros

cvs2cl - Genera ChangeLogs al estilo GNU
========================================

Depende de: Perl

URL: `http://www.red-bean.com/~kfogel/cvs2cl.shtml'

cvs2cl.pl condensa y reformatea la salida del registro de cvs para crear
un archivo ChangeLog al estilo GNU para su proyecto.  Los ChangeLogs son
documentos organizados cronológicamente en los que se muestra el
historial de cambios de un proyecto con un formato diseñado
especialmente para su legibilidad (fíjese en los siguientes ejemplos).

El problema con la orden `cvs log' es que presenta su salida basándose
en cada archivo sin tener en cuenta que un mismo mensaje de cambios, si
aparece prácticamente al mismo tiempo en archivos diferentes, implica
que esas revisiones formaron parte de un único "commit".  Por esto,
resulta desesperante ir leyendo la salida del registro para hacerse una
idea del estado en el que se encuentra el desarrollo del proyecto.
Realmente sólo puede ver la historia de un archivo al mismo tiempo.

En el ChangeLog producido por cvs2cl.pl los mensajes de cambios
idénticos se unen de manera que si un único "commit" implica a un grupo
de archivos eso aparece como una única entrada.  Por ejemplo:

     floss$ cvs2cl.pl -r
     cvs log: Logging .
     cvs log: Logging a-subdir
     cvs log: Logging a-subdir/subsubdir
     cvs log: Logging b-subdir
     floss$ cat ChangeLog
     ...
     1999-08-29 05:44  jrandom
     
        * README (1.6), hello.c (2.1), a-subdir/whatever.c (2.1),
        a-subdir/subsubdir/fish.c (2.1): Haciendo commit desde pcl-cvs 2.9,
     	sólo para ir abriendo boca.
     
     1999-08-23 22:48  jrandom
     
        * README (1.5): [no log message]
     
     1999-08-22 19:34  jrandom
     
        * README (1.4): trivial change
     ...
     floss$

La primera entrada muestra que se hizo "commit" de cuatro archivos al
mismo tiempo con el mensaje de cambios "Haciendo commit desde pcl-cvs
2.9 sólo para ir abriendo boca".  (Se usó la opción -r para mostrar el
número de revisión de cada archivo asociado a ese mensaje de cambios.)

Al igual que el propio CVS, cvs2cl.pl toma el directorio actual como una
variable implícita pero trabaja sobre archivos individuales si se le
proporcionan variables de nombre de archivo.  Éstas son algunas de las
opciones más usadas:

   *  `h', `--help'

     Muestra su uso (incluyendo una completa lista de opciones).

   *  `-r', `--revisions'

     Muestra los números de revisión en la salida.  Si se usa junto con
     -b las ramas se muestran como NOMBREDELARAMA.N siendo N la
     revisión de esa rama.

   *  `-t', `--tags'

     Muestra las etiquetas (nombres simbólicos) en las revisiones que
     las tengan.

   *  `-b', `--branches'

     Muestra el nombre de la rama para las revisiones de esa rama.
     (Vea también -r.)

   *  `-g OPTS', `--global-opts OPTS'

     Pasa OPTS como una variable global para cvs.  Internamente
     cvs2cl.pl invoca a cvs para hacerse con los datos de registro en
     crudo; es entonces cuando OPTS se pasa al cvs en esa invocación.
     Por ejemplo, para obtener un comportamiento tranquilo y
     compresión, puede hacer esto:

          floss$ cvs2cl.pl -g "-Q -z3"

   *  `-l OPTS', `--log-opts OPTS'

     Similar a -g, sólo que OPTS se pasa como opciones de la orden en
     vez de como opciones globales.  Para generar un ChangeLog en el
     que aparezcan únicamente los "commits" que tuvieron lugar entre el
     26 de Julio y el 15 de Agosto puede hacer esto:

          floss$ cvs2cl.pl -l "'-d1999-07-26<1999-08-15'"

     Fíjese en el entrecomillado doble, necesario en Unix porque la
     shell que invoca a cvs log (desde dentro de cvs2cl.pl) interpreta
     el `<' como un símbolo de redirección en shell.  Por esto, las
     comillas tienen que colocarse como parte de la variable haciéndose
     necesario envolverlo todo con unas comillas adicionales.

   *  `-d', `--distributed'

     Coloca un ChangeLog individual en cada subdirectorio cubriendo
     sólo los "commits" a ese subdirectorio (contrario a crear un
     ChangeLog que cubra el directorio desde el que se invoca cvs2cl.pl
     y todos sus subdirectorios).



File: cvsbook.info,  Node: cvsq -- Encola órdenes CVS para una posterior conexión,  Next: Otros paquetes,  Prev: cvslock -- Bloquea los repositorios para evitar la atomicidad,  Up: Herramientas de terceros

cvsq - Encola órdenes CVS para una posterior conexión
=====================================================

Depende de: Bash

URL: `http://www.volny.cz/v.slavik/lt/cvsq.html'

Esto es lo que tiene que decir Vaclav Slavik <v.slavik@volny.cz>, el
autor de cvsq, sobre él:

cvsq significa "cvs encolado" y es un pequeño guión de bash que envuelve
el CVS de Cyclic.  Hace más fácil el trabajo con repositorios CVS para
la gente con conexiones de marcado telefónico porque permite encolar
órdenes CVS y pasárselas al "verdadero cvs" posteriormente.

Por ejemplo, puede hacer "commit" sobre los archivos inmediatamente tras
editarlos, estando desconectado, así que no se olvide de ellos:

         cvsq commit -m "change 1" file1.c
         cvsq commit -m "change 2" file2.c
         cvsq commit -m "change 3" file3.c

Y luego, cuando se conecte, sólo tendrá que escribir:

         cvsq upload

y todos los cambios se aplicarán en el repositorio.  Si ocurre algún
error durante el envío de algún archivo éste no se perderá.  En vez de
eso aparecerá un mensaje de error y el archivo continuará en la cola de
cvsq.

Puede utilizar cvsq incluso con órdenes que no tengan sentido estando
desconectado.  En ese caso, la orden se pasa inmediatamente a cvs y no
se encola.  Por ejemplo, puede hacer un cvsq update y éste no se pondrá
en la cola sino que se ejecutará inmediatamente.  De hecho, puede
comenzar a utilizar cvsq como un sustituto de cvs.

cvsq es de dominio público.


File: cvsbook.info,  Node: cvslock -- Bloquea los repositorios para evitar la atomicidad,  Next: cvsq -- Encola órdenes CVS para una posterior conexión,  Prev: cvs2cl -- Genera ChangeLogs al estilo GNU,  Up: Herramientas de terceros

cvslock - Bloquea los repositorios para evitar la atomicidad
============================================================

Depende de: compilador de C para la instalación, nada para la ejecución

URL: `ftp://riemann.iam.uni-bonn.de/pub/users/roessler/cvslock/'

Este programa bloquea un repositorio CVS (ya sea su lectura o la
escritura en él) de la misma manera en que lo hace CVS por lo que éste
respetará el bloqueo.  Esto puede resultar útil cuando, por ejemplo,
necesita realizar una copia del repositorio completo y quiera evitar
capturar partes de "commits" o archivos de bloqueo de otra gente.

La distribución de cvslock se encuentra excelentemente empaquete y puede
instalarse de acuerdo con los procedimientos GNU habituales.  He aquí
la transcripción de una sesión de instalación típica:

     floss$ zcat cvslock-0.1.tar.gz | tar xvf -
     cvslock-0.1/
     cvslock-0.1/Makefile.in
     cvslock-0.1/README
     cvslock-0.1/COPYING
     cvslock-0.1/Makefile.am
     cvslock-0.1/acconfig.h
     cvslock-0.1/aclocal.m4
     cvslock-0.1/config.h.in
     cvslock-0.1/configure
     cvslock-0.1/configure.in
     cvslock-0.1/install-sh
     cvslock-0.1/missing
     cvslock-0.1/mkinstalldirs
     cvslock-0.1/stamp-h.in
     cvslock-0.1/cvslock.c
     cvslock-0.1/cvslock.1
     cvslock-0.1/snprintf.c
     cvslock-0.1/cvslssh
     cvslock-0.1/VERSION
     floss$ cd cvslock-0.1
     floss$ ./configure
      ...
     floss$ make
     gcc -DHAVE_CONFIG_H -I. -I. -I.   -g -O2 -c cvslock.c
     gcc -g -O2  -o cvslock  cvslock.o
     floss$ make install
      ...
     floss$

(Tenga en cuenta que quizá necesite llevar a cabo el make install como
root).

Ahora cvslock ya se encuentra instalado como /usr/local/bin/cvslock.
Cuando lo invoque puede especificar el repositorio con -d o mediante la
variable de entorno $CVSROOT tal y como haría con CVS (en los siguientes
ejemplo se usa -d).  La única variable que se requiere es el nombre de
directorio a bloquear en relación con la raíz del repositorio.  En este
ejemplo no hay subdirectorios por lo que sólo se crea un archivo de
bloqueo:

     floss$ ls /usr/local/newrepos/myproj/b-subdir/
     random.c,v
     floss$ cvslock -d /usr/local/newrepos  myproj/b-subdir
     floss$ ls /usr/local/newrepos/myproj/b-subdir/
     #cvs.rfl.cvslock.floss.27378  random.c,v
     floss$ cvslock -u -p 27378 -d /usr/local/newrepos  myproj/b-subdir
     floss$ ls /usr/local/newrepos/myproj/b-subdir/
     random.c,v
     floss$

Fíjese en que cuando retiré el bloqueo (-u para `desbloquear') tuve que
especificar `-p 27378'.  Eso es porque cvslock usa los ID de los
procesos de Unix al crear los nombres de los archivos de bloqueo para
asegurarse de que sus bloqueos son únicos.  Al desbloquear tiene que
counicarle a cvslock qué instancia de bloqueo eliminar incluso si sólo
hay una.  Por esto, la opción -p le dice a cvslock de qué instancia
previa de sí mismo se está deshaciendo (no obstante, puede usar -p con o
sin -u).

Si va a estar trabajando con el repositorio por un tiempo, realizando
varias operaciones directamente en el sistema de archivos, puede usar la
opción -s para que cvslock inicie una nueva shell por usted.  Consultará
entonces la variable de entorno `$SHELL' en su shell actual para
determinar qué intérprete de órdenes usar:

     floss$ cvslock -s -d /usr/local/newrepos myproj

Los bloqueos permanecen hasta que salga del intérprete, momento en el
que se eliminarán automáticamente.  También puede utilizar la opción -c
para ejecutar orden mientras se bloquea el repositorio.  Al igual que
con -s, los archivos de bloqueo se colocan antes de que se inicie la
orden y se retiran una vez haya acabado.  En el siguiente ejemplo
bloqueamos el repositorio durante el tiempo suficiente para mostrar una
lista con todos los archivos de bloqueo:

     floss$ cvslock -c 'find . -name "*cvslock*" ' -d /usr/local/newrepos myproj
     cvslock: '/usr/local/newrepos/myproj' locked successfully.
     cvslock: Starting 'find . -name "*cvslock*" -print'...
     ./a-subdir/subsubdir/#cvs.rfl.cvslock.floss.27452
     ./a-subdir/#cvs.rfl.cvslock.floss.27452
     ./b-subdir/#cvs.rfl.cvslock.floss.27452
     ./#cvs.rfl.cvslock.floss.27452
     floss$ find /usr/local/newrepos/myproj -name "*cvslock*" -print
     floss$

La orden (el parámetro de la opción -c) se ejecuta con el directorio del
repositorio especificado como su directorio de trabajo.

De manera predeterminada cvslock crea bloqueos de lectura.  Puede
decirle que use bloqueos de escritura mediante la opción -W.  (Puede
pasarle -R para especificar bloqueos de lectura pero de todas formas ése
es el comportamiento predeterminado.)  Quite siempre todos los bloqueos
una vez haya acabado de manera que los procesos CVS del resto de
usuarios no tengan que esperar innecesariamente.

Tenga en cuenta que cvslock debe ejecutarse en la máquina en la que
reside el repositorio, no puede especificar un repositorio remoto.
(Para más información ejecute `man cvslock', página de manual que se
habrá instalado al hacer `make install'.)


File: cvsbook.info,  Node: Otros paquetes,  Next: Escribir sus propias herramientas,  Prev: cvsq -- Encola órdenes CVS para una posterior conexión,  Up: Herramientas de terceros

Otros paquetes
==============

Hay disponibles muchos otros paquetes de terceros para CVS.  Los
siguientes son algunos de ellos.

CVSUp (Parte del proyecto FreeBSD)
==================================

CVSUp es una eficiente herramienta de replicado genérico con soporte
especial integrado para replicar repositorios CVS.  El sistema operativo
FreeBSD lo usa para distribuir los cambios desde su repositorio
principal de manera que los usuarios pueden mantenerse actualizados de
una manera conveniente.

Para más información sobre CVSUp en general acuda a
`http://www.polstra.com/projects/freeware/CVSup/'.

Para su uso en FreeBSD en particular mire
`http://www.freebsd.org/handbook/synching.html#CVSUP'.

CVSWeb: una interfaz web para repositorios CVS
==============================================

CVSWeb ofrece una interfaz web para moverse por repositorios CVS.  Un
nombre más adecuado puede ser "RCSWeb" porque lo que realmente hace es
permitirle es moverse por las revisiones directamente en un repositorio
viendo los mensajes de cambios y los diffs.  Aunque nunca he encontrado
que sea una interfaz particularmente convincente tengo que admitir que
es suficientemente intuitiva y se usa en muchos sitios.

Aunque el software lo desarrolló originalmente Bill Fenner, la versión
que se encuentra actualmente en un desarrollo más activo es la de Henner
Zeller en `http://linux.fh-heilbronn.de/~zeller/cgi/cvsweb.cgi/'.

Quizá también quiera visitar el sitio original de Fenner
`http://www.freebsd.org/~fenner/cvsweb/' y posiblemente el resúmen de
lo que se cuece entorno a CVSWeb que realiza Cyclic Software en
`http://www.cyclic.com/cyclic-pages/web-cvsweb.html'.

Finalmente, si le apeteciese ver a CVSWeb en acción, puede encontrar un
buen ejemplo en `http://sourceware.cygnus.com/cgi-bin/cvsweb.cgi/'.

El directorio contrib/ de CVS
=============================

Tal y como mencionamos en *Note Administracion del Repositorio:: CVS
viene con unas cuantas herramientas de terceros que se recogen en el
directorio contrib/.  Aunque no conozco ninguna regla formal para
determinar qué herramientas se distribuyen con CVS puede estar en marcha
un esfuerzo para recopilar las herramientas de terceros más usadas y
colocarlas en contrib/ para que la gente sepa dónde encontrarlas.  Hasta
que eso suceda la mejor manera de encontrar esas herramientas es mirar
en contrib/, en varios sitios web sobre CVS y preguntar en la lista de
correo.


File: cvsbook.info,  Node: Escribir sus propias herramientas,  Prev: Otros paquetes,  Up: Herramientas de terceros

Escribir sus propias herramientas
=================================

CVS puede parecer a veces una desconcertante recopilación de estándares
improvisados.  Tenemos el formato RCS, varios formatos de salida
(histórico, anotado, de registro, de actualización y muchos otros),
muchos formatos de archivo para la administración de repositorios,
formatos de archivo para las copias de trabajo, el protocolo
cliente/servidor, el protocolo de los archivos de bloqueo... (¿Se ha
mareado ya?  Pues sabe bien qué podría seguir y seguir.)

Por suerte estos estándares guardan bastante consistencia de versión en
versión por lo que si quiere escribir una herramienta para trabajar con
CVS al menos no tendrá que preocuparse de ir detrás de un objetivo en
constante movimiento.  Para cada estándar interno suelen haber unas
pocas personas en la lista de correo <info-cvs@gnu.org> que lo conocen
extremadamente bien (muchos de ellos me ayudaron durante la redacción
de este libro).  También hay documentación que viene con con la
distribución de CVS (especialmente doc/cvs.texinfo, doc/cvsclient.texi
y doc/RCSFILES).  Finalmente está el código fuente de CVS en sí, la
última palabra sobre cualquier cuestión relativa a la implementación o
a su comportamiento.

Con todo esto a su disposición no hay razón para las dudas.  Si se le
ocurre alguna utilidad que haría la vida con CVS más fácil escríbala.
Es muy probable que haya más gente que también la quiera.  A diferencia
de un cambio al propio CVS una pequeña utilidad externa puede alcanzar
una mayor distribución con gran rapidez resultando en una
retroalimentación más rápida para el autor así como una corrección más
rápida de los errores para todos los usuarios.


File: cvsbook.info,  Node: Índice,  Next: GNU General Public License,  Prev: Herramientas de terceros,  Up: Top

Índice
******

Perdón, el índice está todavía en desarrollo.

Aunque el formato "online" permite búsquedas, decidí que la incompletud
del índice no debía retrasar la publicación de los capítulos.  Espero
tener el índice terminado razonablemente pronto. También son
bienvenidos los indexadores voluntarios - por favor, mande un email a
<bug-cvsbook@red-bean.com> si está interesado.


File: cvsbook.info,  Node: GNU General Public License,  Next: GNU Free Documentation License,  Prev: Índice,  Up: Top

GNU General Public License
**************************

     GNU General Public License
     
     Version 2, June 1991
     
     Copyright (C) 1989, 1991 Free Software Foundation, Inc.
     59 Temple Place - Suite 330, Boston, MA  02111-1307, USA
     
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.
     
     Preamble
     
     The licenses for most software are designed to take away your freedom to
     share and change it. By contrast, the GNU General Public License is intended
     to guarantee your freedom to share and change free software--to make sure
     the software is free for all its users. This General Public License applies
     to most of the Free Software Foundation's software and to any other program
     whose authors commit to using it. (Some other Free Software Foundation
     software is covered by the GNU Library General Public License instead.) You
     can apply it to your programs, too.
     
     When we speak of free software, we are referring to freedom, not price. Our
     General Public Licenses are designed to make sure that you have the freedom
     to distribute copies of free software (and charge for this service if you
     wish), that you receive source code or can get it if you want it, that you
     can change the software or use pieces of it in new free programs; and that
     you know you can do these things.
     
     To protect your rights, we need to make restrictions that forbid anyone to
     deny you these rights or to ask you to surrender the rights. These
     restrictions translate to certain responsibilities for you if you distribute
     copies of the software, or if you modify it.
     
     For example, if you distribute copies of such a program, whether gratis or
     for a fee, you must give the recipients all the rights that you have. You
     must make sure that they, too, receive or can get the source code. And you
     must show them these terms so they know their rights.
     
     We protect your rights with two steps: (1) copyright the software, and (2)
     offer you this license which gives you legal permission to copy, distribute
     and/or modify the software.
     
     Also, for each author's protection and ours, we want to make certain that
     everyone understands that there is no warranty for this free software. If
     the software is modified by someone else and passed on, we want its
     recipients to know that what they have is not the original, so that any
     problems introduced by others will not reflect on the original authors'
     reputations.
     
     Finally, any free program is threatened constantly by software patents. We
     wish to avoid the danger that redistributors of a free program will
     individually obtain patent licenses, in effect making the program
     proprietary. To prevent this, we have made it clear that any patent must be
     licensed for everyone's free use or not licensed at all.
     
     The precise terms and conditions for copying, distribution and modification
     follow.
     
     TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
     
     0. This License applies to any program or other work which contains a notice
     placed by the copyright holder saying it may be distributed under the terms
     of this General Public License. The "Program", below, refers to any such
     program or work, and a "work based on the Program" means either the Program
     or any derivative work under copyright law: that is to say, a work
     containing the Program or a portion of it, either verbatim or with
     modifications and/or translated into another language. (Hereinafter,
     translation is included without limitation in the term "modification".) Each
     licensee is addressed as "you".
     
     Activities other than copying, distribution and modification are not covered
     by this License; they are outside its scope. The act of running the Program
     is not restricted, and the output from the Program is covered only if its
     contents constitute a work based on the Program (independent of having been
     made by running the Program). Whether that is true depends on what the
     Program does.
     
     1. You may copy and distribute verbatim copies of the Program's source code
     as you receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice and
     disclaimer of warranty; keep intact all the notices that refer to this
     License and to the absence of any warranty; and give any other recipients of
     the Program a copy of this License along with the Program.
     
     You may charge a fee for the physical act of transferring a copy, and you
     may at your option offer warranty protection in exchange for a fee.
     
     2. You may modify your copy or copies of the Program or any portion of it,
     thus forming a work based on the Program, and copy and distribute such
     modifications or work under the terms of Section 1 above, provided that you
     also meet all of these conditions:
     
        * a) You must cause the modified files to carry prominent notices stating
          that you changed the files and the date of any change.
     
        * b) You must cause any work that you distribute or publish, that in
          whole or in part contains or is derived from the Program or any part
          thereof, to be licensed as a whole at no charge to all third parties
          under the terms of this License.
     
        * c) If the modified program normally reads commands interactively when
          run, you must cause it, when started running for such interactive use
          in the most ordinary way, to print or display an announcement including
          an appropriate copyright notice and a notice that there is no warranty
          (or else, saying that you provide a warranty) and that users may
          redistribute the program under these conditions, and telling the user
          how to view a copy of this License. (Exception: if the Program itself
          is interactive but does not normally print such an announcement, your
          work based on the Program is not required to print an announcement.)
     
     These requirements apply to the modified work as a whole. If identifiable
     sections of that work are not derived from the Program, and can be
     reasonably considered independent and separate works in themselves, then
     this License, and its terms, do not apply to those sections when you
     distribute them as separate works. But when you distribute the same sections
     as part of a whole which is a work based on the Program, the distribution of
     the whole must be on the terms of this License, whose permissions for other
     licensees extend to the entire whole, and thus to each and every part
     regardless of who wrote it.
     
     Thus, it is not the intent of this section to claim rights or contest your
     rights to work written entirely by you; rather, the intent is to exercise
     the right to control the distribution of derivative or collective works
     based on the Program.
     
     In addition, mere aggregation of another work not based on the Program with
     the Program (or with a work based on the Program) on a volume of a storage
     or distribution medium does not bring the other work under the scope of this
     License.
     
     3. You may copy and distribute the Program (or a work based on it, under
     Section 2) in object code or executable form under the terms of Sections 1
     and 2 above provided that you also do one of the following:
     
        * a) Accompany it with the complete corresponding machine-readable source
          code, which must be distributed under the terms of Sections 1 and 2
          above on a medium customarily used for software interchange; or,
     
        * b) Accompany it with a written offer, valid for at least three years,
          to give any third party, for a charge no more than your cost of
          physically performing source distribution, a complete machine-readable
          copy of the corresponding source code, to be distributed under the
          terms of Sections 1 and 2 above on a medium customarily used for
          software interchange; or,
     
        * c) Accompany it with the information you received as to the offer to
          distribute corresponding source code. (This alternative is allowed only
          for noncommercial distribution and only if you received the program in
          object code or executable form with such an offer, in accord with
          Subsection b above.)
     
     The source code for a work means the preferred form of the work for making
     modifications to it. For an executable work, complete source code means all
     the source code for all modules it contains, plus any associated interface
     definition files, plus the scripts used to control compilation and
     installation of the executable. However, as a special exception, the source
     code distributed need not include anything that is normally distributed (in
     either source or binary form) with the major components (compiler, kernel,
     and so on) of the operating system on which the executable runs, unless that
     component itself accompanies the executable.
     
     If distribution of executable or object code is made by offering access to
     copy from a designated place, then offering equivalent access to copy the
     source code from the same place counts as distribution of the source code,
     even though third parties are not compelled to copy the source along with
     the object code.
     
     4. You may not copy, modify, sublicense, or distribute the Program except as
     expressly provided under this License. Any attempt otherwise to copy,
     modify, sublicense or distribute the Program is void, and will automatically
     terminate your rights under this License. However, parties who have received
     copies, or rights, from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.
     
     5. You are not required to accept this License, since you have not signed
     it. However, nothing else grants you permission to modify or distribute the
     Program or its derivative works. These actions are prohibited by law if you
     do not accept this License. Therefore, by modifying or distributing the
     Program (or any work based on the Program), you indicate your acceptance of
     this License to do so, and all its terms and conditions for copying,
     distributing or modifying the Program or works based on it.
     
     6. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from the original
     licensor to copy, distribute or modify the Program subject to these terms
     and conditions. You may not impose any further restrictions on the
     recipients' exercise of the rights granted herein. You are not responsible
     for enforcing compliance by third parties to this License.
     
     7. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent issues),
     conditions are imposed on you (whether by court order, agreement or
     otherwise) that contradict the conditions of this License, they do not
     excuse you from the conditions of this License. If you cannot distribute so
     as to satisfy simultaneously your obligations under this License and any
     other pertinent obligations, then as a consequence you may not distribute
     the Program at all. For example, if a patent license would not permit
     royalty-free redistribution of the Program by all those who receive copies
     directly or indirectly through you, then the only way you could satisfy both
     it and this License would be to refrain entirely from distribution of the
     Program.
     
     If any portion of this section is held invalid or unenforceable under any
     particular circumstance, the balance of the section is intended to apply and
     the section as a whole is intended to apply in other circumstances.
     
     It is not the purpose of this section to induce you to infringe any patents
     or other property right claims or to contest validity of any such claims;
     this section has the sole purpose of protecting the integrity of the free
     software distribution system, which is implemented by public license
     practices. Many people have made generous contributions to the wide range of
     software distributed through that system in reliance on consistent
     application of that system; it is up to the author/donor to decide if he or
     she is willing to distribute software through any other system and a
     licensee cannot impose that choice.
     
     This section is intended to make thoroughly clear what is believed to be a
     consequence of the rest of this License.
     
     8. If the distribution and/or use of the Program is restricted in certain
     countries either by patents or by copyrighted interfaces, the original
     copyright holder who places the Program under this License may add an
     explicit geographical distribution limitation excluding those countries, so
     that distribution is permitted only in or among countries not thus excluded.
     In such case, this License incorporates the limitation as if written in the
     body of this License.
     
     9. The Free Software Foundation may publish revised and/or new versions of
     the General Public License from time to time. Such new versions will be
     similar in spirit to the present version, but may differ in detail to
     address new problems or concerns.
     
     Each version is given a distinguishing version number. If the Program
     specifies a version number of this License which applies to it and "any
     later version", you have the option of following the terms and conditions
     either of that version or of any later version published by the Free
     Software Foundation. If the Program does not specify a version number of
     this License, you may choose any version ever published by the Free Software
     Foundation.
     
     10. If you wish to incorporate parts of the Program into other free programs
     whose distribution conditions are different, write to the author to ask for
     permission. For software which is copyrighted by the Free Software
     Foundation, write to the Free Software Foundation; we sometimes make
     exceptions for this. Our decision will be guided by the two goals of
     preserving the free status of all derivatives of our free software and of
     promoting the sharing and reuse of software generally.
     
     NO WARRANTY
     
     11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR
     THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
     OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
     PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
     OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO
     THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM
     PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
     CORRECTION.
     
     12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
     WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
     REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
     INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
     OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO
     LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
     THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
     POSSIBILITY OF SUCH DAMAGES.
     
     END OF TERMS AND CONDITIONS
     
     How to Apply These Terms to Your New Programs
     
     If you develop a new program, and you want it to be of the greatest possible
     use to the public, the best way to achieve this is to make it free software
     which everyone can redistribute and change under these terms.
     
     To do so, attach the following notices to the program. It is safest to
     attach them to the start of each source file to most effectively convey the
     exclusion of warranty; and each file should have at least the "copyright"
     line and a pointer to where the full notice is found.
     
     one line to give the program's name and an idea of what it does.
     Copyright (C) yyyy  name of author
     
     This program is free software; you can redistribute it and/or
     modify it under the terms of the GNU General Public License
     as published by the Free Software Foundation; either version 2
     of the License, or (at your option) any later version.
     
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
     
     Also add information on how to contact you by electronic and paper mail.
     
     If the program is interactive, make it output a short notice like this when
     it starts in an interactive mode:
     
     Gnomovision version 69, Copyright (C) yyyy name of author
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
     type `show w'.  This is free software, and you are welcome
     to redistribute it under certain conditions; type `show c'
     for details.
     
     The hypothetical commands `show w' and `show c' should show the appropriate
     parts of the General Public License. Of course, the commands you use may be
     called something other than `show w' and `show c'; they could even be
     mouse-clicks or menu items--whatever suits your program.
     
     You should also get your employer (if you work as a programmer) or your
     school, if any, to sign a "copyright disclaimer" for the program, if
     necessary. Here is a sample; alter the names:
     
     Yoyodyne, Inc., hereby disclaims all copyright
     interest in the program `Gnomovision'
     (which makes passes at compilers) written
     by James Hacker.
     
     signature of Ty Coon, 1 April 1989
     Ty Coon, President of Vice
     
     This General Public License does not permit incorporating your program into
     proprietary programs. If your program is a subroutine library, you may
     consider it more useful to permit linking proprietary applications with the
     library. If this is what you want to do, use the GNU Library General Public
     License instead of this License.

