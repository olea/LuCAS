<chapter><title>Visión general de un sistema GNU/Linux</title>

<blockquote><para><quote>"Dios observó todo lo que había hecho, y vio que era muy bueno"</quote> -- 
Versión de la Biblia del Rey James. Génesis 1:31</para></blockquote>
<para>
En este capítulo se proporciona una visión general de un sistema GNU/Linux. 
En primer lugar se describen los principales servicios que ofrece el sistema operativo. 
A continuación, se explican con una considerable falta de detalle los programas que 
implementan dichos servicios. El propósito de este capítulo es hacer posible la 
comprensión del sistema en su conjunto, por lo cual cada parte en concreto se 
encuentra descrita en profundidad en capítulos posteriores.
</para>


<sect1><title>Las diferentes partes de un sistema operativo</title>

<para>
Un sistema operativo tipo UNIX consiste en un <glossterm>núcleo</glossterm> (o Kernel) y algunos programas de sistema. Existen también diversos <glossterm>programas de aplicación</glossterm> con los que podemos trabajar. 
El núcleo es el corazón del sistema operativo: Mantiene el control de los archivos sobre el disco, inicia los programas y los ejecuta de forma concurrente, asigna memoria y otros recursos a los distintos procesos, recibe y envía paquetes desde y hacia la red, etc. El núcleo hace muy poco por si solo, pero proporciona las herramientas básicas con las que se pueden construir los demás servicios. Además, evita que se pueda acceder al hardware directamente, forzando a todos a utilizar las herramientas provistas. Esta manera de trabajar del núcleo otorga cierta protección a los usuarios entre sí.
Las herramientas del núcleo se utilizan a través de las llamadas al sistema. Se puede encontrar información adicional sobre este tema consultando la sección 2 de este manual.
</para>

<footnote><para>De hecho, a menudo es considerado erróneamente 
		como el sistema operativo en sí, aunque no lo es.
		Un sistema operativo proporciona muchos más servicios que el núcleo 		por sí mismo.</para></footnote>




<para>
Los programas de sistema utilizan las herramientas provistas por el núcleo 
para implementar varios servicios requeridos en un sistema operativo. Los 
programas de sistema (y todos los demás programas), se ejecutan 'por encima del 
núcleo', en lo que se denomina modo usuario. La diferencia entre los programas 
de aplicación y los de sistema es su finalidad: las aplicaciones tienen el 
propósito de realizar tareas útiles a los usuarios (o de jugar, si se 
tratara de un juego), mientras que los programas de sistema son necesarios 
para que el sistema funcione. Un procesador de textos es una aplicación; <command>mount</command> es un programa de sistema. La diferencia a menudo es confusa, y de cualquier manera, es solo importante para los categorizadores compulsivos.
</para>

<para>
Un sistema operativo también puede contener compiladores y sus 
correspondientes librerías (GCC y la librería de C en particular para 
GNU/Linux), aunque no todos los compiladores de todos los lenguajes de 
programación son necesariamente parte del sistema operativo. También puede haber 
documentación, y en algunas ocasiones juegos. Tradicionalmente, el sistema 
operativo está definido por el contenido de los discos o cintas de 
instalación; con GNU/Linux esta definición no puede aplicarse, debido a que se 
encuentra repartido sobre distintos sitios FTP del mundo.
</para>

</sect1>

<sect1><title>Partes importantes del núcleo</title>

<para>El núcleo de un sistema GNU/Linux consta de varias partes importantes: gestión de procesos, gestión de memoria,  controladores para dispositivos de hardware, controladores para sistemas de archivos, gestión de la red, y otras partes varias.<xref linkend="kerneloverview"/>muestra algunas de éstas partes.</para>

<figure id="kerneloverview" float="1">
<title>Partes más importantes del núcleo de GNU/Linux</title>
<graphic fileref="figuras/overview-kernel.png"/>
</figure>

<para>
Probablemente las partes más importantes del núcleo (nada funcionaría sin 
ellas) son la gestión de memoria y la gestión de procesos. El gestor de memoria se encarga de asignar áreas de memoria y de espacio de intercambio a los procesos, partes del núcleo, y también a la caché del buffer.
La gestión de procesos se encarga de crear procesos e implementar la
multitarea intercambiando los procesos activos en el procesador.
</para>

<para>
Al más bajo nivel, el núcleo contiene un controlador de dispositivo de 
hardware para cada tipo de hardware que soporta. Debido a que el mundo 
se encuentra lleno de diferentes tipos de hardware, el número de controladores 
es grande. Existen frecuentemente, muchas piezas similares de hardware que difieren en cómo son controladas por el software. Esta similaridad hace posible tener clases generales de controladores que soportan operaciones similares; cada miembro de la clase tiene la misma interfaz de cara al resto del núcleo pero difiere de los demás miembros en la forma de implementar las operaciones. Por ejemplo, todos los controladores de disco son parecidos para el resto del núcleo, P.ej., todos tienen operaciones como "iniciar la unidad", "leer el sector n", y "escribir en el sector n".
</para>

<para>
Algunos servicios de software provistos por el núcleo tienen propiedades 
similares, y pueden de esta manera englobarse dentro de clases. Por 
ejemplo, los diferentes protocolos de red fueron englobados dentro de una interfaz de programación, la librería de socket BSD. Otro ejemplo es la capa del <glossterm>sistema de archivos virtual</glossterm> (VFS) que abstrae las operaciones de los sistemas de archivos de sus implementaciones. Cada tipo de sistema de archivos provee una implementación de cada operación. Cuando alguna entidad intenta utilizar un sistema de archivos, la petición se realiza a través del VFS, el cual la encamina al controlador del sistema de archivos correcto.
</para>

</sect1>

<sect1><title>Servicios principales en un sistema UNIX</title>

<para>
En esta sección se describen algunos de los servicios más importantes en UNIX, 
pero sin mucho detalle. Se describirán más profundamente en capítulos 
posteriores.
</para>


<sect2><title><command>init</command></title>

<para>
El servicio individual más importante en un sistema UNIX es provisto por 
<command>init</command>. <command>init</command> es el primer proceso que se inicia en todo sistema UNIX, siendo la última acción que el núcleo realiza al arrancar. 
Cuando init comienza su ejecución, continúa con el proceso de arranque del 
sistema, realizando varias tareas de inicio (chequear y montar sistemas de 
archivos, iniciar demonios, etc.).
</para>

<para>
La lista exacta de cosas que init realiza depende del sistema tipo UNIX con el que estemos trabajando; existen varios para elegir. Init normalmente proporciona el concepto de modo de usuario individual, en el cual nadie puede iniciar una sesión y root utiliza un intérprete de comandos en la consola; el modo usual es llamado modo multiusuario. Algunos sistemas UNIX generalizan esto como <glossterm>niveles de ejecución</glossterm>;Así, los modos individual y multiusuario son considerados dos niveles de ejecución, y pueden existir otros niveles adicionales para, por ejemplo, ejecutar X-Windows en la consola.
</para>

<para>
GNU/Linux permite tener hasta 10 niveles de ejecución distintos, 0-9, pero 
normalmente solo algunos de estos niveles están definidos por defecto. El nivel 
de ejecución 0 se define como "system halt" (sistema detenido). El nivel de 
ejecución 1 se define como "single user mode" (modo de usuario 
individual). El nivel de ejecución 6 se define como "system reboot" 
(reinicio del sistema). Los niveles de ejecución restantes dependen de como 
la distribución particular de GNU/Linux los haya definido, y varían 
significativamente entre distribuciones. Observando el contenido del archivo 
<filename>/etc/inittab</filename> podemos hacernos una idea de los niveles de ejecución preestablecidos en nuestro sistema y de como se encuentran definidos.
</para>

<para>
En el funcionamiento normal, <command>init</command> se asegura de que getty se encuentre trabajando para permitir que los usuarios puedan iniciar una sesión, y también se encarga de adoptar procesos huérfanos (aquellos cuyo proceso padre murió; en UNIX <emphasis>todos</emphasis> los procesos deben estar en un árbol individual, y por esta razón los procesos huérfanos deben ser adoptados).
</para>

<para>
Al cerrar el sistema, es <command>init</command> quien se encarga de matar todos los procesos restantes, desmontar todos los sistemas de archivos, y por último detener el procesador, además de cualquier otra cosa que haya sido configurado para hacer.
</para>

</sect2>


<sect2>
<title>Inicio de sesiones desde terminales</title>

<para>
El inicio de sesiones desde terminales (a través de líneas serie) y la 
consola (cuando no se está ejecutando X-Windows) es suministrado por el programa 
<command>getty</command>. <command>init</command> inicia una instancia independiente de getty por cada terminal en el que está permitido iniciar sesiones. <command>Getty</command> lee el nombre de usuario y ejecuta el programa login, el cual se encarga de leer la password. Si el nombre de usuario y la password son correctas, <command>login</command> ejecuta el intérprete de comandos. 
Al finalizar el intérprete de comandos (en el caso en que, por ejemplo, el 
usuario finaliza su sesión; o cuando login finaliza debido a que no 
concuerdan el nombre de usuario y la password), <command>init</command> se entera de este suceso e inicia una nueva instancia de <command>getty</command>. El núcleo no tiene noción sobre los inicios de sesiones, esto es gestionado totalmente por los programas del sistema.
</para>

</sect2>

<sect2>
<title>Syslog</title>

<para>
El núcleo y muchos <glossterm>programas de sistema</glossterm> producen mensajes de error, de advertencia y de otros tipos. La mayoría de las veces, es importante que puedan ser visualizados mas tarde, o tal vez mucho después, por lo que tales 
mensajes deben guardarse en un archivo. El programa que realiza esta tarea 
es <command>syslog</command>. Syslog puede ser configurado para ordenar los mensajes en diferentes archivos, de acuerdo a quien lo emite o al grado de importancia. 
Por ejemplo, los mensajes del núcleo son frecuentemente dirigidos a un archivo 
separado de los demás, debido a que son más importantes, y necesitan ser leídos regularmente para detectar problemas.
</para>

</sect2>

<sect2>
<title>Ejecución periódica de comandos: <command>cron</command> y <command>at</command></title>

<para>
Los administradores de sistemas y los usuarios, a menudo necesitan 
ejecutar comandos periódicamente. Como ejemplo, supongamos que el administrador 
del sistema desea ejecutar un comando que elimine los archivos más antiguos de 
los directorios con archivos temporales (<filename>/tmp</filename> y <filename>/var/tmp</filename>) para evitar así que el disco se llene, debido a que no todos los programas eliminan correctamente los archivos temporales que ellos mismos generan.
</para>

<para>
El servicio <command>cron</command> se configura para que realice la tarea anterior. Cada usuario tiene un archivo <filename>crontab</filename>, en el cual se listan los comandos que se desea ejecutar y la fecha y hora de ejecución. El servicio <command>cron</command> se encarga con precisión de iniciar cada comando, a la fecha y hora adecuada de acuerdo a lo especificado en cada archivo crontab.
</para>

<para>
El servicio <command>at</command> es similar a <command>cron</command>, pero este se inicia únicamente una vez: el comando es ejecutado a la hora especificada, pero esta ejecución no vuelve a repetirse.
</para>

<para>
Se puede encontrar información adicional sobre cron(1), crontab(5), at(1) y atd(8)
en las páginas de manual.
</para>

</sect2>

<sect2>
<title>Interfaz gráfica de usuario (GUI)</title>

<para>
UNIX y GNU/Linux no incorporan la interfaz gráfica de usuario dentro del núcleo; en 
su lugar, es implementada por programas a nivel de usuario. Esto se 
aplica tanto a entornos gráficos como al modo texto.
</para>

<para>
Esta disposición hace que el sistema sea más flexible, pero tiene la 
desventaja de que, al ser simple implementar una interfaz de usuario 
diferente para cada programa, dificulta el aprendizaje del sistema.
</para>

<para>
El entorno gráfico principalmente utilizado con GNU/Linux se llama Sistema X-Windows (X para abreviar). X tampoco implementa por sí mismo una interfaz de usuario, sino solo un sistema de ventanas. Es decir, las herramientas base con las cuales se puede construir una interfaz gráfica de usuario. Algunos administradores 
de ventanas populares son: fvwm, icewm, blackbox y windowmaker. Existen 
también dos populares administradores de escritorios: KDE y Gnome.
</para>

</sect2>


<sect2>
<title>Redes</title>

<para>
Una red se construye al conectar dos o más ordenadores para que puedan 
comunicarse entre sí. Los métodos actuales de conexión y comunicación son ligeramente complicados, pero el resultado final es muy útil.
</para>

<para>
Los sistemas operativos UNIX tienen muchas características de red. La mayoría de los servicios básicos (sistemas de archivos, impresión, copias de 
seguridad, etc) pueden utilizarse a través de la red. Aprovechar estas 
características puede ayudar a que la administración del sistema sea más 
fácil debido a que permiten tener una administración centralizada, a la vez que 
disfrutamos de los beneficios de la microinformática y la informática 
distribuida, tales como costes más bajos y mejor tolerancia a fallos.
</para>

<para>
De cualquier modo, este libro sólo aborda superficialmente la teoría de 
redes; Se puede encontrar información adicional sobre este tema en La Guía De Administración De Redes con  Linux, incluyendo una descripción básica de como operan las redes.
</para>

</sect2>

<sect2>
<title>Inicio de sesiones a través de la red</title>

<para>
Los inicios de sesión a través de la red funcionan de un modo un poco 
diferente al inicio de sesiones normales. Existe una línea serie 
física separada para cada terminal a través de la cual es posible iniciar 
sesión. Por cada persona iniciando una sesión a través de la red existe una 
conexión de red virtual, y puede haber cualquier número (no hay límite). 
Por lo tanto, no es posible ejecutar getty por separado por cada conexión 
virtual posible. Existen también varias maneras diferentes de iniciar una 
sesión a través de la red, las principales en redes TCP/IP son telnet y rlogin 
[1] .
</para>

<footnote><para>Al menos puede haber muchas. Dado que el ancho de banda es un 				recurso escaso, existe aún en la práctica algún límite al      				número de inicios de sesión concurrentes a través de una conexión 			de red. </para></footnote>

<footnote><para>Hoy en día muchos administradores de sistemas Linux 
		consideran que <command>telnet</command> y <command>rlogin
		</command> son inseguros y prefieren <command>ssh
		</command>, el <quote>intérprete de comandos seguro</quote> que 			encripta el tráfico en la red, haciendo así bastante menos probable 
		que usuarios malintencionados puedan <quote>espiar</quote> la 				conexión y obtener datos sensibles como nombres de usuario y 				passwords. Está altamente recomendado usar <command>ssh</command> 			en lugar de <command>telnet</command> o <command>rlogin</command>.  
		</para></footnote>

<para>
Los inicios de sesión a través de la red tienen, en vez de una cantidad 
enorme de gettys, un servicio individual por tipo de inicio de sesión (telnet y 
rlogin tienen servicios separados) que "escucha" todos los intentos de inicio se sesión entrantes. Cuando el servicio advierte un intento de inicio de sesión, inicia una nueva instancia de si mismo para atender la petición individual; la instancia original continúa atenta a otros posibles intentos. La nueva instancia trabaja de manera similar a getty.
</para>


</sect2>

<sect2>
<title>Sistemas de archivos de red (NFS)</title>
<para>
Una de las cosas más útiles que se pueden hacer con los servicios de 
red es compartir archivos a través de un <glossterm>sistema de archivos de red</glossterm>. El más utilizado normalmente para compartir archivos se llama <glossterm>Network File System</glossterm>, o <glossterm>NFS</glossterm>, desarrollado por Sun Microsystems.
</para>

<para>
Con un sistema de archivos de red, cualquier operación sobre un archivo 
realizada por un programa en una máquina es enviada a través de la red a otra 
máquina. Se "engaña" al programa, haciéndole creer que todos los archivos en el ordenador remoto se encuentran de hecho en el ordenador en el que el
programa se está ejecutando. Con esta manera de trabajar, compartir 
información es extremadamente simple, ya que no se requieren modificaciones en 
el programa.
</para>

<para>
Otra manera muy popular de compartir archivos es a través de Samba 
(<ulink url="http://www.samba.org">http://samba.org</ulink>). Este protocolo (llamado SMB) permite compartir archivos con máquinas Windows a través del Entorno de Red. También permite compartir impresoras.
</para>

</sect2>

<sect2>
<title>Correo</title>

<para>
El correo electrónico es el método más popularmente utilizado para comunicarse a 
través del ordenador. Una carta electrónica se almacena en un archivo 
con un formato especial, y se utilizan programas de correo especiales para enviar y leer las cartas.
</para>

<para>
Cada usuario tiene un <glossterm>buzón de correo entrante</glossterm> (un archivo con formato especial), en donde se almacena todo el correo nuevo. Cuando alguien  envía un correo, el programa de correo localiza el buzón del destinatario y agrega la carta al archivo de buzón de correo entrante. Si el buzón del destinatario se encuentra en otra máquina, la carta es enviada allí, donde se traslada al buzón de correo como corresponda.
</para>

<para>
El sistema de correo se compone de muchos programas. El transporte del correo a 
buzones locales o remotos es realizado por un programa: <glossterm>el agente de transporte de correo</glossterm>o <glossterm>MTA</glossterm>. (<command>Sendmail</command> y <command>Smail</command> son dos ejemplos de esto), 
mientras que existe un sinnúmero de programas muy variados que los usuarios 
utilizan para leer y escribir correos (<glossterm>Estos son conocidos como agentes de usuario de correo </glossterm>o <glossterm>MUA</glossterm>, <command>Pine</command> y <command>Elm</command> son ejemplos de esto). Los archivos de buzones de correo están usualmente ubicados en <filename>/var/spool/mail</filename>.
</para>

</sect2>


<sect2>
<title>Impresión</title>

<para>
Solo una persona puede utilizar la impresora en un momento dado, pero sería 
antieconómico no compartir impresoras entre los usuarios. La impresora es por lo 
tanto administrada por software que implementa una cola de impresión: todos 
los trabajos de impresión son colocados dentro de la cola, y una vez que la 
impresora termina de imprimir una trabajo, el siguiente es enviado a la 
impresora automáticamente. Esto alivia al usuario de la organización de la 
cola de impresión y de luchar por el control de la impresora.
</para>

<para>
El software de la cola de impresión también coloca los trabajos de 
impresión en disco, es decir, el texto a imprimir es mantenido en un 
archivo mientras que el trabajo se encuentre en la cola. Esto permite a los 
programas de aplicación entregar rápidamente los trabajos a imprimir al 
software que administra la <glossterm>cola de impresión</glossterm>; así, las aplicaciones no tienen que esperar a que el trabajo (en inglés "job") esté de hecho impreso para poder continuar su ejecución. Esta forma de trabajar es realmente cómoda, ya que permite enviar a imprimir una versión de un trabajo y no tener que esperar a que esta sea impresa antes de poder hacer una versión nueva completamente revisada.
</para>

</sect2>


<sect2>
<title>La distribución del sistema de archivos</title>

<para>
El sistema de archivos está dividido en muchas partes; normalmente en 
las líneas de un sistema de archivos raíz con <filename>/bin</filename>, 
<filename>/lib</filename>, <filename>/etc</filename>, <filename>/dev</filename>, y 
otros pocos directorios; un sistema de archivos /usr con programas y 
datos que no tendrán cambios; un sistema de archivos /var con datos que pueden 
cambiar (como los archivos de log); y un sistema de archivos <filename>/home</filename> para todos los archivos personales de los usuarios. Dependiendo de la configuración del hardware y de las decisiones del administrador del sistema, la división puede llegar a ser diferente; a pesar de esto, y aunque la división es aconsejable, es también posible distribuir todos los archivos en un solo sistema de archivos.
</para>

<para>
En el Capítulo 4 se describe la distribución del sistema de archivos con 
algo de detalle; el documento "Estándar de la Jerarquía del Sistema de Archivos de Linux" cubre este tema más en profundidad.
</para>

</sect2>
</sect1>

</chapter>


