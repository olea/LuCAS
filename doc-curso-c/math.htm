<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
	<TITLE></TITLE>
	<META NAME="GENERATOR" CONTENT="StarOffice/5.1 (Linux)">
	<META NAME="AUTHOR" CONTENT=" ">
	<META NAME="CREATED" CONTENT="20000124;13243900">
	<META NAME="CHANGEDBY" CONTENT=" ">
	<META NAME="CHANGED" CONTENT="20000124;13243900">
</HEAD>
<BODY>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Declarations for math functions.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  Copyright (C) 1991, 92, 93, 95, 96, 97, 98 Free Software
Foundation, Inc.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  This file is part of the GNU C Library.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  The GNU C Library is free software; you can redistribute it and/or</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  modify it under the terms of the GNU Library General Public License
as</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  published by the Free Software Foundation; either version 2 of the</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  License, or (at your option) any later version.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  The GNU C Library is distributed in the hope that it will be
useful,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  but WITHOUT ANY WARRANTY; without even the implied warranty of</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  Library General Public License for more details.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  You should have received a copy of the GNU Library General Public</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  License along with the GNU C Library; see the file COPYING.LIB.  If
not,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  write to the Free Software Foundation, Inc., 59 Temple Place -
Suite 330,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  Boston, MA 02111-1307, USA.  */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
*	ISO C Standard: 4.5 MATHEMATICS	&lt;math.h&gt;</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
*/</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifndef	_MATH_H</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#define	_MATH_H	1</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#include
&lt;features.h&gt;</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__BEGIN_DECLS</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Get machine-dependent HUGE_VAL value (returned on overflow).</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  On all IEEE754 machines, this is +Infinity.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#include
&lt;bits/huge_val.h&gt;</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Get machine-dependent NAN value (returned for some domain errors). 
*/</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef	
__USE_ISOC9X</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
include &lt;bits/nan.h&gt;</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Get general and ISO C 9X specific information.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#include
&lt;bits/mathdef.h&gt;</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
The file &lt;bits/mathcalls.h&gt; contains the prototypes for all the</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  actual math functions.  These macros are used for those prototypes,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  so we can easily declare each function as both `name' and `__name',</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  and can declare the float versions `namef' and `__namef'.  */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#define
__MATHCALL(function,suffix, args)	\</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 __MATHDECL (_Mdouble_,function,suffix, args)</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#define
__MATHDECL(type, function,suffix, args) \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 __MATHDECL_1(type, function,suffix, args); \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 __MATHDECL_1(type, __CONCAT(__,function),suffix, args)</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#define
__MATHCALLX(function,suffix, args, attrib)	\</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 __MATHDECLX (_Mdouble_,function,suffix, args, attrib)</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#define
__MATHDECLX(type, function,suffix, args, attrib) \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 __MATHDECL_1(type, function,suffix, args) __attribute__ (attrib); \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 __MATHDECL_1(type, __CONCAT(__,function),suffix, args) __attribute__
(attrib)</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#define
__MATHDECL_1(type, function,suffix, args) \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 extern type __MATH_PRECNAME(function,suffix) args</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#define
_Mdouble_ 		double</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#define
__MATH_PRECNAME(name,r)	__CONCAT(name,r)</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#include
&lt;bits/mathcalls.h&gt;</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#undef	_Mdouble_</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#undef	__MATH_PRECNAME</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
defined __USE_MISC || defined __USE_ISOC9X</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Include the file of declarations again, this time using `float'</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  instead of `double' and appending f to each function name.  */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifndef _Mfloat_</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 define _Mfloat_		float</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define _Mdouble_ 		_Mfloat_</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifdef __STDC__</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 define __MATH_PRECNAME(name,r) name##f##r</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 define __MATH_PRECNAME(name,r) name/**/f/**/r</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
include &lt;bits/mathcalls.h&gt;</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
undef	_Mdouble_</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
undef	__MATH_PRECNAME</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
if (__STDC__ - 0 || __GNUC__ - 0) &amp;&amp; !defined
__NO_LONG_DOUBLE_MATH</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Include the file of declarations again, this time using `long double'</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  instead of `double' and appending l to each function name.  */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 ifndef _Mlong_double_</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
  define _Mlong_double_	long double</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 endif</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 define _Mdouble_ 		_Mlong_double_</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 ifdef __STDC__</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
  define __MATH_PRECNAME(name,r) name##l##r</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
  define __MATH_PRECNAME(name,r) name/**/l/**/r</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 endif</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 include &lt;bits/mathcalls.h&gt;</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 undef _Mdouble_</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 undef __MATH_PRECNAME</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif /* __STDC__ || __GNUC__ */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif	/*
Use misc or ISO C 9X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#undef	__MATHDECL_1</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#undef	__MATHDECL</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#undef	__MATHCALL</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
defined __USE_MISC || defined __USE_XOPEN || defined __USE_ISOC9X</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
This variable is used by `gamma' and `lgamma'.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
int signgam;</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
ISO C 9X defines some generic macros which work on any data type.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
__USE_ISOC9X</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Get the architecture specific values describing the floating-point</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  evaluation.  The following symbols will get defined:</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   float_t	floating-point type at least as wide as `float' used</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">		to
evaluate `float' expressions</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   double_t	floating-point type at least as wide as `double' used</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">		to
evaluate `double' expressions</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   FLT_EVAL_METHOD</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">		Defined
to</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">		
 0	if `float_t' is `float' and `double_t' is `double'</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">		
 1	if `float_t' and `double_t' are `double'</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">		
 2	if `float_t' and `double_t' are `long double'</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">		
 else	`float_t' and `double_t' are unspecified</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   INFINITY	representation of the infinity value of type `float'</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   FP_FAST_FMA</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   FP_FAST_FMAF</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   FP_FAST_FMAL</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">		If
defined it indicates that the `fma' function</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">		generally
executes about as fast as a multiply and an add.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">		This
macro is defined only iff the `fma' function is</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">		implemented
directly with a hardware multiply-add instructions.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   FP_ILOGB0	Expands to a value returned by `ilogb (0.0)'.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   FP_ILOGBNAN	Expands to a value returned by `ilogb (NAN)'.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   DECIMAL_DIG	Number of decimal digits supported by conversion
between</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">		decimal
and all internal floating-point formats.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">*/</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
All floating-point numbers can be put in one of these categories.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">enum</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 {</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   FP_NAN,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define FP_NAN FP_NAN</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   FP_INFINITE,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define FP_INFINITE FP_INFINITE</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   FP_ZERO,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define FP_ZERO FP_ZERO</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   FP_SUBNORMAL,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define FP_SUBNORMAL FP_SUBNORMAL</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   FP_NORMAL</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define FP_NORMAL FP_NORMAL</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 };</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return number of classification appropriate for X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef
__NO_LONG_DOUBLE_MATH</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define fpclassify(x) \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
    (sizeof (x) == sizeof (float) ? __fpclassifyf (x) : __fpclassify
(x))</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define fpclassify(x) \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
    (sizeof (x) == sizeof (float) ?					      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
       __fpclassifyf (x)						      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
     : sizeof (x) == sizeof (double) ?					      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
       __fpclassify (x) : __fpclassifyl (x))</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return nonzero value if sign of X is negative.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef
__NO_LONG_DOUBLE_MATH</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define signbit(x) \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
    (sizeof (x) == sizeof (float) ? __signbitf (x) : __signbit (x))</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define signbit(x) \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
    (sizeof (x) == sizeof (float) ?					      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
       __signbitf (x)							      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
     : sizeof (x) == sizeof (double) ?					      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
       __signbit (x) : __signbitl (x))</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return nonzero value if X is not +-Inf or NaN.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef
__NO_LONG_DOUBLE_MATH</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define isfinite(x) \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
    (sizeof (x) == sizeof (float) ? __finitef (x) : __finite (x))</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define isfinite(x) \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
    (sizeof (x) == sizeof (float) ?					      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
       __finitef (x)							      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
     : sizeof (x) == sizeof (double) ?					      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
       __finite (x) : __finitel (x))</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return nonzero value if X is neither zero, subnormal, Inf, nor NaN. 
*/</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define isnormal(x) (fpclassify (x) == FP_NORMAL)</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return nonzero value if X is a NaN.  We could use `fpclassify' but</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  we already have this functions `__isnan' and it is faster.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef
__NO_LONG_DOUBLE_MATH</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define isnan(x) \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
    (sizeof (x) == sizeof (float) ? __isnanf (x) : __isnan (x))</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define isnan(x) \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
    (sizeof (x) == sizeof (float) ?					      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
       __isnanf (x)							      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
     : sizeof (x) == sizeof (double) ?					      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
       __isnan (x) : __isnanl (x))</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return nonzero value is X is positive or negative infinity.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef
__NO_LONG_DOUBLE_MATH</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define isinf(x) \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
    (sizeof (x) == sizeof (float) ? __isinff (x) : __isinf (x))</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define isinf(x) \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
    (sizeof (x) == sizeof (float) ?					      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
       __isinff (x)							      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
     : sizeof (x) == sizeof (double) ?					      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
       __isinf (x) : __isinfl (x))</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif
/* Use ISO C 9X.  */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef	__USE_MISC</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Support for various different standard error handling behaviors.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">typedef
enum</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">{</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 _IEEE_ = -1,	/* According to IEEE 754/IEEE 854.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 _SVID_,	/* According to System V, release 4.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 _XOPEN_,	/* Nowadays also Unix98.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 _POSIX_,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 _ISOC_	/* Actually this is ISO C 9X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">}
_LIB_VERSION_TYPE;</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
This variable can be changed at run-time to any of the values above
to</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  affect floating point error handling behavior (it may also be
necessary</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  to change the hardware FPU exception settings).  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
_LIB_VERSION_TYPE _LIB_VERSION;</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef
__USE_SVID</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
In SVID error handling, `matherr' is called with this description</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  of the exceptional condition.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  We have a problem when using C++ since `exception' is a reserved</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  name in C++.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifdef __cplusplus</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">struct
__exception</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">struct
exception</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 {</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   int type;</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   char *name;</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   double arg1;</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   double arg2;</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   double retval;</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 };</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifdef __cplusplus</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
int matherr __P ((struct __exception *__exc));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
int matherr __P ((struct exception *__exc));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define X_TLOSS	1.41484755040568800000e+16</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Types of exceptions in the `type' field.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define DOMAIN		1</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define SING		2</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define OVERFLOW	3</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define UNDERFLOW	4</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define TLOSS		5</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define PLOSS		6</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
SVID mode specifies returning this large value instead of infinity. 
*/</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define HUGE		FLT_MAX</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
include &lt;float.h&gt;		/* Defines FLT_MAX.  */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#else	/*
!SVID */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifdef __USE_XOPEN</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
X/Open wants another strange constant.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 define MAXFLOAT	FLT_MAX</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 include &lt;float.h&gt;</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif	/*
SVID */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Some useful constants.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
defined __USE_BSD || defined __USE_XOPEN</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_E		2.7182818284590452354	/* e */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_LOG2E	1.4426950408889634074	/* log_2 e */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_LOG10E	0.43429448190325182765	/* log_10 e */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_LN2		0.69314718055994530942	/* log_e 2 */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_LN10		2.30258509299404568402	/* log_e 10 */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_PI		3.14159265358979323846	/* pi */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_PI_2		1.57079632679489661923	/* pi/2 */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_PI_4		0.78539816339744830962	/* pi/4 */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_1_PI		0.31830988618379067154	/* 1/pi */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_2_PI		0.63661977236758134308	/* 2/pi */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_2_SQRTPI	1.12837916709551257390	/* 2/sqrt(pi) */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_SQRT2	1.41421356237309504880	/* sqrt(2) */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_SQRT1_2	0.70710678118654752440	/* 1/sqrt(2) */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
The above constants are not adequate for computation using `long
double's.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  Therefore we provide as an extension constants with similar names
as a</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  GNU extension.  Provide enough digits for the 128-bit IEEE quad. 
*/</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef
__USE_GNU</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_El		2.7182818284590452353602874713526625L  /* e */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_LOG2El	1.4426950408889634073599246810018922L  /* log_2 e */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_LOG10El	0.4342944819032518276511289189166051L  /* log_10 e
*/</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_LN2l		0.6931471805599453094172321214581766L  /* log_e 2 */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_LN10l	2.3025850929940456840179914546843642L  /* log_e 10 */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_PIl		3.1415926535897932384626433832795029L  /* pi */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_PI_2l	1.5707963267948966192313216916397514L  /* pi/2 */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_PI_4l	0.7853981633974483096156608458198757L  /* pi/4 */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_1_PIl	0.3183098861837906715377675267450287L  /* 1/pi */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_2_PIl	0.6366197723675813430755350534900574L  /* 2/pi */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_2_SQRTPIl	1.1283791670955125738961589031215452L  /*
2/sqrt(pi) */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_SQRT2l	1.4142135623730950488016887242096981L  /* sqrt(2) */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define M_SQRT1_2l	0.7071067811865475244008443621048490L  /* 1/sqrt(2)
*/</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
When compiling in strict ISO C compatible mode we must not use the</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  inline functions since they, among other things, do not set the</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  `errno' variable correctly.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
defined __STRICT_ANSI__ &amp;&amp; !defined __NO_MATH_INLINES</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define __NO_MATH_INLINES	1</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Get machine-dependent inline versions (if there are any).  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef
__USE_EXTERN_INLINES</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
include &lt;bits/mathinline.h&gt;</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
__USE_ISOC9X</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
ISO C 9X defines some macros to compare number while taking care</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  for unordered numbers.  Since many FPUs provide special</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  instructions to support these operations and these tests are</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  defined in &lt;bits/mathinline.h&gt;, we define the generic macros
at</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  this late point and only if they are not defined yet.  */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return nonzero value if X is greater than Y.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifndef isgreater</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 define isgreater(x, y) \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 (__extension__							      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  ({ __typeof__(x) __x = (x); __typeof__(y) __y = (y);			      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
     !isunordered (__x, __y) &amp;&amp; __x &gt; __y; }))</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return nonzero value if X is greater than or equal to Y.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifndef isgreaterequal</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 define isgreaterequal(x, y) \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 (__extension__							      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  ({ __typeof__(x) __x = (x); __typeof__(y) __y = (y);			      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
     !isunordered (__x, __y) &amp;&amp; __x &gt;= __y; }))</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return nonzero value if X is less than Y.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifndef isless</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 define isless(x, y) \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 (__extension__							      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  ({ __typeof__(x) __x = (x); __typeof__(y) __y = (y);			      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
     !isunordered (__x, __y) &amp;&amp; __x &lt; __y; }))</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return nonzero value if X is less than or equal to Y.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifndef islessequal</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 define islessequal(x, y) \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 (__extension__							      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  ({ __typeof__(x) __x = (x); __typeof__(y) __y = (y);			      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
     !isunordered (__x, __y) &amp;&amp; __x &lt;= __y; }))</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return nonzero value if either X is less than Y or Y is less than X. 
*/</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifndef islessgreater</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 define islessgreater(x, y) \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 (__extension__							      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  ({ __typeof__(x) __x = (x); __typeof__(y) __y = (y);			      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
     !isunordered (__x, __y) &amp;&amp; (__x &lt; __y || __y &lt;
__x); }))</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return nonzero value if arguments are unordered.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifndef isunordered</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 define isunordered(u, v) \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 (__extension__							      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  ({ __typeof__(u) __u = (u); __typeof__(v) __v = (v);			      \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
     fpclassify (__u) == FP_NAN || fpclassify (__v) == FP_NAN; }))</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__END_DECLS</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif
/* math.h  */</FONT></FONT></P>
</BODY>
</HTML>