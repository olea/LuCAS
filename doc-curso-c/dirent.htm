<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
	<TITLE></TITLE>
	<META NAME="GENERATOR" CONTENT="StarOffice/5.1 (Linux)">
	<META NAME="AUTHOR" CONTENT=" ">
	<META NAME="CREATED" CONTENT="20000124;21153000">
	<META NAME="CHANGEDBY" CONTENT=" ">
	<META NAME="CHANGED" CONTENT="20000124;21153000">
</HEAD>
<BODY>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Copyright (C) 1991,92,93,94,95,96,97,98 Free Software Foundation,
Inc.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  This file is part of the GNU C Library.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  The GNU C Library is free software; you can redistribute it and/or</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  modify it under the terms of the GNU Library General Public License
as</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  published by the Free Software Foundation; either version 2 of the</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  License, or (at your option) any later version.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  The GNU C Library is distributed in the hope that it will be
useful,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  but WITHOUT ANY WARRANTY; without even the implied warranty of</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  Library General Public License for more details.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  You should have received a copy of the GNU Library General Public</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  License along with the GNU C Library; see the file COPYING.LIB.  If
not,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  write to the Free Software Foundation, Inc., 59 Temple Place -
Suite 330,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  Boston, MA 02111-1307, USA.  */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
*	POSIX Standard: 5.1.2 Directory Operations	&lt;dirent.h&gt;</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
*/</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifndef	_DIRENT_H</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#define	_DIRENT_H	1</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#include
&lt;features.h&gt;</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__BEGIN_DECLS</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#include
&lt;bits/types.h&gt;</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
This file defines `struct dirent'.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  It defines the macro `_DIRENT_HAVE_D_NAMLEN' iff there is a
`d_namlen'</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  member that gives the length of `d_name'.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  It defines the macro `_DIRENT_HAVE_D_RECLEN' iff there is a
`d_reclen'</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  member that gives the size of the entire directory entry.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  It defines the macro `_DIRENT_HAVE_D_OFF' iff there is a `d_off'</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  member that gives the file offset of the next directory entry.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  It defines the macro `_DIRENT_HAVE_D_TYPE' iff there is a `d_type'</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  member that gives the type of the file.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
*/</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#include
&lt;bits/dirent.h&gt;</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
(defined __USE_BSD || defined __USE_MISC) &amp;&amp; !defined
d_fileno</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define d_ino	d_fileno		 /* Backward compatibility.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
These macros extract size information from a `struct dirent *'.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  They may evaluate their argument multiple times, so it must not</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  have side effects.  Each of these may involve a relatively costly</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  call to `strlen' on some systems, so these values should be cached.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  _D_EXACT_NAMLEN (DP)	returns the length of DP-&gt;d_name, not
including</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  its terminating null character.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  _D_ALLOC_NAMLEN (DP)	returns a size at least (_D_EXACT_NAMLEN (DP)
+ 1);</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  that is, the allocation size needed to hold the DP-&gt;d_name
string.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  Use this macro when you don't need the exact length, just an upper
bound.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  This macro is less likely to require calling `strlen' than
_D_EXACT_NAMLEN.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef
_DIRENT_HAVE_D_NAMLEN</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define _D_EXACT_NAMLEN(d) ((d)-&gt;d_namlen)</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define _D_ALLOC_NAMLEN(d) (_D_EXACT_NAMLEN (d) + 1)</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define _D_EXACT_NAMLEN(d) (strlen ((d)-&gt;d_name))</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifdef _DIRENT_HAVE_D_RECLEN</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 define _D_ALLOC_NAMLEN(d) (((char *) (d) + (d)-&gt;d_reclen) -
&amp;(d)-&gt;d_name[0])</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 define _D_ALLOC_NAMLEN(d) (sizeof (d)-&gt;d_name &gt; 1 ? sizeof
(d)-&gt;d_name : \</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">			
     _D_EXACT_NAMLEN (d) + 1)</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef
__USE_BSD</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
File types for `d_type'.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">enum</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 {</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   DT_UNKNOWN = 0,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define DT_UNKNOWN	DT_UNKNOWN</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   DT_FIFO = 1,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define DT_FIFO	DT_FIFO</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   DT_CHR = 2,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define DT_CHR		DT_CHR</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   DT_DIR = 4,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define DT_DIR		DT_DIR</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   DT_BLK = 6,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define DT_BLK		DT_BLK</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   DT_REG = 8,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define DT_REG		DT_REG</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   DT_LNK = 10,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define DT_LNK		DT_LNK</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
   DT_SOCK = 12</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define DT_SOCK	DT_SOCK</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
 };</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Convert between stat structure types and directory types.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define IFTODT(mode)	(((mode) &amp; 0170000) &gt;&gt; 12)</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define DTTOIF(dirtype)	((dirtype) &lt;&lt; 12)</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
This is the data type of directory stream objects.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  The actual structure is opaque to users.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">typedef
struct __dirstream DIR;</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Open a directory stream on NAME.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  Return a DIR stream on the directory, or NULL if it could not be
opened.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
DIR *opendir __P ((__const char *__name));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Close the directory stream DIRP.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  Return 0 if successful, -1 if not.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
int closedir __P ((DIR *__dirp));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Read a directory entry from DIRP.  Return a pointer to a `struct</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  dirent' describing the entry, or NULL for EOF or error.  The</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  storage returned may be overwritten by a later readdir call on the</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  same DIR stream.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  If the Large File Support API is selected we have to use the</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  appropriate interface.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifndef
__USE_FILE_OFFSET64</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
struct dirent *readdir __P ((DIR *__dirp));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifdef __REDIRECT</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
struct dirent *__REDIRECT (readdir, __P ((DIR *__dirp)), readdir64);</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 define readdir readdir64</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef
__USE_LARGEFILE64</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
struct dirent64 *readdir64 __P ((DIR *__dirp));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
defined __USE_POSIX || defined __USE_MISC</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Reentrant version of `readdir'.  Return in RESULT a pointer to the</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  next entry.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifndef __USE_FILE_OFFSET64</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
int readdir_r __P ((DIR *__restrict __dirp,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">			
  struct dirent *__restrict __entry,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">			
  struct dirent **__restrict __result));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 ifdef __REDIRECT</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
int __REDIRECT (readdir_r, __P ((DIR *__restrict __dirp,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">					struct
dirent *__restrict __entry,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">					struct
dirent **__restrict __result)),</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">		
   readdir64_r);</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
  define readdir_r readdir64_r</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 endif</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifdef __USE_LARGEFILE64</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
int readdir64_r __P ((DIR *__restrict __dirp,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">			
    struct dirent64 *__restrict __entry,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">			
    struct dirent64 **__restrict __result));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif	/*
POSIX or misc */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Rewind DIRP to the beginning of the directory.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
void rewinddir __P ((DIR *__dirp));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
defined __USE_BSD || defined __USE_MISC || defined __USE_XOPEN</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
include &lt;bits/types.h&gt;</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Seek to position POS on DIRP.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
void seekdir __P ((DIR *__dirp, __off_t __pos));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return the current position of DIRP.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
__off_t telldir __P ((DIR *__dirp));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
defined __USE_BSD || defined __USE_MISC</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return the file descriptor used by DIRP.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
int dirfd __P ((DIR *__dirp));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
if defined __OPTIMIZE__ &amp;&amp; defined _DIR_dirfd</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 define dirfd(dirp)	_DIR_dirfd (dirp)</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifndef MAXNAMLEN</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Get the definitions of the POSIX.1 limits.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 include &lt;bits/posix1_lim.h&gt;</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
`MAXNAMLEN' is the BSD name for what POSIX calls `NAME_MAX'.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 ifdef NAME_MAX</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
  define MAXNAMLEN	NAME_MAX</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
  define MAXNAMLEN	255</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 endif</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
define __need_size_t</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
include &lt;stddef.h&gt;</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Scan the directory DIR, calling SELECTOR on each directory entry.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  Entries for which SELECT returns nonzero are individually malloc'd,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  sorted using qsort with CMP, and collected in a malloc'd array in</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  *NAMELIST.  Returns the number of entries selected, or -1 on error.
 */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifndef __USE_FILE_OFFSET64</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
int scandir __P ((__const char *__restrict __dir,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">			
struct dirent ***__restrict __namelist,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">			
int (*__selector) (__const struct dirent *),</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">			
int (*__cmp) (__const __ptr_t, __const __ptr_t)));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 ifdef __REDIRECT</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
int __REDIRECT (scandir,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">		
      __P ((__const char *__restrict __dir,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">			
    struct dirent ***__restrict __namelist,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">			
    int (*__selector) (__const struct dirent *),</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">			
    int (*__cmp) (__const __ptr_t, __const __ptr_t))),</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">		
      scandir64);</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
  define scandir scandir64</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 endif</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
if defined __USE_GNU &amp;&amp; defined __USE_LARGEFILE64</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
This function is like `scandir' but it uses the 64bit dirent
structure.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  Please note that the CMP function must now work with struct
dirent64 **.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
int scandir64 __P ((__const char *__restrict __dir,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">			
  struct dirent64 ***__restrict __namelist,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">			
  int (*__selector) (__const struct dirent64 *),</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">			
  int (*__cmp) (__const __ptr_t, __const __ptr_t)));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Function to compare two `struct dirent's alphabetically.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifndef __USE_FILE_OFFSET64</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
int alphasort __P ((__const __ptr_t __e1, __const __ptr_t __e2));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 ifdef __REDIRECT</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
int __REDIRECT (alphasort,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">		
      __P ((__const __ptr_t __e1, __const __ptr_t __e2)),</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">		
      alphasort64);</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
  define alphasort alphasort64</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 endif</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
if defined __USE_GNU &amp;&amp; defined __USE_LARGEFILE64</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
int alphasort64 __P ((__const __ptr_t __e1, __const __ptr_t __e2));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifdef __USE_GNU</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Function to compare two `struct dirent's by name &amp; version.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 ifndef __USE_FILE_OFFSET64</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
int versionsort __P ((__const __ptr_t __e1, __const __ptr_t __e2));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
  ifdef __REDIRECT</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
int __REDIRECT (versionsort,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">		
      __P ((__const __ptr_t __e1, __const __ptr_t __e2)),</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">		
      versionsort64);</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
  else</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
   define versionsort versionsort64</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
  endif</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 ifdef __USE_LARGEFILE64</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
int versionsort64 __P ((__const __ptr_t __e1, __const __ptr_t __e2));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
 endif</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Read directory entries from FD into BUF, reading at most NBYTES.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  Reading starts at offset *BASEP, and *BASEP is updated with the new</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  position after reading.  Returns the number of bytes read; zero
when at</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  end of directory; or -1 for errors.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">extern
__ssize_t getdirentries __P ((int __fd, char *__restrict __buf,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">				
    size_t __nbytes,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">				
    __off_t *__restrict __basep));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif
/* Use BSD or misc.  */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__END_DECLS</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif
/* dirent.h  */</FONT></FONT></P>
</BODY>
</HTML>