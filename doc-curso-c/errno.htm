<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
	<TITLE></TITLE>
	<META NAME="GENERATOR" CONTENT="StarOffice/5.1 (Linux)">
	<META NAME="CREATED" CONTENT="20000201;1295700">
	<META NAME="CHANGED" CONTENT="16010101;0">
	<STYLE>
	<!--
		@page { margin: 2cm }
	-->
	</STYLE>
</HEAD>
<BODY>
<P STYLE="margin-bottom: 0cm">/* Copyright (C) 1991, 92, 93, 94, 95,
96, 97 Free Software Foundation, Inc.</P>
<P STYLE="margin-bottom: 0cm">   This file is part of the GNU C
Library.</P>
<P STYLE="margin-bottom: 0cm"><BR>
</P>
<P STYLE="margin-bottom: 0cm">   The GNU C Library is free software;
you can redistribute it and/or</P>
<P STYLE="margin-bottom: 0cm">   modify it under the terms of the GNU
Library General Public License as</P>
<P STYLE="margin-bottom: 0cm">   published by the Free Software
Foundation; either version 2 of the</P>
<P STYLE="margin-bottom: 0cm">   License, or (at your option) any
later version.</P>
<P STYLE="margin-bottom: 0cm"><BR>
</P>
<P STYLE="margin-bottom: 0cm">   The GNU C Library is distributed in
the hope that it will be useful,</P>
<P STYLE="margin-bottom: 0cm">   but WITHOUT ANY WARRANTY; without
even the implied warranty of</P>
<P STYLE="margin-bottom: 0cm">   MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU</P>
<P STYLE="margin-bottom: 0cm">   Library General Public License for
more details.</P>
<P STYLE="margin-bottom: 0cm"><BR>
</P>
<P STYLE="margin-bottom: 0cm">   You should have received a copy of
the GNU Library General Public</P>
<P STYLE="margin-bottom: 0cm">   License along with the GNU C
Library; see the file COPYING.LIB.  If not,</P>
<P STYLE="margin-bottom: 0cm">   write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330,</P>
<P STYLE="margin-bottom: 0cm">   Boston, MA 02111-1307, USA.  */</P>
<P STYLE="margin-bottom: 0cm"><BR>
</P>
<P STYLE="margin-bottom: 0cm">/*</P>
<P STYLE="margin-bottom: 0cm"> *	ISO C Standard: 4.1.3
Errors	&lt;errno.h&gt;</P>
<P STYLE="margin-bottom: 0cm"> */</P>
<P STYLE="margin-bottom: 0cm"><BR>
</P>
<P STYLE="margin-bottom: 0cm">#ifndef	_ERRNO_H</P>
<P STYLE="margin-bottom: 0cm"><BR>
</P>
<P STYLE="margin-bottom: 0cm">/* The includer defined __need_Emath if
he wants only the definitions</P>
<P STYLE="margin-bottom: 0cm">   of EDOM and ERANGE, and not
everything else.  */</P>
<P STYLE="margin-bottom: 0cm">#ifndef	__need_Emath</P>
<P STYLE="margin-bottom: 0cm">#define	_ERRNO_H	1</P>
<P STYLE="margin-bottom: 0cm">#include &lt;features.h&gt;</P>
<P STYLE="margin-bottom: 0cm">#endif</P>
<P STYLE="margin-bottom: 0cm"><BR>
</P>
<P STYLE="margin-bottom: 0cm">__BEGIN_DECLS</P>
<P STYLE="margin-bottom: 0cm"><BR>
</P>
<P STYLE="margin-bottom: 0cm">/* Get the error number constants from
the system-specific file.</P>
<P STYLE="margin-bottom: 0cm">   This file will test __need_Emath and
_ERRNO_H.  */</P>
<P STYLE="margin-bottom: 0cm">#include &lt;bits/errno.h&gt;</P>
<P STYLE="margin-bottom: 0cm">#undef	__need_Emath</P>
<P STYLE="margin-bottom: 0cm"><BR>
</P>
<P STYLE="margin-bottom: 0cm">#ifdef	_ERRNO_H</P>
<P STYLE="margin-bottom: 0cm"><BR>
</P>
<P STYLE="margin-bottom: 0cm">/* Declare the `errno' variable, unless
it's defined as a macro by</P>
<P STYLE="margin-bottom: 0cm">   bits/errno.h.  This is the case in
GNU, where it is a per-thread</P>
<P STYLE="margin-bottom: 0cm">   variable.  This redeclaration using
the macro still works, but it</P>
<P STYLE="margin-bottom: 0cm">   will be a function declaration
without a prototype and may trigger</P>
<P STYLE="margin-bottom: 0cm">   a -Wstrict-prototypes warning.  */</P>
<P STYLE="margin-bottom: 0cm">#ifndef	errno</P>
<P STYLE="margin-bottom: 0cm">extern int errno;</P>
<P STYLE="margin-bottom: 0cm">#endif</P>
<P STYLE="margin-bottom: 0cm"><BR>
</P>
<P STYLE="margin-bottom: 0cm">#ifdef __USE_GNU</P>
<P STYLE="margin-bottom: 0cm"><BR>
</P>
<P STYLE="margin-bottom: 0cm">/* The full and simple forms of the
name with which the program was</P>
<P STYLE="margin-bottom: 0cm">   invoked.  These variables are set up
automatically at startup based on</P>
<P STYLE="margin-bottom: 0cm">   the value of ARGV[0] (this works
only if you use GNU ld).  */</P>
<P STYLE="margin-bottom: 0cm">extern char *program_invocation_name,
*program_invocation_short_name;</P>
<P STYLE="margin-bottom: 0cm">#endif /* __USE_GNU */</P>
<P STYLE="margin-bottom: 0cm">#endif /* _ERRNO_H */</P>
<P STYLE="margin-bottom: 0cm"><BR>
</P>
<P STYLE="margin-bottom: 0cm">__END_DECLS</P>
<P STYLE="margin-bottom: 0cm"><BR>
</P>
<P STYLE="margin-bottom: 0cm">#endif /* _ERRNO_H */</P>
<P STYLE="margin-bottom: 0cm"><BR>
</P>
<P STYLE="margin-bottom: 0cm">/* The Hurd &lt;bits/errno.h&gt;
defines `error_t' as an enumerated type so</P>
<P STYLE="margin-bottom: 0cm">   that printing `error_t' values in
the debugger shows the names.  We</P>
<P STYLE="margin-bottom: 0cm">   might need this definition sometimes
even if this file was included</P>
<P STYLE="margin-bottom: 0cm">   before.  */</P>
<P STYLE="margin-bottom: 0cm">#if defined __USE_GNU || defined
__need_error_t</P>
<P STYLE="margin-bottom: 0cm"># ifndef __error_t_defined</P>
<P STYLE="margin-bottom: 0cm">typedef int error_t;</P>
<P STYLE="margin-bottom: 0cm">#  define __error_t_defined	1</P>
<P STYLE="margin-bottom: 0cm"># endif</P>
<P STYLE="margin-bottom: 0cm"># undef __need_error_t</P>
<P STYLE="margin-bottom: 0cm">#endif</P>
</BODY>
</HTML>