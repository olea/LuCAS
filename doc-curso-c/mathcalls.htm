<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
	<TITLE></TITLE>
	<META NAME="GENERATOR" CONTENT="StarOffice/5.1 (Linux)">
	<META NAME="AUTHOR" CONTENT=" ">
	<META NAME="CREATED" CONTENT="20000124;13274300">
	<META NAME="CHANGEDBY" CONTENT=" ">
	<META NAME="CHANGED" CONTENT="20000124;13274300">
</HEAD>
<BODY>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Prototype declarations for math functions; helper file for &lt;math.h&gt;.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  This file is part of the GNU C Library.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  The GNU C Library is free software; you can redistribute it and/or</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  modify it under the terms of the GNU Library General Public License
as</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  published by the Free Software Foundation; either version 2 of the</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  License, or (at your option) any later version.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  The GNU C Library is distributed in the hope that it will be
useful,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  but WITHOUT ANY WARRANTY; without even the implied warranty of</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  Library General Public License for more details.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  You should have received a copy of the GNU Library General Public</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  License along with the GNU C Library; see the file COPYING.LIB.  If
not,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  write to the Free Software Foundation, Inc., 59 Temple Place -
Suite 330,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  Boston, MA 02111-1307, USA.  */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
NOTE: Because of the special way this file is used by &lt;math.h&gt;,
this</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  file must NOT be protected from multiple inclusion as header files</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  usually are.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  This file provides prototype declarations for the math functions.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  Most functions are declared using the macro:</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  __MATHCALL (NAME,[_r], (ARGS...));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  This means there is a function `NAME' returning `double' and a
function</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  `NAMEf' returning `float'.  Each place `_Mdouble_' appears in the</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  prototype, that is actually `double' in the prototype for `NAME'
and</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  `float' in the prototype for `NAMEf'.  Reentrant variant functions
are</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  called `NAME_r' and `NAMEf_r'.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  Functions returning other types like `int' are declared using the
macro:</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  __MATHDECL (TYPE, NAME,[_r], (ARGS...));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  This is just like __MATHCALL but for a function returning `TYPE'</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  instead of `_Mdouble_'.  In all of these cases, there is still</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  both a `NAME' and a `NAMEf' that takes `float' arguments.</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  Note that there must be no whitespace before the argument passed
for</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  NAME, to make token pasting work with -traditional.  */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifndef
_MATH_H</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
#error &quot;Never include &lt;bits/mathcalls.h&gt; directly; include
&lt;math.h&gt; instead.&quot;</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Trigonometric functions.  */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Arc cosine of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(acos,, (_Mdouble_ __x));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Arc sine of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(asin,, (_Mdouble_ __x));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Arc tangent of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(atan,, (_Mdouble_ __x));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Arc tangent of Y/X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(atan2,, (_Mdouble_ __y, _Mdouble_ __x));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Cosine of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(cos,, (_Mdouble_ __x));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Sine of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(sin,, (_Mdouble_ __x));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Tangent of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(tan,, (_Mdouble_ __x));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef
__USE_GNU</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Cosine and sine of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHDECL
(void,sincos,,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">	
   (_Mdouble_ __x, _Mdouble_ *__sinx, _Mdouble_ *__cosx));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Hyperbolic functions.  */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Hyperbolic cosine of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(cosh,, (_Mdouble_ __x));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Hyperbolic sine of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(sinh,, (_Mdouble_ __x));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Hyperbolic tangent of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(tanh,, (_Mdouble_ __x));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
defined __USE_MISC || defined __USE_XOPEN_EXTENDED || defined
__USE_ISOC9X</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Hyperbolic arc cosine of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(acosh,, (_Mdouble_ __x));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Hyperbolic arc sine of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(asinh,, (_Mdouble_ __x));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Hyperbolic arc tangent of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(atanh,, (_Mdouble_ __x));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Exponential and logarithmic functions.  */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Exponential function of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(exp,, (_Mdouble_ __x));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef
__USE_GNU</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
A function missing in all standards: compute exponent to base ten. 
*/</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(exp10,, (_Mdouble_ __x));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Another name occasionally used.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(pow10,, (_Mdouble_ __x));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Break VALUE into a normalized fraction and an integral power of 2. 
*/</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(frexp,, (_Mdouble_ __x, int *__exponent));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
X times (two to the EXP power).  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(ldexp,, (_Mdouble_ __x, int __exponent));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Natural logarithm of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(log,, (_Mdouble_ __x));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Base-ten logarithm of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(log10,, (_Mdouble_ __x));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Break VALUE into integral and fractional parts.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(modf,, (_Mdouble_ __x, _Mdouble_ *__iptr));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
defined __USE_MISC || defined __USE_XOPEN_EXTENDED || defined
__USE_ISOC9X</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return exp(X) - 1.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(expm1,, (_Mdouble_ __x));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return log(1 + X).  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(log1p,, (_Mdouble_ __x));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return the base 2 signed integral exponent of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(logb,, (_Mdouble_ __x));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef
__USE_ISOC9X</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Compute base-2 exponential of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(exp2,, (_Mdouble_ __x));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Compute base-2 logarithm of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(log2,, (_Mdouble_ __x));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Power functions.  */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return X to the Y power.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(pow,, (_Mdouble_ __x, _Mdouble_ __y));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return the square root of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(sqrt,, (_Mdouble_ __x));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
defined __USE_MISC || defined __USE_XOPEN || defined __USE_ISOC9X</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return `sqrt(X*X + Y*Y)'.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(hypot,, (_Mdouble_ __x, _Mdouble_ __y));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
defined __USE_MISC || defined __USE_XOPEN_EXTENDED || defined
__USE_ISOC9X</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return the cube root of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(cbrt,, (_Mdouble_ __x));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Nearest integer, absolute value, and remainder functions.  */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Smallest integral value not less than X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(ceil,, (_Mdouble_ __x));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Absolute value of X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALLX
(fabs,, (_Mdouble_ __x), (__const__));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Largest integer not greater than X.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(floor,, (_Mdouble_ __x));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Floating-point modulo remainder of X/Y.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(fmod,, (_Mdouble_ __x, _Mdouble_ __y));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return 0 if VALUE is finite or NaN, +1 if it</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  is +Infinity, -1 if it is -Infinity.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHDECL_1
(int,__isinf,, (_Mdouble_ __value)) __attribute__ ((__const__));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef
__USE_MISC</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return 0 if VALUE is finite or NaN, +1 if it</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  is +Infinity, -1 if it is -Infinity.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHDECL_1
(int,isinf,, (_Mdouble_ __value)) __attribute__ ((__const__));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return nonzero if VALUE is finite and not NaN.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHDECLX
(int,finite,, (_Mdouble_ __value), (__const__));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Deal with an infinite or NaN result.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  If ERROR is ERANGE, result is +Inf;</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  if ERROR is - ERANGE, result is -Inf;</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  otherwise result is NaN.</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  This will set `errno' to either ERANGE or EDOM,</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  and may return an infinity or NaN, or may do something else.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALLX
(infnan,, (int __error), (__const__));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return the remainder of X/Y.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(drem,, (_Mdouble_ __x, _Mdouble_ __y));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return the fractional part of X after dividing out `ilogb (X)'.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(significand,, (_Mdouble_ __x));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif
/* Use misc.  */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
defined __USE_MISC || defined __USE_ISOC9X</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return X with its signed changed to Y's.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALLX
(copysign,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef
__USE_ISOC9X</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return representation of NaN for double type.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALLX
(nan,, (__const char *__tagb), (__const__));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
defined __USE_MISC || defined __USE_XOPEN</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return nonzero if VALUE is not a number.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHDECLX
(int,isnan,, (_Mdouble_ __value), (__const__));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Bessel functions.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(j0,, (_Mdouble_));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(j1,, (_Mdouble_));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(jn,, (int, _Mdouble_));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(y0,, (_Mdouble_));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(y1,, (_Mdouble_));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(yn,, (int, _Mdouble_));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
defined __USE_MISC || defined __USE_XOPEN || defined __USE_ISOC9X</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Error and gamma functions.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(erf,, (_Mdouble_));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(erfc,, (_Mdouble_));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(lgamma,, (_Mdouble_));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(tgamma,, (_Mdouble_));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
defined __USE_MISC || defined __USE_XOPEN</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Obsolete alias for `lgamma'.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(gamma,, (_Mdouble_));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef
__USE_MISC</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Reentrant version of lgamma.  This function uses the global variable</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  `signgam'.  The reentrant version instead takes a pointer and
stores</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  the value through it.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(lgamma,_r, (_Mdouble_, int *__signgamp));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
defined __USE_MISC || defined __USE_XOPEN_EXTENDED || defined
__USE_ISOC9X</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return the integer nearest X in the direction of the</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  prevailing rounding mode.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(rint,, (_Mdouble_ __x));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return X + epsilon if X &lt; Y, X - epsilon if X &gt; Y.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALLX
(nextafter,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
ifdef __USE_ISOC9X</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALLX
(nexttoward,, (_Mdouble_ __x, long double __y), (__const__));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#
endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return the remainder of integer divison X / Y with infinite
precision.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(remainder,, (_Mdouble_ __x, _Mdouble_ __y));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#if
defined __USE_MISC || defined __USE_XOPEN_EXTENDED</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return X times (2 to the Nth power).  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(scalb,, (_Mdouble_ __x, _Mdouble_ __n));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return X times (2 to the Nth power).  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(scalbn,, (_Mdouble_ __x, int __n));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return the binary exponent of X, which must be nonzero.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHDECL
(int,ilogb,, (_Mdouble_ __x));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#ifdef
__USE_ISOC9X</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return X times (2 to the Nth power).  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(scalbln,, (_Mdouble_ __x, long int __n));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Round X to integral value in floating-point format using current</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  rounding direction, but do not raise inexact exception.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(nearbyint,, (_Mdouble_ __x));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Round X to nearest integral value, rounding halfway cases away from</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  zero.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(round,, (_Mdouble_ __x));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Round X to the integral value in floating-point format nearest but</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  not larger in magnitude.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALLX
(trunc,, (_Mdouble_ __x), (__const__));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Compute remainder of X and Y and put in *QUO a value with sign of x/y</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  and magnitude congruent `mod 2^n' to the magnitude of the integral</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  quotient x/y, with n &gt;= 3.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(remquo,, (_Mdouble_ __x, _Mdouble_ __y, int *__quo));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Conversion functions.  */</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Round X to nearest integral value according to current rounding</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  direction.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHDECL
(long int,lrint,, (_Mdouble_ __x));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHDECL
(long long int,llrint,, (_Mdouble_ __x));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Round X to nearest integral value, rounding halfway cases away from</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
  zero.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHDECL
(long int,lround,, (_Mdouble_ __x));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHDECL
(long long int,llround,, (_Mdouble_ __x));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return positive difference between X and Y.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(fdim,, (_Mdouble_ __x, _Mdouble_ __y));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return maximum numeric value from X and Y.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(fmax,, (_Mdouble_ __x, _Mdouble_ __y));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Return minimum numeric value from X and Y.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(fmin,, (_Mdouble_ __x, _Mdouble_ __y));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Classify given number.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHDECL_1
(int, __fpclassify,, (_Mdouble_ __value))</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
    __attribute__ ((__const__));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Test for negative number.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHDECL_1
(int, __signbit,, (_Mdouble_ __value))</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">
    __attribute__ ((__const__));</FONT></FONT></P>
<P><BR><BR>
</P>
<P><BR><BR>
</P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">/*
Multiply-add function computed as a ternary operation.  */</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">__MATHCALL
(fma,, (_Mdouble_ __x, _Mdouble_ __y, _Mdouble_ __z));</FONT></FONT></P>
<P><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt">#endif
/* Use ISO C 9X.  */</FONT></FONT></P>
</BODY>
</HTML>