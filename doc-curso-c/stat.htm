<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
	<TITLE></TITLE>
	<META NAME="GENERATOR" CONTENT="StarOffice/5.1 (Linux)">
	<META NAME="AUTHOR" CONTENT=" ">
	<META NAME="CREATED" CONTENT="20000201;17201200">
	<META NAME="CHANGEDBY" CONTENT=" ">
	<META NAME="CHANGED" CONTENT="20000201;17201200">
</HEAD>
<BODY>
<P ALIGN=LEFT><B><FONT SIZE=4 STYLE="font-size: 16pt"><FONT FACE="courier, monospace">/*
Copyright (C) 1991, 92, 95, 96, 97, 98 Free Software Foundation, Inc.</FONT></FONT></B></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  This file is part of the GNU C Library.</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  The GNU C Library is free software; you can redistribute it and/or</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  modify it under the terms of the GNU Library General Public License
<BR><BR>   as published by the Free Software Foundation; either
version 2 of the</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  License, or (at your option) any later version.</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  The GNU C Library is distributed in the hope that it will be
useful,</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  but WITHOUT ANY WARRANTY; without even the implied warranty of</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  Library General Public License for more details.</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  You should have received a copy of the GNU Library General Public</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  License along with the GNU C Library; see the file COPYING.LIB.  If
<BR><BR>   not, write to the Free Software Foundation, Inc., 59
Temple Place - <BR><BR>   Suite 330, Boston, MA 02111-1307, USA.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
*	POSIX Standard: 5.6 File Characteristics	&lt;sys/stat.h&gt;</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
*/</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#ifndef	_SYS_STAT_H</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	_SYS_STAT_H	1</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#include
&lt;features.h&gt;</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#include
&lt;bits/types.h&gt;		/* For __mode_t and __dev_t.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#ifdef
__USE_XOPEN</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
define __need_time_t</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
include &lt;time.h&gt;		/* For time_t.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
The Single Unix specification says that some more types are</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  available here.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
ifndef dev_t</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>typedef
__dev_t dev_t;</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 define dev_t dev_t</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
ifndef gid_t</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>typedef
__gid_t gid_t;</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 define gid_t gid_t</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
ifndef ino_t</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 ifndef __USE_FILE_OFFSET64</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>typedef
__ino_t ino_t;</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 else</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>typedef
__ino64_t ino_t;</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 endif</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 define ino_t ino_t</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
ifndef mode_t</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>typedef
__mode_t mode_t;</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 define mode_t mode_t</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
ifndef nlink_t</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>typedef
__nlink_t nlink_t;</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 define nlink_t nlink_t</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
ifndef off_t</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 ifndef __USE_FILE_OFFSET64</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>typedef
__off_t off_t;</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 else</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>typedef
__off64_t off_t;</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 endif</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 define off_t off_t</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
ifndef uid_t</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>typedef
__uid_t uid_t;</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 define uid_t uid_t</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
endif</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif	/*
X/Open */</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#ifdef
__USE_UNIX98</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
ifndef pid_t</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>typedef
__pid_t pid_t;</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 define pid_t pid_t</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
endif</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif	/*
Unix98 */</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>__BEGIN_DECLS</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#include
&lt;bits/stat.h&gt;</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#if
defined __USE_BSD || defined __USE_MISC || defined __USE_XOPEN</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
define S_IFMT		__S_IFMT</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
define S_IFDIR	__S_IFDIR</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
define S_IFCHR	__S_IFCHR</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
define S_IFBLK	__S_IFBLK</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
define S_IFREG	__S_IFREG</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
ifdef __S_IFIFO</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 define S_IFIFO	__S_IFIFO</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
endif</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
if defined __USE_BSD || defined __USE_MISC</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 ifdef __S_IFLNK</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
  define S_IFLNK	__S_IFLNK</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 endif</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 ifdef __S_IFSOCK</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
  define S_IFSOCK	__S_IFSOCK</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 endif</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
endif</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
Test macros for file types.	*/</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	__S_ISTYPE(mode,
mask)	(((mode) &amp; __S_IFMT) == (mask))</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	S_ISDIR(mode)	
__S_ISTYPE((mode), __S_IFDIR)</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	S_ISCHR(mode)	
__S_ISTYPE((mode), __S_IFCHR)</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	S_ISBLK(mode)	
__S_ISTYPE((mode), __S_IFBLK)</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	S_ISREG(mode)	
__S_ISTYPE((mode), __S_IFREG)</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#ifdef
__S_IFIFO</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
define S_ISFIFO(mode)	 __S_ISTYPE((mode), __S_IFIFO)</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#ifdef	__USE_BSD</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
ifdef __S_IFLNK</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 define S_ISLNK(mode)	 __S_ISTYPE((mode), __S_IFLNK)</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
else</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 define S_ISLNK(mode)  0</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
endif</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
ifdef __S_IFSOCK</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 define S_ISSOCK(mode) __S_ISTYPE((mode), __S_IFSOCK)</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
endif</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
Protection bits.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	S_ISUID
__S_ISUID	/* Set user ID on execution.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	S_ISGID	__S_ISGID	/*
Set group ID on execution.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#if
defined __USE_BSD || defined __USE_MISC</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
Save swapped text after use (sticky bit).  This is pretty well
obsolete.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
define S_ISVTX	__S_ISVTX</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	S_IRUSR	__S_IREAD	/*
Read by owner.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	S_IWUSR	__S_IWRITE	/*
Write by owner.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	S_IXUSR	__S_IEXEC	/*
Execute by owner.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
Read, write, and execute by owner.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	S_IRWXU	(__S_IREAD|__S_IWRITE|__S_IEXEC)</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#if
defined __USE_MISC &amp;&amp; defined __USE_BSD</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
define S_IREAD	S_IRUSR</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
define S_IWRITE	S_IWUSR</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
define S_IEXEC	S_IXUSR</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	S_IRGRP	(S_IRUSR
&gt;&gt; 3)	/* Read by group.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	S_IWGRP	(S_IWUSR
&gt;&gt; 3)	/* Write by group.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	S_IXGRP	(S_IXUSR
&gt;&gt; 3)	/* Execute by group.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
Read, write, and execute by group.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	S_IRWXG	(S_IRWXU
&gt;&gt; 3)</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	S_IROTH	(S_IRGRP
&gt;&gt; 3)	/* Read by others.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	S_IWOTH	(S_IWGRP
&gt;&gt; 3)	/* Write by others.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	S_IXOTH	(S_IXGRP
&gt;&gt; 3)	/* Execute by others.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
Read, write, and execute by others.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#define	S_IRWXO	(S_IRWXG
&gt;&gt; 3)</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#ifdef	__USE_BSD</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
Macros for common mode bit masks.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
define ACCESSPERMS (S_IRWXU|S_IRWXG|S_IRWXO) /* 0777 */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
define ALLPERMS (S_ISUID|S_ISGID|S_ISVTX|S_IRWXU|S_IRWXG|S_IRWXO)/*
07777 */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
define DEFFILEMODE
(S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH)/* 0666*/</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
define S_BLKSIZE	512	/* Block size for `st_blocks'.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#ifndef
__USE_FILE_OFFSET64</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
Get file attributes for FILE and put them in BUF.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int stat __P ((__const char *__file, struct stat *__buf));</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
Get file attributes for the file, device, pipe, or socket</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  that file descriptor FD is open on and put them in BUF.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int fstat __P ((int __fd, struct stat *__buf));</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#else</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
ifdef __REDIRECT</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int __REDIRECT (stat, __P ((__const char *__file, struct stat
*__buf)),</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>		
      stat64);</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int __REDIRECT (fstat, __P ((int __fd, struct stat *__buf)),
fstat64);</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
else</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 define stat stat64</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 define fstat fstat64</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
endif</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#ifdef
__USE_LARGEFILE64</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int stat64 __P ((__const char *__file, struct stat64 *__buf));</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int fstat64 __P ((int __fd, struct stat64 *__buf));</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#if
defined __USE_BSD || defined __USE_XOPEN_EXTENDED</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
ifndef __USE_FILE_OFFSET64</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
Get file attributes about FILE and put them in BUF.</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  If FILE is a symbolic link, do not follow it.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int lstat __P ((__const char *__file, struct stat *__buf));</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
else</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 ifdef __REDIRECT</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int __REDIRECT (lstat, __P ((__const char *__file, struct stat
*__buf)),</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>		
      lstat64);</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 else</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
  define lstat lstat64</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 endif</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
endif</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
ifdef __USE_LARGEFILE64</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int lstat64 __P ((__const char *__file, struct stat64 *__buf));</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
endif</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
Set file access permissions for FILE to MODE.</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  This takes an `int' MODE argument because that</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  is what `mode_t's get widened to.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int chmod __P ((__const char *__file, __mode_t __mode));</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
Set file access permissions of the file FD is open on to MODE.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#if
defined __USE_BSD || defined __USE_XOPEN_EXTENDED</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int fchmod __P ((int __fd, __mode_t __mode));</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
Set the file creation mask of the current process to MASK,</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  and return the old creation mask.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
__mode_t umask __P ((__mode_t __mask));</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#ifdef	__USE_GNU</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
Get the current `umask' value without changing it.</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  This function is only available under the GNU Hurd.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
__mode_t getumask __P ((void));</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
Create a new directory named PATH, with permission bits MODE.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int mkdir __P ((__const char *__path, __mode_t __mode));</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
Create a device file named PATH, with permission and special bits
MODE</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  and device number DEV (which can be constructed from major and
minor</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  device numbers with the `makedev' macro above).  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#if
defined __USE_MISC || defined __USE_BSD || defined
__USE_XOPEN_EXTENDED</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int mknod __P ((__const char *__path,</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>		
      __mode_t __mode, __dev_t __dev));</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
Create a new FIFO named PATH, with permission bits MODE.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int mkfifo __P ((__const char *__path, __mode_t __mode));</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
To allow the `struct stat' structure and the file type `mode_t'</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  bits to vary without changing shared library major version number,</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  the `stat' family of functions and `mknod' are in fact inline</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  wrappers around calls to `xstat', `fxstat', `lxstat', and `xmknod',</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  which all take a leading version-number argument designating the</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  data structure and bits used.  &lt;bits/stat.h&gt; defines
_STAT_VER with</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  the version number corresponding to `struct stat' as defined in</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  that file; and _MKNOD_VER with the version number corresponding to</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  the S_IF* macros defined therein.  It is arranged that when not</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  inlined these function are always statically linked; that way a</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  dynamically-linked executable always encodes the version number</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  corresponding to the data structures it uses, so the `x' functions</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  in the shared library can adapt without needing to recompile all</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
  callers.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#ifndef
_STAT_VER</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
define _STAT_VER	0</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#ifndef
_MKNOD_VER</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
define _MKNOD_VER	0</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
Wrappers for stat and mknod system calls.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#ifndef
__USE_FILE_OFFSET64</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int __fxstat __P ((int __ver, int __fildes,</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>			
 struct stat *__stat_buf));</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int __xstat __P ((int __ver, __const char *__filename,</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>			
struct stat *__stat_buf));</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int __lxstat __P ((int __ver, __const char *__filename,</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>			
 struct stat *__stat_buf));</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#else</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
ifdef __REDIRECT</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int __REDIRECT (__fxstat, __P ((int __ver, int __fildes,</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>				
      struct stat *__stat_buf)), __fxstat64);</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int __REDIRECT (__xstat, __P ((int __ver, __const char *__filename,</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>				
     struct stat *__stat_buf)), __xstat64);</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int __REDIRECT (__lxstat, __P ((int __ver, __const char *__filename,</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>				
      struct stat *__stat_buf)), __lxstat64);</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
else</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 define __fxstat __fxstat64</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 define __xstat __xstat64</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 define __lxstat __lxstat64</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
endif</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#ifdef
__USE_LARGEFILE64</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int __fxstat64 __P ((int __ver, int __fildes,</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>			
   struct stat64 *__stat_buf));</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int __xstat64 __P ((int __ver, __const char *__filename,</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>			
  struct stat64 *__stat_buf));</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int __lxstat64 __P ((int __ver, __const char *__filename,</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>			
   struct stat64 *__stat_buf));</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
int __xmknod __P ((int __ver, __const char *__path,</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>			
 __mode_t __mode, __dev_t *__dev));</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#if
defined __GNUC__ &amp;&amp; __GNUC__ &gt;= 2</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>/*
Inlined versions of the real stat and mknod functions.  */</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
__inline__ int stat (__const char *__path,</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>			
   struct stat *__statbuf) __THROW</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>{</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
 return __xstat (_STAT_VER, __path, __statbuf);</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>}</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
if defined __USE_BSD || defined __USE_XOPEN_EXTENDED</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
__inline__ int lstat (__const char *__path,</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>			
    struct stat *__statbuf) __THROW</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>{</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
 return __lxstat (_STAT_VER, __path, __statbuf);</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>}</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
__inline__ int fstat (int __fd, struct stat *__statbuf) __THROW</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>{</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
 return __fxstat (_STAT_VER, __fd, __statbuf);</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>}</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
if defined __USE_MISC || defined __USE_BSD</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
__inline__ int mknod (__const char *__path, __mode_t __mode,</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>			
    __dev_t __dev) __THROW</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>{</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
 return __xmknod (_MKNOD_VER, __path, __mode, &amp;__dev);</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>}</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
ifdef __USE_LARGEFILE64</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
__inline__ int stat64 (__const char *__path,</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>			
     struct stat64 *__statbuf) __THROW</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>{</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
 return __xstat64 (_STAT_VER, __path, __statbuf);</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>}</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 if defined __USE_BSD || defined __USE_XOPEN_EXTENDED</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
__inline__ int lstat64 (__const char *__path,</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>			
      struct stat64 *__statbuf) __THROW</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>{</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
 return __lxstat64 (_STAT_VER, __path, __statbuf);</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>}</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
 endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>extern
__inline__ int fstat64 (int __fd, struct stat64 *__statbuf) __THROW</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>{</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>
 return __fxstat64 (_STAT_VER, __fd, __statbuf);</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>}</B></FONT></FONT></P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#
endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>__END_DECLS</B></FONT></FONT></P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><BR><BR>
</P>
<P ALIGN=LEFT><FONT FACE="courier, monospace"><FONT SIZE=4 STYLE="font-size: 16pt"><B>#endif
/* sys/stat.h  */</B></FONT></FONT></P>
</BODY>
</HTML>