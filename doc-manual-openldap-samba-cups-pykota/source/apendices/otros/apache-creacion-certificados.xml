<?xml version="1.0" encoding="ISO-8859-1" ?>

<appendix id="apache-creacion-certificados">
	<title>Preparación de <application>Apache</application> para el uso de <acronym>SSL</acronym></title>

<sect1 id="apache-creacion-certificados-introduccion">
	<title>Introducción</title>

	<para>En los ejemplos <xref linkend="ldap-account-manager-ejemplo-instalacion-1"/>,
	<xref linkend="ldap-account-manager-ejemplo-instalacion-2"/>,
	<xref linkend="ldap-account-manager-ejemplo-instalacion-3"/> y
	<xref linkend="ldap-account-manager-ejemplo-instalacion-4"/> se ha visto el proceso
	de instalación de <application>Apache</application> junto con el módulo
	<quote>mod_ssl</quote>, entre otros. Este apéndice abordará la creación de los certificados
	necesarios así como la configuración relativa al servidor web, para permitir
	conexiones <acronym>SSL</acronym> contra el servidor <application>Apache</application>.</para>

</sect1>

<sect1 id="apache-creacion-certificados-generacion">
	<title>Generación de la entidad certificadora y los certificados</title>

	<para>A continuación se mostrará el proceso que se ha de seguir para la creación
	de la entidad certificadora y el certificado necesario para que el servidor
	<application>Apache</application> pueda servir páginas a través de <acronym>SSL</acronym>:</para>

	<example id="apache-creacion-certificados-generacion-ejemplo-1">
		<title>Creación del certificado para el servidor <application>Apache</application></title>

<screen><prompt>#</prompt> <userinput>/usr/bin/dpkg-reconfigure libapache-mod-ssl</userinput>
<computeroutput>What type of certificate do you want to create?

  1. dummy     (dummy self-signed Snake Oil cert)
  2. test      (test cert signed by Snake Oil CA)
  3. custom    (custom cert signed by own CA)
  4. existing  (existing cert)


Use  dummy     when you are a vendor package maintainer,
     test      when you are an admin but want to do tests only,
     custom    when you are an admin willing to run a real server
     existing  when you are an admin who upgrades a server.

Normally you would choose 2.

your choice:</computeroutput> <userinput>3</userinput>
<computeroutput>Which algorithm should be used to generate required key(s)?

  1. RSA
  2. DSA

Normally you would choose 1.

your choice:</computeroutput> <userinput>1</userinput>
<computeroutput>SSL Certificate Generation Utility (mkcert.sh)
Copyright (c) 1998-2000 Ralf S. Engelschall, All Rights Reserved.

Generating custom certificate signed by own CA [CUSTOM]
______________________________________________________________________

STEP 1: Generating RSA private key for CA (1024 bit) [ca.key]
2477870 semi-random bytes loaded
Generating RSA private key, 1024 bit long modulus
.....++++++
..........................................++++++
e is 65537 (0x10001)
______________________________________________________________________

STEP 2: Generating X.509 certificate signing request for CA [ca.csr]
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
1. Country Name             (2 letter code) [XY]:</computeroutput><userinput>PT</userinput>
<computeroutput>2. State or Province Name   (full name)     [Snake Desert]:</computeroutput><userinput>Braganca</userinput>
<computeroutput>3. Locality Name            (eg, city)      [Snake Town]:</computeroutput><userinput>Braganca</userinput>
<computeroutput>4. Organization Name        (eg, company)   [Snake Oil, Ltd]:</computeroutput><userinput>Companhia GSR</userinput>
<computeroutput>5. Organizational Unit Name (eg, section)   [Certificate Authority]:</computeroutput><userinput>Servicos web</userinput>
<computeroutput>6. Common Name              (eg, CA name)   [Snake Oil CA]:</computeroutput><userinput>gsr.pt</userinput>
<computeroutput>7. Email Address            (eg, name@FQDN) [ca@snakeoil.dom]:</computeroutput><userinput>sergio@gsr.pt</userinput>
<computeroutput>8. Certificate Validity     (days)          [365]:</computeroutput> <userinput>[Enter]</userinput>
<computeroutput>______________________________________________________________________

STEP 3: Generating X.509 certificate for CA signed by itself [ca.crt]
Certificate Version (1 or 3) [3]:</computeroutput><userinput>3</userinput>
<computeroutput><![CDATA[Signature ok
subject=/C=PT/ST=Braganca/L=Braganca/O=Companhia \
                                  GSR/OU=Servicos web/CN=gsr.pt/emailAddress=sergio@gsr.pt
Getting Private key
Verify: matching certificate & key modulus
Verify: matching certificate signature
/etc/apache/ssl.crt/ca.crt: /C=PT/ST=Braganca/L=Braganca/O=Companhia \
                                  GSR/OU=Servicos web/CN=gsr.pt/emailAddress=sergio@gsr.pt
error 18 at 0 depth lookup:self signed certificate
OK
______________________________________________________________________

STEP 4: Generating RSA private key for SERVER (1024 bit) [server.key]
2477870 semi-random bytes loaded
Generating RSA private key, 1024 bit long modulus
........++++++
......++++++
e is 65537 (0x10001)
______________________________________________________________________

STEP 5: Generating X.509 certificate signing request for SERVER [server.csr]
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
1. Country Name             (2 letter code) [XY]:]]></computeroutput><userinput>PT</userinput>
<computeroutput>2. State or Province Name   (full name)     [Snake Desert]:</computeroutput><userinput>Braganca</userinput>
<computeroutput>3. Locality Name            (eg, city)      [Snake Town]:</computeroutput><userinput>Braganca</userinput>
<computeroutput>4. Organization Name        (eg, company)   [Snake Oil, Ltd]:</computeroutput><userinput>GSR Web</userinput>
<computeroutput>5. Organizational Unit Name (eg, section)   [Webserver Team]:</computeroutput><userinput>Aplicacoes web</userinput>
<computeroutput>6. Common Name              (eg, FQDN)      [www.snakeoil.dom]:</computeroutput><userinput>gsr.pt</userinput>
<computeroutput>7. Email Address            (eg, name@fqdn) [www@snakeoil.dom]:</computeroutput><userinput>sergio@gsr.pt</userinput>
<computeroutput>8. Certificate Validity     (days)          [365]:</computeroutput><userinput>[Enter]</userinput>
<computeroutput><![CDATA[______________________________________________________________________

STEP 6: Generating X.509 certificate signed by own CA [server.crt]
Certificate Version (1 or 3) [3]:]]></computeroutput><userinput>3</userinput>
<computeroutput><![CDATA[Signature ok
subject=/C=PT/ST=Braganca/L=Braganca/O=GSR Web/OU=Aplicacoes \
                                       web/CN=gsr.pt/emailAddress=sergio@gsr.pt
Getting CA Private Key
Verify: matching certificate & key modulus
Verify: matching certificate signature
/etc/apache/ssl.crt/server.crt: OK
______________________________________________________________________

STEP 7: Enrypting RSA private key of CA with a pass phrase for security [ca.key]
The contents of the ca.key file (the generated private key) has to be
kept secret. So we strongly recommend you to encrypt the server.key file
with a Triple-DES cipher and a Pass Phrase.
Encrypt the private key now? [Y/n]:]]></computeroutput> <userinput>n</userinput> <co id="encrypt-private-key-1" />
<computeroutput><![CDATA[Warning, you're using an unencrypted private key.
Please notice this fact and do this on your own risk.
______________________________________________________________________

STEP 8: Enrypting RSA private key of SERVER with a pass phrase for security [server.key]
The contents of the server.key file (the generated private key) has to be
kept secret. So we strongly recommend you to encrypt the server.key file
with a Triple-DES cipher and a Pass Phrase.
Encrypt the private key now? [Y/n]:]]></computeroutput> <userinput>n</userinput> <co id="encrypt-private-key-2" />
<computeroutput><![CDATA[Warning, you're using an unencrypted RSA private key.
Please notice this fact and do this on your own risk.
______________________________________________________________________

RESULT: CA and Server Certification Files

o  /etc/apache/ssl.key/ca.key
   The PEM-encoded RSA private key file of the CA which you can
   use to sign other servers or clients. KEEP THIS FILE PRIVATE!

o  /etc/apache/ssl.crt/ca.crt
   The PEM-encoded X.509 certificate file of the CA which you use to
   sign other servers or clients. When you sign clients with it (for
   SSL client authentication) you can configure this file with the
   'SSLCACertificateFile' directive.

o  /etc/apache/ssl.key/server.key
   The PEM-encoded RSA private key file of the server which you configure
   with the 'SSLCertificateKeyFile' directive (automatically done
   when you install via APACI). KEEP THIS FILE PRIVATE!

o  /etc/apache/ssl.crt/server.crt
   The PEM-encoded X.509 certificate file of the server which you configure
   with the 'SSLCertificateFile' directive (automatically done
   when you install via APACI).

o  /etc/apache/ssl.csr/server.csr
   The PEM-encoded X.509 certificate signing request of the server file which
   you can send to an official Certificate Authority (CA) in order
   to request a real server certificate (signed by this CA instead
   of our own CA) which later can replace the /etc/apache/ssl.crt/server.crt
   file.

Congratulations that you establish your server with real certificates.

./snakeoil-ca-rsa.crt ... e52d41d0.0
./ca-bundle.crt ... Skipped
./gsr-ca-rsa.crt ... c43c023d.0
./snakeoil-dsa.crt ... 5d8360e1.0
./snakeoil-rsa.crt ... 82ab5372.0
./ca.crt ... 458c23d7.0
./server.crt ... 6219a630.0
./snakeoil-ca-dsa.crt ... 0cf14d7d.0]]></computeroutput></screen>
	</example>

	<calloutlist>
		<callout arearefs="encrypt-private-key-1 encrypt-private-key-2">
			<para>Como se está trabajando sobre un equipo destinado a pruebas, se ha decidido
			no cifrar las llaves generadas, de esta forma se evitará el teclear
			la clave empleada en el cifrado cada vez que se reinicie el servidor
			<application>Apache</application>. ¡Esto es un problema muy grabe de seguridad!
			si está trabajando sobre un servidor en producción, es más que recomendable hacer
			uso del cifrado en estos puntos.</para>
		</callout>
	</calloutlist>
</sect1>

<sect1 id="apache-creacion-certificados-configuracion">
	<title>Configuración de <application>Apache</application></title>

	<para>Para añadir soporte <acronym>SSL</acronym> a <application>Apache</application>, no basta únicamente
	con crear el certificado, también hay que indicar a <application>Apache</application> donde
	se encuentra dicho certificado.</para>

	<para>En primer lugar, se copiará un archivo de ejemplo de configuración del módulo
	<emphasis>mod_ssl</emphasis>, distribuído con el paquete <emphasis>libapache-mod-ssl</emphasis>,
	y se personalizará. Siga las siguientes indicaciones:</para>

	<example id="apache-creacion-certificados-configuracion-ejemplo-1">
		<title>Preparación para la configuración del módulo <emphasis>mod_ssl</emphasis> de
		<application>Apache</application></title>

<screen><prompt>#</prompt> <userinput>/bin/cp -v /usr/share/doc/libapache-mod-ssl/examples/mod-ssl.conf \
/etc/apache/conf.d/mod_ssl-00-global.conf</userinput>
<computeroutput>«/usr/share/doc/libapache-mod-ssl/examples/mod-ssl.conf» -> «/etc/apache/conf.d/mod_ssl-00-global.conf»</computeroutput>
<prompt>#</prompt> <userinput>/bin/chmod -v 644 mod_ssl-00-global.conf</userinput>
<computeroutput>el modo de «mod_ssl-00-global.conf» cambia a 0644 (rw-r--r--)</computeroutput></screen>
	</example>

	<para>Ahora edite el archivo <filename>/etc/apache/conf.d/mod_ssl-00-global.conf</filename> y
	comente las siguientes líneas:</para>

<programlisting>Listen   80

SSLSessionCache   none</programlisting>

	<para>y descomente estas otras:</para>

<programlisting>#SSLSessionCache         dbm:/var/run/mod_ssl_scache
#SSLSessionCacheTimeout  300

#SSLLog /var/log/apache/ssl_engine.log
#SSLLogLevel info</programlisting>

	<note><para>En el <xref linkend="mod_ssl-00-global.conf"/> se encuentra un
	archivo de configuración completo.</para></note>

	<sect2 id="apache-creacion-certificados-generacion-vhost">
		<title>Configuración de los <emphasis>virtual host</emphasis></title>

		<para>Ahora se creará la configuración personalizada para cada <quote>virtual host</quote>.
		En la actualidad existen dos <quote>virtual host</quote> en el equipo: uno denominado
		<emphasis>gsr.pt:80</emphasis> y otro <emphasis>gsr.pt:443</emphasis>.</para>
	
		<para>La configuración de los <quote>virtual host</quote> se almacenará en el archivo
		<filename>/etc/apache/conf.d/vhost.conf</filename>. Aquí no se tratará el contenido
		de este archivo, ya que posee un archivo de configuración completo en el
		<xref linkend="vhost.conf"/>.</para>
	
		<para>Esto es suficiente para habilitar el soporte <acronym>SSL</acronym> en <application>Apache</application>.
		Ahora se ha de reiniciar <application>Apache</application>, para ello teclee:</para>
	
		<example id="apache-creacion-certificados-generacion-vhost-ejemplo-1">
			<title>Reinicio del servidor <application>Apache</application></title>
	
<screen><prompt>#</prompt> <userinput>/etc/init.d/apache restart</userinput>
<computeroutput>Restarting apache.</computeroutput></screen>
		</example>
	</sect2>
</sect1>
</appendix>
