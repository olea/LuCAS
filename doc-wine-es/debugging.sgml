  <chapter id="debugging">
    <title>Guía de Depuración</title>

      <para>
        Escrito por &name-dimitrie-paun; <email>&email-dimitrie-paun;</email>, 28 Mar 1998
      </para>
      <para>
        (Extraido de <filename>wine/documentation/debug-msgs</filename>)
      </para>

      <note>
        <para>
          Es posible activar o desactivar los mensajes de depuración
          usando el comando "set". Por favor consulte la sección de
          Referencia de Comandos WineDbg para averiguar como hacer esto.
        </para>
      </note>

      <important>
        <para>
          Al final del documento, hay una "Guía de Estilo" para
          mensajes de depuración. Por favor leala.
        </para>
      </important>

      <sect1 id="dbg-classes">
        <title>Clases de Mensajes de Depuración</title>

        <para>
          Existen 4 tipos (o clases) de mensajes:
        </para>
        <variablelist>
          <varlistentry>
            <term><literal>FIXME</literal></term>
            <listitem>
              <para>
                Los menssajes de esta clase están pensados para señalar características
		no implementadas, errores concocidos, etc. Sirven como un recordatorio constante
		y activo de qué es necesario hacer.
              </para>
              <para>Ejemplos: stubs, funciones semi-implementadas, etc.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ERR</literal></term>
            <listitem>
              <para>
                Los mensajes de esta clase estan realcionados con serios errores
                en Wine. Esta clase de mensajes señalan un estado interno inconsistente,
                o de manera más general, una condición que no debería ocurrir nunca según 
		el diseño.
              </para>
              <para>
                Ejemplos: cambio inesperado de estado interno, etc.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>WARN</literal></term>
            <listitem>
              <para>
                Estos son mensajes de aviso. Usted debería informar de una aviso
                cuando algo no deseado ocurre, pero la función se
                comporta correctamente. Esto es, muestre un aviso
                cuando encuentre algo inesperado (ej: no pudo
                abrir un fichero) pero la función maneja bien la situación
                (esto es, de acuerdo con los manuales). Si no
                puede manejar el error correctamente, muestre un fixme.
              </para>
              <para>
                Ejemplos: Fallo en el acceso a los recursos requeridos por la aplicación.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>TRACE</literal></term>
            <listitem>
              <para>
                Estos son mensajes de depuración detallados que son fundamentalmente
                útiles para depurar un componenete. Están generalmente desactivados.
              </para>
              <para>
                Ejemplos: Cualquier otra cosa no clasificable en alguna de las
                categorías anteriormente mencionadas y que el usuario no necesite
                saber de ello.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect1>

      <sect1 id="dbg-channels">
        <title>Canales de depuración</title>

        <para>
          Para manejar mejor el gran volumen de mensajes de depuración que
	  Wine puee generar, también los dividimos en base a ciertos componentes.
          Cada componente es asignado a un canal de depuración. El
          identificador del canal debe ser un identificador válido de C, pero
          notese que también podría ser una palabra reservada como
          <type>int</type> o <type>static</type>.
        </para>
        <para>
          Ejemplos de canales de depuración:
          <simplelist type="inline">
            <member><literal>reg</literal></member>
            <member><literal>updown</literal></member>
            <member><literal>string</literal></member>
          </simplelist>
        </para>
        <para>
          Nos referiremos a un canal genérico como <literal>xxx</literal>.
        </para>
      </sect1>

      <sect1 id="dbg-using">
        <title>Como usarlo</title>

        <para>
	Típicamente, un fichero contiene código perteneciente a un solo componente,
	y como tal, solo hay un canal hacia el cual dirigir su salida. Para simplificar
	su uso, puede declarar ese canal al principio del fichero,
	y simplimente escribir FIXMEs, ERRs, etc. como por ejemplo:

        <programlisting>
#include "wine/debug.h"

WINE_DEFAULT_DEBUG_CHANNEL(xxx);
....

    FIXME("alguna función no implementada", ...);
....
    if (zero != 0)
        ERR("Esto nunca debería ser no-nulo: %d", zero);
....
        </programlisting>
	</para>
	<para>
	  En ciertas situaciones no comunes, puede ser necesario dirigir la salida
	  de un fichero a más de un canal. En estos casos, necesitará declarar
	  todos los canales adicionales al principio del fichero, y
	  usar el _-version de las macros de depuración:
        <programlisting>
#include "wine/debug.h"

WINE_DEFAULT_DEBUG_CHANNEL(xxx);
WINE_DECLARE_DEBUG_CHANNEL(yyy);
WINE_DECLARE_DEBUG_CHANNEL(zzz);
....

    FIXME("este va al canal xxx");
....
    FIXME_(yyy)("Algunos otros mensajes para el canal yyy");
....
    WARN_(zzz)("Y otro mensaje más en otro canal!");
....
        </programlisting>
	</para>

        <para>
          Si necesita declarar otro mensaje de depuración, símplemente úselo
          en su código. Será interpretado automáticamente por el constructor.
        </para>

      </sect1>

      <sect1 id="dbg-checking">
        <title>Estamos depurando?</title>

        <para>
          Para comprobar si los mensajes de depuración de la clase
          <literal>yyy</literal> en el canal <literal>xxx</literal> están
          activados, use:
        </para>
        <screen>
TRACE_ON  para comprobar si TRACE está activado 
WARN_ON   para comprobar si WARN  está activado
FIXME_ON  para comprobar si FIXME está activado
ERR_ON    para comprobar si ERR está activado
        </screen>
        <para>
          Ejemplos:
        </para>
        <programlisting>
if(TRACE_ON(atom)){
  ...blah...
}
        </programlisting>

        <note>
          <para>
            Usted normalmente debería únicamente necesitar comprobar
            <literal>TRACE_ON</literal>. En estos momentos, ninguno de los otros
            3 tests (excepto <literal>ERR_ON</literal> que es usado
            solo una vez!) son usados en Wine.
          </para>
        </note>
      </sect1>

      <sect1 id="dbg-resource-ids">
        <title>Identificadores de recurso</title>

        <para>
          Los identificadores de recuros pueden ser cadenas o números. Para
          hacer la vida un poco más fácil a  la hora de sacar por pantalla estas bestias (y
          ayudar a evitar la necesidad de construir el mensaje ne memoria), He
          introducido una nueva versión llamada <function>debugres</function>.
        </para>
        <para>
          La función está definida en <filename>wine/debug.h</filename>
          y tiene el siguiente prototipo:
        </para>
        <programlisting>
LPSTR debugres(const void *id);
        </programlisting>
        <para>
          Toma un puntero al identificador del recurso y devuelve una cadena
          con formato del identificador (que puede ser una cadena o un
	  número, dependiendo del valor de la palabra más alta).
	  A los números se les da formato como:
        </para>
        <programlisting>
#xxxx
        </programlisting>
        <para>
	  mientras que a las cadenas como:
        </para>
        <programlisting>
'alguna-cadena'
        </programlisting>
        <para>
	  Simplemente úselo en su código así:
        </para>
        <programlisting>
#include "wine/debug.h"

....

   TRACE("el recurso es %s", debugres(mirecurso));
        </programlisting>
      </sect1>

      <sect1 id="dbg-param">
        <title>El parámetro de línea de comandos <parameter>--debugmsg</parameter></title>

        <para>
          El parámetro de línea de comandos <parameter>--debugmsg</parameter>
          controla la salida de los mensajes de depuración.
	  Tiene el siguiente formato:
	  <parameter>--debugmsg [yyy]#xxx[,[yyy1]#xxx1]*</parameter>
        </para>
        <itemizedlist>
          <listitem>
            <para>
	      donde
              <literal>#</literal> es <literal>+</literal> o bien
              <literal>-</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              cuando el argumento de la clase opcional (<literal>yyy</literal>)
              no esté presente, entonces la declaración activará
              (<literal>+</literal>)/desactivará(<literal>-</literal>)
              todos los mensajes para el canal dado (<literal>xxx</literal>)
              en todas las clases. Por ejemplo:
            </para>
            <programlisting>
--debugmsg +reg,-file
            </programlisting>
            <para>
              activa todos los mensajes en el canal <literal>reg</literal>
              y desactiva todos los mensajes en el canal
              <literal>file</literal>.
            </para>
          </listitem>
          <listitem>
            <para>
              cuando el argumento de la clase opcional (<literal>yyy</literal>)
              está presente,  entonces la declaración activará
              (<literal>+</literal>)/desactivará(<literal>-</literal>)
              los mensajes para el canal dado (<literal>xxx</literal>)
              solo en la clase dada. Por ejemplo:
            </para>
            <programlisting>
--debugmsg trace+reg,warn-file
            </programlisting>
            <para>
              activa los mensajes de traza en el canal <literal>reg</literal>
              y desactiva los mensajes de aviso para el canal
              <literal>file</literal>.
            </para>
          </listitem>
          <listitem>
            <para>
              también, el pseudo-canal "all" (todos) también está soportado y
             tiene la siguiente intuitiva semántica:
            </para>
            <screen>
    --debugmsg +all      -- activa todos los mensajes de depuración
    --debugmsg -all      -- desactiva todos los mensajes de depuración
    --debugmsg yyy+all   -- activa los mensajes de depuración para la clase yyy en
                           todos los canales.
    --debugmsg yyy-all   -- desactiva los mensajes de depuración para la clase yyy en
                           todos los canales.
            </screen>
            <para>
              Entonces, por ejemplo:
            </para>
            <screen>
    --debugmsg warn-all  -- desactiva todos los mensajes de aviso.
            </screen>
          </listitem>
        </itemizedlist>

        <para>
          También, notese que en estos momentos:
        </para>
        <itemizedlist>
          <listitem>
            <para>las clases <literal>FIXME</literal> y <literal>ERR</literal>
              están activadas por defecto</para>
          </listitem>
          <listitem>
            <para>las clases <literal>TRACE</literal> y
              <literal>WARN</literal> están desactivadas por
              defecto</para>
          </listitem>
        </itemizedlist>
      </sect1>

      <sect1 id="dbg-compiling">
        <title>Compilando Mensajes de Depuración</title>

        <para>
          Para compilar mensajes de depuración, provea a
          <command>configure</command> con los siguientes parámetros:
        </para>
        <screen>
    --disable-debug      -- desactiva TRACE, WARN, y FIXME (y DUMP).
    --disable-trace      -- deactiva solo TRACE.
        </screen>
        <para>
          Esto resultará en un ejecutable que, una vez optimizado, es
          alrededor de un 15%-20% más pequeño.  Notese, sin embargo, que no será capaz de
          depurar Wine de manera efectiva sin estos mensajes.
        </para>
        <para>
          Esta funcionalidad no ha sido testeada intensivamente --podría sutilmente
          hacer funcionar algunas cosas.
        </para>
      </sect1>

      <sect1 id="dbg-notes">
        <title>Algunas Notas sobre Estilo</title>

        <para>
          Este nuevo esquema hace algunas cosas más consistentes pero
          aun hay lugar para mejoras mediante el uso de un estilo común de
          mensajes de depuración. Antes de continuar, permítanme hacer notar
          que el formato de salida es el siguiente:
        </para>
        <screen>
yyy:xxx:fff &lt;message>

donde:
  yyy = la clase (fixme, err, warn, trace)
  xxx = el canal (atom, win, font, etc)
  fff = el nombre de la función
        </screen>
        <para>
          estos campos son sacados automáticamente. Todo lo que tiene que
          proporcionar es la parte &lt;message>.
        </para>
        <para>
          Pues aquí van algunas ideas:
        </para>

        <itemizedlist>
          <listitem>
            <para>NO incluir el nombre de la función: se incluye automáticamente</para>
          </listitem>
          <listitem>
            <para>
              si quiere incluir los parámetros de la función, hágalo
              en primer lugar e inclúyalos entra paréntesis,
              como esto:
              <programlisting>
TRACE("(%d, %p, ...)\n", par1, par2, ...);
              </programlisting>
            </para>
          </listitem>
          <listitem>
            <para>
              ~para stubs, debe sacar un mensaje <literal>FIXME</literal>.
              Sugiero el siguiente estilo:
              <programlisting>
FIXME("(%x, %d, ...): stub\n", par1, par2, ...);
              </programlisting>
            </para>
          </listitem>
          <listitem>
            <para>
              intente incluir solo una línea por mensaje. Esto es, la cadena
              debe contner solo un <literal>\n</literal> y debe
              aparecer siempre al final de dicha cadena. (existen
              muchas razones para este requerimiento, una de ellas es que
              cada macro de depuración añade cosas al principio de la línea)
            </para>
          </listitem>
          <listitem>
            <para>
              si quiere dar nombre a un valor, use <literal>=</literal> y
              NO <literal>:</literal>. Esto es, en vez de decir:
              <programlisting>
FIXME("(fd: %d, file: %s): stub\n", fd, name);
              </programlisting>
              diga:
              <programlisting>
FIXME("(fd=%d, file=%s): stub\n", fd, name);
              </programlisting>
              use <literal>:</literal> para separar categorías.
            </para>
          </listitem>
          <listitem>
            <para>
              intente evitar el estilo:
              <programlisting>
FIXME(xxx, "(fd=%d, file=%s)\n", fd, name);
              </programlisting>
              en vez de esto, use:
              <programlisting>
FIXME(xxx, "(fd=%d, file=%s): stub\n", fd, name);
              </programlisting>
              La razón es que si quiere <command>grep</command>
              por cosas, buscaría por <literal>FIXME</literal>
              pero en el primer caso no hay información extra disponible,
              mientras que en el segundo caso si que la hay (e.j. la palabra
              stub)
            </para>
          </listitem>
          <listitem>
            <para>
              si saca una cadena que pudiera contener carácteres de control,
              o si <parameter>s</parameter> pudiera ser
              <literal>NULL</literal>, use
              <function>debugstr_a</function> (para cadenas ASCII, o
              <function>debugstr_w</function> para cadenas Unicode) para
              convertir <parameter>s</parameter> a una cadena C, como esto:
              <programlisting>
HANDLE32 WINAPI SuFunc(LPCSTR s)
{
    FIXME("(%s): stub\n", debugstr_a(s));
}
              </programlisting>
            </para>
          </listitem>
          <listitem>
            <para>
              si quiere sacar un identificador de registro, use debugres para primero
              convertirlo en una cadena, como esto:
              <programlisting>
HANDLE32 WINAPI SuFunc(LPCSTR res)
{
    FIXME("(res=%s): stub\n", debugres(s));
}
              </programlisting>
              si el identificador de recurso es <type>SEGPTR</type>, use
              <function>PTR_SEG_TO_LIN</function> para primero obtener un apuntador de
              línea:
              <programlisting>
HRSRC16 WINAPI FindResource16( HMODULE16 hModule, SEGPTR name, SEGPTR type )
{
[...]
    TRACE(resource, "module=%04x name=%s type=%s\n",
		 hModule, debugres(PTR_SEG_TO_LIN(name)),
		 debugres(PTR_SEG_TO_LIN(type)) );
[...]
}
              </programlisting>
            </para>
          </listitem>
          <listitem>
            <para>
              para mensajes pensados para el usuario (específicamente aquellos que
              informan de errores en el fichero de configuración), use la macro
              <literal>MSG</literal>. Úsela como un
              <function>printf</function>:
              <programlisting>
MSG( "La definición del dispositivo %d es incorrecta!\n", dispositivo );
              </programlisting>
              Sin embargo, tenga en cuenta que existen <emphasis>muy</emphasis> pocos
              usos válidos de esta  macro. La mayoría de los mensajes son mensajes de depuración,
              por eso lo más probable es que no necesite usa esta
              macro. Grep el código fuente para hacerse una idea de cuando
              puede ser apropiado su uso.
            </para>
          </listitem>
          <listitem>
            <para>
              Para volcados de memoria, use la macro <function>DUMP</function>.
              Usela como un <function>printf</function>, tal y como se hizo cono la macro
              <literal>MSG</literal>. Similarmente, solo existen unos pocos
              usos válidos de esta macro. Grep el código fuente para ver como
              usarla.
            </para>
          </listitem>
        </itemizedlist>
      </sect1>

  </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-parent-document:("wine-doc.sgml" "set" "book" "part" "chapter" "")
End:
-->
