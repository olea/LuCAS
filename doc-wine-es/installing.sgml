  <chapter id="installing">
    <title>Instalando/compilando Wine</title>
    <para>Como instalar Wine...</para>

    <sect1 id="replace-windows" xreflabel="--Installing Section--">
      <title>WWN Característica #52: Reemplazando Windows</title>

      <para>
        Escrito por &name-ove-kaaven; <email>&email-ove-kaaven;</email>

      </para>

      <sect2>
        <title>Vista general de la instalación</title>

        <para>
          Una instalación de Windows consiste en diferentes partes.
        </para>

        <itemizedlist>
          <listitem>
            <para>
              Registro. Muchas entradas del registro se suponen que
              existen y contienen datos relevantes, aun cuando Windows
              está recién instalado.
            </para>
          </listitem>
          <listitem>
            <para>
              Estructura de directorios. Las aplicaciones esperan
              encontrar una estrucutura de directorios para instalar
              cosas en localizaciones determinadas. Muchos de estos
              direcotorios se suponen que existen. Pero en una
              estructura de directorios tipo Unix, muchos de estos
              directorios no existen, y pueden ser reclamados por
              medio de la API de Windows y el registro. Esto añade
              requerimientos adicionales en la instalación de Wine.
            </para>
          </listitem>
          <listitem>
            <para>
              DLL's del sitemas. EN WIndows normalmente residen en los
              directorios
              <filename>system</filename> (o
              <filename>system32</filename>). Algunas aplicaciones de
              Windows verifican su existencia antes de intentar
              cargarlas. Mientras Wine sea capaz de cargar sus propias
              DLL internas (<filename>.so</filename> files) cuando la
              aplicación requiera una DLL, simulará la existencia de
              dichos archivos.
            </para>
          </listitem>
        </itemizedlist>

        <para>
          Para que los usuarios se liberen de configurar cualquier
          cosa ellos solos, el equipo de Wine ha creado un script que
          automatizará la instalación:
          <filename>tools/wineinstall</filename>, que se encargará de
          hacer todo lo necesario que nosotros (el equipo)
          consideramos que hay que hacer; ejecutar:
          <userinput>configure && make depend && make && make install
          </userinput> no es recomendable, si no sabe lo que esta
          haciendo. Por el momento
          <filename>tools/wineinstall</filename> es capaz de crear un
          archivo de configuración, intalar el registro y crear la
          estructura de directorios el mismo.
        </para>
      </sect2>

      <sect2>
        <title>El registro</title>
        <para>
          El registro prodeterminado se encuentra en el archivo
          <filename>winedefault.reg</filename>. Contiene las rutas de los 
	  directorios, IDs de las clases, y más; debe ser instalado antes 
	  de que aplicaciones como <filename>INSTALL.EXE</filename> o
          <filename>SETUP.EXE</filename> se ejecuten. El registro es cubre
	  con más detalle <link linkend="registry">aquí.</link>.
        </para>
      </sect2>

      <sect2>
        <title>Estructura de directorios</title>
        <para>
          Aquí esta la característica principal que las aplicaciones
          de Windows y los instaladores (refiriéndose también a las
          aplicaciones) esperan. Sin ella, raramente trabajarían correctamente.
        </para>

<programlisting>
C:\                Directorio raíz para el disco primario.
  Windows\         Directorio Windows, contiene archivos .INI,
                     accesorios, etc.
  System\          Directorio Win3.x/95/98/ME para DLLs comunes
                     directorio WinNT/2000 para DLLs comunes de 16-bit
  System32\        Directorio WinNT/2000 para DLLs comunes de 32-bit
  Start Menu\      Estructura del menú de Inicio
    Programs\      Enlaces del menú de inicio (archivos .LNK) 
  Program Files\   Ejecutables (binarios) de la aplicación (archivos .EXE y .DLLs)
</programlisting>

        <para>
          Wine emula unidades colocando su ruta virtual en puntos
	  determinados del sistema de ficheros de Unix, de esta manera es su
	  elección colocar <medialabel>C:</medialabel> donde quiera. 
	  Si quieres, pon <filename>/var/wine</filename>, como la ruta de su 
	  unidad virtual <medialabel>C</medialabel>, para ello debe ponerlo en
          <filename>~/.wine/config</filename>:
        </para>

        <programlisting>
[Drive C]
"Path" = "/var/wine"
"Type" = "hd"
"Label" = "MS-DOS"
"Filesystem" = "win95"
        </programlisting>

        <para>
          Con esta configuración, lo que ven las aplicaciones de windows en
	  "c:\windows\system" realmente está en 
	  <filename>/var/wine/windows/system</filename> del sistema de ficheros
	  de Unix. Necesita especificar 
          <literal>"Filesystem" = "win95"</literal>, NO
          <literal>"Filesystem" = "unix"</literal>, para hace que Wine simule
	  un sistema de archivos compatible (insensible a mayúsculas) con 
	  Windoes, de otro modo las aplicaciones no funcionarán.
	</para>
      </sect2>

      <sect2>
        <title>DLLs del sistema</title>
        <para>
	  El equipo de Wine ha determinado que es necesario crear archivos
	  DLL modificados para "trucar" muchas aplicaciones que verifican
	  la existencia de características especiales (como Winsock y TCP/IP).
	  Si esto es un problema para usted, puede crear archivos vacíos en el 
	  directorio <filename>c:\windows\system</filename> para conseguir
	  que la aplicación crea que existen, y los archivos DLL de Wine
	  se cargarán cuando la aplicación lo requiera. (Desafortunadamente,
	  <filename>tools/wineinstall</filename> no se crea con archivos vacíos
	  por sí misma.)
        </para>
        <para>
	  Algunas veces las aplicaciones intentan verificar la versión de los
	  archivos (por ejemplo para determinar la version de DirectX). Los 
	  archivos vacíos no funcionarán en este caso, será necesario instalar
	  los archivos de la versión correspondiente. Este problema esta siendo
	  solucionado actualmente. Por término medio, requerirá la copia de 
	  determinadas DLL para que estas aplicaciones funcionen.
        </para>
        <para>
	  Y naturalmente hay DLLs que Wine no implementa muy bien (o todas). 
	  Si no tienes un sistema Windows real al cual poder robarle las DLLs
	  necesarias, siempre puede obtenerlas de páginas web. Por favor,
	  asegúrese de obedecer cualquier tipo de licencia asociada a las DLL
	  que obtenga (algunas se pueden distribuir, otras no).
        </para>
      </sect2>
    </sect1>

    <sect1 id="no-windows">
      <title>Instalando Wine sin Windows</title>
      <para>
        Escrito por&name-james-juran; <email>&email-james-juran;</email>
      </para>
      <para>
        (Extraído de <filename>wine/documentation/no-windows</filename>)
      </para>

      <para>
        La principal finalidad de Wine es permitir ejecutar programas de 
	Windows sin tener que instalar Windows en su maquina. Wine implementa
	las funcionalidad de DLLs usadas normalmente y que acompañan a Windows.
	Por lo tanto, una vez que Wine este finalizado, no necesitarán tener 
	instalado Windows para que funcione Wine.
      </para>
      <para>
        Wine ya ha avanzado lo suficiente para que sea posible ejecutar
	aplicaciones sin tener Windows instalado. Si quiere intentarlos, sigue
	estos pasos:
      </para>

      <orderedlist>
        <listitem>
          <para>
            Haga que <medialabel>[Drive C]</medialabel> en
            <filename>~/.wine/config</filename> apunte al directorio que 
	    quiera usar como <filename>C:</filename>. Puede consultar las
	    páginas de man para wine.conf si necesita más información
	    El directorio a usar para emular la unidad C: será el directorio
	    base para muchos diretorios específicos. ¡Recuerde usar
            <userinput>"Filesystem" = "win95"</userinput>!
          </para>
        </listitem>
        <listitem>
          <para>
	    Después de establecer C:, cree los siguientes direcotios vacíos:
	    <filename>windows</filename>,
            <filename>windows/system</filename>,
            <filename>windows/Start Menu</filename>, y
            <filename>windows/Start Menu/Programs</filename>
            No use el directorio <filename>Windows</filename> de antiguas 
	    intalaciones y registros de windows perdidos. (Wine crea un 
	    registro especial en su directorio <filename>home</filename>
            en <filename>$HOME/.wine/*.reg</filename>.
            Quizás tenga que borrar estos archivos).
	    En una línea establece:
	    mkdir -p windows windows/system windows/Start\ Menu windows/Start\ Menu/Programs
          </para>
        </listitem>
        <listitem>
          <para>
	    Use <filename>tools/wineinstall</filename> para compilar Wine
	    e instalar el registro predeterminado. Si prefiere hacerlo por
	    usted mismo, compile <filename>programs/regapi</filename>, y ejecute:
          </para>
	  <screen>
		<userinput>programs/regapi/regapi setValue &lt; winedefault.reg</userinput>
	  </screen>
        </listitem>
        <listitem>
          <para>
            Ejecute y/o instala tus aplicaciones.
          </para>
        </listitem>
      </orderedlist>

      <para>
        Como Wine no está completo todavía, algunos programas no se ejecutarán
	tan bien con las DLL de Wine que con las de Windows. Wine ha sido 
	creado para hacer esto posible. Aquí hay unas cuantas pistas de 
	Juergen Schmied (y otros) de como proceder. Asume que su directorio
	<filename>C:\windows</filename> en el archivo de configuración
	no apunta a una instalación nativa de Windows, sino que se encuentra
	en un sistemas de ficheros de Unix aparte. (Por ejemplo, 
	<quote>C:\windows</quote> es realmente un subdirectorio de 
        <quote>windows</quote> localizado en <quote>/home/ego/wine/drives/c</quote>).
      </para>

      <itemizedlist>
        <listitem>
          <para>
	    Ejecute la aplicación con --debugmsg +loaddll</parameter>
	    para encontrar que archivos son necesarios. Copie las DLL 
	    requeridas una por una al directorio 
            <filename>C:\windows\system</filename>. No copie KERNEL/KERNEL32, 
            GDI/GDI32, USER/USER32 or NTDLL. Estos archivos implementan
            el núcleo del API de Windows, y las versiones internas de Wine 
            deben ser usadas.
          </para>
        </listitem>
        <listitem>
          <para>
 	    Edite la sección <quote>[DllOverrides]</quote> del archivo
	    <filename>~/.wine/config</filename> y especifice
            <quote>native</quote> antes de <quote>builtin</quote> para
            aquellas DLLS de Windows que quiera usar. Para mas información
	    acerca de esto, mire la página manual de Wine.
          </para>
        </listitem>
        <listitem>
          <para>
	    Note que algunas DLLs de la red no son necesarias mientras Wine
	    no las busque. El archivo <filename>MPR.DLL</filename> 
	    no funciona actualmente; debe usar la implementación interna.
          </para>
        </listitem>
        <listitem>
          <para>
	    Copie SHELL/SHELL32 y COMDLG/COMDLG32 COMMCTRL/COMCTL32
            sólo como parejas a su directorio de Wine (estas DLLs están
            <quote>limpias</quote> para usar). Asegúrate de que las tiene
	    especificadas en la sección <quote>[DllPairs]</quote> del archivo
            <filename>~/.wine/config</filename>.
          </para>
        </listitem>
        <listitem>
          <para>
            Sea consistente: Use solo DLLs de la misma version de Windows.
          </para>
        </listitem>
        <listitem>
          <para>
            Coloque el archivo <filename>regedit.exe</filename> en el directorio
            <filename>C:\windows</filename>
            (<application>Office 95</application> importa un archivo
            <filename>*.reg</filename> cuando se ejecuta con un registro vacío,
	    se desconoce lo que hace <application>Office 97</application>).
          </para>
        </listitem>
        <listitem>
          <para>
	    Añada también el archivo <filename>winhelp.exe</filename> y
            <filename>winhlp32.exe</filename> si quiere acceder a los arhivos
            de ayuda de sus programas.
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="with-windows">
      <title>Instalando Wine usando una partición existente de Windows como base </title>
	Alguna gente usa los datos de una partición existente de Windows con 
	Wine para conseguir una mejor compatibilidad o para ejecutar programas
	ya instalados en instalaciones anteriores. Note que muchos programas 
	de Windows asumen que tiene permisos completos de acceso a todos los 
	directorios de windows.

	Esto significa que debe configurar el punto de montaje de la partición
	de Windows con permisos de escritura para el usuario de Wine
	(mira <link linkend="vfat">Tratando con particiones FAT/VFAT</link>
	para ver como hacerlo), o tener otra copia de la partición de Windows 
	(o parte de ella) en un directorio de una partición de Unix para estar
	seguro de que pueda ser escrito por el usuario.
	Nosotros NO RECOMENDAMOS NUNCA usar la partición de Windows directamente
	con acceso de escritura como base para Wine (algunos programas, 
	sobretodo el Explorer, vuelven corruptas muchas partes de la partición
	de Windows en caso de una instalación incorrecta; estás avisado).
	No mencionamos que el soporte de escritura en NTFS está todavía en fase
	experimental y es PELIGROSO (en caso de que use un sistema NT y NTFS
	como sistema de ficheros).
	Nosotros recomendamos el uso de la estructura de directorios de Unix.

    <sect1 id="vfat">
      <title>Tratando con paticiones FAT/VFAT</title>
      <para>
        Escrito por &name-steven-elliott; <email>&email-steven-elliott;</email>
      </para>
      <para>
   	(Extraído de <filename>wine/documentation/linux-fat-permissions</filename>)
      </para>
      <para>
	Este documento describe como funcionan los permisos de sistemas para
	particiones FAT y VFAT en Linux enfocado a la configuración de Wine
      </para>

      <sect2>
        <title>Introducción</title>
        <para>
	  Linux es capaz de acceder a sistemas de ficheros DOS y Windows usando
	  los módulos FAT (antiguos sistemas de ficheros de DOS versión 8.3) 
	  o VFAT (del actual Windows 95 o posteriores).
	  El montaje de sistemas de ficheros FAT o VFAT mejora la situación
	  para que existan aplicaciones y sus datos sean accesibles para Wine 
	  en un arranque dual (Linux + Windows)
        </para>
        <para>
	  Wine mapea los sistemas de ficheros FAT, como <filename>/c</filename>
	  , para construcir unidades, como <quote>c:</quote>, 
	  que se indica en el archivo <filename>~/.wine/config</filename>.  
	  Las siguientes líneas de código son de un archivo 
	  <filename>~/.wine/config</filename>:
        </para>
        <programlisting>
[Drive C]
"Path" = "/c"
"Type" = "hd"
        </programlisting>
        <para>
	  Aunque los sistemas de ficheros VFAT son preferibles a sistemas FAT
	  por su soporte a nombre de archivo largos, el término 
	  <quote>FAT</quote> se usará para hacer referencia a FAT y sus 
	  derivadas en todo el documento. También, <quote>/c</quote> se 
	  se usará como punto de montaje en FAT a lo largo de los ejemplos 
	  de este documento.
        </para>
        <para>
	  Muchas distribuciones de Linux modernas detectan o permiten
	  el montaje de sistemas ficheros FAT existentes, generalmente
	  localizadas en <filename>/c</filename>, quedando persistentes
	  (en el arranque) o activas cuando sea necesario. En cualquier
	  caso, por defecto, los permisos probablemente sean:
        </para>
        <screen>
<prompt>~></prompt><userinput>cd /c</userinput>
<prompt>/c></prompt><userinput>ls -l</userinput>
<computeroutput>-rwxr-xr-x   1 root     root           91 Oct 10 17:58 autoexec.bat
-rwxr-xr-x   1 root     root          245 Oct 10 17:58 config.sys
drwxr-xr-x  41 root     root        16384 Dec 30  1998 windows</computeroutput>
        </screen>
        <para>
	  donde todos los archivos son del "root", del grupo "root" y 
	  solamente escribible por "root".
          (permisos <literal>755</literal>). Esta restricción
	  obliga a ejecutar las aplicaciones como root para ser
	  capaz de escribir en cualquier parte del sistema
	  de ficheros.
        </para>
        <para>
	  Hay tres aproximaciones principales para sobrepasar la
	  restricción de permisos mencionada en el anterior párrafo:
        </para>
        <orderedlist>
          <listitem>
            <para>
              Ejecute <application>Wine</application> como root
            </para>
          </listitem>
          <listitem>
            <para>
	      Monte el sistema de ficheros FAT con pocas restricciones
	      en los permisos
            </para>
          </listitem>
          <listitem>
            <para>
	      Oculte el sistemas de ficheros FAT por completo
	      o cópielo parcialmente
            </para>
          </listitem>
        </orderedlist>
        <para>
	  Cada aprximación se discutirá en las siguientes secciones.
        </para>
      </sect2>

      <sect2>
        <title>Ejecutando Wine como root</title>
        <para>
	  Ejecutar Wine como root es la forma más fácil y directa de dar 
	  a las aplicaciones que ejecute Wine un acceso no restringido a la
	  partición FAT. Ejecutar Wine como root permite a las aplicaciones
	  hacer cualquier cosa en el sistema de ficheros FAT, como escuchar
	  puertos por debajo de 1024. Ejecutar Wine como root es peligroso
	  puesto que no hay límite en las cosas que la aplicación puede hacer
	  en el sistema.
        </para>
      </sect2>

      <sect2>
        <title>Montando sistemas de ficheros FAT</title>
        <para>
	  El sistema de ficheros FAT puede ser montado con permisos menos
	  restrictivos que los que actúan por defecto. Puede hacerse cambiando
	  el usuario que monta la partición FAT o cambiando explícitamente los
	  permisos con los que se monta la partición. Los permisos son inherentes
	  al proceso que monta el sistema de ficheros FAT. Y normalmente es un 
	  script ejecutándose como root el que monta la partición, heredando
	  con ello los permisos. Estos resultados tienen reflejo en los archivos 
	  de la partición FAT. Por ejemplo:
        </para>
        <screen>
<prompt>~></prompt><userinput>whoami</userinput>
<computeroutput>root</computeroutput>
<prompt>~></prompt><userinput>touch root_file</userinput>
<prompt>~></prompt><userinput>ls -l root_file</userinput>
<computeroutput></computeroutput>-rw-r--r--   1 root     root            0 Dec 10 00:20 root_file
        </screen>
        <para>
	  que busca a partir del propietario, grupo y permisos, archivos 
	  del sistema de ficheros FAT excepto para 'x'. Los permisos
	  en el sistema de ficheros FAT pueden ser cambiados a partir de
	  umask (conjunto de bits de permisos). Por ejemplo:
        </para>
        <screen>
<prompt>~></prompt><userinput>umount /c</userinput>
<prompt>~></prompt><userinput>umask</userinput>
<computeroutput>022</computeroutput>
<prompt>~></prompt><userinput>umask 073</userinput>
<prompt>~></prompt><userinput>mount /c</userinput>
<prompt>~></prompt><userinput>cd /c</userinput>
<prompt>/c></prompt><userinput>ls -l</userinput>
<computeroutput>-rwx---r--   1 root     root           91 Oct 10 17:58 autoexec.bat
-rwx---r--   1 root     root          245 Oct 10 17:58 config.sys
drwx---r--  41 root     root        16384 Dec 30  1998 windows</computeroutput>
        </screen>
        <para>
	  Montando el sistema de ficheros FAT con umask de 
          <literal>000</literal> da a todos los usuarios control completo
	  en él. Especificar explícitamente los permisos de la FAT cuando
	  es montada mejora el control. Hay tres opciones de montaje 
	  que son relevantes en los permisos de la FAT: 
          <literal>uid</literal>, <literal>gid</literal>
          y <literal>umask</literal>.  Pueden ser especificados cuando
	  el sistema de ficheros es montado. Por ejemplo
        </para>
        <screen>
<prompt>~></prompt><userinput>umount /c</userinput>
<prompt>~></prompt><userinput>mount -o uid=500 -o gid=500 -o umask=002 /c</userinput>
<prompt>~></prompt><userinput>cd /c</userinput>
<prompt>/c></prompt><userinput>ls -l</userinput>
<computeroutput>-rwxrwxr-x   1 sle      sle            91 Oct 10 17:58 autoexec.bat
-rwxrwxr-x   1 sle      sle           245 Oct 10 17:58 config.sys
drwxrwxr-x  41 sle      sle         16384 Dec 30  1998 windows</computeroutput>
        </screen>
        <para>
	  que da el control completo a "sle" sobre 
          <filename>/c</filename>.  Las opciones listadas
	  abajo pueden hacerse permanantes añadiéndolas en el archivo
          <filename>/etc/fstab</filename>:
        </para>
        <screen>
<prompt>~></prompt><userinput>grep /c /etc/fstab</userinput>
<computeroutput>/dev/hda1  /c  vfat  uid=500,gid=500,umask=002,exec,dev,suid,rw 1 1</computeroutput>
        </screen>
        <para>
	  Cabe apuntar que umasf de <literal>002</literal> es común en
	  en el entorno del grupo privado del usuario de permisos del archivo.
	  En sistemas con ficheros FAT umask asegura que todos los arhivos
	  son completamente accesibles por todos los usuarios en el grupo específico.
          (<literal>gid</literal>).
        </para>
      </sect2>

      <sect2>
        <title>Ocultando sistemas de archivos FAT</title>
        <para>
	  La ocultación permite una mayor granularización en el control. 
	  Partes del sistema de ficheros original FAT puede ser copiado para uqe
	  la aplicación pueda trabajar con seguridad con dichas partes 
	  mientras la aplicación continúa leyendo las siguientes partes.
	  Esto se realiza por medio de los enlaces simbólicos. Por ejemplo,
	  considérese un sistema donde una aplicación llamada 
          <application>AnApp</application> debe ser capaz de leer y 
	  escribir en los directorios <filename>c:\windows</filename> y
          <filename>c:\AnApp</filename>. En este sistema, el sistema
	  FAT tiene los permisos por defecto, los cuales no deberían ser
	  cambiados por razones de seguridad o no pueden ser cambiados debido
	  a un acceso con suerte a la cuenta root. En este sistema un directorio
	  oculto podría utilizarse de la siguiente manera:
        </para>
        <screen>
<prompt>~></prompt><userinput>cd /</userinput>
<prompt>/></prompt><userinput>mkdir c_shadow</userinput>
<prompt>/></prompt><userinput>cd c_shadow</userinput>
<prompt>/c_shadow></prompt><userinput>ln -s /c_/* .</userinput>
<prompt>/c_shadow></prompt><userinput>rm windows AnApp</userinput>
<prompt>/c_shadow></prompt><userinput>cp -R /c_/{windows,AnApp} .</userinput>
<prompt>/c_shadow></prompt><userinput>chmod -R 777 windows AnApp</userinput>
<prompt>/c_shadow></prompt><userinput>perl -p -i -e 's|/c$|/c_shadow|g' /usr/local/etc/wine.conf</userinput>
        </screen>
        <para>
	  Dando a todo el mundo un acceso completo de lectura y escritura 
	  a los directorios <filename>windows</filename> y
          <filename>AnApp</filename> mientras solo el root tiene
	  permisos de escritura en todos los demás directorios.
        </para>
      </sect2>
    </sect1>

    <sect1 id="scsi-support">
      <title>Soporte SCSI</title>
      <para>
        Escrito por &name-bruce-milner; <email>&email-bruce-milner;</email>;
        Añadidos por&name-andreas-mohr; <email>&email-andreas-mohr;</email>
      </para>
      <para>
        (Extraído de <filename>wine/documentation/aspi</filename>)
      </para>

      <para>
	Este archivo describe la configuración del interface ASPI de Windows.
      </para>

      <para>
        <warning><title>¡¡¡¡¡¡Peligro/Peligro/Peligro!!!!!!</title>
          <para>Esto podría destrozar su sistema si es usado incorrectamente. E incluso 
		podría destrozar su sistema si se usa <emphasis>correctamente</>!
          </para>
        </warning>
      </para>

      <para>
	Ahora que hemos dicho eso. ASPI es un acceso directorio a dispositivos SCSI desde
	los programas de windows. ASPI actúa de puente entre los comando SCSI que los programas
	le envían y el bus SCSI.
      </para>
      <para>
	Si usa el dispositivo SCSI incorrecto en su archivo de configuración, puede
	enviar comandos completamente falsos al dispositivo incorrecto - Un ejemplo	
	podría ser el formateo de discos duros (asumiendo que se han dado permisos -
	si se ejecuta como root).
      </para>
      <para>
	Asi que por favor esté seguro de que <emphasis>todos</emphasis> los dispositivos
	SCSI no necesarios para el programa tengan sus permisos los más
	restrictivos posibles.
      </para>

      <para>
	Manual para instalar un escáner: (Al menos conmigo funcionó)
	(bueno, para otros dispositivos como grabadoras, unidades MO, ..., también)
      </para>

      <sect2>
        <title>Requerimientos de Windows</title>
        <orderedlist>
          <listitem>
            <para>
	      El software del escáner necesita usar los drivers "Adaptec"
	      compatibles (ASPI). Al menos con Mustek, permiten que 
	      selecciones la tarjeta instalada o el driver compatible
              "Adaptec (AHA)". Esto no trabajará bien de otro modo.
	      El software que accede al escáner por medio de un driver DOS ASPI
	      (por ejemplo ASPI2DOS) está sorportado también. [AM] 
            </para>
          </listitem>
          <listitem>
            <para>
	      Probablemente necesite el software de una instalación de windows real
	      para establecer el id LUN's/SCSI correctamente. No estoy seguro.
            </para>
          </listitem>
        </orderedlist>
      </sect2>

      <sect2>
        <title>Requerimientos Linux</title>
        <orderedlist>
          <listitem>
            <para>
	      Tu tarjeta SCSI debe ser soportada bajo LInux. No funcionará
	      con una tarjeta SCSI desconocida. Con un poco de suerte puede
	      encontrar unos malísimos controladores "solo de escáner" en internet.
	      Si intenta usar su dispositivo IDE, necesitará usar la emulación
	      ide-scsi. Lea
	      <ulink url="http://www.linuxdoc.org/HOWTO/CD-Writing-HOWTO.html">
	                  http://www.linuxdoc.org/HOWTO/CD-Writing-HOWTO.html</ulink>
	      para instrucciones de instalación acerca de ide-scsi.
            </para>
          </listitem>
          <listitem>
            <para>
	      Compilae controladores específicos SCSI en su kernel.
            </para>
          </listitem>
          <listitem>
            <para>
	      Este procedimiento no parece ser requerido para los kernels más
	      modernos: Linux por defecto usa buffers SCSI más pequeños que
	      Windows. Hay un "define" en el kernel, concretamente
              <literal>SG_BIG_BUFF</literal> (en
              <filename>sg.h</filename>) que lo establece por defecto en un valor
	      muy bajo. El proyecto SANE recomienda 
              <literal>130560</literal> y eso parece funcionar bien. Esto
	      requiere una reconstrucción del núcleo.
            </para>
          </listitem>
          <listitem>
            <para>
	      Crear el dispositivo para el escáner (dispositivos SCSI genéricos)
	      - Mira el HOWTO acerca de programación SCSI en 
              <ulink url="http://www.linuxdoc.org/HOWTO/SCSI-Programming-HOWTO.html">
			  http://www.linuxdoc.org/HOWTO/SCSI-Programming-HOWTO.html</ulink>
	      para una enumeración de los dispositivos.
            </para>
          </listitem>
          <listitem>
            <para>
	      Yo recomendaría establecer el dispositivo del escáner escribible
	      por un grupo. Yo hice un grupo llamado <literal>scanner</literal>
	      y me añadí a él. Ejecutarlo como root incrementado el riesgo de 
	      enviar comandos SCSI incorrectos al dispositivo incorrecto. Con un
	      usuario regular, estará mejor protegido.
            </para>
          </listitem>
          <listitem>
            <para>
	      Para el software Win32(WNASPI32), Wine dispone de auto-detección.
	      Para el software Win16(WINASPI), necesitará añadir una entrada de 
	      dispositivo SCSI para su escáner en ~/.wine/config. El formato es:
	      <literal>[scsi cCtTdD]</literal> donde
              <literal>"C" = "controller"</literal>,
              <literal>"T" = "target"</literal>, <literal>D=LUN</literal>
            </para>
            <para>
	      Por ejemplo, yo mismo establecí controller <literal>0</literal>,
              Target <literal>6</literal>, LUN <literal>0</literal>.
              <programlisting>
[scsi c0t6d0]
"Device" = "/dev/sgi"
              </programlisting>
	      Usted debería modificarlo según su dispositivo particular.
            </para>
          </listitem>
        </orderedlist>
      </sect2>

      <sect2>
        <title>Información general</title>
        <para>
	  El escáner mustek que yo instalé fue con el paquete
          "ipplus". Este programa usa la especificación
	  TWAIN para acceder al escáner.
        </para>
        <para>
          (TWAIN MANAGER)
        </para>
        <para>
          <programlisting>
ipplus.exe &lt;-&gt; (TWAIN INTERFACE) &lt;-&gt; (TWAIN DATA SOURCE.ASPI) -&gt; WINASPI
          </programlisting>
        </para>
      </sect2>

      <sect2>
        <title>NOTAS/BUGS</title>
        <para>
	  El mayor es que solo funcione bajo Linux en ese momento.
        </para>
        <para>
	  El código ASPI ha sido probado solo con:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              Un Mustek 800SP con controlador Buslogic bajo Linux [BM]
            </para>
          </listitem>
          <listitem>
            <para>
	      Un Siemens Nixdorf 9036 con Adaptec AVA-150S bajo Linux
	      accedido por medio de DOSASPI. Señalar que tuve problemas 
	      con el color (resultado poco legible) [AM]
            </para>
          </listitem>
          <listitem>
            <para>
	      Un dispositivo Fujitsu M2513A MO (640MB) usando controladores
	      genéricos SCSI. Formateo y expulsión de disco en perfecto
	      funcionamiento. ¡Gracias a Uwe Bonnes por acceder al hardware! [AM]
            </para>
          </listitem>
        </itemizedlist>
        <para>
	  No doy garantía al código ASPI. Ello consiguió que mi escáner funcionara.
	  Tu dispositivo podría explotar. No puedo determinar esto. 
	  ¡Me libro de toda responsabilidad!
        </para>
      </sect2>
    </sect1>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-parent-document:("wine-doc.sgml" "set" "book" "chapter" "")
End:
-->
