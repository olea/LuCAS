<?xml version="1.0" encoding="iso-8859-1" ?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<article>

<articleinfo>

<title>RDSI COMO </title>

<author>
<firstname>Antonio Verdejo García, <ulink
url="mailto:averdejog.galileo@nexo.es"
>averdejog.galileo@nexo.es</ulink
>
 y Francisco J. Montilla
<ulink
url="mailto:pacopepe@insflug.org"
>pacopepe@insflug.org</ulink
> </firstname>
</author>

<pubdate>v0.2, 5 de Julio de 1998. </pubdate>

<abstract>

<para>
Este COMO explica cómo configurar tarjetas pasivas RDSI para conexiones de
red PPP con Linux (a Internet, servidores...). Describe los pasos para dar
soporte tanto físico como lógico, así como el método de conexión, con 1 y
2 canales, y con llamada bajo demanda.
</para>

</abstract>

</articleinfo>

<sect1>
<title>Introducción</title>

<para>
Tanto bajo Linux como bajo cualquier sistema operativo (tal vez con la
diferencia de que Linux hará exactamente lo que le digamos, para bien o
para mal) los pasos lógicos para hacer uso de cualquier periférico, son
los siguientes, del orden más físico al más lógico:
</para>

<para>

<orderedlist>
<listitem>

<para>
Comprobar que la marca y modelo del dispositivo están soportados.
</para>
</listitem>
<listitem>

<para>
Integrar el dispositivo físicamente (<emphasis remap="it">pinchar</emphasis> la tarjeta o
conectarla, y demás conexiones accesorias).

</para>
</listitem>
<listitem>

<para>
Comprobar su integración a nivel hardware: en los casos en que sea
posible, que el ordenador reconozca dicho dispositivo. Por ejemplo, si el
dispositivo es PnP, en BIOS Plug &amp; Pray, aparecerá al encender el
ordenador, en alguna de las fases de testeo.

</para>
</listitem>
<listitem>

<para>
Comprobar / configurar qué parametros usa (IRQ, Direcciones de
memoria base, etc).

</para>
</listitem>
<listitem>

<para>
Instalar los controladores de acuerdo a dichos parámetros.

</para>
</listitem>
<listitem>

<para>
Instalar el software / utilidades necesarios para el uso efectivo de
dichos dispositivos.
</para>
</listitem>

</orderedlist>
 
</para>

<para>
Este proceso <emphasis remap="bf">debe</emphasis> debe realizarse siguiendo estrictamente dicho
orden, no pasando a la etapa siguiente a menos de que estemos
<emphasis remap="it">completamente</emphasis> seguros de haberse llevado a cabo bien la previa. Y se
aplica a la integración de <emphasis remap="it">cualquier</emphasis> dispositivo bajo <emphasis remap="it">cualquier</emphasis>
Sistema Operativo, si bien no muchos de los que se hacen llamar así hacen
honor a su nombre como lo hace Linux <literal remap="tt">;-)</literal>.
</para>

</sect1>

<sect1 id="hard">
<title>Hardware Soportado - Recomendado </title>

<para>
Pese a que las conexiones RDSI se pueden llevar a cabo tanto mediante
adaptadores externos como tarjetas pasivas internas, en este documento nos
centraremos en (y recomendamos) las tarjetas pasivas, por considerarlas
una opción mejor respecto a adaptadores externos RDSI, ya que: 
</para>

<para>

<orderedlist>
<listitem>

<para>
Su coste es generalmente 5 o 6 veces menor.
</para>
</listitem>
<listitem>

<para>
La diferencia de rendimiento es inexistente.

</para>
</listitem>
<listitem>

<para>
Es independiente de los puertos serie, no afectando al rendimiento o
incluso viabilidad, el tipo de <emphasis remap="it">UART</emphasis> que se tenga (esto es muy
importante si pensamos montar una pasarela a Internet con ese <emphasis remap="it">viejo</emphasis>
486 que rueda por la oficina).

</para>
</listitem>
<listitem>

<para>
El software y los drivers para las tarjetas pasivas internas
permiten hacer auténticas <emphasis remap="it">virguerías</emphasis>, con una perfecta integración, a
diferencia de los módems RDSI. 

</para>
</listitem>

</orderedlist>

</para>

<sect2 id="soportadas">
<title>Modelos de tarjetas pasivas </title>

<para>
La gran mayoría de los modelos que se listan a continuación son tarjetas
internas pasivas. El número de tarjetas soportadas crece casi con la misma
velocidad que se suceden versiones del núcleo. Tenga en cuenta que si
posee un adaptador externo (Zyxel o USR) el método que se empleará será el
primero descrito en este documento (usando los scripts levemente
modificados que se usan en una conexión con un módem analógico). 
</para>

<para>
Por fortuna, este tipo de dispositivos suelen ser poco comunes (por su
alto precio y nula diferencia en rendimiento en comparación con una
tarjeta interna, además de no soportar el <emphasis remap="it">dial on demand</emphasis> ---llamada
bajo demanda, en adelante DoD--- integrado directamente en el <literal remap="tt">ipppd</literal>
que sí soportan los dispositivos <literal remap="tt">ipppX</literal>).  
</para>

<para>
En cualquier caso, los problemas de configuración que presentan se reducen
al mínimo, y pasan por ajustar (en determinados casos) la cadena de
inicialización del guión de chat.
</para>

<para>
Nos centraremos pues, casi en exclusiva, en las tarjetas internas. 
</para>

<para>
La lista está sacada de los ficheros <literal remap="tt">README.*</literal> que acompañan a la
parte del arbol de fuentes correspondientes al soporte RDSI que modifica
un fichero <literal remap="tt">.tar.gz</literal> del que hablaremos más adelante en este documento:
</para>

<para>

<itemizedlist>
<listitem>

<para>
Teles 8.0/16.0/16.3 y compatibles
</para>
</listitem>
<listitem>

<para>
Teles 16.3c
</para>
</listitem>
<listitem>

<para>
Teles S0/PCMCIA
</para>
</listitem>
<listitem>

<para>
Teles PCI
</para>
</listitem>
<listitem>

<para>
Teles S0Box
</para>
</listitem>
<listitem>

<para>
Creatix S0Box
</para>
</listitem>
<listitem>

<para>
Creatix PnP S0
</para>
</listitem>
<listitem>

<para>
Compaq ISDN S0 ISA 
</para>
</listitem>
<listitem>

<para>
AVM A1 (Fritz, Teledat 150)
</para>
</listitem>
<listitem>

<para>
ELSA Microlink PCC-16, PCF, PCF-Pro, PCC-8
</para>
</listitem>
<listitem>

<para>
ELSA Quickstep 1000
</para>
</listitem>
<listitem>

<para>
ELSA Quickstep 1000PCI
</para>
</listitem>
<listitem>

<para>
ELSA Quickstep 3000 (igual que una QS1000)
</para>
</listitem>
<listitem>

<para>
ELSA Quickstep 3000PCI
</para>
</listitem>
<listitem>

<para>
ELSA PCMCIA
</para>
</listitem>
<listitem>

<para>
ITK ix1-micro Rev.2
</para>
</listitem>
<listitem>

<para>
Eicon.Diehl Diva 2.0 ISA y PCI (S0 y U, PRO no soportada)
</para>
</listitem>
<listitem>

<para>
Eicon.Diehl Diva Piccola
</para>
</listitem>
<listitem>

<para>
ASUSCOM NETWORK INC. ISDNLink 128K PC adapter (código I-IN100-ST-D)
</para>
</listitem>
<listitem>

<para>
Dynalink IS64PH (versión OEM de ASUSCOM NETWORK INC. ISDNLink 128K
adapter)
</para>
</listitem>
<listitem>

<para>
Tarjetas basadas en HFC-2BS0 (TeleInt SA1)
</para>
</listitem>
<listitem>

<para>
Sedlbauer Speed Card (Speed Win, Teledat 100)
</para>
</listitem>
<listitem>

<para>
Sedlbauer Speed Star (PCMCIA)
</para>
</listitem>
<listitem>

<para>
USR Sportster internal TA (compatible Stollmann tina-pp V3)
</para>
</listitem>
<listitem>

<para>
ith Kommunikationstechnik GmbH MIC 16 ISA card
</para>
</listitem>
<listitem>

<para>
Traverse Technologie NETjet PCI S0 card
</para>
</listitem>
<listitem>

<para>
Dr. Neuhaus Niccy PnP/PCI

<emphasis remap="it">Notas</emphasis>:  PCF, PCF-Pro: por ahora, solo la parte ISDN está soportada
</para>
</listitem>
<listitem>

<para>
PCC-8: sin testear
</para>
</listitem>
<listitem>

<para>
Teles PCMCIA es EXPERIMENTAL
</para>
</listitem>
<listitem>

<para>
Teles 16.3c es EXPERIMENTAL
</para>
</listitem>
<listitem>

<para>
Teles PCI es EXPERIMENTAL
</para>
</listitem>
<listitem>

<para>
Teles S0Box es EXPERIMENTAL
</para>
</listitem>
<listitem>

<para>
Eicon.Diehl Diva U interface sin testear
</para>
</listitem>
<listitem>

<para>
ICN-ISDN-card
</para>
</listitem>
<listitem>

<para>
PCBIT
</para>
</listitem>
<listitem>

<para>
ISDN ISA SpellCaster
</para>
</listitem>

</itemizedlist>

</para>

<para>
Tenga en cuenta que esta es una lista general. Muchos de los modelos que
aquí aparecen, no se encuentran en el mercado español. La mayoría de las
tarjetas son de origen alemán. La PCBIT es un "honrosa" excepción: está
fabricada en Portugal. 
</para>

<para>
De las tarjetas distribuidas por Telefónica y manufacturadas por Alcatel
(si no recordamos mal), las infames <emphasis remap="it">SPC-2</emphasis> en cualquiera de sus
versiones (y sobre todo en la primera), ni hablaremos. 
</para>

<para>
Ninguno de los que suscriben tienen noticia (pese a utilizar en parte de
su circuitería los chips Siemens) de que alguien haya conseguido hacerla
funcionar bajo Linux. En cualquier caso, su funcionamiento (bajo un SO que
incluya soporte para la misma) deja mucho que desear.
</para>

<para>
Y como siempre, visita obligada a la documentación que incluye el código
fuente del núcleo (máxime si se aventura a usar un kernel de la serie 2.1) 
bajo <literal remap="tt">Documentation/isdn</literal> para obtener una lista lo más actualizada
posible. 
</para>

</sect2>

<sect2>
<title>Soy muy precavido, y estoy leyendo esto antes de comprar la
tarjeta. ¿Cuál recomendáis? </title>

<para>
Como decíamos en la sección <xref linkend="hard"/>, ante todo, tarjetas pasivas
internas (que estén soportadas, claro está) frente a adaptadores RDSI
externos. 
</para>

<para>
En general, las tarjetas pasivas con circuitería Siemens, y especialmente
las que integran el juego de chipsets <emphasis remap="it">HSCX</emphasis> e <emphasis remap="it">ISAC</emphasis>, dado que el
driver HiSax es el más desarrollado y el que más <emphasis remap="it">empuje</emphasis> tiene.
</para>

<para>
Teniendo como criterios lo anterior, el rendimiento, la calidad, y la
colaboración que las marcas tienen con Linux en general, y con los
desarrolladores de <literal remap="tt">isdn4linux</literal> en particular:
</para>

<para>

<orderedlist>
<listitem>

<para>
ELSA
</para>
</listitem>
<listitem>

<para>
Creatix
</para>
</listitem>
<listitem>

<para>
Resto de tarjetas soportadas
</para>
</listitem>

</orderedlist>

</para>

<para>
La <emphasis remap="it">Creatix PnP</emphasis> es casi equivalente a la <emphasis remap="it">Teles 16.3
PnP</emphasis>
<footnote>

<para>
Ojo, <emphasis remap="bf">NO</emphasis> la <emphasis remap="it">Teles 16.3c PnP</emphasis>, que pese a estar
soportada experimentalmente, no tiene nada que ver en cuanto a
calidad
</para>

</footnote>
, si bien ha sido desarrollada íntegramente por
<emphasis remap="it">Creatix</emphasis>; además de la actitud positiva de <emphasis remap="it">Creatix</emphasis> respecto
Linux, a diferencia de <emphasis remap="it">Teles</emphasis>. 
</para>

<para>
¡Apoye a los fabricantes que apuestan por Linux!
</para>

</sect2>

</sect1>

<sect1>
<title>Integración física</title>

<para>
Aparte de las precauciones con la estática, (agárrese antes a algún objeto
con bastante masa y conexión a tierra, como una tubería o radiador, para
descargarla) es conveniente familiarizarnos con el dispositivo, anotar
cuando proceda qué chipset tiene, si tiene o no <emphasis remap="it">jumpers</emphasis>, si es así
para qué valen, etc.
</para>

<para>
Asegúrese de que la tarjeta queda firmemente asentada, más de un problema
<emphasis remap="it">inexplicable</emphasis> se ha debido muchas veces a esto.
</para>

<para>
En algunas placas base, especialmente las de 486, no da completamente
igual dónde se pincha la tarjeta. Familiarícese con su Placa Base. 
</para>

<para>
Los dispositivos RDSI suelen conectarse mediante cables de pares
pin-a-pin, si bien no es estrictamente necesario que el cable sea de
pares. El conector suele ser un RJ-45, idéntico a los usados para redes. 
Normalmente la tarjeta traerá un cable, pero si no es así, o lo necesita
más largo, con un cable de red UTP corriente valdrá. Teóricamente, y en
configuraciones del bus pasivo (instalación telefónica propiamente dicha) 
típicas, el cable puede ser de unos centenares de metros, si bien no hemos
comprobado nunca de forma práctica este particular. 
</para>

<para>
Una última advertencia, para aquellos que están leyendo esto para instalar
en una empresa: los dispositivos RDSI suelen llevarse <emphasis remap="bf">muy mal</emphasis> con
las centralitas, especialmente con las Siemens. 
</para>

<para>
Si quiere ahorrarse quebraderos de cabeza, malos funcionamientos,
interminables actualizaciones del firmware de la centralita, y en la
mayoría de los casos, para que simplemente funcione, exija que el bus
pasivo RDSI para la tarjeta sea <emphasis remap="bf">dedicado</emphasis> y <emphasis remap="bf">directo</emphasis>. Se ahorrará
infinidad de problemas, y el funcionamiento será el que un entorno de
producción exige.
</para>

</sect1>

<sect1 id="bios">
<title>Configuración BIOS </title>

<para>
La mayoría de las tarjetas de hoy en día son Plug &amp; Play, y esto, aunque
parezca mentira, en BIOS con PnP es a veces una ventaja; la mayoría de
ellas muestran al arrancar los dispositivos PnP que han encontrado, por lo
que si éste es su caso, y no le aparece nada, puede tener la absoluta
certeza de que para el ordenador es como si no existiese. En algunas
placas, hay que especificar qué recursos se dejan para asignar a los
dispositivos PnP. 
</para>

<para>
En el resto de los casos, en combinaciones de placas / dispositivos no
Plug &amp; Play, puede ser necesario efectuar algún retoque en la BIOS, por
ejemplo, si nuestra BIOS es PnP, pero el dispositivo no, posiblemente deba
reservar recursos y/o asignarlos en la BIOS para él.
</para>

</sect1>

<sect1 id="recursos">
<title>Configuración de recursos usados por el dispositivo. </title>

<sect2>
<title>Dispositivos Plug &amp; Play</title>

<para>
Bajo Linux, y mientras se trabaja en un soporte directo en el kernel para
este "<emphasis remap="it">estándar</emphasis>", habremos de usar las herramientas del paquete
<literal remap="tt">isapnptools</literal> para asignar los recursos precisos al dispositivo. Como
su nombre indica, <emphasis remap="bf">solo valen para dispositivos PnP ISA</emphasis>, no para los
PCI (que de todas formas, casi siempre han sido PnP en cuanto a enchufar y
listo, no al <emphasis remap="it">estándar</emphasis>). La mayoría de los servidores ftp que albergan
contenidos Linux las tienen, así como las distribuciones Linux más
populares. 
</para>

<para>
Para configurar la tarjeta, use el programa <literal remap="tt">pnpdump</literal> y vuelque su
salida a un fichero, por ejemplo, a <literal remap="tt">/tmp/isapnp.conf</literal>. 
</para>

<para>
Deberá editarlo para reflejar los valores correctos. Una vez hecho esto,
con <literal remap="tt">isapnp /tmp/isapnp.conf</literal> tendrá la tarjeta lista.
</para>

<para>
Luego de haber comprobado que los valores son correctos, y que la tarjeta
se inicializa correctamente, guarde el fichero definitivamente, en
<literal remap="tt">/etc/isapnp.conf</literal>.
</para>

<para>
Al arrancar (y suponiendo que haya instalado o tuviera ya instaladas
correctamente las pnptools) los scripts de inicialización se encargarán de
todo automáticamente. En cualquier caso, y si viera que <literal remap="tt">isapnp</literal> no se
ejecuta al arrancar el Linux, siempre le queda la solución de incluirlo en
<literal remap="tt">/etc/rc.d/rc.local</literal> o similar, o, en el peor de los casos,
ejecutarlo a mano.
</para>

<para>
El fichero generado por <literal remap="tt">pnpdump</literal> del siguiente modo
</para>

<para>

<screen>
[root@hal /root]# pnpdump &#62; /tmp/isapnp.conf
</screen>

</para>

<para>
y suponiendo que sólo tenga una tarjeta PnP, una <emphasis remap="it">Teles.SO 16.3c PnP</emphasis>
en este caso, si tiene una SoundBlaster PnP, esto estará al final
generalmente, y será similar a esto: 
</para>

<para>

<screen>
# $Id: RDSI-Como.xml,v 1.1.1.2 2003/12/10 09:48:49 pfabrega Exp $
# This is free software, see the sources for details.
# This software has NO WARRANTY, use at your OWN RISK
#
# For details of this file format, see isapnp.conf(5)
#
# Compiler flags: -DREALTIME
#
# Trying port address 0203
# Board 1 has serial identifier 0d 1a 09 0b 44 10 26 27 50
# (DEBUG)
(READPORT 0x0203)
(ISOLATE)
(IDENTIFY *)

# Card 1: (serial identifier 0d 1a 09 0b 44 10 26 27 50)
# TAG2610 Serial No 436800324 [checksum 0d]
# Version 1.0, Vendor version 1.1
# ANSI string --&#62;TELES.S0/16.3c Plug&amp;Play&#60;--
#
# Logical device id TAG2610
#     Device support I/O range check register
#
# Edit the entries below to uncomment out the configuration required.
# Note that only the first value of any range is given, this may be
changed if $# Don't forget to uncomment the activate (ACT Y) when happy

(CONFIGURE TAG2610/436800324 (LD 0
# Multiple choice time, choose one only !

#     Start dependent functions: priority preferred
#       Logical device decodes 16 bit IO address lines
#             Minimum IO base address 0x0580
#             Maximum IO base address 0x05bc
#             IO base alignment 4 bytes
#             Number of IO addresses required: 2
# (IO 0 (BASE 0x0580))
#       IRQ 3, 4, 5, 9, 10, 11, 12 or 15.
#             High true, edge sensitive interrupt (by default)
# (INT 0 (IRQ 3 (MODE +E)))

#       Start dependent functions: priority acceptable
#       Logical device decodes 16 bit IO address lines
#             Minimum IO base address 0x0500
#             Maximum IO base address 0x05bc
#             IO base alignment 4 bytes
#             Number of IO addresses required: 2
# (IO 0 (BASE 0x0500))
#       IRQ 10, 11 or 12.
#             High true, edge sensitive interrupt (by default)
# (INT 0 (IRQ 10 (MODE +E)))
#       Start dependent functions: priority acceptable
#       Logical device decodes 16 bit IO address lines
#             Minimum IO base address 0x0680
#             Maximum IO base address 0x06bc
#             IO base alignment 4 bytes
#             Number of IO addresses required: 2
# (IO 0 (BASE 0x0680))
#       IRQ 10, 11 or 12.
#             High true, edge sensitive interrupt (by default)
# (INT 0 (IRQ 10 (MODE +E)))

#       Start dependent functions: priority functional
#       Logical device decodes 16 bit IO address lines
#             Minimum IO base address 0x1500
#             Maximum IO base address 0x17fc
#             IO base alignment 4 bytes
#             Number of IO addresses required: 2
# (IO 0 (BASE 0x1500))
#       IRQ 3, 4, 5, 9, 10, 11, 12 or 15.
#             High true, edge sensitive interrupt (by default)
# (INT 0 (IRQ 3 (MODE +E)))

#     End dependent functions
#     Vendor defined tag:  84 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00
#     Vendor defined tag:  84 06 00 00 00 00 00
# (ACT Y)
))
# End tag... Checksum 0x00 (OK)
</screen>

</para>

<para>
Simplemente hay que dejar una de las secciones <literal remap="tt">(IO... )</literal> e
<literal remap="tt">(INT...)</literal> eliminando los comentarios, y asegurarse (esto es
importante) de eliminar el último comentario de la línea donde se lee
<literal remap="tt"># (ACT Y)</literal> para <emphasis remap="it">activar</emphasis> la incialización de la tarjeta con
los valores escogidos... 
</para>

<para>
Es conveniente anotar dichos valores, ya que los que tendremos que
utilizar posteriormente (anótelos). 
</para>

<para>
Y ni que decir tiene que no debemos asignarle recursos que ya estén siendo
usados por otros dispositivos. Familiarícese con su sistema. 
</para>

<para>
Un <literal remap="tt">cat /proc/interrupts</literal> o un <literal remap="tt">cat /proc/ioports</literal> le
ayudará, especialmente <emphasis remap="bf">antes</emphasis> de instalar la tarjeta en el ordenador,
siempre y cuando todos los dispositivos que tenga su ordenador sean
reconocidos por Linux, ya que los que no lo sean no aparecerán en los
listados y no podremos saber qué recursos están usando. 
</para>

<para>
Refiérase a la sección <xref linkend="bios"/>.
</para>

<para>
Un fichero <literal remap="tt">/etc/isapnp.conf</literal>, una vez eliminados todos los
comentarios suele tener este aspecto:
</para>

<para>

<screen>
(READPORT 0x0203)
(ISOLATE)
(IDENTIFY *)
(CONFIGURE TAG2610/436800324 (LD 0
(IO 0 (BASE 0x0580))
(INT 0 (IRQ 3 (MODE +E)))
(ACT Y)
))
</screen>

</para>

<para>
La salida del comando <literal remap="tt">isapnp /etc/isapnp.conf</literal>, bien sea a mano o
durante el arranque del sistema, suele ser así: 
</para>

<para>

<screen>
[root@hal /root]# isapnp /tmp/isapnp.conf
Board 1 has Identity 0d 1a 09 0b 44 10 26 27 50:  TAG2610 Serial No 436800324 [checksum 0d]
</screen>

</para>

</sect2>

<sect2>
<title>Configuración de dispositivos NO PnP</title>

<para>
Se supone que ha leído, entendido, y llevado a cabo con la absoluta
certeza de haberlo hecho bien, la sección <xref linkend="bios"/>.
</para>

<para>
No conocemos todos los dispositivos NO PnP disponibles en el mercado que
funcionan con Linux. Pero la experiencia muestra que generalmente, para su
configuración tiene las siguientes opciones: 
</para>

<para>

<itemizedlist>
<listitem>

<para>
Usar alguna utilidad, generalmente bajo DOS o Windows.
</para>
</listitem>
<listitem>

<para>
Usar Jumpers del dispositivo si los tiene
</para>
</listitem>
<listitem>

<para>
Usar una utilidad para linux (en contadísimas ocasiones)
</para>
</listitem>

</itemizedlist>

</para>

<para>
Normalmente, la más cómoda y fiable es la de los jumpers, ya que no
deberemos preocuparnos de si los reset borran la configuración o no,
aunque en algunas tarjetas (<emphasis remap="it">Teles.SO 16.3 NO PnP</emphasis> por ejemplo) sólo
posibilitan la asignación de <emphasis remap="it">IO</emphasis>s. (Ojo, con esta tarjeta, son unos
microrruptores muy pequeños, generalmente con un poco de grasa por
encima).
</para>

<para>
En el primer caso, si son utilidades DOS, siempre podremos arrancar con
ese disquete antediluviano que rueda por el cajón, y configurar. Si es
windows, y se tiene instalado también, tal vez tras unas encomiendas a
San Pancracio, si Murphy está distraído, y la suerte está de nuestro lado,
consigamos convencerla de que use los recursos que queremos. 
</para>

<para>
En sistemas en los que <emphasis remap="it">afortunadamente</emphasis> no esté instalado, siempre podemos
probar a pincharla en uno que sí lo tenga, configurarla, y volverla a
pinchar en el sistema Linux, si bien no siempre funciona.
</para>

<para>
Otra posibilidad, si la suerte acompaña, es comprobar (la mayor parte de
las veces mediante ensayo-error, y no siempre con absoluta certeza, aunque
un vistazo a la documentación de la tarjeta ayuda bastante)  qué
parámetros por defecto tiene el dispositivo de fábrica, y usarlos, siempre
que no entren en conflicto con otros que ya tengamos instalados; si es
así, dependiendo de dichos dispositivos puede ser hasta más cómodo
reconfigurarlos y dejar <emphasis remap="it">hueco</emphasis> al nuevo <emphasis remap="it">inquilino</emphasis>. 
</para>

<para>
Recuerde (incluso anote, insistimos) qué parámetros va a usar. Los necesitará
más adelante.
</para>

</sect2>

</sect1>

<sect1>
<title>Instalación y configuración de controladores</title>

<para>
Los controladores son el software que hace funcionar al dispositivo, y que
da soporte lógico al Sistema Operativo para interactuar con él. En Linux
la integración de este soporte se lleva a cabo configurando y compilando
el núcleo o kernel, con lo que obtenemos un <emphasis remap="it">corazón</emphasis> del Sistema
Operativo <emphasis remap="it">a la medida</emphasis> de cada máquina. 
</para>

<para>
Linux ofrece la posibilidad de compilarlo íntegro en el kernel o en
módulos aparte, que se cargan según los necesite el sistema o no. Si no
está familiarizado con todo esto, es momento de que lea el
<emphasis remap="it">Kernel-Como</emphasis>, disponible en el Insflug <literal remap="tt"><ulink
url="http://www.insflug.org"
>http://www.insflug.org</ulink
></literal>.
</para>

<para>
El kernel necesitará tener dos tipos de soporte; uno genérico, (módulo
<literal remap="tt">isdn</literal>) y otro específico a la tarjeta (<literal remap="tt">hisax</literal>, etc).
</para>

<para>
Como algunas tarjetas RDSI, especialmente las que tienen soporte
experimental, sólo funcionan con controladores específicos modulares, nos
centraremos en este tipo de soporte, por ser más <emphasis remap="it">universal</emphasis>. 
</para>

<para>
No obstante, en los ejemplos supondremos que hacemos uso de kernels
estables (<literal remap="tt">2.0.xx</literal>), aunque tengamos que <emphasis remap="it">parchearlos</emphasis>. Puede usar
kernels de desarrollo si lo prefiere, tan sólo téngalo en cuenta en los
ejemplos que aplique y modifíquelos en consecuencia, sin olvidar que estos
kernels son para lo que son, <emphasis remap="bf">desarrollo</emphasis>, no siendo muy idóneos para
la instalación por primera vez de algo que se desconoce.
</para>

<sect2>
<title>Soporte específico a la tarjeta </title>

<para>
Antes de continuar, suponemos que ha leído la sección <xref linkend="soportadas"/> y que sabe a ciencia cierta que su tarjeta está
soportada.
</para>

<para>
Si no parece estarlo, es conveniente que lea (sí, bueno, relea ;-) de todos
modos la documentación que hay en <literal remap="tt">/usr/src/linux/Documentation/isdn</literal>
que siempre estará más actualizada que este <emphasis remap="it">Como</emphasis>. Si no, no está todo
perdido; obtenga el último árbol de desarrollo de
<literal remap="tt"><ulink
url="ftp://ftp.suse.com/pub/isdn4linux/v2.0/isdn.tar.gz"
>ftp://ftp.suse.com/pub/isdn4linux/v2.0/isdn.tar.gz</ulink
></literal> y eche un
vistazo a los ficheros de <literal remap="tt">isdn/Documentation/isdn/</literal>, puede que se
lleve una grata sorpresa. 
</para>

<para>
Si su tarjeta está soportada en la distribución estándar del kernel actual
(2.0.34 a día de hoy), salte a la sección <xref linkend="confkr"/>. Si necesita
parchear, siga leyendo. 
</para>

<para>
Para añadir soporte al kernel actual, integraremos una parte del árbol de
fuentes modificada, que añada soporte para la misma. Obtenga el fichero
<literal remap="tt"><ulink
url="ftp://ftp.suse.com/pub/isdn4linux/v2.0/isdn.tar.gz"
>ftp://ftp.suse.com/pub/isdn4linux/v2.0/isdn.tar.gz</ulink
></literal>, suele ser
un enlace simbólico a la última versión del árbol de desarrollo RDSI
disponible.
</para>

<para>
No obstante... el soporte es experimental. Casos típicos son los de las
últimamente disponibles popularmente <emphasis remap="it">Teles.SO 16.3c</emphasis> o las
<emphasis remap="it">Asuscom</emphasis>. Los que suscriben no han visto nada anormal (cierto es que
el tiempo de que hemos dispuesto para testearlas ha sido breve) y tienen
noticias de varios servidores de los llamados <emphasis remap="it">de producción</emphasis> que están
funcionando sin problemas con kernels estables y estas tarjetas.
</para>

<para>
No obstante, no se parchea en el sentido estricto, ya que lo único que se
sustituye es la parte correspondiente a RDSI. 
</para>

<para>
La parte del árbol modificada lleva un fichero llamado <literal remap="tt">std2kern</literal> que
hace el trabajo de parcheo por nosotros, siempre y cuando
<literal remap="tt">/usr/src/linux</literal> sea el directorio donde residan las fuentes de
linux. Asegúrese de que exista; si en su sistema el directorio se llama
<literal remap="tt">/usr/src/linux-2.0.33</literal>, compruebe, y en su ausencia cree un
enlace al mismo llamado <literal remap="tt">linux</literal>; por ejemplo: 
</para>

<para>

<screen>
cd /usr/src ;
ln -s linux-2.0.33 linux 
</screen>

</para>

<para>
Descomprima el árbol de fuentes <literal remap="tt">isdn</literal>: suponiendo que ha dejado el
fichero en <literal remap="tt">/tmp</literal>: 
</para>

<para>

<screen>
( cd /usr/src; tar zxvf /tmp/isdn.tar.gz )
</screen>
 
</para>

<para>
Acceda a <literal remap="tt">/usr/src/isdn</literal>, y ejecute el comando <literal remap="tt">std2kern -d</literal>:
</para>

<para>

<screen>
cd /usr/src/isdn
./std2kern -d
</screen>

</para>

<para>
no olvide el "<literal remap="tt">./</literal>" para dar el path directo al fichero, en
la mayoría de los sistemas el directorio actual no está en el <literal remap="tt">PATH</literal>
por seguridad.
</para>

<para>
Compruebe que no se producen mensajes de error. Si es así, averigüe qué
sucede. Lo más típico es que se haya equivocado en la elección de fichero,
y haya escogido uno para un kernel de otra versión (2.1.xx por ejemplo). 
</para>

</sect2>

<sect2 id="confkr">
<title>Configuración del Kernel </title>

<para>
Una vez hemos llevado a cabo los pasos anteriores procederemos a la
configuración y posterior recompilación del kernel. Si no está habituado a
esto, léase primero el <emphasis remap="it">Kernel-Como</emphasis>, disponible en Insflug, vea sección
<xref linkend="Grupos"/>.
</para>

<para>
Acceda a <literal remap="tt">/usr/src/linux</literal> y ejecute su método preferido de
configuración. Asegúrese de activar, en la sección principal, <emphasis remap="it">Code
maturity level options</emphasis> el apartado <emphasis remap="it">Prompt for development and/or
incomplete code/drivers</emphasis>, o de lo contrario, el programa de
configuración no le dará opción a seleccionar controladores
experimentales.
</para>

<para>
Una vez hecho esto, seleccione:
</para>

<sect3>
<title>Soporte genérico en el kernel</title>

<para>
Vaya a la sección <emphasis remap="it">ISDN subsystem</emphasis> del menú principal:
</para>

<para>

<itemizedlist>
<listitem>

<para>
<emphasis remap="it">ISDN support</emphasis> como módulo (<literal remap="tt">M</literal>).
</para>
</listitem>
<listitem>

<para>
<emphasis remap="it">Support synchronous PPP</emphasis>
</para>
</listitem>
<listitem>

<para>
<emphasis remap="it">Support generic MP (RFC 1717)</emphasis> (potestativo, necesario para 
canales múltiples)
</para>
</listitem>
<listitem>

<para>
<emphasis remap="it">Support audio via ISDN</emphasis> (potestativo)
</para>
</listitem>

</itemizedlist>

</para>

<para>
Esto es para cuanto a soporte RDSI se refiere. En cuanto a soporte PPP,
cuestiones específicas de redes, y demás aspectos, recurra al <emphasis remap="it">Como</emphasis>
apropiado.
</para>

</sect3>

<sect3>
<title>Soporte específico a la tarjeta</title>

<para>
En la sección <emphasis remap="it">ISDN subsystem</emphasis> del menú principal, active el
controlador que dé soporte a su tarjeta. El más popular es el HiSax, si
ese es su caso, deberá además especificar:
</para>

<para>

<itemizedlist>
<listitem>

<para>
Protocolo a soportar: en nuestro caso, <emphasis remap="it">HiSax Support for
EURO/DSS1</emphasis> y
</para>
</listitem>
<listitem>

<para>
Cuál de la familia de tarjetas soportadas por él es la suya; si por
ejemplo es la veterana Teles.SO 16.3 NO PnP, la PnP, o la pcmcia (<emphasis remap="bf">NO
la 16.3c OJO</emphasis>) seleccionaría <emphasis remap="it">HiSax Support for Teles 16.3 or PNP or
PCMCIA</emphasis>. 
</para>
</listitem>

</itemizedlist>

</para>

<para>
De nuevo, no conocemos ni podemos conocer todas las tarjetas soportadas
por Linux. Es posible que en drivers experimentales haya que indicar
alguna otra opción; recurra a su sentido común, a la documentación (a la
que no nos cansaremos de remitirle; este documento no es más que una guía) 
y a nosotros, a fin de actualizar este <emphasis remap="it">Como</emphasis>.
</para>

<para>
Salga del menú guardando los cambios, y compile; no olvide el <literal remap="tt">make
modules</literal> y el <literal remap="tt">make modules_install</literal>, y reinstalar el LILO para dicho
kernel. 
</para>

<para>
Para más información de cómo recompilar el kernel, véase el
<emphasis remap="it">Kernel-Como</emphasis>, disponible en el Insflug, vea sección <xref linkend="Grupos"/>.
</para>

</sect3>

</sect2>

<sect2>
<title>Carga de los módulos - comprobación del sistema</title>

<para>
<emphasis remap="it">Ya he recompilado, instalado los módulos, y arrancado con el nuevo
kernel.  Además, he usado</emphasis> <literal remap="tt">isapnp</literal> <emphasis remap="it">y todo parece haber ido
bien...  ¿Qué hago ahora?</emphasis>
</para>

<para>
Se ha ganado un descanso. Tómese algo... ;-) No, en serio. Ahora viene la
parte más interesante.
</para>

<para>
Hay varias formas de cargar los módulos, en cualquier caso, la manera que
nunca falla es hacerlo a mano directamente desde la línea de comandos. 
Supondremos que hacemos uso del soporte específico HiSax. La sintaxis del
módulo hisax es la que sigue, si bien es conveniente leer (al final lo
conseguiremos ;-), especialmente en drivers experimentales, 
<literal remap="tt">/usr/src/linux/Documentation/isdn/README.HiSax</literal>. 
</para>

<para>

<screen>
modprobe hisax type=&#60;codigo tarjeta&#62; protocol=&#60;protocolo&#62; io=&#60;direccion E/S&#62; irq=&#60;interrupcion&#62;
</screen>

</para>

<para>
Ha llegado el momento de echar mano de donde tuviera anotados (¿los anotó?)
los parámetros que asignara en las secciones <xref linkend="bios"/> y <xref linkend="recursos"/>.
</para>

<para>
Suponiendo que se trate de la tarjeta <emphasis remap="it">Teles.SO 16.3c PnP</emphasis>, que al fin
y al cabo, fue la causante en origen de este <emphasis remap="it">Como</emphasis>:
</para>

<para>

<screen>
modprobe hisax type=14 protocol=2 io=&#60;IO&#62; irq=&#60;IRQ&#62;
</screen>

</para>

<para>
Por ejemplo:
</para>

<para>

<screen>
modprobe hisax type=14 protocol=2 io=0x0580 irq=11
</screen>

</para>

<para>
con lo que si miramos en <literal remap="tt">/var/log/messages</literal> deberíamos ver algo
como: 
</para>

<para>

<screen>
Jun 23 12:05:11 hal kernel: HiSax: Driver for Siemens chip set ISDN cards
Jun 23 12:05:11 hal kernel: HiSax: Version 2.8
Jun 23 12:05:11 hal kernel: HiSax: Revisions 1.15.2.8/1.10.2.5/1.10.2.3/1.30.2.6/1.8.2.5
Jun 23 12:05:11 hal kernel: HiSax: Card 1 Protocol EDSS1 Id=HiSax (0)
Jun 23 12:05:11 hal kernel: HiSax: Teles 16.3c driver Rev. 1.1.2.2
Jun 23 12:05:11 hal kernel: teles3c: defined at 0x580 IRQ 3 HZ 100
Jun 23 12:05:11 hal kernel: teles3c: resetting card
Jun 23 12:05:11 hal kernel: Teles 16.3c: IRQ 11 count 0
Jun 23 12:05:11 hal kernel: Teles 16.3c: IRQ 11 count 1
Jun 23 12:05:11 hal kernel: HiSax: DSS1 Rev. 1.16.2.3
Jun 23 12:05:11 hal kernel: HiSax: 2 channels added
Jun 23 12:05:11 hal kernel: HiSax: module installed
</screen>

</para>

<para>
El tipo <literal remap="tt">14</literal> es el que se corresponde con la <emphasis remap="it">Teles 16.3c PnP</emphasis>, el
protocolo <literal remap="tt">2</literal> es el usado en España para las conexiones RDSI, <emphasis remap="it">EURO
ISDN o EDSS1</emphasis>. Los otros dos valores (dirección de E/S e interrupción) 
dependerán de su configuración particular, que anotó en su momento,
¿verdad? 
</para>

<para>
Dependiendo del driver, este puede que se cargue aun con parámetros
erróneos, si bien no es el caso del HiSax, que rehusará a hacerlo. 
</para>

<para>
Si sospechamos que pese a haberse cargado (repetimos, no en el caso del
HiSax) hay por ejemplo conflictos de IRQ, o no está usando la que le hemos
asignado, un indicador claro de esto es que al hacer un
</para>

<para>

<screen>
cat /proc/interrupts 
 0:    9719062   timer
 1:     342221   keyboard
 2:          0   cascade
 4:     495989 + serial
10:    1591809   ICN
12:        681   eth0
13:          1   math error
</screen>

</para>

<para>
en un sistema con una tarjeta ICN la línea correspondiente a la irq usada
por el controlador contase con <literal remap="tt">0</literal> interrupciones de contador (segunda
columna). Esto aplica para todos los dispositivos; si la línea
</para>

<para>

<screen>
10:    1591809   ICN
</screen>

</para>

<para>
fuese
</para>

<para>

<screen>
10:    0         ICN
</screen>

</para>

<para>
sería un claro síntoma de que el driver <literal remap="tt">ICN</literal> no está usando dicha
interrupción, casi seguro por fallo de configuración. Tan sólo por cargar
correctamente,  debe de poner el contador a <literal remap="tt">1</literal> al menos.
</para>

<para>
Llegados a este punto, respire profundamente y siéntase todo un <emphasis remap="it">gurú</emphasis>
Linuxero...  ;-) Ya casi está listo; para no tener que hacerlo en un
futuro a mano, y suponiendo que tiene las <literal remap="tt">modutils</literal> correctamente
instaladas, edite o cree su <literal remap="tt">/etc/conf.modules</literal> o
<literal remap="tt">/etc/modules.conf</literal> e inserte las siguientes líneas, (suponiendo
que use por ejemplo una Teles 16.3 NO PnP/ con la IRQ 10 y la io 0x180 :
</para>

<para>

<screen>
alias isdn hisax
options hisax type=3 protocol=2 io=0x180 irq=10
</screen>

</para>

<para>
ejecute <literal remap="tt">depmod -a</literal> para computar/actualizar las dependencias entre
módulos; de ahora en adelante un <literal remap="tt">modprobe hisax</literal> bastará.
</para>

</sect2>

</sect1>

<sect1>
<title>Instalación y configuración de software de aplicación</title>

<para>
<emphasis remap="it">Mi tarjeta parece que ya está lista. ¿Puedo usar los scripts de
conexión a Infovía que usaba hasta ahora?</emphasis>
</para>

<para>
No tal cual;  necesitará hacer ciertas modificaciones. Usaremos otro
método para conectarnos a iNET. En vez de usar el pppd asíncrono de toda
la vida, usaremos un pppd especial, síncrono, que permite algunas
<emphasis remap="it">lindezas</emphasis>: el <literal remap="tt">ipppd</literal>. 
</para>

<para>
Arranque su cliente ftp favorito, y diríjase a <literal remap="tt"><ulink
url="ftp://ftp.franken.de/pub/isdn4linux/v2.0/isdn4linux*.tar.gz"
>ftp://ftp.franken.de/pub/isdn4linux/v2.0/isdn4linux*.tar.gz</ulink
></literal>
que es el sitio oficial del ISDN4Linux. Ahí tiene una mágnifica (aunque
algo falta de actualización) FAQ en un perfecto inglés que debería tener
al menos como punto de referencia. 
</para>

<para>
Le remitiríamos a ella, pero si ha llegado hasta aquí y hacemos eso igual
empezamos a sentir agudos pitidos en los oidos... ;-) 
</para>

<para>
Descomprimimos, configuramos, compilamos e instalamos. De la lista de
utilidades las que más nos interesan, son <literal remap="tt">isdnctrl</literal> (directorio
<literal remap="tt">isdn</literal>) y el <literal remap="tt">ipppd</literal> (directorio <literal remap="tt">ppp4i4k/ipppd/version</literal>)
porque son las que usaremos en el método que describiremos después.
</para>

<para>
Normalmente, casi todas las distribuciones suelen llevar un paquete de
utilidades RDSI que incluyen los programas que mencionamos, amén de
abundante documentación y scripts de ejemplo. Busque en su distribución
favorita. 
</para>

<para>
No obstante, si por alguna razón no consigue compilar los elementos
necesarios, en <literal remap="tt"><ulink
url="ftp://ftp.insflug.org/pub/RDSI/"
>ftp://ftp.insflug.org/pub/RDSI/</ulink
></literal> tiene a su disposición el 
software mínimo necesario ya compilado.
</para>

<para>
Como en todo sistema UN*X la comunicación con los dispositivos físicos
(tarjetas, discos...) se realiza por medio de ficheros. Necesitaremos
crear los dispositivos que harán que el kernel pueda trabajar con la
tarjeta RDSI. Si usa un paquete de una distribución es casi seguro que
creará, si no lo están ya, las entradas necesarias en el directorio
<literal remap="tt">/dev</literal>, si no es así, ejecute <literal remap="tt">make devices</literal> en el
directorio raíz de las <literal remap="tt">isdn4utils</literal> que bajó antes, será sufiente.
</para>

<sect2>
<title>Pero bueno, ¡¿qué cómo conectooo?!</title>

<para>
Vamos con ello. Dos métodos, uno de ellos mencionado someramente. Se basa
en aprovechar los scripts de conexión (que suponemos le funcionan) usados
con un módem analógico normal. Las variaciones son mínimas. Añada en el
guión de chat la cadena de inicio
</para>

<para>

<screen>
ATS14=3&amp;xxxxxxxxx (siendo xxxxxxxxx el numero de su linea RDSI)
</screen>

</para>

<para>
y sustituya donde corresponda el dispositivo <literal remap="tt">/dev/modem</literal> por
<literal remap="tt">/dev/ttyI0</literal>. Usaremos el <literal remap="tt">pppd</literal> normal y corriente que usábamos
antes con el módem. Nada más que decir de este método, salvo que no haga
uso del parámetro <literal remap="tt">+ua</literal> en el fichero <literal remap="tt">options</literal>, está obsoleto
en las últimas versiones del paquete <literal remap="tt">pppd</literal>.  . 
</para>

<para>
El segundo hace uso de las utilidades que nos bajamos anteriormente, y nos
permitirá conseguir llamadas bajo demanda (<emphasis remap="it">dial on demand</emphasis>, DoD). 
</para>

<para>
Opción ésta muy interesante en redes donde se vaya a usar la conexión RDSI
para dar servicio iNET, por medio del enmascaramiento IP, a varios puestos
de una red local, pues posibilitará el que la llamada se efectúe
automáticamente por tráfico de paquetes (abrir un navegador, lanzar el
programa de correo, hacer un ping, etc.).
</para>

<para>
La parte más importante de este método reside en los scripts usados para
configurar la conexión. Los hay de múltiples formas, más o menos
"sofisticados". Los incluidos en este documento puede que no sean para
ganar un Nobel, pero funcionan bastante bien. En este sentido, estamos
abiertos (no hace falta decirlo) a modificaciones y/o comentarios, pero de
eso hablaremos más tarde. 
</para>

<para>
Unos puntos a destacar. Si queremos usar <emphasis remap="it">DoD</emphasis>, necesitaremos tener dos
scripts en <literal remap="tt">/etc/ppp</literal> también incluidos, para asegurarnos que la
ruta por defecto <emphasis remap="it">apunte</emphasis> siempre a una dirección de iNET y al
dispositivo RDSI.
</para>

<para>
Esto, y, por supuesto, NO tener ninguna ruta por defecto a la(s) 
tarjeta(s) de red (ethernet normalmente) que ya tuviéramos en nuestro
sistema: el demonio de PPP (pppd o ipppd) no reemplaza la ruta por
defecto, es un problema muy común en los grupos de noticias y en los
canales de Linux de IRC.
</para>

<para>
El síntoma es que la conexión se establece, pero no podemos <emphasis remap="it">salir</emphasis> a
iNET porque no tenemos <emphasis remap="it">señalizado</emphasis> por dónde hacerlo. No es el
propósito de este documento extenderse demasiado en temas de rutado, pero
en condiciones normales, no necesitaremos ruta por defecto, podemos usar
rutas estáticas;  dejaremos que el (i)pppd la establezca cuando así sea
necesario.
</para>

<para>
Y será uno de los scripts (<literal remap="tt">ip-down</literal>) el que se encargará de que en
todo momento haya una ruta por defecto a iNET por la tarjeta RDSI.
</para>

</sect2>

<sect2>
<title>Scripts</title>

<para>
Hace cosa de un mes fueron enviados a la lista de correo (¿aún no está
suscrito? ¿a qué espera? ;-) del SLUG (<literal remap="tt"><ulink
url="mailto:l-linux@calvo.teleco.ulpgc.es"
>l-linux@calvo.teleco.ulpgc.es</ulink
></literal>), de modo que si está suscrito
y no borra los mensajes, imagino que los tendrá.
</para>

<para>
Pero como no todo el mundo está en dicha lista (y este Como, que duda cabe,
no sería tal sin ellos), aquí van: 
</para>

<sect3>
<title><literal remap="tt">rc.isdn</literal> para un solo canal </title>

<para>

<screen>
#!/bin/sh
#
# Thanks to Rainer Birkenmaier &#60;rainer@kirk.mop.uni.ulm.de&#62;
# Hacked by Antonio Verdejo Garcia &#60;averdejog.galileo@nexo.es&#62;
# &amp; Francisco J Montilla &#60;pacopepe@insflug.org&#62;

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin

LOCAL_NUMBER="xxxxxxxxx"
REMOTE_NUMBER="xxx"
LOCAL_IP="195.76.154.169" # IP falsa por la que establecer ruta por
                          # defecto, a fin de que salte el DoD
DEVICE="ippp0"
USER="user@ISP"

isdnctrl addif  $DEVICE                 # Creamos un interfaz nuevo,'DEVICE'
isdnctrl addphone $DEVICE out $REMOTE_NUMBER    # Numero al que llamar
isdnctrl eaz $DEVICE $LOCAL_NUMBER      # EAZ: el numero de su RDSI
isdnctrl l2_prot $DEVICE hdlc           # para PPP sincrono
isdnctrl l3_prot $DEVICE trans          # 
isdnctrl encap $DEVICE syncppp          # encapsulacion de paquetes IP en
                                        # en  tramas PPP 
isdnctrl huptimeout $DEVICE 300         # tiempo de inactividad tras el que
                                        # desconectar: 300 sec. -&#62; 5min
isdnctrl chargehup $DEVICE off          # Colgar antes del siguiente paso
isdnctrl secure $DEVICE on              # Aceptar llamadas de numeros
                                        # autorizados solamente
ifconfig $DEVICE $LOCAL_IP
route add -net 195.76.154.0 $DEVICE
route add default $DEVICE

/sbin/ipppd user $USER remotename infovia -d defaultroute noipdefault \
ipcp-accept-local ipcp-accept-remote mru 1500 mtu 1500 lock -bsdcomp -pc -ac /dev/ippp0 &#38;
</screen>

</para>

<para>
las últimas dos líneas son una en realidad; puede indicar que se
interprete como una sola tal y como se hace en el script con el
<literal remap="tt">&bsol;</literal>; o bien ponerlo en una sola línea sin retorno de carro.
</para>

<para>
Asegúrese de que <literal remap="tt">ipppd</literal> está en <literal remap="tt">/sbin</literal> si transcribe tal
cual este script; si no es así, modifique el path en el script.
</para>

<para>
Vea la sección <xref linkend="expl"/> para una explicación acerca de qué
parámetros ha de modificar y una explicación sobre este script. 
</para>

</sect3>

<sect3 id="isdn2">
<title><literal remap="tt">rc.isdn</literal> para dos canales </title>

<para>

<screen>
#!/bin/sh
#
# Thanks to Rainer Birkenmaier &#60;rainer@kirk.mop.uni.ulm.de&#62;
# Hacked by Antonio Verdejo Garcia &#60;averdejog.galileo@nexo.es&#62;

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin

LOCAL_NUMBER="xxxxxxxxx"
REMOTE_NUMBER="xxx"		
LOCAL_IP="195.76.154.169" # dummy; the IPCP negotiation overwrite it
DEVICE="ippp0"
USER="user@ISP"

# additional for channel bundling:
DEVICE1="ippp128"

isdnctrl addif  $DEVICE			# Create new interface 'DEVICE'
isdnctrl addphone $DEVICE out $REMOTE_NUMBER	# Set outgoung phone-number
isdnctrl eaz $DEVICE $LOCAL_NUMBER	# Set local EAZ .. 
isdnctrl l2_prot $DEVICE hdlc		# for sync PPP: set Level 2 to HDLC
isdnctrl l3_prot $DEVICE trans		# not really necessary, 'trans' is default
isdnctrl encap $DEVICE syncppp		# encap the IP Pakets in PPP frames
isdnctrl huptimeout $DEVICE 300		# Hangup-Timeout is 300 sec. -&#62; 5 min
isdnctrl chargehup $DEVICE off		# Hangup before next Charge-Info
isdnctrl secure $DEVICE on		# Accept only configured phone-number

# additional for channel bundling:
isdnctrl addslave $DEVICE $DEVICE1	# Create new slave interface 'DEVICE1'
isdnctrl addphone $DEVICE1 out $REMOTE_NUMBER	# Set outgoung phone-number
isdnctrl eaz $DEVICE1 $LOCAL_NUMBER	# Set local EAZ ..
isdnctrl l2_prot $DEVICE1 hdlc		# for sync PPP: set Level 2 to HDLC
isdnctrl l3_prot $DEVICE1 trans		# not really necessary, 'trans' is default
isdnctrl encap $DEVICE1 syncppp		# encap the IP Pakets in PPP frames
isdnctrl huptimeout $DEVICE1 300	# Hangup-Timeout is 300 sec. -&#62; 5 min
isdnctrl chargehup $DEVICE1 off		# Hangup before next Charge-Info
isdnctrl secure $DEVICE1 on		# Accept only configured phone-number

ifconfig $DEVICE $LOCAL_IP
route add -net 195.76.154.0 $DEVICE
route add default $DEVICE

/sbin/ipppd user $USER remotename infovia -d defaultroute noipdefault ipcp-accept-local \
ipcp-accept-remote mru 1500 mtu 1500 +mp lock -bsdcomp -pc -ac /dev/ippp0 /dev/ippp1 &#38;
</screen>

</para>

</sect3>

<sect3 id="expl">
<title>Explicación de los scripts </title>

<para>
Los scripts no necesitan demasiadas explicaciones. Sustituir <literal remap="tt">user</literal> e
<literal remap="tt">ISP</literal> por su nombre de usuario y el nombre de su proveedor
(<literal remap="tt">pepe@arrakis</literal> por ejemplo) y poner los valores adecuados en
<literal remap="tt">LOCAL_NUMBER</literal> (el número de su RDSI) y en <literal remap="tt">REMOTE_NUMBER</literal> (<literal remap="tt">055</literal>
si usa Infovía).
</para>

<para>
La dirección de <literal remap="tt">LOCAL_IP</literal> es una dirección falsa, la negociación IPCP
la sobreescribe, pero por una simple razón de coherencia, conviene darle
una IP válida del rango de su proveedor, y asignarle a ella la ruta por
defecto, (lo mismo se aplica para la dirección de red de la ruta del final
del script) esto es necesario para que funcione el DoD. 
</para>

<para>
Las direcciones del ejemplo son de Intercom, pero valen de cualquier
manera (funciona también usando las mismas con otros proveedores).  Estas
direcciones son las mismas que aparecen en los scripts <literal remap="tt">ip-up</literal> e
<literal remap="tt">ip-down</literal>: 
</para>

</sect3>

<sect3>
<title><literal remap="tt">ip-up</literal></title>

<para>

<screen>
#!/bin/sh
/sbin/route del default
/sbin/route add default ippp0
</screen>

</para>

</sect3>

<sect3>
<title><literal remap="tt">ip-down</literal></title>

<para>

<screen>
 
#!/bin/sh
/sbin/route del default
/sbin/ifconfig ippp0 down
/sbin/ifconfig ippp0 195.176.154.169
/sbin/route add -net 195.176.154.0 ippp0
/sbin/route add default ippp0
</screen>

</para>

<para>
Es posible que alguno de los comandos que aparecen en estos dos últimos
guiones sean redundantes. De nuevo, estamos abiertos a sugerencias.
</para>

<para>
El <literal remap="tt">rc.isdn</literal> de la sección <xref linkend="isdn2"/> está preparado para el uso
de dos canales y por lo tanto una conexión a 128 Kbps, usando uno de los
canales como esclavo del primero. La opción <literal remap="tt">+mp</literal> es necesaria en este
caso, además de que haya seleccionado en la compilación del kernel, en la
sección general de RDSI, <emphasis remap="it">Support Generic MP (RFC 1717)</emphasis>. (Compruebe
que exista la línea <literal remap="tt">CONFIG_ISDN_MPP=y</literal> en el fichero
<literal remap="tt">/usr/src/linux/.config</literal>, que es donde se almacena por defecto la
configuración del núcleo). 
</para>

<para>
Tenga en cuenta que, como es lógico, pagará el <emphasis remap="it">doble</emphasis>... Aunque esto
en empresas no suele ser un problema, cuidado en casa, o verá como las
facturas de Telefónica tienden a infinito... ;-) 
</para>

<para>
Para lanzar manualmente el segundo canal, ejecute <literal remap="tt">isdnctrl addslave
ippp128</literal>;  colgará automáticamente tras un periodo sin tráfico,
tardando lo que hayamos especificado en el parámetro <literal remap="tt">huptimeout</literal> del
<literal remap="tt">rc.isdn</literal> (en segundos). 
</para>

<para>
Con determinados proveedores no se nota demasiado el lanzar el segundo
canal (Arrakis), con otros sin embargo, y también dependiendo del origen
de nuestro tráfico, si se nota, y bastante... 
</para>

<para>
Hay un demonio que se encarga de disparar/colgar el segundo canal según el
tráfico y la saturación que detecte; puede obtenerse de <literal remap="tt"><ulink
url="http://www.compound.se"
>http://www.compound.se</ulink
></literal>. 
</para>

<para>
En futuras versiones, tendrá sección propia; por ahora, si tiene
un trabajo donde permitirse eso, se supone que tendrá nivel como para 
manejarse con él sin problemas.
</para>

</sect3>

</sect2>

</sect1>

<sect1>
<title>Problemas Frecuentes</title>

<sect2>
<title>Al lanzar la conexión miro el <literal remap="tt">/var/log/messages</literal> y sólo veo
(una vez tras otra): </title>

<para>

<screen>
Apr 15 10:34:08 wanda kernel: ippp0: dialing 0 055...
Apr 15 10:34:08 wanda kernel: ippp0: dialing 1 055...
Apr 15 10:34:08 wanda kernel: ippp0: dialing 2 055...
</screen>

</para>

<para>
pero no veo nada más, ¿a qué puede ser debido? 
</para>

<para>
Es un problema físico. Revise la conexión del cable tanto en la tarjeta
como en el TR1. Revise la continuidad del cable así mismo. Cámbielo en
último término. Asegúrese de que su TR1 tiene servicio... <literal remap="tt">;-)</literal> y
Asegúrese de no estar pasando por ninguna centralita. 
</para>

</sect2>

<sect2>
<title>La conexión se corta tras un mensaje como:</title>

<para>

<screen>
Apr 15 15:58:28 wanda pppd[208]: Could not determine remote IP address
</screen>

</para>

<para>
y seguidamente:
</para>

<para>

<screen>
Apr 15 15:58:28 wanda pppd[208]: LCP terminated at peer's request
Apr 15 15:58:28 wanda kernel: isdn_net: local hangup ippp0
Apr 15 15:58:28 wanda kernel: ippp0: Chargesum is 0
Apr 15 15:58:28 wanda pppd[208]: Modem hangup
Apr 15 15:58:28 wanda pppd[208]: Connection terminated.
</screen>

</para>

<para>
Es un problema bastante común debido a que Infovía (en el supuesto de que
la use para conectar) no nos asigna, ---o no lo hace con suficiente
rapidez--- una dirección remota del enlace PPP.  Hay un <emphasis remap="it">solución</emphasis> que
funciona tanto en conexiones RDSI como RTC que consiste en pasarle
nosotros una dirección en el establecimiento de la conexión. En el caso de
conexiones vía RTC (módem corriente y moliente)  incluya una línea en el
<literal remap="tt">/etc/ppp/options</literal> tal que: 
</para>

<para>

<screen>
:172.16.1.96
</screen>

</para>

<para>
y deje el parámetro que le indica que, a pesar de todo, aceptaremos la IP
que el extremo nos asigne como remota (<literal remap="tt">ipcp-accept-remote</literal>). La IP que
pongamos puede ser cualquiera, pero como siempre, y por seguir una regla,
ponga una de las que normalmente nos asigna Infovía de su rango
(<literal remap="tt">172.16.x.x</literal> por ejemplo). 
</para>

<para>
Gracias a Horacio J. Peña por este detalle (el primero al que se lo leimos
en la lista del SLUG). 
</para>

<para>
El caso de conexiones vía RDSI (sobre todo en el caso de que usemos el
primer método) se puede proceder de la misma forma, pues aunque se le
pasen parámetros al (i)pppd, el demonio leerá el fichero
<literal remap="tt">/etc/ppp/options</literal>.
</para>

</sect2>

<sect2>
<title>Al inicializar el demonio ipppd obtengo el mensaje ``<literal remap="tt">Can't find
usable ippp device''</literal>. ¿A qué es debido?</title>

<para>
Según Frank Meyer, del grupo de desarrollo <emphasis remap="it">isdn4linux</emphasis>, se debe a que
al lanzar el <literal remap="tt">ipppd</literal>, este calcula un número aleatorio basándose en la
función <literal remap="tt">gethostid()</literal> que provoca una resolución DNS, usando para ello
el servidor de nombres que aparezca en <literal remap="tt">/etc/resolv.conf</literal>.
</para>

<para>
Si no tenemos la conexión activa, esto lógicamente no es posible y el DNS
no puede ser alcanzado (y hablamos en el caso general de que no se
disponga de un DNS local, como suele suceder comúnmente). 
</para>

<para>
Para solucionarlo, incluya el nombre de su máquina (incluido
<literal remap="tt">localhost</literal>)  en el <literal remap="tt">/etc/hosts</literal> con el dominio completo que
haya especificado en <literal remap="tt">/etc/resolv.conf</literal>. Hay otra solución basada
en un parche no oficial para evitar este comportamiento por parte del
<literal remap="tt">ipppd</literal>; el fichero <literal remap="tt">syncPPP FAQ</literal> incluído en el directorio de
documentación de las utilidades ISDN amplía este tema. 
</para>

</sect2>

</sect1>

<sect1>
<title>Por Hacer</title>

<para>

<itemizedlist>
<listitem>

<para>
Por supuesto, integrar los comentarios y sugerencias que nos manden
amablemente en este documento. Realimentación, graciaaas. 

</para>
</listitem>
<listitem>

<para>
Estudiar el <literal remap="tt">ibod</literal> para la gestión dinámica de conexiones a 128K
por demanda de tráfico.

</para>
</listitem>
<listitem>

<para>
ToDo lo que se nos vaya ocurriendo... ;-) 
</para>
</listitem>

</itemizedlist>

</para>

</sect1>

<sect1>
<title>Copyright y Propiedad Intelectual</title>

<para>
El <emphasis remap="it">RDSI-Como</emphasis> es Copyright &copy; 1998 Antonio Verdejo García &amp;
Francisco José Montilla Blanco.
</para>

<para>
Este trabajo puede ser reproducido en su totalidad o en parte, tanto de
forma impresa como electrónica, sujeto a las siguientes condiciones:
</para>

<para>

<orderedlist>
<listitem>

<para>
La notificación del copyright y esta licencia debe preservarse
completa en todas las copias, tanto completas como parciales.

</para>
</listitem>
<listitem>

<para>
Cualquier traducción o trabajo derivado debe de ser
aprobado por los autores por escrito antes de su distribución.

</para>
</listitem>
<listitem>

<para>
Si se distribuye el Trabajo parcialmente, deben de incluirse
instrucciones de dónde obtener la versión completa original (en forma
impresa o electrónica), así como los medios para conseguirla. 

</para>
</listitem>
<listitem>

<para>
Pueden ser reproducidas pequeñas porciones como ilustraciones para
revistas o citas para otros trabajos sin esta notificación de permiso si
se cita apropiadamente su procedencia. 
</para>
</listitem>

</orderedlist>

</para>

</sect1>

<sect1>
<title>Colofón</title>

<para>
Y bueno, por ahora esto es todo. Como una primera versión que es, estará
plagada de pequeños (igual otros no tan pequeños) fallos, incorrecciones y
seguro que nos dejamos un montón de temas en el tintero. 
</para>

<para>
Eso sí, como hemos mencionado varias veces, nuestro buzón de correo está
abierto a todo tipo de sugerencias, correcciones, dudas (que si
humildemente podemos, intentaremos responder), así como desinteresadas
donaciones para adquirir otras tarjetas... <literal remap="tt">&rcub;;)</literal> Lo que se os ocurra. 
En cualquier caso, prometemos contestar.
</para>

<sect2>
<title>¿Y no tenéis nada que agradecer a nadie?</title>

<para>
Ufff... Al contrario. No acabaríamos nunca. Pero vamos a intentarlo; 
además, es la parte más relajada de todo esto.
</para>

<sect3>
<title>De Antonio Verdejo</title>

<para>
Mi lista es interminable (tengo tanto que agradecer a tanta gente, y esta es
<emphasis remap="it">la mía</emphasis> ;-), pero intentaré ser breve.
</para>

<para>
Para empezar, a Francisco José Montilla, mi <emphasis remap="it">apañero</emphasis>, porque fue quien
me introdujo en esto de la RDSI y el Linux, gracias por tus "SOfritos", y
por la paciencia que tienes conmigo y el Quake. Recuerdos a quien ya
sabes.  Gracias por todo, de verdad. ¡Ah!
</para>

<para>
y vigila tu espalda, un día apareceré por <emphasis remap="it">DM4</emphasis> con un bazoca y... ;-)) 
</para>

<para>
A toda la gente del Lucas, Insflug e HispaLinux. Inmejorable trabajo el
vuestro. A la gente de Enred (saludos <emphasis remap="it">ZoR</emphasis>) por organizar lo
<emphasis remap="it">inorganizable</emphasis> y darle forma de Party.
</para>

<para>
A Jesús Fuentes Saavedra, por sus consejos. A Enrique Melero por idéntica
razón. A Iñaki Arenaza por estar trabajando también en el tema RDSI. A
Miguel Armas del Rio, por mantener la (creo) mejor lista de Linux en
castellano.  A todos los contertulios de dicha lista por sus sugerencias y
ánimo, ¡seguid así!
</para>

<para>
A Alvaro Villalva (aka <emphasis remap="it">unsCAred</emphasis>) por que siempre está ahí con su
compilador preparado
<footnote>

<para>
FJM 
 Y su bazoka...
</para>

</footnote>
 y su
buscador a punto... ;-)
</para>

<para>
A toda (TODA) la peña del canal linux del IRC Hispano (la lista no tendría
fin, prometo -prometemos- citaros a todos en una próxima revisión de este
documento, aunque sea en un anexo exclusivo ;-) por ser como son, por ser
como sois, ¡majísimos!... y a las <emphasis remap="it">linuxeras</emphasis>, por tener ese par de...
<literal remap="tt">O:-)</literal> 
</para>

<para>
A mi hermano David, y en general a toda mi familia, por su apoyo. Gracias
especiales a Isa, Regi y Basi por cuidarme tan bien (¡qué haría yo sin
vosotras!). 
</para>

<para>
A mis amigos, mis mejores amigos (Jero, Javi, Alberto) porque siempre se
puede contar con ellos, y porque comprenden que a veces pase más tiempo
con Linux que con ellos... 
</para>

<para>
A mis amigas, mis mejores amigas. A Begoña, por todo. A Ana Rocío, en la
distancia, porque sí. 
</para>

<para>
A N. S. (``no sé'') por su mirada. Siempre. A Alberto (aka <emphasis remap="it">Case</emphasis>) por
sus cumpleaños.
</para>

<para>
A Marc, por la tarjeta que dio el empujón definitivo a este Como. Y a la
gente, que, junto a él (``1 para to2 y to2 para 1''), me hacen pensar
<emphasis remap="it">diferente</emphasis>...  Are U dudez? 
</para>

<para>
A ``el gremio del cuervo'' por su música (<emphasis remap="it">cojonuda</emphasis>) por su directo
(<emphasis remap="it">destroyer</emphasis>) y por darme una idea de lo larga que puede ser (y no
cortarme ante ello) una lista de agradecimientos... ;-) Y a Pepe, por
supuesto, por descubrirme este <emphasis remap="it">pedaso</emphasis> grupo. <emphasis remap="it">Hello man, I am the
Sun...</emphasis>
</para>

<para>
A tod@s l@s que me dejo (y de l@s que sin duda tendré noticias).
</para>

<para>
Y en general, a toda la gente que hace que, cada día que me levanto, no
piense como Séneca, que decía <emphasis remap="it">Mañana será peor...</emphasis> ;-) 
</para>

<para>
¡Gracias!
</para>

</sect3>

<sect3>
<title>De Francisco J. Montilla</title>

<para>
A mi <emphasis remap="it">apañero</emphasis> Toni, por compartir esas madrugadas linuxeras, por
tenerme al día de lo que pasa en el mundo Linux, y por dejarme masacrarle
al Quake tan generosamente <literal remap="tt">:P</literal>. 
</para>

<para>
Y por dejarme sin nadie a quien agradecer. Abusooon!!!!!
</para>

<para>
A mi mujer, por aguantar estoicamente mis trasnochadas Linuxeras, mi
apegamiento <emphasis remap="it">ordenadoril</emphasis>, y animarme todavía a darle duro a esto.
</para>

</sect3>

</sect2>

</sect1>

<sect1 id="Grupos">
<title>Anexo: El INSFLUG </title>

<para>
El <emphasis>INSFLUG</emphasis> forma parte del grupo internacional 
<emphasis remap="it">Linux Documentation Project</emphasis>, 
encargándose de las traducciones al castellano de los Howtos (Comos),
así como la producción de documentos originales en aquellos casos
en los que no existe análogo en inglés.
</para>

<para>
En el <emphasis remap="bf">INSFLUG</emphasis> se orienta preferentemente a la traducción de documentos
breves, como los <emphasis>COMOs</emphasis> y <emphasis>PUFs</emphasis> (<emphasis remap="bf">P</emphasis>reguntas de
<emphasis remap="bf">U</emphasis>so <emphasis remap="bf">F</emphasis>recuente, las <emphasis remap="it">FAQs</emphasis>. <literal remap="tt">:)</literal> ), etc.
</para>

<para>
Diríjase a la sede del INSFLUG para más información al respecto.
</para>

<para>
En la sede del INSFLUG encontrará siempre las <emphasis remap="bf">últimas</emphasis> versiones 
de las traducciones:  <literal remap="tt"><ulink
url="http://www.insflug.org"
>www.insflug.org</ulink
></literal>. Asegúrese de comprobar cuál es la última versión 
disponible en el Insflug antes de bajar un documento de un servidor réplica.
</para>

<para>
Se proporciona también una lista de los servidores
réplica (<emphasis remap="it">mirror</emphasis>) del Insflug más cercanos a Vd.,  
e información relativa a otros recursos en castellano.
</para>

<para>
Francisco José Montilla, <literal remap="tt"><ulink
url="mailto:pacopepe@insflug.org"
>pacopepe@insflug.org</ulink
></literal>.
</para>

</sect1>

</article>
