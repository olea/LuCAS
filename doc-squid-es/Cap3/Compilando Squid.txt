Compilando Squid

Compilar Squid es bastante fácil, usted necesita las herramientas correctas para hacer
el trabajo , aunque primero, pasemos por conseguir las herramientas, entonces usted
puede extraer el código fuente del paquete, incluir los componentes opcionales de
Squid (usando el comando *configure*) y entonces realmente compilar el código
distribuido en un formato binario.

Sin embargo, unas palabras de advertencia, esta es la etapa dónde la mayoría de
las personas tiene problemas, si usted no ha compilado código fuente antes,
pruebe y siga la siguiente sección en orden -no debe ser tan malo-. Si usted
no logra manejarlo para obtener un Squid corriendo, al menos habrá ganado
experiencia.

Herramientas de compilación

Todas las utilidades GNU nombradas abajo están disponibles vía FTP desde el sitio ftp
official de GNU o desde uno sus espejos. Una lista de espejos está disponible en
http://www.gnu.org/ o descárgelos directamente desde ftp://ftp.gnu.org/.

El compilador GNU solo es distribuido como código fuente (creando un problema de
pollo-y-huevo si usted no tiene un copilador) puede que usted tenga que hacer,
una búsqueda en Internet (usando uno de los motores normales de búsqueda) para
encontrar y probar una copia binaria del compilador GNU para sus sistema.

El código fuente de Squid es distribuido en forma comprimida. Primero un archivo 
tar normal es creado, este archivo está comprimido con el programa *gzip* de GNU.
Para descomprimir este archivo usted necesita una copia de gzip. GCC (el Compilador C
GNU) es el compilador recomendado, los desarrolladores escribieron Squid con él, y
está disponible para casi todos los sistemas.

Usted también necesitará el programa make, del que también hay una versión GNU disponible.

Si es posible, instale un depurador C, el depurador GNU (GDB) está disponible para la
mayoría de las plataformas. Aunque una depuración no es necesaria para la instalación,
es muy útil en el caso de errores en el software (como se discute en capítulo 13).

Desempaquetando el archivo fuente

Antes nosotros mirábamos la estructura del árbol de directorio */usr/local/squid*.
Sugiero extraer el código fuente de Squid al directorio */usr/local/squid/src*.
Así que, cree el directorio y copie el archivo Squid *tar.gz* descargado, en él.

Primero descomprimamos el archivo. Algunas versiones de tar pueden descomprimir el
archivo en un sólo paso, pero por razones de compatibilidad haremos esto en 
dos pasos. Descomprimir el archivo tar ejecutando *gzip -dv squid-version.tar.gz*.
Si todo ha ido bien, usted debe tener un archivo llamado *squid-version.tar* en el
directorio actual. Para sacar los archivos fuera del tar, ejecute *tar xvf squid-
version.tar*

Tar automáticamente deja los archivos en un subdirectorio, algo como *squid-2.1.PRE2*
Cambie al directorio extraído, y podemos empezar a configurar el fuente de Squid.

Opciones de Compilación

Las caraterísticas de Squid son habilitadas (o deshabilitadas) con el archivo de
comandos *configure*. Algunas características de Squid tienen que ser explícitamente
habilitadas cuando Squid es compilado, qué puede significar que usted tiene que
recompile en una etapa posterior. Hay dos razones para que una característica
pueda desactivarse de forma predeterminada:

o Compatibilidad con el sistema operativo

Aunque Squid ha sido escrito de un modo genérico posible, ciertas funciones (tales como
entrada/salida asíncrona, transparencia y listas de control de acceso basadas en ARP)
no están disponibles en todos los sistemas operativos. Cuando varios sistemas operativos
no pueden usar una característica, ésta es incluida como opción en tiempo de compilación.

o Eficiencia

En un caché cargado muy ligeramente, la entrada/salida asíncrona _can_actually_slow_down_
requests_minutely_. Algunos administradores de sistemas pueden desear desactivar ciertas
características para acelerar su caché.

Usted puede estar preguntándose por qué no hay simplemente archivos con las opciones
de configuración para éstas características menos utilizadas. Para muchas de las 
características no hay realmente otra razón que (?minimilización?). ¿ Porque tener
código asentado en el ejecutable que realmente no se emplea ?. Usted puede incluir
éstas características que podría usar en algún momento en el futuro sin los efectos
perjudiciales (otros que un binario ligeramente grande), para evitar tener que
después recompilar el código fuente.

El programa *configure* también tiene una segunda función: con algún código fuente
usted tiene que editar el archivo de cabecera que le dice al compilador que
funciones llamar para usar en el sistema. Esto hace muy a menudo la compilación de
código fuente difícil. Con Squid, sin embargo, el archivo de comandos GNU .configure.
revisa que programas, librerías y llamadas a funciones están disponibles en su sistema.
Esto simplifica dramáticamente la tarea.

Hacer configure tan genérico como sea posible, es en realidad un archivo de comandos
{Bourne Shell} /bin/sh. Si usted ha remplazado su entorno de comandos /bin/sh con otro
menos Posix-capaz (como ash) usted no puede ejecutar configure. Si este es el caso,
usted tendrá que cambiar la primera línea del archivo de comandos *configure* para
ejecutar el entorno de comandos completo.

Todas las opciones de inclusión de código fuente son fijadas con el comando 
*./configure option*. En la mayoría de los sistemas la cuenta root no tiene un '.'
en su ruta de búsqueda por razones de seguridad, asi que usted tiene que especificar
la ruta completa al archivo binario.

Para cambiar más de una opción de configuración de una sola vez, simplemente añada cada
opción al final de la línea del comando. Usted puede, por ejemplo cambiar el prefijo
del directorio de instalación y habilitar E/S asíncrona en una línea de comando como
la siguiente (más de cada de una de éstas opciones en breve).

	./configure --prefix=/usr/people/staff/oskar/squid --enable-async-io

Note que sólo las opciones de configuración comunmente utilizadas se han incluido aquí.
Para obtener una lista completa de las opciones usted puede ejecutar './configure --help'.
Muchas de las opciones resultantes son normales al configure GNU que Squid utiliza, y se
usa para algunas cosas como la compilación cruzada.


Si desea averiguar sobre algunas de las opciones más oscuras, usted puede tener
que preguntar a alguien de una de las listas de correo electrónico relevantes,
o ! incluso leer el código fuente !.

Reduciendo la salida de configure

Cuando usted ejecuta normalmente configure, usted consigue una salida
bastante detallada acerca de lo que está verificándose.

La mayoría de las personas no necesitan toda esta información, así que
hay una opción para detener los mensajes que configure muestra que no
son importantes. Para reducir la cantidad de mensajes mostrados, use
la opción --quiet. De esta manera usted verá sólo mensajes del error,
no informaciónde depuración.

La primera vez que usted ejecute configure debería de hacerlo en el modo
detallado. El proceso que realiza configure puede tardar en las máquinas
lentas, asi que usted debe lograr tener una idea acerca de cuanto
tiempo tomará para ejecutarse. Si usted necesitara remitir un informe sobre
algún error, siempre debe incluir tanta información como sea posible
y debe incluir la salida completa que produzca configure.

El directorio destino 

Algunos administradores podrían preferir dispensar del directorio
/usr/local/squid descrito antes. Incluso usted puede estar instalando
Squid en una máquina dónde usted no tiene el acceso de super usuario
(y no pueda crear el directorio /usr/local/squid). En ambos casos usted
necesitará cambiar el directorio destino.

A lo largo de este libro yo asumo que usted ha instalado Squid en el
directorio predefinido. Usar el directorio destino predefinido hará
más fácil para usted seguir los ejemplos en este libro.

El directorio destino se logra cambiar utilizando la opción --prefix de
configure. Aquí están algunos ejemplos dónde usamos esta opción.

Instalando Squid en su directorio de trabajo: 

./configure --prefix=/usr/people/staff/oskar/squid 

Si usted está instalando Squid en una máquina dedicada para caché, puede
que quiera colocar todos los archivos relacionados de Squid, en el
directorio /usr/local. Los archivos de configuración (por ejemplo)
estarán guardados en /usr/local/etc. 

./configure --prefix=/usr/local/

Usando la Biblioteca DL-Malloc

Las rutinas de asignación de memoria incluidas con muchos sistemas
operativos no son muy buenas para la manera en Squid asigna y usa
la memoria. Squid usa el subsistema de memoria más intensivamente
que la mayoría de los programas, dado que es un solo proceso que
corre para un periodo extendido de tiempo y continuamente asigna
y libera secciones pequeñas de memoria. En algunos sistemas el tamaño
del proceso se incremente a rápida proporción. Cuando eventualmente
ha consumido toda la memoria el sistema cae. 

Esta opción habilita un asignador de memoria del sistema diferente:
DL-Malloc, de Prado de Doug que se sabe es eficiente para el modelo
de asignación de Squid.

Squid aumentará su tamaño como tantos objetos se agregen al caché
del disco, como es discutido en la sección de Requisitos de
Hardware. El índice de objetos en el disco caché toma memoria RAM, 
así que asegúrese que usted tiene memoria suficiente en su sistema
antes de decidir que el sistema de asignación de memoria está fallando. 

Si una copia recientemente empezada de Squid usa substancialmente
menos memoria que una que ha estado corriendo durante unos días (con el
mismo tamaño de caché), usted podría querer configurar Squid para
usar DL-Malloc.

Las rutinas de asignación de memoria DL-Malloc incluidas no son seguras
para su uso en ejecución multihilo, así que usted no puede usar esta
opción junto con Async-IO (¿?)

Para usar DL-Malloc, simplemente use la opción --enable-dl-malloc:

 ./configure --enable-dl-malloc

Las rutinas de expresión regular

Las expresiones regulares le permiten comparacióm compleja de cadenas
y son usadas para varias cosas en archivo de configuración de Squid
(más notablemente en las reglas que controlan cuánto tiempo
los objetos se quedan en el caché). 

En algunos sistemas usted puede desear reemplazar las rutinas de 
expresión regular predefinidas con las rutinas GNU. Esto puede ser
porque los predefinidos del sistema operativo son incompatibles con
Squid o no funcionan correctamente. Si su sistema no tiene las
bibliotecas de expresión regular, Squid usará la biblioteca GNU
automáticamente, así que las rutinas de expresión regular GNU están
incluidas de modo predeterminado el código fuente de Squid, y no tiene
que ser descargado por separado.

Para habilitar uso de las bibliotecas GNU, simplemente use la opción
de configure --enable-gnuregex.

Entrada/Salida asíncrona

Squid 2.0 incluye un mayor aumento de desempeño en la forma de E/S asíncrona. 

Es importante recordar que Squid es un proceso. En muchos demonios
de Internet más de una copia corre al mismo tiempo, así que si un
proceso está haciedo una llamada del sistema, esto no efecta las otras
copias corriendo.

Squid es sólo un proceso. Si el bucle principal deja de correr por
alguna razón, todas las conexiones se retardan. En todas las versiones
de Squid, el bucle principal usa llamadas select y poll al sistema 
para decidir qué conexiones servir. Cuando Squid recibe los datos
del servidor, los escribe al disco y al cliente.

Para escribir los datos al disco, un archivo tiene que ser abierto en la
unidad del caché. Cuando muchos clientes están abriendo y están 
cerrando las conexiones a un caché ocupado, el bucle principal
tiene que hacer muchas llamadas para abrir y cerrar descriptores de
archivo y descriptores de red (observe que palabra descriptor 
pueden referirse a una conexión de red y un archivo en un disco). Estas
dos funciones bloquean todo el flujo de datos a través del caché.
Mientras se está esperando que una función abrir (open) vuelva, Squid
no puede realizar ninguna otra función.

Cuando usted habilita E/S asíncrona, Squid 2.0 usa hilos para
abrir y cerrar descriptores. Un hilo es parte del programa principal 
Squid en muchas maneras, excepto que si hace uso de una llamada al
sistema que bloquea (como un abrir), sólo el hilo se detiene, no
el bucle principal u otros hilos. Note que no hay un hilo por la
conexión.

Usando hilos para hacer las llamadas a funciones que bloquean,
las llamadas reducen la latencia que el caché agrega a cada demanda.
(Las personas a veces se preocupan por la latencia que los cachés
agregan, pero si usted tiene un caché bastante veloz la latencia
no es un problema - el cliente no notará sobre demanda.
Normalmente la sobre demanda en la red, influye más que
la sobre demanda en Squid). E/S asíncrona reduce drásticamente la
sobre demanda del caché cuando cuando usted tiene un caché cargado.

Desgraciadamente los hilos POSIX no están disponibles en todos los
sistemas operativos. Esto amarra su elección de hardware en su 
elección de sistema operativo, dado que si su sistema operativo no
soporta hilos puede ser que no haya opción para un sistema más rápido, o
incluso para distribuir la carga entre múltiples máquinas.

Usted probablemente debe probar y ejecutar Squid con E/S asíncrona 
habilitada si tiene unas mil demandas por hora. Algunos sistemas sólo
soportan hilos adecuadamente con una cantidad justa de arreglos iniciales.
Si su carga es baja y E/S asíncrona no trabaja directamente, puede
dejar Squid en la configuración predefinida.

Use la opción --enable-async-io de configure para incluir E/S asíncrona
dentro del código Squid.

Registro del agente de usuario

La mayoría de los navegadores modernos incluyen una cabecera con cada 
demanda saliente que contiene un poco de información básica sobre el 
navegador del usuario y su sistema operativo. Esta cabecera se llama 
cabecera de "agente de usuario", ya que describe el programa agente 
utilizado (el navegador). Un agente automatizado incluye cabeceras 
de diferentes "agentes de usuario", así llevar una bitácora de las 
cabeceras de "agente de usuario", le permitiran ver si alguien está usando 
un programa extractor de web automatizado (normalmente llamado araña) 
para sacar las páginas en su nombre. También puede usarse para hacer 
estadísticas sobre los navegadores normalmente usados. La información 
capturada se escribe a un archivo de bitácora especificado en el 
archivo de configuración. Para incluir el código responsable de registrar 
esta información en el binario de Squid, use la opción de configure 
--enable-useragent-log.

Protocolo Simple de Gestión de Red (SNMP) 

Habilitar el Protocolo Simple de Gestion de Red (SNMP) le permite 
hacer consultas a su máquina caché con una de las muchas herramientas 
SNMP disponibles. Si tiene un sistema de supervisión SNMP, usted 
debe poder usar su software existente para supervisar el desempeño de 
Squid y recuperar información sobre el uso. Esto se discute en detalle 
en el Capítulo 6. 

Algunas herramientas leerán el MIB que Squid incluye (como 
/usr/local/squid/etc/mib.txt, una vez que Squid se instala). Por otro
lado, algunas herramientas tendrán que ser parchadas {4} para
entender el MIB que usa Squid. Dado que la mayoría de los productos 
SNMP son escritos con un ecaminador en mente, ellos no pueden hablar 
con una aplicación como Squid, puesto que el MIB de Squid es bastante
diferente al MIB de un encaminador. (Para más información sobre Squid 
y SNMP, vea el capítulo 11) 

Use la opción --enable-snmp de configure para habilitar el código SNMP 
de Squid. 

Matando el proceso padre en la salida

Ya que Squid será una parte muy importante de su red cuando esté instalado,
usted probablemente tendrá un programa que simplemente reinicia Squid
si el proceso está corriendo. El programa de RunCache incluido con 
Squid hace justamente eso.

Si usted está haciendo mantenimiento en el sistema del caché y
realmente quiere matar el proceso Squid, teniéndolo reiniciándose
automáticamente cuando usted está trabajando puede ser irritante, o
incluso la causa de problemas reales. 

Esta opción pone código dentro de Squid que mata el proceso padre si
Squid es cerrado limpiamente. Si Squid cae dejando el proceso padre
solo, esto dejará que se reinicie automáticamente. 

Use --enable-kill-parent-hack para habilitar matar el proceso padre
en la salida. 

Si usted no usa esta opción, el procedimiento correcto es matar el
proceso padre con la orden kill, y entonces usar la orden shutdown 
descrito en la sección Corriendo Squid, más adelante, para cerrar Squid.
No use la orden kill si usted puede evitarlo: Squid necesita tiempo para
cerrarse limpiamente, ya que escribe una lista completa de objetos al
disco.

Reduciendo tiempo en las llamadas al sistema

Cuando se escribe la bitácora de eventos del caché y el cliente accede, 
Squid llama a la función gettimeofday() del sistema operativo para
determinar el tiempo exacto. 

Esta llamada al sistema puede tardar un tiempo corto para volver,
dejando mientras tanto a Squid sin hacer nada, mientras pudiera estar
leyendo y escribiendo datos para algo que no requiera bitácora. La
cantidad de tiempo que Squid toma para hacer la llamada al sistema es
despreciable en la mayoría de las máquinas, pero bajo carga muy alta
el gran número de llamadas puede impactar en el desempeño general.
Habilitando la opción de 'treta de tiempo' {5} Squid actualiza
el reloj sólo una vez por segundo, reduciendo dramáticamente la sobre
demanda en tales cachés. Esto siginifica que los mensajes en el registro
de bitácora son menos exactos. Sin embargo, la exactitud de la bitácora
es importante para algunas personas. Cuando usted tiene los rótulos de
tiempo exactos, de cuánto tiempo toman las transferencias, puede crear
gráficos de tiempo de respuesta y usar éstos para decidir cuando necesita
actualizar su máquina. (Más de esto en el capítulo 11: Análisis del caché). 

La mayoría de las personas no necesita la opción --enable-time-hack. Es
principalmente útil en las máquinas muy lentas, o en sistemas operativos
dónde la llamada a gettimeofday() es muy lenta. 

Listas de Control de Acceso basado en ARP

Todas las tarjetas ethernet tienen (supuestamente) un único identificador
que se usa como dirección para todo el tráfico en la red destinado para
esa tarjeta. Este número es llamado una dirección MAC. Si la tarjeta no
tuviera esta dirección el sistema operativo tendría que inspeccionar
cada paquete en la red y decidir que el paquete se destina para él si
es su dirección de IP. Con ethernet, sin embargo, el perfeccionado 
hardware interior de la tarjeta puede verificar todos los paquetes y
decidir si el paquete necesita ser pasado al sistema operativo. El
protocolo de la red que asocia las direcciones MAC con los números IP
es conocido como ARP (Protocolo de Resolución de Dirección). 

Si usted quiere controlar el acceso al caché por dirección MAC, puede
habilitar la Lista de Control de Acceso (ACL) ARP.

Esta opción sólo está disponible en ciertos sistemas operativos, ya 
que no hay ningún método estándar de encontrar la dirección MAC de un
sistemas, cuando se está conectado a nivel TCP. Al momento de escribir
esto [*], las listas de control de acceso ARP trabajan sólo en Linux.
Si usted tiene un sistema operativo que puede devolver esta información
a un proceso a nivel de usuario, use la opción --enable-arp-acl para usar
ACLs de MAC. 

Comunicación Inter-Caché

Squid incluye múltiples protocolos de comunicación Inter-Caché. De manera
prederteminada, el protocolo original Inter-Caché (ICP) es incluido en el
código fuente. Si desea incluir algunos de los protocolos menos usados,
usted necesitará incluirlos en tiempo de compilación.

La comunicación inter-caché se cubre a fondo en el capítulo 8. Para la
instalación inicial usted probablemente no habilite estos protocolos,
ya que podrían no utilizarse. 

Si usted está planeando unirse a una jerarquía existente, debe preguntarles
a los administradores de la jerarquía sobre los protocolos que apoyan o se
necesitan. Si usted está preparando una nueva jerarquía, debería habilitar
esto sólo después de haber leído el capítulo mencionado anteriormente.

Usted puede habilitar la recopilación de caché con la opción --enable-cache-digests
y el Protocolo de Cachéo de Hipertextos (HTCP) con la opción --enable-htcp.

Manteniendo la pista de demanda de origen

(¿ Yo nunca he usado esta función. Pienso que puede usarse
principalmente por los cachés NLANR. Necesito averiguar
exactamente para que se usa esto. Esto es mi 'mejor suposición' mientras
tanto. ?)

Cuando los cachés Squid remiten las demandas a un servidor destino 
(o, de hecho, a un caché padre) agregan cabeceras a la demanda que indica
el origen IP del solicitante y el IP del caché que está haciendo el reenvío
(su propia IP). Squid puede configurarse para guardar la pista de ambas
direcciones en estas cabeceras en la bitácora de acceso de las demandas
entrantes. Si usted tiene cachés debajo suyo, esto registra las cabeceras
que los cachés del cliente agregan.

Esta característica sólo es muy útil si usted está en la cima de una jerarquía y
quiere ver quien es el usuario más grande de los cachés inferiores.
Actualmente, usted puede acceder sólo los datos guardados de esta manera
con el programa CGI cachemgr.cgi. (¿ no estoy seguro ?).

Probablemente usted no quiere habilitar esta opción, pero si lo hace,
use la opción --enable-forw-via-db 

Selección del idioma

Cuando Squid es incapaz de cumplir una demanda, una página de error es
devuelta al usuario con información sobre que salió mal. Esta página
puede estar en el idioma de su elección. Squid ya incluye las páginas
de error en bastantes idiomas: para ver la lista de idiomas incluidos,
revise el contenido del directorio errors/ en el directorio del 
código fuente. 

cache:~/src/squid-2.0.RELEASE> ls errors/
Bulgarian       Estonian        Italian         Russian-1251    list
Czech           French          Makefile.in     Russian-koi8-r
Dutch           German          Polish          Spanish
English         Hungarian       Portuguese      Turkish

El archivo list contiene una lista de los archivos a editar, cuando
cree sus propios archivos de error para un idioma. 

Desgraciadamente no hay versiones del archivo de configuración en diferentes
idiomas - se han traducido sólo los mensajes de error devueltos a los
usuarios. El idioma predefinido es Inglés si usted no especifica uno.

Para usar un idioma específico, reemplace nombre-de-idioma en el texto 
debajo con algo como Bulgarian. 
--enable-err-language=nombre-de-idioma

Ejecutando configure

Ahora que usted ha decidido qué opciones usar, es tiempo de ejecutar
configure. Aquí está un ejemplo: 

./configure --enable-err-language=Bulgarian --prefix=/usr/local

Ejecutando ./configure con las opciones que usted ha escogido debe 
funcionar tranquilamente. En el improbable evento que configure retorne
con un mensaje de error, aquí están algunas sugerencias que pueden ayudar. 

Los recopiladores rotos

El problema más común para los nuevos instaladores es que hay un
problema con el recopilador instalado (o los archivos de cabecera) para
el sistema.

Para probar esta teoría simplemente corra configure sin ninguna de las
opciones. Si usted todavía obtiene un mensaje de error es casi seguro
un problema de compilador o de archivo de cabecera.

Para asegurarse, haga la prueba de compilar un programa que use alguna de
las menos empleadas llamadas al sistema y vea si compila.

Si su compilador no compila los archivos correctamente, usted podría
querer verificar si los archivos del cabecera existen, y si es así,
los permisos en el directorio que incluyen los mismos. 

Si usted ha instalado GCC en un directorio no estándar, o si usted 
está haciendo compilación cruzada, puede necesitar que configure agregue 
opciones al comando GCC que usa durante estas pruebas. Usted puede
conseguir que configure añada opciones a la línea de comando de GCC
poniendo la variable de entorno 'CFLAGS' previo a la ejecución de
configure. Por ejemplo, si su compilador sólo trabaja cuando usted 
modifica el valor predeterminado del directorio de los archivos de
cabecera, usted puede lograr que configure añada esta opción a la
línea de comando predefinida, con una instrucción como la siguiente
(intérprete Bourne) :  

CFLAGS=-I/usr/people/staff/oskar/gcc/include
export CFLAGS 

Opciones incompatibles

Algunas opciones de configuración excluyen el uso de otras. Ésta es
otra causa común de problemas. Para probar esto usted simplemente debe
intentar correr configure sin ninguna opción en absoluto, y ver
si el problema desaparece. Si es así, puede intentar y dejar fuera la 
opción que está causando el conflicto, agregando cada opción a la línea
de comando configure una por una. Usted puede encontrar que tiene que
escoger entre dos opciones (por ejemplo Async-Io y DL-Malloc). En este caso
usted va ha tener que decidir cual de las opciones es más importante
en su configuración.


Compilando los fuentes Squid

Ahora que usted ha configurado Squid, necesita producir los binarios
Squid. Simplemente requiere ejecutar la orden make en el directorio
que están extraidos los fuentes y se creará un binario como src/squid

	cache:/ # cd /usr/local/squid/src/squid-2.2.RELEASE
	cache:/usr/local/squid/src/squid-2.2.RELEASE # make

Si la compilación falla, puede ser debido a conflictos con las 
opciones de configure, como se describió en la sección configure. Siga
las mismas instrucciones descritas allí para encontrar la opción molestosa.
(Usted debe ejecutar make clean entre las corridas de configure,
para asegurarse que los viejos binarios son eliminados). Como una salida,
pruebe de ejecutar configure sin ninguna opción y entonces vea si make
se ejecuta completamente. Si esto funciona, trate con opciones adicionales
de configure, una cada vez, hasta encontrar cual es la que cauza el problema. 


Instalando el binario Squid

El comando make crea el binario pero no lo instala.

Ejecutando make install crea los subdirectorios /usr/local/squid/bin y 
/usr/local/squid/etc y copia en los directorios apropiados los binarios y
los archivos de configuración predeterminados . Los permisos pueden no estar
fijados correctamente, pero nosotros podemos trabajar a través de todos los
directorios creados y aplicar los permisos correctos en corto tiempo.

Este comando también copia los archivos pertinentes de configuración en los
directorios predefinidos. El archivo de configuración estándar incluido con
los fuentes es puesto en el directorio /etc, así como el archivo mime.types
y el archivo predefinido del MIB de Squid (squid.mib).


Si usted está actualizando (o reinstalando) make install sobre escribirá
los archivos binarios en el directorio bin, pero no lo hará con sus
archivos de configuración dolorosamente manipulados. Si el archivo de
configuración de destino existe, make install creará en su lugar un
archivo llamado filename.default(¿h1?). Esto le permite verificar si las
opciones útiles han sido agregadas comparando los archivos de configuración. 

Si todo han ido bien usted debe tener una instalación completa (pero
no configurada) del sistema Squid.

¡Felicitaciones! 

************************
(¿?)   Son puntos que hay que revisar en la doc. de Oskar, él no está seguro
(¿h.?) Son mis observaciones
{}     Son términos/frases que su traducción requiere revisión o mejora



(¿h1?) Cómo se llama el archivo,, Ej. Si existe myconf => myconf.default


{4} patched 
{5} Enabling the 'time-hack' option


[*] Se refiere al documento original de Oskar Pearson y no a la traducción
