<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<chapter><title>El sistema de ficheros</title>
<sect1>
Introducción
<para>
Dentro del sistema <acronym>Unix</acronym> todo son archivos: desde la memoria física del
equipo hasta el ratón, pasando por módems, teclado, impresoras o
terminales. Esta filosofía de diseño es uno de los factores que más
éxito y potencia proporciona a Unix <xref linked="KP84"/>([KP84]),
pero también uno de los que más peligros entraña: un simple error en un permiso puede permitir
a un usuario modificar todo un disco duro o leer los datos tecleados
desde una terminal. Por esto, una correcta utilización de los
permisos, atributos y otros controles sobre los ficheros es vital para
la seguridad de un sistema.
</para>
<para>
En un sistema Unix típico existen tres tipos básicos de archivos:
fichero, planos, directorios, y ficheros especiales
(dispositivos)<footnote>
<para>
Otros tipos de archivos, como los enlaces simbólicos, los sockets o
los pipes no los vamos a tratar aquí.
</para>
</footnote>
generalmente, al hablar de <emphasis>ficheros</emphasis> nos solemos referir a todos
ellos si no se especifica lo contrario. Los ficheros planos son
secuencias de <emphasis>bytes</emphasis> que <emphasis>a priori
</emphasis> no poseen ni estructura interna ni
contenido significante para el sistema: su significado depende de las
aplicaciones que interpretan su contenido. Los directorios son
archivos cuyo contenido son otros ficheros de cualquier tipo (planos,
más directorios, o ficheros especiales), y los ficheros especiales son
ficheros que representan dispositivos del sistema; este último tipo se
divide en dos grupos: los dispositivos orientados a carácter y los
orientados a bloque. La principal diferencia entre ambos es la forma
de realizar operaciones de entrada/salida: mientras que los
dispositivos orientados a carácter las realizan
<emphasis>byte</emphasis> a <emphasis>byte</emphasis> (esto es,
carácter a carácter), los orientados a bloque las realizan en bloques
de caracteres.
</para>
<para>
El sistema de ficheros es la parte del núcleo más visible por los
usuarios; se encarga de abstraer propiedades físicas de diferentes
dispositivos para proporcionar una interfaz única de almacenamiento:
el archivo. Cada sistema Unix tiene su sistema de archivos nativo (por
ejemplo, <emphasis>ext2</emphasis> en Linux, UFS en Solaris o EFS en IRIX), por lo que para
acceder a todos ellos de la misma forma el núcleo de Unix incorpora
una capa superior denominada VFS (<emphasis>Virtual File System</emphasis>) encargada de
proporcionar un acceso uniforme a diferentes tipos de sistema de
ficheros. 
</para>
<para>
Un inodo o nodo índice es una estructura de datos que relaciona un
grupo de bloques de un dispositivo con un determinado nombre del
sistema de ficheros. Internamente, el núcleo de Unix no distingue a
sus archivos por su nombre sino por un número de inodo; de esta forma,
el fichero con número de inodo 23421 será el mismo tanto si se
denomina <command>/etc/passwd</command> como si se denomina
<command>/usr/fichero</command>. Mediante la
orden <command>ln(1)</command> se pueden asignar a un mismo inodo varios nombres de
fichero diferentes en el sistema de archivos.
</para>
</sect1>
<sect1>
<para>
Cuando un sistema Unix arranca una de las tareas que obligatoriamente
ha de realizar es incorporar diferentes sistemas de ficheros - discos
completos, una partición, una unidad de CD-ROM...- a la jerarquía de
directorios Unix; este proceso se llama montaje, y para realizarlo
generalmente se utiliza la orden <command>mount</command>. Es obligatorio montar al menos
un sistema de ficheros durante el arranque, el sistema raíz (/'), del
que colgarán todos los demás.
</para>
<para>
Montar un sistema de ficheros no significa más que asociar un
determinado nombre de directorio, denominado mount point o punto de
montaje, con el sistema en cuestión, de forma que al utilizar dicha
ruta estaremos trabajando sobre el sistema de ficheros que hemos
asociado a ella. Para saber qué sistemas de ficheros se han de montar
en el arranque de la máquina, y bajo qué nombre de directorio, Unix
utiliza un determinado archivo; aunque su nombre depende del clon
utilizado (<command>/etc/vfstab</command> en Solaris,
<command>/etc/fstab</command> en Linux...), su función
- e incluso su sintaxis - es siempre equivalente. Un ejemplo de este
fichero es el siguiente:
<screen>
luisa:~# cat /etc/fstab
/dev/hda3       /        ext2        defaults   1   1
/dev/hda4       /home    ext2        defaults   1   2
none            /proc    proc        defaults   1   1
luisa:~#
</screen>
</para>
</sect1>

</chapter>