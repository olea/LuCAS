.\" Copyright (C) 2003 Free Software Foundation, Inc.
.\" This file is distributed according to the GNU General Public License.
.\" See the file COPYING in the top level source directory for details.
.\"
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "IO_GETEVENTS" 2 "2003-02-21" "Linux 2.4" "Linux Programmer's Manual"
.SH NAME
io_getevents \- Read asynchronous I/O events from the completion queue
.SH "SYNOPSIS"
.ad l
.hy 0

#include <linux/time.h>

.sp

#include <linux/aio.h>

.sp
.HP 19
long\ \fBio_getevents\fR\ (aio_context_t\ \fIctx_id\fR, long\ \fImin_nr\fR, long\ \fInr\fR, struct\ io_event\ \fI*events\fR, struct\ timespec\ \fI*timeout\fR);
.ad
.hy

.SH "DESCRIPTION"

.PP
\fBio_getevents\fR attempts to read at least \fImin_nr\fR events and 
up to \fInr\fR events from the completion queue of the AIO context 
specified by \fIctx_id\fR. 
\fItimeout\fR specifies the amount of time to wait for events, 
where a NULL timeout waits until at least \fImin_nr\fR events have been seen. 
Note that \fItimeout\fR is relative and will be updated if not NULL 
and the operation blocks.

.SH "RETURN VALUE"

.PP
\fBio_getevents\fR returns the number of events read: 0 if no events are 
available or < \fImin_nr\fR if the \fItimeout\fR has elapsed.

.SH "ERRORS"

.TP
EINVAL
\fIctx_id\fR is invalid. \fImin_nr\fR is out of range or \fInr\fR is 
out of range.

.TP
EFAULT
Either \fIevents\fR or \fItimeout\fR is an invalid pointer.

.TP
ENOSYS
\fBio_getevents\fR is not implemented on this architecture.

.SH "CONFORMING TO"

.PP
\fBio_getevents\fR is Linux specific and should not be used in programs that are intended to be portable.

.SH "VERSIONS"

.PP
The asynchronous I/O system calls first appeared in Linux 2.5, August 2002.

.SH "SEE ALSO"

.PP
\fBio_setup\fR(2), \fBio_submit\fR(2), \fBio_getevents\fR(2), \fBio_cancel\fR(2), \fBio_destroy\fR(2).

.SH "NOTES"

.PP
The asynchronous I/O system calls were written by Benjamin LaHaise.

.SH AUTHOR
Kent Yoder.
