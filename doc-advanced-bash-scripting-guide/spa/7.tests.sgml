  <chapter id="tests">
    <title>Tests</title>

      <para><anchor id="ifthen"></para>

      <indexterm>
	<primary>if</primary>
      </indexterm>
      <indexterm>
	<primary>test</primary>
	<secondary>if</secondary>
      </indexterm>
      <indexterm>
	<primary>then</primary>
      </indexterm>
      <indexterm>
	<primary>else if</primary>
      </indexterm>
      <indexterm>
	<primary>elif</primary>
      </indexterm>

        <para>Cada lenguaje de programación razonablemente completo
	  puede testear una condición, y después actuar de acuerdo con
	  el resultado del test. Bash tiene el comando <command>test</command>,
	  varios operadores de corchetes y paréntesis, y la
	  construcción <command>if/then</command>.</para>

      <sect1 id="testconstructs">
	<title>Construcciones para pruebas</title>

      <itemizedlist id="testingref">

        <listitem>
	<para>Una construcción <command>if/then</command> testea si el
	  <link linkend="exitstatusref">estado de salida</link> de una
	  lista de comandos es <returnvalue>0</returnvalue> (debido a
	  que 0 significa <quote>éxito</quote> según el convenio
	  UNIX), y si es así, ejecuta uno o más comandos.</para>
	</listitem>

        <listitem>
	<para>Existe un comando dedicado llamado <command>
	[</command> (carácter especial <link
	linkend="leftbracket">corchete izquierdo</link>).
        Es un sinónimo para <command>test</command>,
	y un <link linkend="builtinref">builtin</link> por razones de
	eficiencia. Este comando considera sus argumentos como
	expresiones de comparación o tests de ficheros y devuelve un
	estado de salida correspondiente al resultado de la
	comparación (0 para verdadero, 1 para falso)..</para>
	</listitem>

        <listitem>
	<para>Con la versión 2.02, Bash introdujo el <emphasis>comando
	  de test extendido</emphasis> <link
	  linkend="dblbrackets">[[ ... ]]</link>, el cual realiza
	  comparaciones en una manera más familiar para los
	  programadores de otros lenguajes. Note que
	  <command>[[</command> es una <link
	  linkend="keywordref">palabra reservada</link>, no un comando.</para>

	<para>Bash ve <userinput>[[ $a -lt $b ]]</userinput> como un elemento
	  único, el cual devuelve un estado de salida.</para>

	<para>Las construcciones <link linkend="dblparens">((
	  ... ))</link> y <link linkend="letref">let ...</link>
	  también devuelven un estado de salida de
	  <returnvalue>0</returnvalue> si las expresiones aritméticas
	  que evalúan se expanden a un valor distinto de cero. Éstas
	  construcciones de  <link linkend="arithexpref">expansiones aritméticas</link>
	  podrían usarse para realizar comparaciones aritméticas.

	    <programlisting>let "1&lt;2" returns 0 (así "1&lt;2" se expande a "1")
(( 0 && 1 )) devuelve 1 (tal como "0 && 1" se expande a  "0")</programlisting>	    
	  </para>
        </listitem>

        <listitem>
	  <para>Un <command>if</command> puede testear cualquier
	    comando, no sólo condiciones encerradas entre corchetes.
	      <programlisting>if cmp a b &gt; /dev/null  # Suprime salida.
then echo "Los ficheros a y b son idénticos."
else echo "Los ficheros a y b difieren."
fi

if grep -q Bash file
then echo "El fichero contiene al menos una aparición de Bash."
fi

if COMMAND_WHOSE_EXIT_STATUS_IS_0_UNLESS_ERROR_OCCURRED
then echo "Comando existoso."
else echo "Comando fallado."
fi</programlisting>
          </para>
        </listitem>

        <listitem>

	  <para>Una construcción <command>if/then</command> puede
	    contener comparaciones y pruebas anidadas.
	      <programlisting>if echo "El siguiente *if* es parte de
	    la comparación del primer *if*."

  if [[ $comparison = "integer" ]]
    then (( a < b ))
  else
    [[ $a < $b ]]
  fi

then
  echo '$a es menor que $b'
fi</programlisting>
          </para> 

	  <para><emphasis>Esta explicación detallada de
	  test<quote>if</quote> es cortesía de Stephane Chazelas.</emphasis></para>

        </listitem>


      </itemizedlist>



      <example id="ex10">
	<title>¿Qué es verdad?</title>
	<programlisting>&ex10;</programlisting>
      </example>

      <formalpara><title>Ejercicio</title>
	<para>Explique el comportamiento de <xref linkend="ex10">, de arriba.</para>
      </formalpara>
      
      <para><programlisting>if [ condition-true ]
then
   command 1
   command 2
   ...
else
   # Opcional (podría dejarse si no se necesita).
   # Añade un bloque de código predeterminado de ejecución si el test
de condición original es falso.
   command 3
   command 4
   ...
fi</programlisting>
      </para>

      <para>Añada un punto y coma cuando «if» y «then» están en la
      misma línea.</para>
      <para><programlisting>if [ -x "$filename" ]; then</programlisting></para>

      <variablelist id="elifref">
        <title><anchor id="elifref1">Else if y elif</title>
	<varlistentry>
          <term><token>elif</token></term>
	  <listitem>
	    <para><userinput>elif</userinput> es una contracción de
	      <token>else if</token>.  El efecto es anidar una construcción
	      <token>if/then</token> más interna dentro de una externa.</para>

	    <para><programlisting>if [ condición1 ]
then
   comando1
   comando2
   comando3
elif [ condición2 ]
# Same as else if
then
   comando4
   comando5
else
   comando-predeterminado
fi</programlisting>
	      </para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <para>
      <indexterm>
	<primary>test</primary>
      </indexterm>
      <indexterm>
	<primary>test</primary>
	<secondary>test</secondary>
      </indexterm>
      <indexterm>
	<primary>[</primary>
      </indexterm>
      <indexterm>
	<primary>carácter especial</primary>
	<secondary>[</secondary>
      </indexterm>
      <indexterm>
	<primary>]</primary>
      </indexterm>
      <indexterm>
	<primary>carácter especial</primary>
	<secondary>]</secondary>
      </indexterm>
	
	La construcción <userinput>if test condición-verdad</userinput> es
        el equivalente exacto de <userinput>if [ condición-verdad ]</userinput>.
	Tal como se muestra, el corchete izquierdo,
        <command>[</command> , es una etiqueta que invoca el comando 
        <command>test</command>.  El corchete de cierre de la izquierda,
	<command>]</command> , en un test/if no debería ser entonces
        estrictamente necesario, sin embargo las versiones más nuevas
        de Bash lo requieren.</para>

	<note><para>El comando <command>test</command> es un <link
	  linkend="builtinref">builtin</link> de Bash que testea tipos
	  de fichero y compara cadenas. Entonces, en un script de Bash
	  <command>test</command> <emphasis>no</emphasis> llama
	  al binario externo <filename>/usr/bin/test</filename>,
	  que es parte del paquete <emphasis>sh-utils</emphasis>.
	  Del mismo modo,  <token>[</token> no llama 
	  <filename>/usr/bin/[</filename>, el cual está enlazado a
	  <filename>/usr/bin/test</filename>.</para>

	    <para>
	      <screen>
<prompt>bash$ </prompt><userinput>type test</userinput>
<computeroutput>test is a shell builtin</computeroutput>
<prompt>bash$ </prompt><userinput>type '['</userinput>
<computeroutput>[ is a shell builtin</computeroutput>
<prompt>bash$ </prompt><userinput>type '[['</userinput>
<computeroutput>[[ is a shell keyword</computeroutput>
<prompt>bash$ </prompt><userinput>type ']]'</userinput>
<computeroutput>]] is a shell keyword</computeroutput>
<prompt>bash$ </prompt><userinput>type ']'</userinput>
<computeroutput>bash: type: ]: not found</computeroutput>
	      </screen>
	    </para></note>
      

      <example id="ex11">
	<title>Equivalencia de <token>[ ]</token> y <token>test</token></title>
	<programlisting>&ex11;</programlisting>
      </example>


      <indexterm>
	<primary>test</primary>
      </indexterm>
      <indexterm>
	<primary>test</primary>
	<secondary>test</secondary>
      </indexterm>
      <indexterm>
	<primary>[[</primary>
      </indexterm>
      <indexterm>
	<primary>carácter especial</primary>
	<secondary>[[</secondary>
      </indexterm>
      <indexterm>
	<primary>]]</primary>
      </indexterm>
      <indexterm>
	<primary>carácter especial</primary>
	<secondary>]]</secondary>
      </indexterm>

      <para><anchor id="dblbrackets">La construcción <token>[[  ]]</token>
	es el equivalente en shell de <token>[  ]</token>. Este es el
	<emphasis>comando de testeo extendido</emphasis>, adoptado de
	<emphasis>ksh88</emphasis>.</para>

      <note><para>No se produce ni expansión de nombres de fichero o
	división de palabras entre <token>[[</token> y
	<token>]]</token>, pero hay expansión de parámetros y
	substitución de comandos.</para></note>

      <para>
	<programlisting>file=/etc/passwd

if [[ -e $file ]]
then
  echo "El archivo de contraseñas existe."
fi</programlisting>
      </para>

      <tip>
      <para>El uso de la construcción de test <command>[[ ... ]]</command>,
	en vez de <command>[ ... ]</command> puede evitar muchos
	errores lógicos en los scripts. Por ejemplo, los operadores <token>&&</token>,
	<token>||</token>, <token>&lt;</token>, y <token>&gt;</token>
	funcionan dentro de un test <token>[[  ]]</token>, en vez de
	dar un error dentro de una construcción <token>[  ]</token>.</para>
      </tip>

      <note>
      <para>Siguiendo un <command>if</command>, tanto el comando
        <command>test</command> como los corchetes de test ( [ ] o [[ ]] )
	son estrictamente necesarios.

	<programlisting>dir=/home/bozo

if cd "$dir" 2&gt;/dev/null; then   # "2&gt;/dev/null" oculta el mensaje de error.
  echo "Ahora en $dir."
else
  echo "No puedo cambiar a $dir."
fi</programlisting>

        La construcción "if COMANDO" devuelve un estado de salida de COMANDO.
</para>

	
	<para>Similarmente, una condición dentro de los corchetes de
	  test  puede estar sin un <command>if</command>, cuando se
	  usa en combinación con un <link linkend="listconsref">constructor de listas</link>.

	  <programlisting>var1=20
var2=22
[ "$var1" -ne "$var2" ] && echo "$var1 no es igual a $var2"

home=/home/bozo
[ -d "$home" ] || echo "El directorio $home no existe."</programlisting></para>
	  </note>


      <indexterm>
	<primary>test</primary>
      </indexterm>
      <indexterm>
	<primary>test</primary>
	<secondary>test</secondary>
      </indexterm>
      <indexterm>
	<primary>((</primary>
      </indexterm>
      <indexterm>
	<primary>carácter especial</primary>
	<secondary>))</secondary>
      </indexterm>
      <indexterm>
	<primary>((</primary>
      </indexterm>
      <indexterm>
	<primary>carácter especial</primary>
	<secondary>))</secondary>
      </indexterm>

      <para>La <link linkend="dblparens">construcción (( ))</link> expande
	y evalúa una expresión aritmética. Si la expresión se evalúa a
	cero, devuelve un <link linkend="exitstatusref">estado de salida</link> de
	<returnvalue>1</returnvalue>, o <quote>false</quote>. Una
	expresión distinta de cero devuelve un estado de salida de <returnvalue>0</returnvalue>,
	o <quote>true</quote>. Esto es en constraste marcado a usar
	las construcciones <command>test</command> y <token>[
	]</token> anteriormente expuestas.</para>

        <example id="arithtests">
	  <title>Tests aritméticos usando <token>(( ))</token></title>
	  <programlisting>&arithtests;</programlisting>
        </example>

      </sect1> <!-- Test Constructs -->


      <sect1 id="fto">
	<title>Operadores de test de ficheros</title>

	<variablelist>
	  <title><anchor id="rtif">Devuelve true si...</title>
	  <varlistentry>
	    <term><token>-e</token></term>
	    <listitem><para>existe el fichero</para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>-f</token></term>
	    <listitem><para>el fichero es <replaceable>regular</replaceable>
	      (no es un directorio ni un fichero de dispositivo)</para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>-s</token></term>
	    <listitem><para>el fichero no es de tamaño cero</para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>-d</token></term>
	    <listitem><para>el fichero es un directorio</para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>-b</token></term>
	    <listitem><para>el fichero es un dispositivo de bloques (floppy, cdrom, etc.)
	    </para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>-c</token></term>
	    <listitem><para>el fichero es un dispositivo de caracteres
	    (teclado, modem, tarjeta de sonido, etc.)</para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>-p</token></term>
	    <listitem><para>el fichero es una conducción (pipe)</para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>-h</token></term>
	    <listitem><para>el fichero es un enlace simbólico duro</para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>-L</token></term>
	    <listitem><para>el fichero es un enlace simbólico dévil</para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>-S</token></term>
	    <listitem><para>el fichero es un socket</para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>-t</token></term>
	    <listitem>
	    <para>el (<link linkend="fdref">descriptor</link>) de
	      fichero está asociado con un dispositivo de terminal</para>
	    <para>Esta opción de test puede usarse para comprobar si 
	      <filename>stdin</filename> (<userinput>[ -t 0 ]</userinput>)
	      o <filename>stdout</filename> (<userinput>[ -t 1 ]</userinput>)
	      en un script determinado es un terminal.</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>-r</token></term>
	    <listitem><para>el fichero tiene permiso de lectura
	    (<emphasis>para el usuario que ejecuta el test </emphasis>)</para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>-w</token></term>
	    <listitem><para>el fichero tiene permiso de escritura
	    (para el usuario que ejecuta el test)</para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>-x</token></term>
	    <listitem><para>el archivo tiene permiso de ejecución
	    (para el usuario que ejecuta el test)</para></listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><token>-g</token></term>
	    <listitem>
	    <para>si está activado el flag set-group-id (sgid) en el
	    fichero o directorio</para>
	    <para>Si un directorio tiene el flag <replaceable>sgid</replaceable>
	      activado, entonces un archivo creado dentro de ese
	    directorio pertenecerá al grupo dueño del directorio, no
	    necesariamente al grupo del usuario que creó el
	    fichero. Esto puede ser útil en un directorio compartido
	    por un grupo de trabajo.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><token>-u</token></term>
	    <listitem>
	    <para>si está activado el flag set-user-id (suid) en el fichero</para>
	    <para>Un binario cuyo dueño sea <emphasis>root</emphasis>
	      con el flag <replaceable>set-user-id</replaceable> activavo
	      se ejecutará con privilegios de <emphasis>root</emphasis>, incluso
	      cuando un usuario ordinario lo invoque.
	      
		<footnote><para>Tenga en cuenta que los binarios <emphasis>suid</emphasis>
		  pueden abrir brechas de seguridad y que el flag 
		  <emphasis>suid</emphasis> no tiene efecto en los
		  scripts de shell.</para></footnote>

	      Esto es útil para los ejecutables (como
	      <command>pppd</command> y <command>cdrecord</command>)
	      que necesitan acceder al hardware del sistema. Si les
	      faltase el flag <emphasis>suid</emphasis>, estos
	      binarios no podrían ser invocados por un usuario que no 
              fuera root.

	      <screen>
	      <computeroutput>-rwsr-xr-t    1 root       178236 Oct  2  2000 /usr/sbin/pppd</computeroutput>
	      </screen>

	      Un archivo con el flag <replaceable>suid</replaceable>
	      puesto muestra una <emphasis>s</emphasis> en sus permisos.</para>

	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><token>-k</token></term>
	    <listitem>

	    <para><replaceable>bit de persistencia (sticky)</replaceable> establecido</para>

	    <para>Conocido comúmmente como <quote>sticky bit</quote>, el
	      flag <emphasis>save-text-mode</emphasis> es un tipo
	      especial de permiso de archivo. Si un fichero tiene este
	      flag establecido, ese fichero se mantendrá en memoria
	      caché, para acceso más rápido.
	        <footnote><para>En los sistemas UNIX modernos, el bit
	      de persistencia no se usa más para los archivos, sólo en
	      los directorios.</para></footnote>
	      Si se establece en un directorio, restringe el permiso
	      de escritura.
	      Al poner el bit de persistencia, se añade una <emphasis>t</emphasis>
	      al listado de permisos del archivo o directorio.

	      <screen>
	      <computeroutput>drwxrwxrwt    7 root         1024 May 19 21:26 tmp/</computeroutput>
	      </screen>
	    
	      Si a un usuario no le pertenece un directorio que tiene
	      puesto el bit de persistencia, pero tiene permiso de
	      escritura en ese directorio, sólo puede borrar ficheros
	      que le pertenezcan. Esto evita que los usuarios
	      sobreescriban o borren inadvertidamente los ficheros de
	      otros usuarios en los directorios compartidos como en 
	      as <filename class="directory">/tmp</filename>.</para>

	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>-O</token></term>
	    <listitem><para>si ud. es el dueño del fichero</para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>-G</token></term>
	    <listitem><para>si el id-gropo del fichero es el mismo que
	    el suyo</para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>-N</token></term>
	    <listitem><para>si el fichero ha sido modificado desde que
	    se leyó por última vez</para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>f1 -nt f2</token></term>
	    <listitem><para>si el fichero
	    <replaceable>f1</replaceable> es más nuevo que
		<replaceable>f2</replaceable></para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>f1 -ot f2</token></term>
	    <listitem><para>si el fichero
	    <replaceable>f1</replaceable> es más antiguo que
		<replaceable>f2</replaceable></para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>f1 -ef f2</token></term>
	    <listitem><para>si los ficheros <replaceable>f1</replaceable> y
		<replaceable>f2</replaceable> son enlaces duros al
	    mismo fichero<para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>!</token></term>
	    <listitem><para><quote>no</quote> -- invierte el sentido
	    de los test de encima (devuelve true si falta la condición).</para></listitem>
	  </varlistentry>
	</variablelist>

	<para><xref linkend="cookies">, <xref linkend="bingrep">,
	  <xref linkend="fileinfo">, <xref linkend="ramdisk">, y <xref
	  linkend="mailformat"> ilustra el uso de los operadores de
	  test de ficheros.</para>


      </sect1> <!-- File test operators -->

      <sect1 id="comparison-ops">
	<title>Operadoes de comparación (binarios)</title>

	<variablelist id="icomparison">
	  <title><anchor id="icomparison1">comparación de enteros</title>

	  <varlistentry>
	    <term><token>-eq</token></term>
	    <listitem>
	    <para><anchor id="equalref"></para>
	    <para>es igual a </para>
	    <para><userinput>if [ "$a" -eq "$b" ]</userinput></para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><token>-ne</token></term>
	    <listitem>
	    <para>no es igual a</para>
	    <para><userinput>if [ "$a" -ne "$b" ]</userinput></para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><token>-gt</token></term>
	    <listitem>
	    <para>es mayor que</para>
	    <para><userinput>if ["$a" -gt "$b" ]</userinput></para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><token>-ge</token></term>
	    <listitem>
	    <para>es mayor o igual que</para>
	    <para><userinput>if [ "$a" -ge "$b" ]</userinput></para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><token>-lt</token></term>
	    <listitem>
	    <para>es menor que</para>
	    <para><userinput>if [ "$a" -lt "$b" ]</userinput></para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><token>-le</token></term>
	    <listitem>
	    <para>es menor o igual que</para>
	    <para><userinput>if [ "$a" -le "$b" ]</userinput></para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><anchor id="intlt"><token>&lt;</token></term>
	    <listitem>
	    <para>es menor que (dentro de <link
	      linkend="dblparens">dobles paréntesis</link>)</para>
	    <para><userinput>(("$a" &lt; "$b"))</userinput></para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><token>&lt;=</token></term>
	    <listitem>
	    <para>es menos que o igual que (dentro de dobles paréntesis)</para>
	    <para><userinput>(("$a" &lt;= "$b"))</userinput></para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><token>&gt;</token></term>
	    <listitem>
	    <para>es mayor que (dentro de dobles paréntesis)</para>
	    <para><userinput>(("$a" &gt; "$b"))</userinput></para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><token>&gt;=</token></term>
	    <listitem>
	    <para>es mayor o igual que (dentro de dobles paréntesis)</para>
	    <para><userinput>(("$a" &gt;= "$b"))</userinput></para>
	    </listitem>
	  </varlistentry>
	  
	</variablelist>
	
	<variablelist id="scomparison">
	  <title><anchor id="scomparison1">comparación de cadenas</title>
	  <varlistentry>
	    <term><token>=</token></term>
	    <listitem>
	    <para><anchor id="equalsignref"></para>
	    <para>es igual a</para>
	    <para><userinput>if [ "$a" = "$b" ]</userinput></para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><token>==</token></term>
	    <listitem>
	      <para>es igual a</para>
	      <para><userinput>if [ "$a" == "$b" ]</userinput></para>
	      <para>Esto es un sinónimo de <token>=</token>.</para>

	      <para>
	      <programlisting>[[ $a == z* ]]    # true if $a starts with an "z" (pattern matching)
[[ $a == "z*" ]]  # true if $a is equal to z*

[ $a == z* ]      # file globbing and word splitting take place
[ "$a" == "z*" ]  # true if $a is equal to z*

# Thanks, S.C.</programlisting>
              </para>

	      </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>!=</token></term>
	    <listitem>
	    <para>no es igual a</para>
	    <para><userinput>if [ "$a" != "$b" ]</userinput></para>
	    <para>Este operador usa coincidencia de patrones dentro de
	    una construcción <link
	      linkend="dblbrackets">[[ ... ]]</link>.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><anchor id="ltref"><token>&lt;</token></term>
	    <listitem>
	    <para>es menor que, en orden alfabérico ASCII</para>
	    <para><userinput>if [[ "$a" &lt; "$b" ]]</userinput></para>
	    <para><userinput>if [ "$a" \&lt; "$b" ]</userinput></para>
	    <para>Note que el <quote>&lt;</quote> necesita ser
	    escapado dentro de una construcción <userinput>[ ]</userinput>.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><anchor id="gtref"><token>&gt;</token></term>
	    <listitem>
	    <para>es mayor que, en orden alfabético ASCII</para>
	    <para><userinput>if [[ "$a" &gt; "$b" ]]</userinput></para>
	    <para><userinput>if [ "$a" \&gt; "$b" ]</userinput></para>
	    <para>Note que el <quote>&gt;</quote> necesita ser
	    escapado dentro de una construcción <userinput>[  ]</userinput>.</para>  
	    <para>Vea el <xref linkend="bubble"> para una aplicación
	    de este operador de comparación.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><token>-z</token></term>
	    <listitem><para>la cadena es <quote>nula</quote>, esto es,
	    tiene longitud cero</para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><token>-n</token></term>
	    <listitem>
	      <para>la cadena no es <quote>nula</quote>.</para>
	    
	      <caution><para>El test <userinput>-n</userinput> rquiere
		absolutamente que la cadena sea entrecomillada dentro
		de corchetes de test. Usar una cadena sin
		entrecomillar con <userinput>! -z</userinput>, o
		incluso sólo la cadena sin entrecomillar sola dentro
		de los corchetes de test  (vea el <xref
		linkend="strtest">) normalmente funciona, sin embargo
		es una prácnica no segura. <emphasis>Siempre</emphasis> entrecomille
		una cadena testeada.
		  <footnote><para>Como S.C. apunta, en un test compuesto,
		    incluso entrecomillando la variable de cadena
		quizá no sea suficiente. <userinput>[ -n "$string" -o "$a" =
		    "$b" ]</userinput> quizá cause un error con algunas
		    versiones de Bash si <varname>$string</varname>
		    está vacío..  La forma segura de hacerlo es
		agregar un carácter extra para posibilitar variables vacias,
		 , <userinput>[
		    "x$string" != x -o "x$a" = "x$b" ]</userinput>
		    (las <quote>x</quote> se cancelan).</para></footnote>
		</para></caution>

            </listitem>
	    </varlistentry>
	</variablelist>
	
	<example id="ex13">
	  <title>comparaciones aritméticas y de cadenas</title>
	  <programlisting>&ex13;</programlisting>
	</example>

	<example id="strtest">
	  <title>testeo de si una cadena es <emphasis>nula</emphasis></title>
	  <programlisting>&strtest;</programlisting>
	</example>
      
	<example id="ex14">
	  <title><command>zmost</command></title>
	  <programlisting>&ex14;</programlisting>
	</example>

	<variablelist id="ccomparison">  
	  <title><anchor id="ccomparison1">comparación compuesta</title>

	  <varlistentry>
	    <term><token>-a</token></term>
	    <listitem>
	      <para>and lógico</para>
	      <para><replaceable>exp1 -a exp2</replaceable> devuelve  true si
		<emphasis>ambas</emphasis> exp1 y exp2 son true.</para>
	    </listitem>
            </varlistentry>
	  <varlistentry>
	    <term><token>-o</token></term>
	    <listitem>
	      <para>or lógico </para>
	      <para><replaceable>exp1 -o exp2</replaceable> devuelve
		true si alguna de exp1 <emphasis>o</emphasis> exp2 es
		verdadera.</para>
	    </listitem>
	    </varlistentry>
	</variablelist>

       <para>Estas son similares a los operadores de comparación de Bash
	 <command>&&</command> y <command>||</command>, usados
	 dentro de  <link linkend="dblbrackets">dobles corchetes</link>.
	   <programlisting>[[ condition1 && condition2 ]]</programlisting>
	 Los operadores <command>-o</command> y <command>-a</command>
	 funcionan con el comando <command>test</command> o aparecen
	 entre corchetes simples de test.
	   <programlisting>if [ "$exp1" -a "$exp2" ]</programlisting>
	   </para>

       <para>Refiérase al <xref linkend="andor"> y a <xref linkend="twodim">
	 para ver los operadores compuestos de comparación en acción.</para>

      </sect1> <!-- Comparison operators (binary) -->

      <sect1 id="nestedifthen">
        <title>Test anidades de condiciones if/then </title>

       <para>Los tests de condición que usan la construcción <command>if/then</command>
	 pueden ser anidados. El resultado neto es idéntico al de usar
	 el comando de comparación compuesta <command>&&</command>
	 de arriba.</para>

       <para><programlisting>if [ condition1 ]
then
  if [ condition2 ]
  then
    do-something  # But only if both "condition1" and "condition2" valid.
  fi  
fi</programlisting></para>  

       <para>Vea <xref linkend="ex79"> para un ejemplo de test de
         condición anidados <replaceable>if/then</replaceable>.</para>
	
      </sect1> <!-- Nested if/then Tests -->

      <sect1 id="testtest">
        <title>Testeando tu conocimiento acerca de tests</title>
      <para>El archivo de sistema <filename>xinitrc</filename> puede
      usarse para lanzar el servidor X. Este fichero contiene un
      enorme número de tests <emphasis>if/then</emphasis>, tal como
      muestra el siguiente extracto.</para>

      <para><programlisting>if [ -f $HOME/.Xclients ]; then
  exec $HOME/.Xclients
elif [ -f /etc/X11/xinit/Xclients ]; then
  exec /etc/X11/xinit/Xclients
else
     # failsafe settings.  Although we should never get here
     # (we provide fallbacks in Xclients as well) it can't hurt.
     xclock -geometry 100x100-5+5 &
     xterm -geometry 80x50-50+150 &
     if [ -f /usr/bin/netscape -a -f /usr/share/doc/HTML/index.html ]; then
             netscape /usr/share/doc/HTML/index.html &
     fi
fi</programlisting></para>     

     <para>Explique las construcciones <quote>test</quote> en el
       extracto de arriba, después examine el fichero entero, 
      <filename>/etc/X11/xinit/xinitrc</filename>, y analice las construcciones
       <emphasis>if/then</emphasis> de test allí. Quizá necesite mirar
       más adelante para ver las discusiones acerca sobre <link
       linkend="grepref">grep</link>, <link linkend="sedref">sed</link>,
       y <link linkend="regexref">expresiones regulares</link>.</para>


      </sect1> <!-- Testing Your Knowledge of Tests -->

  </chapter> <!-- Tests -->
