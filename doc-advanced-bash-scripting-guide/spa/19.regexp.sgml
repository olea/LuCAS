  <chapter id="regexp">
      <title>Expresiones Regulares</title>

      <para><anchor id="regexref"></para>

      <para>Para aprovechar al máximo el poder de la programación de la shell, es necesario conocer las expresiones regulares.
       Ciertas órdenes y utilidades usadas comúnmente en los scripts, como <link
	linkend="exprref">expr</link>, <link linkend="sedref">sed</link>
	y <link linkend="awkref">awk</link> interpretan y usan
       expresiones regulares (exp. reg.).</para>

      <sect1><title>Una Breve Introducción a las Expresiones Regulares</title>

	<para>Una expresión es una cadena de caracteres. Aquellos caracteres
	  que tengan otra interpretación además de su significado literal se llaman
	  <emphasis>metacaracteres</emphasis>. Un símbolo de comillas,
	  por ejemplo, puede denotar lo dicho por una persona,
	  <emphasis>ídem</emphasis>, o un meta-significado para los símbolos que le suceden.
	  Las expresiones regulares son conjuntos de caracteres y/o metacaracteres que UNIX dota con características especiales.

	    <footnote><para>El tipo más simple de expresión regular es una cadena de caracteres
	      que conserva su significado literal, sin contener ningún metacarácter.</para></footnote>

	  </para>

	<para>Las expresiones regulares (exp. reg.) se usan principalmente para búsquedas de texto y manipulación de cadenas.
	Una expresión regular <firstterm>coincide</firstterm> con un único carácter o un conjunto de caracteres (una subcadena dentro de una cadena).</para>

	<itemizedlist>
	  <listitem>
	    <indexterm>
	      <primary>*</primary>
	    </indexterm>
	    <indexterm>
	      <primary>carácter especial</primary>
	      <secondary>*</secondary>
	    </indexterm>

	    <para>El asterisco <token>*</token> coincide con cualquier número de repeticiones
	     de la cadena de caracteres o de la expresión regular  que le preceda,
	      <emphasis>incluyendo cero</emphasis>.</para>

	    <para><quote>1133*</quote> coincide con <replaceable>11 +
	      uno o más treses y posiblemente otros caracteres</replaceable>:
	      <replaceable>113</replaceable>, <replaceable>1133</replaceable>,
	      <replaceable>111312</replaceable>, y así.</para>

	  </listitem>
	  <listitem>
	    <indexterm>
	      <primary>.</primary>
	    </indexterm>
	    <indexterm>
	      <primary>carácter especial</primary>
	      <secondary>.</secondary>
	    </indexterm>

	    <para><anchor id="regexdot"/>El punto <token>.</token>
	        coincide con cualquier carácter excepto con el de línea nueva.
	        <footnote><para>Ya que <link linkend="sedref">sed</link>, <link
		  linkend="awkref">awk</link>, y <link
		  linkend="grepref">grep</link> procesan líneas
	        simples, normalmente no se encontrarán coincidencias. En aquellos casos donde existan
		  caracteres de línea nueva en una expresión
	        multilínea, el punto encontrará el/los carácter/es de
	        línea nueva.
		  <programlisting>
#!/bin/bash
sed -e 'N;s/.*/[&]/' &lt;&lt; EOF   # Aquí el Documento
linea1
linea2
EOF
# SALIDA:
# [linea1
# linea2]



echo

awk '{ $0=$1 "\n" $2; if (/línea.1/) {print}}' &lt;&lt; EOF
linea 1
linea 2
EOF
# SALIDA:
# linea
# 1


# Gracias, S.C.

exit 0</programlisting></para></footnote>  
	    </para>

	     <para><quote>13.</quote> coincide con <replaceable>13 y al menos uno o más caracteres
	     (incluyendo el espacio)</replaceable>: <replaceable>1133</replaceable>,
	     <replaceable>11333</replaceable>, pero no
	     <replaceable>13</replaceable> (falta un carácter adicional).</para>
	  </listitem>


	  <listitem>
	    <indexterm>
	      <primary>^</primary>
	    </indexterm>
	    <indexterm>
	      <primary>carácter especial</primary>
	      <secondary>^</secondary>
	    </indexterm>
	    <para>El carácter de intercalación <token>^</token> coincide con el comienzo de una línea,
	     pero a veces, dependiendo del contexto, niega el significado de un conjunto de caracteres en una expresión regular.
	    </para>
	  </listitem>

	  <listitem>
	    <indexterm>
	      <primary>$</primary>
	    </indexterm>
	    <indexterm>
	      <primary>carácter especial</primary>
	      <secondary>$</secondary>
	    </indexterm>
	    <para><anchor id="dollarsignref/"></para>
	    <para>El signo de dólar <token>$</token> al final de una expresión regular coincide con el carácter de final de línea.</para>
	    <para><quote>^$</quote> coincide con líneas en blanco.</para>
	  </listitem>

	  <listitem>
	    <indexterm>
	      <primary>[...]</primary>
	    </indexterm>
	    <indexterm>
	      <primary>carácter especial</primary>
	      <secondary>[...]</secondary>
	    </indexterm>

	    <para>Los corchetes <token>[...]</token> determinan un conjunto de caracteres que encontrar, en una expresión regular.</para>

	    <para><quote>[xyz]</quote> coincide con los caracteres
	      <replaceable>x</replaceable>, <replaceable>y</replaceable>,
	      o <replaceable>z</replaceable>.</para>

	    <para><quote>[c-n]</quote> coincide con alguno de los caracteres en el rango <replaceable>c</replaceable>
	      a <replaceable>n</replaceable>.</para>

	    <para><quote>[B-Pk-y]</quote> coincide con alguno de los caracteres en los rangos <replaceable>B</replaceable>
	      a <replaceable>P</replaceable>
	      y <replaceable>k</replaceable> a
	      <replaceable>y</replaceable>.</para>

	    <para><quote>[a-z0-9]</quote> coincide con alguna letra minúscula o cualquier dígito.</para>

	    <para><quote>[^b-d]</quote> coincide con todos los caracteres
	      <emphasis>excepto</emphasis> aquellos en el rango <replaceable>b</replaceable> a
	      <replaceable>d</replaceable>. Esto es una instancia de
	      <token>^</token> negando o invirtiendo el significado de la siguiente expresión regular (tomando un papel similar a <token>!</token>
	       en un contexto diferente).</para>

	    <para>Secuencias combinadas de caracteres encerrados entre
	      corchetes coinciden con n patrones de palabras comunes.
	      <quote>[Oo][Kk][Yy]</quote> coincide con
	      <replaceable>oki</replaceable>, <replaceable>Oki</replaceable>,
	      <replaceable>OKI</replaceable>, <replaceable>oKi</replaceable>,
	      etcétera.
	      <quote>M-[0-9][0-9][0-9][0-9]-MT</quote>
	      coincide con cualquier matrícula antigua de Madrid terminada en MT.</para>

	  </listitem>


	  <listitem>
	    <indexterm>
	      <primary>\</primary>
	    </indexterm>
	    <indexterm>
	      <primary>carácter especial</primary>
	      <secondary>\</secondary>
	    </indexterm>

	    <para>La barra invertida <token>\</token> <link
	      linkend="escp">escapa</link> un carácter especial, lo que significa que ese carácter es interpretado literalmente.</para>

	     <para>Un <quote>\$</quote> vuelve al significado literal de <quote>$</quote>, dejando de tener el significado de las
	       expresión regulares de  final de línea. Asímismo, <quote>\\</quote>
	       tiene el significado literal de <quote>\</quote>.</para>
	  </listitem>
	</itemizedlist>


	<itemizedlist>

	  <listitem override="square">
	    <formalpara>
	      <title><anchor id="extregex">Expresiones Regulares Extendidas</title>

	      <para>Se usan en <link linkend="egrepref">egrep</link>,
		<link linkend="awkref">awk</link>, y <link
		linkend="perlref">Perl</link></para>

	      </formalpara>
	  </listitem>

	  <listitem>

	    <indexterm>
	      <primary>?</primary>
	    </indexterm>
	    <indexterm>
	      <primary>carácter especial</primary>
	      <secondary>?</secondary>
	    </indexterm>

	    <para><anchor id="quexregex"></para>
	    <para>El signo de interrogación <token>?</token> coincide con cero o uno de la anterior
	      expresión regular. Se usa generalmente para coincidir con caracteres aislados.</para>

	  </listitem>

	  <listitem>
	    <indexterm>
	      <primary>+</primary>
	    </indexterm>
	    <indexterm>
	      <primary>carácter especial</primary>
	      <secondary>+</secondary>
	    </indexterm>

	    <para><anchor id="plusref"></para>
	    <para>El signo más <token>+</token> coincide con uno o más de la anterior
	    expresión regular. Tiene un papel similar a <token>*</token>, pero <emphasis>no</emphasis> coincide con cero ocurrencias.</para>

	    <para><programlisting># versiones GNU de sed y awk pueden usar "+",
# pero debe de ser escapado.

echo a111b | sed -ne '/a1\+b/p'
echo a111b | grep 'a1\+b'
echo a111b | gawk '/a1+b/'
# Todas las sentencias anteriores son equivalentes.

# Gracias, S.C.</programlisting></para>

	  </listitem>

	  <listitem>
	    <indexterm>
	      <primary>\{ \}</primary>
	    </indexterm>
	    <indexterm>
	      <primary>carácter especial</primary>
	      <secondary>\{ \}</secondary>
	    </indexterm>

	    <para>Las llaves <link linkend="escp">escapadas</link> 
	      <token>\{ \}</token> indican el número de ocurrencias de
	      la expresión regular precedente con que coincidir.</para>

	    <para>Es necesario escapar las llaves ya que de otro modo sólo tienen su significado
	      de carácter literal. Técnicamente este uso no es parte
	      del conjunto básico de las expresiónes regulares.</para>

	    <para><quote>[0-9]\{5\}</quote> coincide con exactamente cinco dígitos (caracteres en el rango 0 a 9).</para>

	    <caution>
	    <para>Las llaves no están disponibles como una expresión regular en la versión <quote>clásica</quote> de <link
	      linkend="awkref">awk</link>. Sin embargo,
	      <command>gawk</command> tiene la opción
	      <option>--re-interval</option> que las permite (sin estar escapadas).</para>
	  <para>
	      <screen><prompt>bash$ </prompt><userinput>echo 2222 | gawk --re-interval '/2{3}/'</userinput>
<computeroutput>2222</computeroutput>
	      </screen>
	    </para>

	      </caution>

	  </listitem>

	  <listitem>
	    <indexterm>
	      <primary>()</primary>
	    </indexterm>
	    <indexterm>
	      <primary>carácter especial</primary>
	      <secondary>()</secondary>
	    </indexterm>

	    <para>Los paréntesis <command>( )</command> encierran grupos de expresiones regulares.
	     Son especialmente útiles con el operador siguiente 
	      <quote><token>|</token></quote> .</para>
	  </listitem>

	  <listitem>
	    <indexterm>
	      <primary>|</primary>
	    </indexterm>
	    <indexterm>
	      <primary>carácter especial</primary>
	      <secondary>|</secondary>
	    </indexterm>

	    <para>El operador de expresión regular <quote>o</quote> <command>|</command> coincide con
	      cualquiera de las alternativas de un conjunto de caracteres.</para>
	      <para>
	      <screen><prompt>bash$ </prompt><userinput>egrep 'libr(a|e)s' misc.txt</userinput>
<computeroutput>Las líneas de código fuente de un proyecto GNU son libres de ser modificadas.
 Hay algún país que mide los euros en libras esterlinas.</computeroutput>
	      </screen>
	      </para>
	  </listitem>

	</itemizedlist>


	<itemizedlist>

	  <listitem override="square">

	    <formalpara><title><anchor id="posixref">Clases de Caracteres POSIX</title>
	      <para><userinput>[:class:]</userinput></para></formalpara>

	    <indexterm>
	      <primary>[:</primary>
	    </indexterm>
	    <indexterm>
	      <primary>carácter especial</primary>
	      <secondary>:]</secondary>
	    </indexterm>

	    <para>Este es un método alternativo para especificar un
	    rango de caracteres con el que coincidir.</para>

	  </listitem>


	  <listitem>

	    <indexterm>
	      <primary>alnum</primary>
	    </indexterm>
	    <indexterm>
	      <primary>rango de caracteres</primary>
	      <secondary>alfabético-numérico</secondary>
	    </indexterm>

	    <para><userinput>[:alnum:]</userinput> coincide con caracteres alfabéticos o
	      numéricos. Es equivalente a <userinput>[A-Za-z0-9]</userinput>.</para>

	  </listitem>

	  <listitem>

	    <indexterm>
	      <primary>alpha</primary>
	    </indexterm>
	    <indexterm>
	      <primary>rango de caracteres</primary>
	      <secondary>alfabético</secondary>
	    </indexterm>

	    <para><userinput>[:alpha:]</userinput> coincide con caracteres alfabéticos. Es equivalente a 
	      <userinput>[A-Za-z]</userinput>.</para>

	  </listitem>

	  <listitem>

	    <indexterm>
	      <primary>blank</primary>
	    </indexterm>
	    <indexterm>
	      <primary>rango de caracteres</primary>
	      <secondary>espacio tabulador</secondary>
	    </indexterm>

	    <para><userinput>[:blank:]</userinput> coincide con un espacio o un tabulador.</para>

	  </listitem>

	  <listitem>
	    <indexterm>
	      <primary>cntrl</primary>
	    </indexterm>
	    <indexterm>
	      <primary>rango de caracteres</primary>
	      <secondary>control</secondary>
	    </indexterm>

	    <para><userinput>[:cntrl:]</userinput> coincide con los caracteres de control.</para>

	  </listitem>

	  <listitem>

	    <indexterm>
	      <primary>digit</primary>
	    </indexterm>
	    <indexterm>
	      <primary>rango de caracteres</primary>
	      <secondary>decimal dígito</secondary>
	    </indexterm>

	    <para><userinput>[:digit:]</userinput> coincide con dígitos (decimales). Es equivalente a <userinput>[0-9]</userinput>.</para>

	  </listitem>

	  <listitem>

	    <indexterm>
	      <primary>graph</primary>
	    </indexterm>
	    <indexterm>
	      <primary>rango de caracteres</primary>
	      <secondary>gráficos</secondary>
	    </indexterm>

	    <para><userinput>[:graph:]</userinput> (caracteres gráficos imprimibles). Coincide con caracteres en el rango ASCII 33 -
	      126. Es igual que el <userinput>[:print:]</userinput>,
	      descrito más adelante, pero excluyendo el carácter espacio y el tabulador.</para>

	  </listitem>

	  <listitem>

	    <indexterm>
	      <primary>lower</primary>
	    </indexterm>
	    <indexterm>
	      <primary>rango de caracteres</primary>
	      <secondary>minúsculas</secondary>
	    </indexterm>

	    <para><userinput>[:lower:]</userinput> coincide con caracteres alfabéticos en minúsculas. Es equivalente a
	      <userinput>[a-z]</userinput>.</para>

	  </listitem>

	  <listitem>

	    <indexterm>
	      <primary>print</primary>
	    </indexterm>
	    <indexterm>
	      <primary>rango de caracteres</primary>
	      <secondary>imprimible</secondary>
	    </indexterm>

	    <para><userinput>[:print:]</userinput> (caracteres imprimibles). Coincide con caracteres en el rango ASCII 32 -
	      126. Es igual que <userinput>[:graph:]</userinput>,
	      descrito anteriormente, pero incluyendo el carácter espacio y el tabulador.</para>

	  </listitem>

	  <listitem>

	    <indexterm>
	      <primary>space</primary>
	    </indexterm>
	    <indexterm>
	      <primary>rango de caracteres</primary>
	      <secondary>espacio en blanco</secondary>
	    </indexterm>

	    <para><userinput>[:space:]</userinput> coincide con caracteres en blanco (el espacio y el tabulador horizontal).</para>

	  </listitem>

	  <listitem>

	    <indexterm>
	      <primary>upper</primary>
	    </indexterm>
	    <indexterm>
	      <primary>rango de caracteres</primary>
	      <secondary>mayúsculas</secondary>
	    </indexterm>

	    <para><userinput>[:upper:]</userinput> coincide con caracteres alfabéticos en mayúsculas.
	     Es equivalente a <userinput>[A-Z]</userinput>.</para>

	  </listitem>

	  <listitem>

	    <indexterm>
	      <primary>xdigit</primary>
	    </indexterm>
	    <indexterm>
	      <primary>rango de caracteres</primary>
	      <secondary>hexadecimal</secondary>
	    </indexterm>

	    <para><userinput>[:xdigit:]</userinput> coincide con dígitos hexadecimales.
	       Es equivalente a <userinput>[0-9A-Fa-f]</userinput>.</para>

            <important>

	    <para>Las clases de carácter POSIX requieren generalmente ser entrecomillados 
	      o encerrarlos entre <link linkend="dblbrackets">dobles corchetes</link>
	      ([[ ]]).</para>

	    <para>
	      <screen><prompt>bash$ </prompt><userinput>grep [[:digit:]] test.file</userinput>
<computeroutput>abc=723</computeroutput>
	      </screen>
	    </para>

	    <para>Estas clases de caracteres pueden incluso usarse para <link
	      linkend="globbingref">expansión de nombres</link>, hasta cierto punto.</para>

	    <para>
	      <screen><prompt>bash$ </prompt><userinput>ls -l ?[[:digit:]][[:digit:]]?</userinput>
<computeroutput>-rw-rw-r--    1 drmay  drmay         0 Aug 21 14:47 a33b</computeroutput>
	      </screen>
	    </para>

	    <para>Para ver como se usan en los scripts las clases de caracteres POSIX, Ir a
	      <xref linkend="ex49"/> y <xref linkend="lowercase"/>.</para>

	    </important>  

	  </listitem>

	</itemizedlist>





	<para><link linkend="sedref">Sed</link>, <link
	  linkend="awkref">awk</link>, y <link
	  linkend="perlref">Perl</link>, usados en scripts como filtros, toman
	  expresiones regulares como argumentos cuando se usan para
	  expandir nombres o transformar archivos o flujos de entrada/salida.
	  Ver ilustraciones de esto en <xref linkend="behead"> y <xref linkend="tree">.</para>

	<para>"Sed & Awk", de Dougherty y Robbins da un tratamiento muy completo y lúcido de las expresiones regulares
	 (ver <xref linkend="biblio">).</para>

      </sect1> <!-- Una Breve Introducción a las Expresiones Regulares -->

      <sect1 id="globbingref">
	<title>Expansión de nombres (globbing)</title>

	<para>Bash por sí mismo no puede reconocer expresiones regulares. En los scripts, son los comandos y las utilidades, como
	  <link linkend="sedref">sed</link> y <link
	  linkend="awkref">awk</link>, las que interpretan las expresiones regulares.</para>


	<para>Bash hace la llamada "expansión de nombres" de archivo, un proceso conocido como
	  <quote>globbing</quote>, pero <emphasis>no</emphasis> usa el conjunto estándar de expresiones regulares. En cambio,
	  la expansión reconoce y expande comodines.  La expansión interpreta los caracteres estándar usados para los comodines,
	  <token>*</token> y <token>?</token>, listas de caracteres entre corchetes, y
	  otros ciertos caracteres especiales (como <token>^</token>
	  para negar el sentido de una coincidencia). Sin embargo, Hay
	  otras limitaciones importantes en el uso de comodines en el
	  proceso de expansión.
	  Las cadenas de caracteres que contengan
	  <replaceable>*</replaceable> no coincidirán con nombres de archivo que empiecen por un punto, como, por ejemplo,
	  <filename>.bashrc</filename>.

	    <footnote>
	    <para>
	    La expansión de nombres de archivo no
	        <emphasis>puede</emphasis> coincidir con archivos ocultos, a no ser que el patrón incluya explícitamente el punto.
	        <programlisting>~/[.]bashrc    # No se expandirá a ~/.bashrc
~/?bashrc      # Este tampoco.
               # Los comodines y los metacaracteres no se expandirán a un punto en el proceso de globbing.

~/.[b]ashrc    # Se expandirá a ~./bashrc
~/.ba?hrc      # También.
~/.bashr*      # También.

# Estableciendo la opción "dotglob" desactiva esto.

# Gracias, S.C.</programlisting>
	    </para>
	    </footnote>
	  
	  Asimismo, el <replaceable>?</replaceable> tiene un significado diferente en el proceso de expansión que como parte de una expresión regular.</para>

	      <para>
	      <screen>
<prompt>bash$ </prompt><userinput>ls -l</userinput>
<computeroutput>total 2
 -rw-rw-r--    1 drmay  drmay         0 Aug  6 18:42 a.1
 -rw-rw-r--    1 drmay  drmay         0 Aug  6 18:42 b.1
 -rw-rw-r--    1 drmay  drmay         0 Aug  6 18:42 c.1
 -rw-rw-r--    1 drmay  drmay       466 Aug  6 17:48 t2.sh
 -rw-rw-r--    1 drmay  drmay       758 Jul 30 09:02 test1.txt</computeroutput>

<prompt>bash$ </prompt><userinput>ls -l t?.sh</userinput>
<computeroutput>-rw-rw-r--    1 drmay  drmay       466 Aug  6 17:48 t2.sh</computeroutput>

<prompt>bash$ </prompt><userinput>ls -l [ab]*</userinput>
<computeroutput>-rw-rw-r--    1 drmay  drmay         0 Aug  6 18:42 a.1
 -rw-rw-r--    1 drmay  drmay         0 Aug  6 18:42 b.1</computeroutput>

<prompt>bash$ </prompt><userinput>ls -l [a-c]*</userinput>
<computeroutput>-rw-rw-r--    1 drmay  drmay         0 Aug  6 18:42 a.1
 -rw-rw-r--    1 drmay  drmay         0 Aug  6 18:42 b.1
 -rw-rw-r--    1 drmay  drmay         0 Aug  6 18:42 c.1</computeroutput>

<prompt>bash$ </prompt><userinput>ls -l [^ab]*</userinput>
<computeroutput>-rw-rw-r--    1 drmay  drmay         0 Aug  6 18:42 c.1
 -rw-rw-r--    1 drmay  drmay       466 Aug  6 17:48 t2.sh
 -rw-rw-r--    1 drmay  drmay       758 Jul 30 09:02 test1.txt</computeroutput>

<prompt>bash$ </prompt><userinput>ls -l {b*,c*,*est*}</userinput>
<computeroutput>-rw-rw-r--    1 drmay  drmay         0 Aug  6 18:42 b.1
 -rw-rw-r--    1 drmay  drmay         0 Aug  6 18:42 c.1
 -rw-rw-r--    1 drmay  drmay       758 Jul 30 09:02 test1.txt</computeroutput>


<prompt>bash$ </prompt><userinput>echo *</userinput>
<computeroutput>a.1 b.1 c.1 t2.sh test1.txt</computeroutput>

<prompt>bash$ </prompt><userinput>echo t*</userinput>
<computeroutput>t2.sh test1.txt</computeroutput>
	      </screen>
	      </para>


	  <para>Incluso una orden <link linkend="echoref">echo</link> realiza expansión con comodines en nombres de archivo.</para>

	  <para>Ver también <xref linkend="listglob"/>.</para>

      </sect1> <!-- Expansión de nombres (globbing) -->


  </chapter> <!-- Expresiones Regulares -->

<!--  LocalWords:  shell scripts link
 -->
