  <chapter id="quoting">
    <title>Entrecomillado</title>
    
      <para><anchor id="quotingref"></para>

      <indexterm>
	<primary>"</primary>
      </indexterm>
      <indexterm>
	<primary>carácter especial</primary>
	<secondary>"</secondary>
      </indexterm>
      <indexterm>
	<primary>'</primary>
      </indexterm>
      <indexterm>
	<primary>carácter especial</primary>
	<secondary>'</secondary>
      </indexterm>
      <indexterm>
	<primary>comilla</primary>
      </indexterm>
      <indexterm>
	<primary>\</primary>
      </indexterm>
      <indexterm>
	<primary>carácter especial</primary>
	<secondary>\</secondary>
      </indexterm>
      <indexterm>
	<primary>escape</primary>
      </indexterm>
      <para>Entrecomillar significa rodear una cadena con
	comillas. Esto tiene el efecto de proteger caracteres
	especiales en la cadena de la reinterpretación o expansión por
        el shell o el script de shell. (Un carácter es
	<quote>especial</quote> si tiene una interpretación distinta
	de su significado literal, como el carácter <token>comodín</token>,
      <token>*</token>.)</para>

	      <para>
	      <screen><prompt>bash$ </prompt><userinput>ls -l [Vv]*</userinput>
<computeroutput>-rw-rw-r--    1 bozo  bozo       324 Apr  2 15:05 VIEWDATA.BAT
 -rw-rw-r--    1 bozo  bozo       507 May  4 14:25 vartrace.sh
 -rw-rw-r--    1 bozo  bozo       539 Apr 14 17:11 viewdata.sh
</computeroutput>

<prompt>bash$ </prompt><userinput>ls -l '[Vv]*'</userinput>
<computeroutput>ls: [Vv]*: No such file or directory</computeroutput></screen>	      
	      </para>


      <note>
      <para>Ciertos programas y utilidades pueden todavía
	reinterpretar o expandir caracteres especiales en una cadena
	entrecomillada. Este es un uso importante del entrecomillado,
        protegiendo un parámetro de línea de comandos del shell, pero
        dejando todavía al programa llamado que lo expanda.</para>

              <para>
	      <screen><prompt>bash$ </prompt><userinput>grep '[Ff]irst' *.txt</userinput>
<computeroutput>file1.txt:This is the first line of file1.txt.
 file2.txt:This is the First line of file2.txt.</computeroutput></screen>
	      </para>

	<para>Por supuesto, <userinput>grep [Ff]irst *.txt</userinput>
	  no funcionará.</para>
	</note>


      <para>Al referenciar una variable, generalmente es conveniente 
	encerrarla entre comillas dobles (<token>" "</token>). Esto preserva
	todos los caracteres especiales dentro del nombre de variable, excepto
	<token>$</token>, <token>`</token> (backquote),
	y <token>\</token> (escape). Mantener <token>$</token>
	como un caracter especial permite referenciar una variable entrecomillada
	(<replaceable>"$variable"</replaceable>), esto es, reemplazar
	la variable por su valor (ver <xref linkend="ex9">, arriba).</para>

      <para>Uso de dobles comillas para prevenir la división de palabras.
            <footnote><para><quote>La división de palabras</quote>, en
            este contexto, significa dividir una cadena de caracteres
            en un número de argumentos separados y discretos.</para></footnote>
	Un argumento encerrado entre comillas dobles se presenta
	a sí mismo ocomo una sola palabra, incluso si contiene separadores <link
	linkend="whitespaceref">de espacios en  blanco</link>.

	<programlisting>variable1="una variable que contiene seis palabras"
COMMAND Esto es $variable1    # Ejecuta COMMAND con 8 argumentos:
# "Esto" "es" "una" "variable" "que" "contiene" "seis" "palabras"

COMMAND "Esto es $variable1"  # Ejecuta COMMAND con  1 argumento:
# "Esta es una variable que contiene seis palabras"


variable2=""    # Empty.

COMMAND $variable2 $variable2 $variable2        # Executes COMMAND sin argumentos. 
COMMAND "$variable2" "$variable2" "$variable2"  # Executes COMMAND con 3 arcgumentos vacios. 
COMMAND "$variable2 $variable2 $variable2"      # Executes COMMAND con 1 argumento (2 espacios). 

# Thanks, S.C.
</programlisting></para>


      <tip><para>Encerrar los argumentos en una sentencia <command>echo</command>
	entre comillas dobles es necesario sñolo cuando la división en
	palabras es un problema.</para></tip>

	    <example id="weirdvars">
	      <title>Eco de variables extrañas</title>
	      <programlisting>&weirdvars;</programlisting>
	    </example>

      <para>Las comillas sencillas (<token>' '</token>) operan
	similarmente a las dobles comillas, pero no permiten referenciar
	variables, debido a que el significado especial de
	<token>$</token> se desactiva.
	Dentro de las comillas sencillas, <emphasis>cada</emphasis> carácter
	especial excepto <token>'</token> se interpreta literalmente.
	Considere que las comillas sencillas (<quote>entrecomillado
	completo</quote>) es un método de entreocomillado más estricto
	que las comillas dobles (<quote>entrecomillado parcial</quote>).</para>

      <note><para>Debiado a que incluso el caracter de escape (<token>\</token>)
	obtiene una interpretación literal dentro de las comillas
	sencillas, intentar encerrar una sola comilla entre comillas
	sencillas no conduce al resultado esperado.
	<programlisting>echo "Why can't I write 's between single quotes"

echo

# The roundabout method.
echo 'Why can'\''t I write '"'"'s between single quotes'
#    |-------|  |----------|   |-----------------------|
# Three single-quoted strings, with escaped and quoted single quotes between.

# This example courtesy of Stephane Chazelas.</programlisting>
      </para></note>


      <para><anchor id="escp"><firstterm>Escape</firstterm> es un
	método de entrecomillar carácteres sencillos. El <token>escape</token>
	(<token>\</token>) precediendo un caracter indica al shell que
	interprete ese caracter literalmente.</para>

      <caution><para>Con ciertos comandos y utilidades, como <link
	linkend="echoref">echo</link> y <link
	linkend="sedref">sed</link>, escapar un carácter peuede tener
	el efecto opuesto - puede activar un significado especial para
	ese carácter.</para></caution>

      <variablelist id="specialmeanings">
	<title><anchor id="spm">Significados especiales de algunos
	caracteres escapados</title>

	<varlistentry>
	<term>usado con <command>echo</command> y
	<command>sed</command></term>
	<listitem><para></para></listitem>
	</varlistentry>

	<varlistentry><term><token>\n</token></term>
	  <indexterm>
	    <primary>\n</primary>
	  </indexterm>
	  <indexterm>
	    <primary>carácter escapadoescaped character</primary>
	    <secondary>\n</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>línea nueva</primary>
	  </indexterm>
	  <listitem><para>significa línea nueva</para>
	  </listitem>
	</varlistentry>

	<varlistentry><term><token>\r</token></term>
	  <indexterm>
	    <primary>\r</primary>
	  </indexterm>
	  <indexterm>
	    <primary>carácter escapado</primary>
	    <secondary>\r</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>retorno de carro</primary>
	  </indexterm>
	  <listitem><para>significa retorno</para>
	  </listitem>
	</varlistentry>

	<varlistentry><term><token>\t</token></term>
	  <indexterm>
	    <primary>\t</primary>
	  </indexterm>
	  <indexterm>
	    <primary>carácter escapado</primary>
	    <secondary>\t</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>tabulación</primary>
	  </indexterm>
	  <listitem><para>significa tabulación</para>
	  </listitem>
	</varlistentry>

	<varlistentry><term><token>\v</token></term>
	  <indexterm>
	    <primary>\v</primary>
	  </indexterm>
	  <indexterm>
	    <primary>carácter escapado</primary>
	    <secondary>\v</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>tabulación vertical</primary>
	  </indexterm>
	  <listitem><para> significa tabulación vertical</para>
	  </listitem>
	</varlistentry>

	<varlistentry><term><token>\b</token></term>
	  <indexterm>
	    <primary>\b</primary>
	  </indexterm>
	  <indexterm>
	    <primary>carácter escapado</primary>
	    <secondary>\b</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>borrar atrás</primary>
	  </indexterm>
	<listitem><para>significa borrar atrás</para>
	</listitem>
	</varlistentry>

	<varlistentry><term><token>\a</token></term>
	  <indexterm>
	    <primary>\a</primary>
	  </indexterm>
	  <indexterm>
	    <primary>carácter escapado</primary>
	    <secondary>\a</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>alerta</primary>
	  </indexterm>
	  <indexterm>
	    <primary>campana</primary>
	  </indexterm>
	  <indexterm>
	    <primary>flash</primary>
	  </indexterm>
	<listitem><para>significa <quote>alerta</quote> (campana o flash)</para>
	</listitem>
	</varlistentry>

	<varlistentry><term><token>\0xx</token></term>
	  <indexterm>
	    <primary>\0xx</primary>
	  </indexterm>
	  <indexterm>
	    <primary>carácter escapado</primary>
	    <secondary>\0xx</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>ASCII octal</primary>
	  </indexterm>
	  <listitem><para>traduce al ASCII octal equivalente de <replaceable>0xx</replaceable></para>
	      
      <example id="escaped">
	<title>Caracteres escapados</title>
	<programlisting>&escaped;</programlisting>
      </example>

            <para>Vea <xref linkend="ex77"> para otro ejemplo de la
              construcción de expansión de cadenas <userinput>$'   '</userinput>.</para>

	</listitem>
	</varlistentry>

	<varlistentry><term><token>\"</token></term>
	  <indexterm>
	    <primary>\"</primary>
	  </indexterm>
	  <indexterm>
	    <primary>carácter escapado</primary>
	    <secondary>\"</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>comillas dobles</primary>
	  </indexterm>
	<listitem><para> da a las comillas dobles su significado literal</para>
	<para><programlisting>echo "Hello"                  # Hello
echo "\"Hello\", he said."    # "Hello", he said.</programlisting></para>
	</listitem>
	</varlistentry>

	<varlistentry><term><token>\$</token></term>
	  <indexterm>
	    <primary>\$</primary>
	  </indexterm>
	  <indexterm>
	    <primary>carácter escapado</primary>
	    <secondary>\$</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>dólar</primary>
	  </indexterm>
	  <listitem><para>da al signo dólar su significado literal
	      (el nombre de variable que sigue al <token>\$</token> no
	      será referenciado)</para>
	    <para><programlisting>echo "\$variable01"  # results in $variable01</programlisting></para>
	  </listitem>
	  </varlistentry>

	<varlistentry><term><token>\\</token></term>
	  <indexterm>
	    <primary>\\</primary>
	  </indexterm>
	  <indexterm>
	    <primary>Caracter escapado</primary>
	    <secondary>\\</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>doble contrabarra</primary>
	  </indexterm>
	  <listitem><para>da a la contrabarra su significado literal</para>
	    <para><programlisting>echo "\\"  # results in \</programlisting></para>
	  </listitem>
	  </varlistentry>
	</variablelist>

      <note><para>El comportamiento de <token>\</token> depende de si
	está escapado él a sí mismo, entrecomillado o aparece en el
	interior de un <link  linkend="heredocref">documento aquí</link>.

	<programlisting>echo \z               #  z
echo \\z              # \z
echo '\z'             # \z
echo '\\z'            # \\z
echo "\z"             # \z
echo "\\z"            # \z
echo `echo \z`        #  z
echo `echo \\z`       #  z
echo `echo \\\z`      # \z
echo `echo \\\\z`     # \z
echo `echo \\\\\\z`   # \z
echo `echo \\\\\\\z`  # \\z
echo `echo "\z"`      # \z
echo `echo "\\z"`     # \z

cat &lt;&lt;EOF              
\z                      
EOF                   # \z

cat &lt;&lt;EOF              
\\z                     
EOF                   # \z

# Estos ejemplos los ha suministrado Stephane Chazelas.</programlisting>
      </para></note>   



      <para>Escapar un espacio puede prevenir la división de palabras
        en una lista de arcgumentos de un comando.
        <programlisting>file_list="/bin/cat /bin/gzip /bin/more /usr/bin/less /usr/bin/emacs-20.7"
# Lista de ficheros como  argumento(s) a un comando.

# Añade dos ficheros a la lista, y lista todo.
ls -l /usr/X11R6/bin/xsetroot /sbin/dump $file_list

echo "-------------------------------------------------------------------------"

# ¿Qué ocurre si escapamos un par de espacios?
ls -l /usr/X11R6/bin/xsetroot\ /sbin/dump\ $file_list
# Error: los primeros tres ficheros concatenados en un solo argumento para 'ls -l'
#        porque los dos espacios escapados impiden la divisón de palabras del argumento.</programlisting>
</para>


      <para>El <token>escape</token> también pproporciona un medio de
	escribir un comando multi-línea. normalmente cada línea
	separada constituye un comando diferente, pero un
	<token>escape</token> al final de una línea <emphasis>escapa
	el carácter de línea nueva</emphasis>, y la secuencia de
	comandos continúa hasta la línea siguiente.</para> 
	
      <para><programlisting>(cd /source/directory && tar cf - . ) | \
(cd /dest/directory && tar xpvf -)
# Repitiendo el comando de copia de árboles de rirectorios de Cox,
# pero dividiendo en dos líneas para que sea más fácil leerlo.

# Como una alternativa:
tar cf - -C /source/directory |
tar xpvf - -C /dest/directory
# Vea la nota más abajo.
# (Gracias, Stephane Chazelas.)</programlisting>
        
	<note><para>Si una línea de script termina con un
        <token>|</token>, un carácter de canalización (pipe), 
	entonces un <token>\</token>, un escape, no es estrictamente necesario.
	  Sin embargo es una buena práctica de programación el escapar
        siempre el final de una línea de código que continua en la
        siguiente línea.</para></note></para>

	<para><programlisting>echo "foo
bar" 
#foo
#bar

echo

echo 'foo
bar'    # Sin diferencia aún.
#foo
#bar

echo

echo foo\
bar     # Nueva línea escapada.
#foobar

echo

echo "foo\
bar"     # Lo mismo aquí, como \ todavía se interpreta como escape entre comillas débiles.
#foobar

echo

echo 'foo\
bar'     # El carácter de escape \ se toma literalmente debido al entrecomilado fuerte.
#foor\
#bar

# Ejemplos sugeridos por  Stephane Chazelas.</programlisting></para>



  </chapter> <!-- Quoting -->
