  <chapter id="sha-bang">
    <title>Starting Off With a Sha-Bang</title>

    <para>En el caso mas simple, un script no es mas que una lista de
      comandos de sistema almacenados en un fichero. Como minimo esto
      nos ahorrara el esfuerzo de reescribir ciertas secuencias de comandos
      cada vez que queremos invocarlos.</para>

    <example id="ex1">
      <title><command>cleanup</command>:Un script para limpiar los archivos
      de registro en /var/log </title> <programlisting>&ex1;</programlisting>
    </example>

    <para>No hay nada fuera de lo normal aqui, tan solo es un conjunto de 
      comandos que podrian invocarse facilmente uno por uno desde la linea
      de comandos de una consola o un xterm. Las ventajas de meter ordenes
      en un script va mas alla de no tener que telearlas una y mil veces.
      El script puede ser comodamente modificado, adaptado o estadariado 
      para alguna utilidad en particular.</para>

    <example id="ex2">
      <title><command>cleanup</command>: Una version mejorada 
      y estandarizada del script anterior.</title>
      <programlisting>&ex2;</programlisting>
    </example>

    <para>Seguramente no querras cepillarte todos los registros del sistema,
      el primer script mantiene la ultima parte del log de mensajes intacta.
      Podras descubrir continuamente formas de refinar script ya escritos
      para aumentar su eficiencia.</para>
    
    <para>The 
      <firstterm><indexterm>
	  <primary>sha-bang</primary>
	</indexterm>
	sha-bang</firstterm> 
      (<token>
	<indexterm>
	  <primary>#!</primary>
	</indexterm>
	#!</token>) en la cabecera de un script 
      se le indica al sistema que este fichero 
      es un conjunto de ordenes para introducir en el interprete de comandos.
      indicado.
		<anchor id="magnumref">The <token>#!</token> es en realidad un numero

        <footnote><para>Algunas versiones
        de UNIX cogen un numero de cuatro bytes, necesitando
        un espacion en blanco despues del <token>!</token>,
        <userinput>#! /bin/sh</userinput>.</para></footnote>

	<indexterm>
	  <primary>magic number</primary>
	</indexterm>
	<quote>"magico" de 2 bytes</quote>, una etiqueta especial que
	identifica un tipo de archivo, o en este caso un shell script 
	ejecutable (lee <userinput>man magic</userinput> para mas
	detalles sobre este fascinante tema). Inmediatamente despues 
	el <emphasis>sha-bang</emphasis> es un nombre de ruta. Que es
	la posicion del programa que interpretara los comandos del script,
	alla donde haya una shell, un lenguaje de programacion o una aplicacion.
	Este interprete de comandos ejecutara las ordenes contenidas en el script,
	empezando por arriba (linea 1 del script), ignorando comentarios.
	    <footnote><para>Dentro del script La linea con el <token>#!</token> 
	      debe ser lo primero que el interprete de comandos 
	      (tanto <command>sh</command> como <command>bash</command>)
	      vea. Cuando una linea empiece con un <token>#</token>,
	      esta sera acecuadamente interpretada como un comentario 
	      cuando finalmente se ejecute el script. La linea ya ha The
	      servido para su proposito - llamar al interprete de
			comandos.</para></footnote>
	</para>


    <para><programlisting>#!/bin/sh
#!/bin/bash
#!/usr/bin/perl
#!/usr/bin/tcl
#!/bin/sed -f
#!/usr/awk -f</programlisting></para>

    <para>Cada una de las anteriores cabeceras llaman a diferentes 
      interpretes de comandos, siendo <filename>/bin/sh</filename>, la shell 
      por defecto (<command>bash</command> en sistemas linux) or otherwise.

        <footnote>
	  <para>Esto nos permite hacer algunos trucos chulos.</para>
	  <para><programlisting>#!/bin/rm
# Scrip de Auto-borrado.

# Parece que no ocurre cuando ejecutas esto...salvo que el archivo desaparece.

WHATEVER=65

echo "Esta linea no se mostrara nunca (betcha!)."

exit $WHATEVER  # No te importe. El script no finalizara aqui.</programlisting></para>
      <para>Intenta de la misma forma mostrar un
		fichero<filename>README</filename> con un 
        <userinput>#!/bin/more</userinput> al principio, 
        y hazlo ejecutable.
		  El resultado sera un fichero de documentacion auto-mostrado.</para>
	</footnote>

      Utilizando <userinput>#!/bin/sh</userinput>, el Bourne Shell por
		defecto en la mayoria de las versiones comerciales de UNIX, haremos
      al script <link linkend="portabilityissues">portable</link> para
		maquinas no-linux, Aunque puedes sacrificar unas cuantas funciones
      especificas de bash
		(el script cumplira las normas 
      <acronym>POSIX</acronym>
	 <footnote><para><emphasis>P</emphasis>ortable
	 <emphasis>O</emphasis>perating <emphasis>S</emphasis>ystem
	 <emphasis>I</emphasis>nterface, un intento de estandarizar 
	 sistemas tipo UNIX.</para></footnote>
      <command>sh</command> estandar).</para>

    <para>Fijate que la ruta dada en el <quote>sha-bang</quote> debe
      ser correcta, de otra forma un mensaje de error, normalmente un <quote>Command not
      found</quote> sera el unico resultado del script en ejecucion.</para>

    <para><token>#!</token> puede omitirse si el script consiste tan solo 
      es un conjunto de comandos genericos del sistema, empleando directivas 
      no internas del shell. En el ejemplo 2, el anterior, se requiere el 
      <token>#!</token>, desde la linea de asignacion de variables,
      <userinput>lines=50</userinput>, emplea una construccion especifica 
      del shell.
		Date cuenta de que Note that <userinput>#!/bin/sh</userinput> llama al 
      interprete de ordenes por defecto, que sera <filename>/bin/bash</filename>
      en una maquina linux.</para>

      <important><para>Este tutorial propone un acercamiento modular
	a la construccion de un script. Toma nota de ello y recoje los 
	<quote>boilerplate</quote> trocitos de codigo que puedan ser utiles para 
	futuros scripts. Incluso podrias llegar a montarte una libreria bastante
	extensa de rutinas utiles. Como por ejemplo el siguiente script
	comprueba si se le ha llamado con el correcto numero de parametros.

	<programlisting>if [ $# -ne Number_of_expected args ]
then
  echo "Usage: `basename $0` whatever"
  exit $WRONG_ARGS
fi</programlisting>
        </para></important>
  

    <sect1 id="invoking">
      <title>Llamando al script</title>
      <para>Una vez escrito el script, puedes invocarlo con<userinput>sh
	scriptname</userinput>,

	  <footnote><para>Advertencia: llamar a un Bash script con <userinput>sh
	  scriptname</userinput> desabilita las extensiones especificas de Bash,
	  y el script podria por lo tanto fallar en su ejecucion.</para></footnote>
	
	o alternativamente <userinput>bash scriptname</userinput>.	(No
	es recomendable utilizar  <userinput>sh &lt;scriptname</userinput>,
	ya que esto efectivamente desactiva la lectura desde 
	<filename>stdin</filename> en el script.) Es mucho mas 
	conveniente hacer al mismo script ejecutable directamente con 
	un <link linkend="chmodref">chmod</link>.

	<variablelist>
	  <varlistentry>
	    <term>Podriamos bien:</term> <listitem>
	      <para>Poner <userinput>chmod 555 scriptname</userinput> (que 
	      da a cualquiera permiso de lectura/ejecucion) 
	        <footnote><para>Un scipt necesita poder <emphasis>leerse</emphasis>, asi
		como permisos de ejecucion para funcionar, ya que la shell 
		necesita poder leerlo.</para></footnote>
	      </para>
	    </listitem>
	  </varlistentry> <varlistentry>
	    <term>o bien</term> <listitem>
	      <para><userinput>chmod +rx scriptname</userinput> (que
	      da a cualquiera permiso de lectura/ejecucion)</para> <para><userinput>chmod
	      u+rx scriptname</userinput> (tan solo dara 
		permiso de lectura/ejecucion al propietario del script)</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>

      <para>Una vez hecho el script ejecutable, puedes ahora probarlo con
	<userinput>./scriptname</userinput>.
	
	  <footnote><para>¿Por que no llamamos al script solo con un 
	  <userinput>scriptname</userinput>? ¿Si el directorio en el
	  estas (<link linkend="pwdref">$PWD</link>) es donde 
	  se encuentra <emphasis>scriptname</emphasis>, por que no 
	  funciona?  Esto falla porque, por razones de seguridad, el 
	  directorio actual,<quote>.</quote> no esta incluido en el path<link
	  linkend="pathref">$PATH</link>de ningun usuario. Es por esto que
	  es necesario llamar al script explicitamente en el directorio actual
	  con un <userinput>./scriptname</userinput>.</para></footnote>

	Si empieza con una linea <quote>sha-bang</quote>, la invocacion del
	script llamara al interprete de comandos oportuno para que lo ejecute.</para>

      <para>Como paso final, despues de comprobar y depurar,
        podrias posiblemente querer moverlo a <filename
        class="directory">/usr/local/bin</filename> (como root, desde
        luego), para hacer que el script este disponible para ti y para 
        los otros usuarios como ejecutable universal en el sistema. El script 
        podra entonces llamarse tecleando simplemente <command>scriptname</command>
        <keycap>[ENTER]</keycap> desde la linea de comandos.</para>

    </sect1> <!-- Invoking the script -->


    <sect1 id="prelimexer">
      <title>Ejercicios Preliminares</title>

      <orderedlist>

        <listitem>
	<para>Muchas veces los administradoes de sistema escriben scripts para 
	  automatizar tareas comunes. Da ejemplos de donde estos script puedan
	  ser utiles.</para>
	</listitem>  

	<listitem>  
	<para>Escribe un script que una vez invocado muestre la 
	  <link linkend="dateref">fecha y hora</link>,liste todos los usuarios 
	  <link linkend="whoref"> registrados</link>, y visualice  
	  el <link linkend="uptimeref">uptime</link>del sistema. Entonces el script
	  <link linkend="ioredirref">salvara esta informacion</link>
	  a un archivo de registro.</para>
	</listitem>

      </orderedlist>

    </sect1> <!-- Preliminary Exercises -->

  </chapter> <!-- Starting Off With a Sha-Bang -->
