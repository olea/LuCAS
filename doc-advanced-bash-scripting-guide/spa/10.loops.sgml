  <chapter id="loops">
    <title>Bucles y bifurcaciones</title>


      <para>Las operaciones en los bloques de c&oacute;digo son la clave de los shell scripts estructurados y organizados. Los conceptos de bucle y bifurcación nos proveen de las herramientas necesarias para alcanzar este objetivo.</para>

    <sect1 id="loops1">
        <title>Bucles</title>

      <para>Un <emphasis>bucle</emphasis> es un bloque de c&oacute;digo que itera (repite) una lista de comandos mientras la condici&oacute;n de control del bucle sea cierta.</para>


      <variablelist id="forloopref">
        <title><anchor id="forloopref1">Bucles for</title>

	<varlistentry>
	  <term><command>for (in)</command></term>
	  <indexterm>
	    <primary>for</primary>
	  </indexterm>
	  <indexterm>
	    <primary>in</primary>
	  </indexterm>
	  <indexterm>
	    <primary>do</primary>
	  </indexterm>
	  <indexterm>
	    <primary>done</primary>
	  </indexterm>
	  <indexterm>
	    <primary>loop</primary>
	    <secondary>for</secondary>
	  </indexterm>
	  <listitem>
	    <para>Este es el concepto b&aacute;sico de construcci&oacute;n de bucles. Difiere significantemente de su contraparte en C.</para>

	    <para><cmdsynopsis>
	      <command>for</command>
	      <arg choice="plain"><replaceable>arg</replaceable></arg>
	      <arg choice="plain">in</arg>
	      <arg choice="opt"><replaceable>lista</replaceable></arg><sbr>
	      <arg choice="plain">do</arg><sbr>
	      <arg rep="repeat" choice="plain"><replaceable>&nbsp;comando</replaceable></arg><sbr>
	      <arg choice="plain">done</arg>
	    </cmdsynopsis></para>

	  <note><para>A cada paso a trav&eacute;s del bucle, <replaceable>arg</replaceable> toma el valor de cada variable en la <replaceable>lista</replaceable>.</para></note>

	  <para><programlisting>for arg in "$var1" "$var2" "$var3" ... "$varN"

# En el paso 1 del bucle, $arg = $var1
# En el paso 2 del bucle, $arg = $var2
# En el paso 3 del bucle, $arg = $var3
# ...
# En el paso N del bucle, $arg = $varN

# Los argumentos en la [lista] van entrecomillados para prevenir una posible divisi&oacute;n de palabras.</programlisting></para>


           <para>El argumento <replaceable>lista</replaceable> puede contener comodines.</para>

	   <para>Si <command>do</command> esta en la misma linea que <command>for</command>, tiene que haber punto y coma tras la lista.</para>

	   <para><cmdsynopsis>
	     <command>for</command>
	     <arg choice="plain"><replaceable>arg</replaceable></arg>
	     <arg choice="plain">in</arg>
	     <arg choice="opt"><replaceable>lista</replaceable></arg>
	     <arg choice="plain">;</arg>
	     <arg choice="plain">do</arg><sbr>
	   </cmdsynopsis></para>

	   <example id="ex22">
	     <title>Bucles <command>for</command> simples</title>
	     <programlisting>&ex22;</programlisting>
	   </example>

	   
	   <note><para>Cada elemento de la <userinput>[lista]</userinput> puede contener m&uacute;ltiples par&aacute;metros. Esto es &uacute;til cuando se procesan par&aacute;metros agrupados. En tales casos, use el comando <command>set</command> (vease <xref linkend="ex34">) para forzar el parseo de cada elemento de la <userinput>[lista]</userinput> y la asignaci&oacute;n de cada componente a los par&aacute;metros posicionales.</para></note>

	   <example id="ex22a">
	     <title>Bucle <command>for</command> con dos par&aacute;metros en cada elemento de la [lista]</title>
	     <programlisting>&ex22a;</programlisting>
	   </example>

	   <para>Una variable puede proporcionar la <userinput>[lista]</userinput> en un bucle <command>for</command>.</para>

	   <example id="fileinfo">
	     <title><emphasis>Fileinfo:</emphasis> Operando en una lista de archivos contenida en una variable</title>
	     <programlisting>&fileinfo;</programlisting>
	   </example>

	   <para>La <userinput>[lista]</userinput> en un bucle <command>for</command> puede contener englobamiento de nombres de archivo, que consiste en usar comodines para la expansi&oacute;n de nombres de archivo.</para>

	   <example id="listglob">
	     <title>Operando con archivos en un bucle <command>for</command></title>
	     <programlisting>&listglob;</programlisting>
	   </example>

	   <para>La omisi&oacute;n de la parte <userinput>in [lista]</userinput> de un bucle <command>for</command> hace que este opere sobre <token>$@</token>, la lista de argumentos que se da al script desde la linea de comandos. Una ilustraci&oacute;n particularmente inteligente de esto es <xref linkend="primes">.</para>

	   <example id="ex23">
	     <title>Faltando <userinput>in [lista]</userinput> en un bucle <command>for</command></title>
	     <programlisting>&ex23;</programlisting>
	   </example>

	   <para>Es posible usar <link linkend="commandsubref">sustituci&oacute;n de comandos</link> para generar la <userinput>[lista]</userinput> en un bucle <command>for</command>. Vease tambi&eacute;n <xref linkend="ex53">, <xref linkend="symlinks"> y <xref linkend="base">.</para>

	   <example id="forloopcmd">
	     <title>Generando la [lista] en un bucle <command>for</command> con sustituci&oacute;n de comandos</title>
	     <programlisting>&forloopcmd;</programlisting>
	   </example>

	   <para>Este es un ejemplo m&aacute;s complejo del uso de sustituci&oacute;n de comandos para crear la [lista].</para>

	   <example id="bingrep">
	     <title>Un sustituto de <link linkend="grepref">grep</link> para archivos binarios</title>
	     <programlisting>&bingrep;</programlisting>
	   </example>

	   <para>M&aacute;s de lo mismo.</para>

	   <example id="userlist">
	     <title>Haciendo una lista de los usuarios del sistema</title>
	     <programlisting>&userlist;</programlisting>
	   </example>

	   <para>Un &uacute;ltimo ejemplo de la [lista] resultante de la sustituci&oacute;n de comandos.</para>

	   <example id="findstring">
	     <title>Comprobando todos los archivos binarios de un directorio en busca del autor</title>
	     <programlisting>&findstring;</programlisting>
	   </example>

	   <para>La salida de un bucle <command>for</command> puede ser redireccionada a un comando o comandos.</para>

	   <example id="symlinks">
	     <title>Haciendo una lista de todos los enlaces simb&oacute;licos de un directorio</title>
	     <programlisting>&symlinks;</programlisting>
	   </example>

	   <para>La salida estandar (<filename>stdout</filename>) de un bucle puede ser <link linkend="ioredirref">redireccionada</link> a un archivo, tal y como muestra esta ligera modificaci&oacute;n del ejemplo anterior.</para>

	   <example id="symlinks2">
	     <title>Todos los enlaces simb&oacute;licos de un directorio, grabados en un archivo</title>
	     <programlisting>&symlinks2;</programlisting>
	   </example>

	   <para>Hay una sintaxis alternativa para un bucle <command>for</command> que ser&aacute; muy familiar para los programadores en C. Esta requiere dobles par&eacute;ntesis.</para>
	   
	   <example id="forloopc">
	     <title>Un bucle <command>for</command> similar al de C</title>
	     <programlisting>&forloopc;</programlisting>
	   </example>

	   <para>Vease tambi&eacute;n <xref linkend="qfunction">, <xref linkend="twodim"> y <xref linkend="twodim">.</para>

	   <para>---</para>

	   <para>Ahora, un ejemplo de bucle <command>for</command> usado en la <quote>vida real</quote>.</para>

	   <example id="ex24">
	     <title>Usando <command>efax</command> en proceso por lotes</title>
	     <programlisting>&ex24;</programlisting>
	   </example>

	 </listitem>
       </varlistentry>

        <varlistentry>
	  <term><anchor id="whileloopref"><command>while</command></term>
	  <indexterm>
	    <primary>while</primary>
	  </indexterm>
	  <indexterm>
	    <primary>do</primary>
	  </indexterm>
	  <indexterm>
	    <primary>done</primary>
	  </indexterm>
	  <indexterm>
	    <primary>loop</primary>
	    <secondary>while</secondary>
	  </indexterm>
	  <listitem>
	  
	    <para>Esta estructura comprueba una condici&oacute;n al comienzo del bucle, y sigue iterando hasta que la condici&oacute;n sea cierta (devuelve un <returnvalue>0</returnvalue> de <link linkend="exitstatusref">valor de salida</link>). En contraste con un <link linkend="forloopref1">bucle for</link>, un <emphasis>bucle while</emphasis> tiene su uso en situaciones donde el n&uacute;mero de iteraciones no se conoce de antemano.</para>

	    <para><cmdsynopsis>
	      <command>while</command>
	      <arg choice="opt"><replaceable>condici&oacute;n</replaceable></arg><sbr>
	      <arg choice="plain">do</arg><sbr>
	      <arg choice="plain" rep="repeat"><replaceable>&nbsp;comando</replaceable></arg><sbr>
	      <arg choice="plain">done</arg>
	    </cmdsynopsis></para>

	    <para>Como en el caso de los bucles <token>for/in</token>, colocar el <command>do</command> en la misma linea que la condici&oacute;n requiere un punto y coma.</para>

	    <para><cmdsynopsis>
	      <command>while</command>
	      <arg choice="opt"><replaceable>condici&oacute;n</replaceable></arg>
	      <arg choice="plain">;</arg>
	      <arg choice="plain">do</arg>
	    </cmdsynopsis></para>

	    <para>N&oacute;tese que ciertos bucles <command>while</command> especializados, como por ejemplo, una <link linkend="getoptsx">construcci&oacute;n getopts</link>, difiere de la estructura dada aqu&iacute;.</para>

	    <example id="ex25">
	      <title>Un bucle <command>while</command> simple</title>
	      <programlisting>&ex25;</programlisting>
	    </example>

	    <example id="ex26">
	      <title>Otro bucle <command>while</command></title>
	      <programlisting>&ex26;</programlisting>
	    </example>

	    <para>Un bucle <command>while</command> puede tener m&uacute;ltiples condiciones. Solo la condici&oacute;n final determina cuando termina el bucle. No obstante, esto requiere una sintaxis ligeramente diferente.</para>

	    <example id="ex26a">
	      <title>Un bucle <command>while</command> con m&uacute;ltiples condiciones</title>
	      <programlisting>&ex26a;</programlisting>
	    </example>

	    <para>Como con el bucle <command>for</command>, un bucle <command>while</command> puede emplear una sintaxis parecida a la del C usando los dobles par&eacute;ntesis (Vease tambi&eacute;n <xref linkend="cvars">).</para>

	    <example id="whloopc">
	      <title>Sintaxis parecida a la del C en un bucle <command>while</command></title>
	      <programlisting>&whloopc;</programlisting>
	    </example>

	    <note><para>Un bucle <command>while</command> puede tener su entrada estandar (<filename>stdin</filename>) <link linkend="redirref">redireccionada a un archivo</link> si se pone un <token>&lt;</token> al final del bucle.</para></note>

	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><anchor id="untilloopref"><command>until</command></term>
	  <indexterm>
	    <primary>until</primary>
	  </indexterm>
	  <indexterm>
	    <primary>do</primary>
	  </indexterm>
	  <indexterm>
	    <primary>done</primary>
	  </indexterm>
	  <indexterm>
	    <primary>loop</primary>
	    <secondary>until</secondary>
	  </indexterm>

	  <listitem>

	    <para>Esta construcci&oacute;n comprueba una condici&oacute;n al comienzo de un bucle, y sigue iterando mientras la condici&oacute;n sea falsa (al contrario que el bucle <command>while</command>).</para>

	    <para><cmdsynopsis>
	      <command>until</command>
	      <arg choice="opt"><replaceable>condici&oacute;n-sea-cierta</replaceable></arg><sbr>
	      <arg choice="plain">do</arg><sbr>
	      <arg choice="plain" rep="repeat"><replaceable>&nbsp;comando</replaceable></arg><sbr>
	      <arg choice="plain">done</arg>
	    </cmdsynopsis></para>
	  
	    <para>N&oacute;tese que un bucle <command>until</command> comprueba la condici&oacute;n de t&eacute;rmino al comienzo del bucle, difiriendo de la construcci&oacute;n similar en algunos lenguajes de programaci&oacute;n.</para>

	    <para>Como en el caso de los bucles <token>for/in</token>, colocar el <command>do</command> en la misma linea que la condici&oacute;n requiere un punto y coma.</para>

	    <para><cmdsynopsis>
	      <command>until</command>
	      <arg choice="opt"><replaceable>condici&oacute;n-sea-cierta</replaceable></arg>
	      <arg choice="plain">;</arg>
	      <arg choice="plain">do</arg>
	    </cmdsynopsis></para>

	    <example id="ex27">
	      <title>Bucle <command>until</command></title>
	      <programlisting>&ex27;</programlisting>
	    </example>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect1> <!-- Bucles -->

    <sect1 id="nestedloops">
      <title>Bucles anidados</title>

      <para>Un bucle anidado es un bucle dentro de otro bucle, un bucle interior dentro del cuerpo otro bucle exterior. Lo que ocurre es que la primera iteraci&oacute;n del bucle exterior desencadena la ejecuci&oacute;n del bucle interior, que itera hasta su finalizaci&oacute;n. Entonces la segunda iteraci&oacute;n del bucle exterior vuelve a desencadenar la ejecuci&oacute;n del bucle interior. Esto se repite hasta que acaba el bucle exterior. Por supuesto, una orden <command>break</command> dentro del bucle interior o exterior puede interrumpir este proceso.</para>

        <example id="nestedloop">
	  <title>Bucle anidado</title>
	  <programlisting>&nestedloop;</programlisting>
	</example>

      <para>Vease <xref linkend="bubble"> para una ilustraci&oacute;n de bucles <quote>while</quote> anidados, y <xref linkend="ex68"> para ver un bucle <quote>while</quote> anidado dentro de un bucle <quote>until</quote>.</para>

    </sect1> <!-- Bucles anidados -->

    <sect1 id="loopcontrol">
      <title>Control de bucles</title>

      <variablelist id="brkcont">
        <title><anchor id="brkcont1">Comandos que afectan al comportamiento de los bucles</title>
      <varlistentry>
        <indexterm>
	  <primary>break</primary>
	</indexterm>
	<indexterm>
	  <primary>continue</primary>
	</indexterm>
	<indexterm>
	  <primary>loop</primary>
	  <secondary>break</secondary>
	</indexterm>
	<indexterm>
	  <primary>loop</primary>
	  <secondary>continue</secondary>
	</indexterm>
	<term><command>break</command></term>
	<term><command>continue</command></term>
	<listitem>
	  <para>Los comandos de control de bucles <command>break</command> y <command>continue</command>
	    <footnote><para>Estos son <link linkend="builtinref">comandos internos</link> del shell, mientras que otros comandos de bucle, tales como <link linkend="whileloopref">while</link> y <link linkend="caseesac1">case</link>, son <link linkend="keywordref">palabras reservadas</link>.</para></footnote>
	    corresponden exactamente con sus contrapartes en otros lenguajes de programaci&oacute;n. El comando <command>break</command> termina el bucle (sale de &eacute;l), mientras que <command>continue</command> efectua un salto a la siguiente iteraci&oacute;n del bucle, salt&aacute;ndose todos los comandos restantes en esa iteraci&oacute;n particular del bucle.</para>

	    <example id="ex28">
	      <title>Efectos de <command>break</command> y <command>continue</command> en un bucle</title>
	      <programlisting>&ex28;</programlisting>
	    </example>

	    <para>La orden <command>break</command> puede tener opcionalmente un par&aacute;metro. Un <command>break</command> sin par&aacute;metros termina solo el bucle dentro del cual est&aacute; la orden, pero un <command>break N</command>escapa de <parameter>N</parameter> niveles de iteraci&oacute;n.</para>

	    <example id="breaklevels">
	      <title>Escapando de m&uacute;ltiples niveles de iteraci&oacute;n</title>
	      <programlisting>&breaklevels;</programlisting>
	    </example>

	    <para>La orden <command>continue</command>, similar a <command>break</command>, opcionalmente toma un par&aacute;metro. Un <command>continue</command> sin par&aacute;metros corta la iteraci&oacute;n actual dentro de su bucle y comienza la siguiente. Un <command>continue N</command> corta la ejecuci&oacute;n de su nivel del bucle y continua con la siguiente iteraci&oacute;n del bucle <option>N</option> niveles por encima.</para>

	    <example id="continuelevels">
	      <title>Continuando en un nivel m&aacute;s alto del bucle</title>
	      <programlisting>&continuelevels;</programlisting>
	    </example>

	    <caution><para>La orden <command>continue N</command> es dificil de comprender y de usar en un contexto significante. Probablemente, lo mejor es evitarla.</para></caution>

	  </listitem>
	</varlistentry>
      </variablelist>
    </sect1> <!-- Ordenes de control de bucles -->

    <sect1 id="testbranch">
      <title>Probando y bifurcando</title>

      <para>Los conceptos de <command>case</command> y <command>select</command>, no son tecnicamente los de un bucle, debido a que estos no iteran la ejecuci&oacute;n de un bloque de c&oacute;digo. Sin embargo, como los bucles, direccionan el flujo de un programa de acuerdo con las condiciones al comienzo o al final del bloque.</para>

      <variablelist id="caseesac">
        <title><anchor id="caseesac1">Controlando el flujo de un programa en un bloque de c&oacute;digo</title>

	<varlistentry>
	  <term><command>case (in) / esac</command></term>
	  <indexterm>
	    <primary>case</primary>
	  </indexterm>
	  <indexterm>
	    <primary>in</primary>
	  </indexterm>
	  <indexterm>
	    <primary>esac</primary>
	  </indexterm>
	  <indexterm>
	    <primary>switch</primary>
	  </indexterm>
	  <indexterm>
	    <primary>;;</primary>
	  </indexterm>
	  <indexterm>
	    <primary>men&uacute;s</primary>
	  </indexterm>

	  <listitem>
	    <para>El concepto de <command>case</command> es equivalente al de la orden <command>switch</command> en C/C++. Permite la bifurcaci&oacute;n a uno de varios bloques de c&oacute;digo, dependiendo de la condici&oacute;n. Es como una especie de abreviatura de varias declaraciones <token>if/then/else</token> y es una herramienta apropiada para crear men&uacute;s.</para>

	    <para><cmdsynopsis>
	       <command>case</command>
	       <arg choice="plain">"$<replaceable>variable</replaceable>"</arg>
	       <arg choice="plain">in</arg><sbr><sbr>
	       <arg choice="plain">&nbsp;"$<replaceable>condici&oacute;n1</replaceable>" )</arg><sbr>
	       <arg choice="plain" rep="repeat">&nbsp;<replaceable>comando</replaceable></arg><sbr>
	       <arg choice="plain">&nbsp;;;</arg><sbr><sbr>
	       <arg choice="plain">&nbsp;"$<replaceable>condici&oacute;n2</replaceable>" )</arg><sbr>
	       <arg choice="plain" rep="repeat">&nbsp;<replaceable>comando</replaceable></arg><sbr>
	       <arg choice="plain">&nbsp;;;</arg><sbr><sbr>
	       <arg choice="plain">esac</arg>
	     </cmdsynopsis></para>

	     <note><para>
	       <itemizedlist>
	         <listitem><para>No es necesario entrecomillar las variables, ya que la divisi&oacute;n de palabras no tiene lugar.</para>
		 </listitem>
		 <listitem><para>Cada linea de condici&oacute;n acaba con un par&eacute;ntesis derecho <token>)</token>.</para>
		 </listitem>
		 <listitem><para>Cada bloque de condici&oacute;n acaba con <emphasis>doble</emphasis> punto y coma <token>;;</token>.</para>
		 </listitem>
		 <listitem><para>El bloque <command>case</command> entero termina con un <command>esac</command> (<wordasword>case</wordasword> deletreado del rev&eacute;s).</para>
		 </listitem>
	       </itemizedlist>
	     </para></note>

	     <example id="ex29">
	       <title>Usando <command>case</command></title>
	       <programlisting>&ex29;</programlisting>
	     </example>

	     <example id="ex30">
	       <title>Creando men&uacute;s con el uso de <command>case</command></title>
	       <programlisting>&ex30;</programlisting>
	     </example>

	     <para>Un uso excepcionalmente inteligente de <command>case</command> puede ser la comprobaci&oacute;n de los par&aacute;metros en linea de comando.
	     <programlisting>
#! /bin/bash

case "$1" in
"") echo "Usage: ${0##*/} &lt;filename&gt;"; exit 65;;  # No hay par&aacute;metros de linea de comandos,
                                                  # o el primer par&aacute;metro est&aacute; vacio.
# N&oacute;tese que ${0##*/} es la sustituci&oacute;n de par&aacute;metros ${variable##patr&oacute;n}. El resultado neto es $0.

-*) FILENAME=./$1;;   # Si el nombre de archivo pasado como argumento ($1) comienza con un gui&oacute;n,
                      # lo reemplaza con ./$1
                      # de forma que las siguientes ordenes no lo interpreten como una opci&oacute;n.

* ) FILENAME=$1;;     # En cualquier otro caso, $1.
esac
              </programlisting></para>

	      <example id="casecmd">
	        <title>Usando sustituci&oacute;n de comandos para generar la variable del <command>case</command></title>
		<programlisting>&casecmd;</programlisting>
	      </example>
	      
	      <para>Una orden <command>case</command> puede filtrar cadenas para patrones de <link linkend="globbingref">englobamiento</link>.</para>

	      <example id="matchstring">
	        <title>Busqueda simple de coincidencias en cadenas</title>
		<programlisting>&matchstring;</programlisting>
	      </example>

	      <example id="isalpha">
	        <title>Comprobando la ordenaci&oacute;n alfab&eacute;tica de la entrada</title>
		<programlisting>&isalpha;</programlisting>
	      </example>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><anchor id="selectref"><command>select</command></term>
	    <indexterm>
	      <primary>select</primary>
	    </indexterm>
	    <indexterm>
	      <primary>men&uacute;s</primary>
	    </indexterm>
	    <listitem>
	      <para>El concepto de <command>select</command>, adoptado del shell de Korn, es otra herramienta para construir men&uacute;s.</para>

	      <para><cmdsynopsis>
	        <command>select</command>
		<arg choice="plain"><replaceable>variable</replaceable></arg>
		<arg choice="opt">in <replaceable>lista</replaceable></arg><sbr>
		<arg choice="plain">do</arg><sbr>
		<arg choice="plain" rep="repeat">&nbsp;<replaceable>comando</replaceable></arg><sbr>
		<arg choice="plain">&nbsp;break</arg><sbr>
		<arg choice="plain">done</arg>
	      </cmdsynopsis></para>

	      <para>Esto le pide al usuario que introduzca una de las elecciones presentadas en la lista de variables. N&oacute;tese que la orden <command>select</command> usa el prompt <varname>PS3</varname> (<prompt>#?</prompt>) por defecto, pero eso es algo que se puede cambiar.</para>

	      <example id="ex31">
	        <title>Creando men&uacute;s con el uso de <command>select</command></title>
		<programlisting>&ex31;</programlisting>
	      </example>

	      <para>Si se omite <userinput>in <replaceable>lista</replaceable></userinput>, entonces <command>select</command> usa la lista de argumentos de linea de comandos (<varname>$@</varname>) que se pasa al script o a la funci&oacute;n en la que est&aacute; la orden <command>select</command>.</para>

	      <para>Comp&aacute;rese esto con el comportamiento de un
	      <cmdsynopsis>
	        <command>for</command>
		<arg choice="plain"><replaceable>variable</replaceable></arg>
		<arg choice="opt">in <replaceable>lista</replaceable></arg>
	      </cmdsynopsis>
	      con <userinput>in <replaceable>list</replaceable></userinput> omitido.</para>

	      <example id="ex32">
	        <title>Creando men&uacute;s con el uso de <command>select</command> en una funci&oacute;n</title>
		<programlisting>&ex32;</programlisting>
	      </example>

	      <para>Vease tambi&eacute;n <xref linkend="resistor">.</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
    </sect1> <!-- Probando y bifurcando -->

  </chapter> <!-- Bucles -->


