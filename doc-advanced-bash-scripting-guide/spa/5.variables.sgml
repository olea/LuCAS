  <chapter id="variables">
      <title>Introducci&oacute;n a las variables y par&aacute;metros</title>

      <para>Las variables son el coraz&oacute;n de todos los lenguajes de programaci&oacute;n y de scripting. Aparecen en operaciones aritm&eacute;ticas, manipulaci&oacute;n de cantidades, analisis de cadenas y son indispensables para trabajar con s&iacute;mbolos abstractos que representan otra cosa</para>

     <sect1 id="varsubn">
        <title>Sustituci&oacute;n de variables</title>

      <para>El <emphasis>nombre</emphasis> de una variable es el contenedor de su <emphasis>valor</emphasis>, los datos que contiene. Al acto de referenciar su valor se le denomina <emphasis>sustituci&oacute;n de variables.</emphasis></para>

      <variablelist id="dollarsign">

	<varlistentry>
	  <term><token>$</token></term> <indexterm>
	    <primary>$</primary>
	  </indexterm> <indexterm>
	    <primary>variable</primary> <secondary>$</secondary>
	  </indexterm> <indexterm>
	    <primary>variable</primary>
	    <secondary>substitution</secondary>
	  </indexterm>

	  <listitem>

	      <para>Nos permite distinguir entre el <emphasis>nombre</emphasis> de una variable y su <emphasis>valor</emphasis>. Si<userinput>variable1</userinput> es el nombre de una variable, entonces <userinput>$variable1</userinput> es una referencia a su <emphasis>valor</emphasis>, al dato que contiene. Las &uacute;nicas veces que una variable aparece <quote>desnuda</quote>, sin el prefijo <token>$</token>, es cuando se declara o se le asigna una valor, cuando se elimina (<emphasis>unset</emphasis>),cuando es <link linkend="exportref">exportada</link>, o en el caso especial de que una variable represente una <link linkend="signald">señal</link> (vease <xref linkend="ex76">). La asignaci&oacute;n puede ser con un <token>=</token> (como en <emphasis>var1=27</emphasis>), en una sentencia de <link linkend="readref">lectura</link>, o en el inicio de un bucle (<emphasis>for var2 in 1 2
		3</emphasis>).</para>


	    <para><anchor id="dblquo">El hecho de encerrar una variable entre comillas dobles (<token>" "</token>) no repercute en la sustituci&oacute;n de la variable. A esto se le llama entrecomillado parcial (<emphasis>partial quoting</emphasis>), a veces denominado <quote>entrecomillado d&eacute;bil</quote> (<emphasis>weak quoting</emphasis>). <anchor id="snglquo">El uso de comillas simples(<token>' '</token>) en el nombre de una variable conlleva a que sea utilizado de forma literal y, por tanto, que no sea sustituido por su valor. Esto es entrecomillado total (<emphasis>full quoting</emphasis>), a veces tambi&eacute;n denominado como <quote>entrecomillado fuerte</quote> (<emphasis>strong quoting</emphasis>). Vease <xref linkend="quoting"> Para una explicaci&oacute;n m&aacute;s detallada.</para>

	    <para>Obs&eacute;rvese que <userinput>$variable</userinput> es una forma alternativa simplificada de <userinput>${variable}</userinput>.  En contextos en los que la sintaxis <userinput>$variable</userinput> provoque error, la forma larga puede funcionar (vease <xref linkend="Parameter-Substitution">, abajo).</para>

	    <example id="ex9">
	      <title>Asignaci&oacute;on y sustituci&oacute;n de variables</title>
	      <programlisting>&ex9;</programlisting>
	    </example>

	    <warning><para>Una variable sin inicializar tiene el valor <quote>null</quote> - no tiene ning&uacute;n valor asignado (¡no es cero!). El uso de una variable antes de asignarle un valor, inevitablemente causar&aacute; problemas.</para></warning>

	  </listitem>
	</varlistentry>
      </variablelist>
    </sect1> <!-- Variable Substitution -->  


    <sect1 id="varassignment">
       <title>Asignaci&oacute;n de variables</title>


      <variablelist>
	<varlistentry>
	  <term><anchor id="eqref"><token>=</token></term>
	  <indexterm>
	    <primary>=</primary>
	  </indexterm>
	  <indexterm>
	    <primary>variable</primary>
	    <secondary>assignment</secondary>
	  </indexterm>
	  <listitem><para>El operador de asignaci&oacute;n (<emphasis>sin espacios ni antes ni despues</emphasis>)</para>



	    <caution>
	    <para>¡No confundir este operador con <link linkend="equalsignref">=</link> and <link linkend="equalref">-eq</link>, los cuales evaluan en vez de asignar!</para>

	   <para>Obs&eacute;rvese que <token>=</token> puede ser tanto un operador de asignaci&oacute;n como de evaluaci&oacute;n dependiendo del contexto.</para>
	   </caution>


	<example id="ex15">
	   <title>Asignaci&oacute;n sencilla de variables</title>

	  <programlisting>&ex15;</programlisting>
	</example>

	<example id="ex16">
	  <title>Asignaci&oacute;n de variables, sencilla e ilustrativa</title>
	  <programlisting>&ex16;</programlisting>
	</example>

	   <para>Asignaci&oacute;n de variables usando el mecanismo <token>$(...)</token> (un m&eacute;todo m&aacute;s novedoso que las <link linkend="backquotesref">comillas de ejecuci&oacute;n</link>)</para>


	    <para><programlisting># From /etc/rc.d/rc.local
R=$(cat /etc/redhat-release)
arch=$(uname -m)</programlisting></para>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect1> <!-- Variable Assignment -->

    <sect1 id="untyped">
      <title>Variables Bash sin tipo  </title>
      
      <para>A diferencia de otros muchos lenguajes de programac&oacute;n, Bash no distingue las variables por su <quote>tipo</quote>. Las variables bash son esencialmente cadenas de caracteres, aunque, dependiendo del contexto, se pueden realizar operaciones aritm&eacute;ticas con enteros o de comparaci&oacute;n sobre ellas. El factor que lo determina es el hecho de que el contenido de las variables sean s&oacute;lo d&iacute;gitos.</para>

	    <example id="intorstring">
	      <title>¿Enteros o cadenas?</title>
	      <programlisting>&intorstring;</programlisting>
	    </example>	    

      <para>Las variables sin tipo son tanto una bendici&oacute;n como una maldici&oacute;n. Permiten mas flexibilidad en los scripts (Suficiente como para liarte con ellas) y hacen mas f&aacute;cil la escitura de lineas de c&oacute;digo. Sin embargo, tambi&eacute;n permiten arrastrar errores y crean malos h&aacute;bitos de programaci&oacute;n.</para>

      <para>El seguimiento de que tipo de varible &eacute;s queda en manos del programador. Bash no lo har&aacute; por ti</para>
    
    </sect1> <!-- Bash Variables Are Untyped-->


    <sect1 id="othertypesv">
      <title>Tipos de variables especiales</title>


      <variablelist>

	<varlistentry>
	  <term><replaceable>Variables locales</replaceable></term>
	  <indexterm>
	    <primary>variable</primary>
	    <secondary>local</secondary>
	  </indexterm>

	  <listitem><para>Son variables visibles solamente dentro de un <link linkend="codeblockref">bloque de c&oacute;digo</link> o de una funci&oacute;n (Vease tambi&eacute;n <link linkend="localref">variables locales</link> en <link linkend="functionref">funciones</link>)</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><replaceable>Variables de entorno</replaceable></term>
	  <indexterm>
	    <primary>variable</primary>
	    <secondary>environmental</secondary>
	  </indexterm>
	  <listitem>

	  <para>Son variables que afectan al comportamiento de la shell y a la interface de usuario</para>
	      <note>

	     <para>En un contexto mas general, cada proceso tiene un <quote>entorno</quote>, el cual, est&aacute; formado por un conjunto de variables que almacenan la informaci&oacute;n que dicho proceso puede referenciar. En este sentido, la shell se comporta como cualquier otro proceso.</para>
	     
	       <para>Cada vez que se ejecuta una shell, se crean las variables de la shell, que se corresponden con sus propias variables de entorno. El hecho de modificar o a&ntilde;adir nuevas variables de la shell conlleva que se actualice su entorno, y que todos sus procesos hijo (Los comandos que ejecuta) hereden este entorno.</para>

       </note>

	      <caution>
	     <para>El espacio para almacenar el entorno es limitado. Crear demasiadas variables de entorno &oacute; una que tenga un tamaño excesivo puede causar problemas.</para>
	          <screen>
<prompt>bash$ </prompt><userinput>eval "`seq 10000 | sed -e 's/.*/export var&=ZZZZZZZZZZZZZZ/'`"</userinput>

<prompt>bash$ </prompt><userinput>du</userinput>
<computeroutput>bash: /usr/bin/du: Argument list too long</computeroutput>
	          </screen>
	      </para>
	      <para>(Gracias, S.C. por la aclaraci&oacute;n y por enviarnos el ejemplo de arriba.)</para>
	      </caution>

	    <para>Si un script crea variables de entorno, estas necesitar&aacute;n ser <quote>exportadas</quote>, esto significa que ha sido informado  el entorno local del scrip. Esta es la funci&oacute;n del comando <link linkend="exportref">export</link></para>

            <anchor id="childref">
	    <note><para>Un script solamente puede <command>exportar</command> variables a sus proceso hijos, estos son los comandos o procesos que el script inicie. Un script invocado desde la linea de comandos <replaceable>no puede</replaceable> exportar varibles al entorno de la linea de comandos que lo invoca. <link linkend="forkref">Los proceso hijos</link> no pueden exportar variables al proceso padre que los creo.</para></note>
	      <para>---</para>

	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><replaceable>Par&aacute;metros posicionales</replaceable></term>
	  <indexterm>
	    <primary>parameter</primary>
	    <secondary>positional</secondary>
	  </indexterm>
	  <listitem>
	    <para>Son argumentos pasados al script desde la linea de comandos - $0, $1, $2, $3... $0 es el nombre del script, $1 es el primer argumento, $2 es el segundo, $3 es el tercer argumento y as&iacute; sucesivamente.

	      <footnote><para>El proceso que llama al script establece el par&aacute; <replaceable>$0</replaceable>. Por convenio, este par&aacute;metro es el nombre del script. Vease en las p&aacute;ginas del manual <command>execv</command>.</para></footnote>

	      <anchor id="bracketnotation">
	     Despues de $9, los argumentos deben ser encerrados entre par&eacute;ntesis, por ejemplo, ${10}, ${11}, ${12}.</para>

	    <example id="ex17">
            <title>Par&aacute;metros posicionales</title>
	      <programlisting>&ex17;</programlisting>
	    </example>

	     <para>Algunos script pueden realizar diferentes tareas dependiendo del nombre con el cual han sido invocados. Por este motivo, para realizar su cometido, el script deber&aacute;, comprobar <varname>$0</varname>, el nombre con el que fue invocado. Adem&aacute;s tambi&eacute;n deben existir enlaces simb&oacute;licos con todos los nombres alternativos del script.</para>

	    <tip><para>Si un script espera recibir un par&aacute;metro de la linea de comandos, y sin embargo es invocado sin &eacute;l, provocar&aacute; la asignaci&oacute;n de un null a una variable, y esto, normalmente es un resultado indeseado. Una forma de prevenirlo es a&ntilda;adir un car&aacute;cter extra a ambos lados de la sentencia de asignaci&oacute;n en la que se referencie el par&aacute;metro posicional experado.</para></tip>

	      <programlisting>variable1_=$1_
# Esto evitar&aacute; un error, incluso aunque se omita el par&aacute;metro posicional.
Argumento_critico01=$variable1_

# Si se desea el car&aacute;cter extra puede ser eliminado mas tarde, como se muestra.
variable1=${variable1_/_/}   
# Se pueden producir efectos secundarios s&oacute;lo si $variable1_ comienza con "_".
# Este ejemplo utiliza una de las plantillas de sustituci&oacute;n de parametr&oacute;s
# explicado en el c&aacute;pitulo 9.
# La omisi&oacute;n del patron de remplazo provoca el borrado.

# Una forma mas sencilla de tratar esto es con la simple evaluaci&oacute;n de si se ha pasado el par&aacute;metro posicional esperado.
if [ -z $1 ]
then
  exit $PARAMETRO_POSICIONAL_OMITIDO
fi  
</programlisting>

	      <para>---</para>

	    <example id="ex18">
	      <title><command>wh</command>, <link linkend="whoisref">whois</link> B&uacute;squeda de nombres de dominio</title>
	      <programlisting>&ex18;</programlisting>
	    </example>

	      <para>---</para>

	    <para><anchor id="shiftref"></para>
	    <para>
	      <indexterm>
		<primary>shift</primary>
	      </indexterm>
	      <indexterm>
		<primary>command</primary>
		<secondary>shift</secondary>
	      </indexterm>
	      El comando <command>shift</command> reasigna los par&aacute;metros posicionales desplaz&aacute;ndolos una posici&oacute;n a la izquierda.</para>
	      
	    <para><varname>$1</varname> <--- <varname>$2</varname>, <varname>$2</varname> <--- <varname>$3</varname>, <varname>$3</varname> <--- <varname>$4</varname>, etc.</para>
	      
	    <para><varname>$1</varname> <--- <varname>$2</varname>, <varname>$2</varname> <--- <varname>$3</varname>, <varname>$3</varname> <--- <varname>$4</varname>, etc.</para>

	    <para>El anterior <varname>$1</varname> desaparece, pero <varname>$0</varname> no se modifica. Si utilizas un n&uacute;mero grande de par&aacute;metros posicionales en un script, el comando <command>shift</command> te permitir&aacute; acceder a aquellos par&aacute;metros posicionados a partir del <literal>10</literal>, aunque la notaci&oacute;n ${par&aacute;metro} tambi&eacute;n permite hacer esto. (vease <xref linkend="ex17">).</para>
	    <example id="ex19">
	      <title>Uso de <command>shift</command></title>
	      <programlisting>&ex19;</programlisting>
	    </example>

          <note><para>El comando <command>shift</command> tambi&eacute;n funciona con los par&aacute;metros pasados a una <link linkend="functionref">funci&oacute;n</link>. Vease <xref linkend="multiplication">.</para></note>
	    
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect1> <!-- Special Variable Types -->  


  </chapter> <!-- Variables -->
