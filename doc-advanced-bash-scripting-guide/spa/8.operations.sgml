  <chapter id="operations">
    <title>Operaciones y temas relacionados</title>


     <sect1 id="ops">
      <title>Operadores</title>

      <variablelist id="asnop">
        <title><anchor id="asnop1">asignación</title>

	<varlistentry>
	  <term><replaceable>asignación de variables</replaceable></term>
	  <listitem><para>Initializar o cambiar el valor de una variable</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <indexterm>
	    <primary>=</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>=</secondary>
	  </indexterm>
	  <term>=</term>
	  <listitem>
	  <para>Operador de asignación de propósito general, que
	    funciona para asignaciones aritméticas y de cadenas.
	  </para>

	    <para>
	      <programlisting>var=27
category=minerals  # No se permiten espacios después del "=".</programlisting>
	    </para>

            <caution>
	    <para>No confundir el <quote>=</quote> operador de
	      asignación con el operador de test <link
	      linkend="equalsignref">=</link>.
            </para>

	    <para>
	      <programlisting>#    = como operador de test

if [ "$string1" = "$string2" ]
# if [ "Xstring1" = "Xstring2" ] es más seguro,
# para prevenir un mensaje de error una de las variables debería estar
# vacía.
# (Los caracteres "X" antepuestos se cancelan.) 
then
   command
fi</programlisting>
	    </para>
	    </caution>


	  </listitem>
	</varlistentry>
      </variablelist>

	<indexterm>
	  <primary>expr</primary>
	</indexterm>
	<indexterm>
	  <primary>comando</primary>
	  <secondary>expr</secondary>
	</indexterm>
	<indexterm>
	  <primary>let</primary>
	</indexterm>
	<indexterm>
	  <primary>comando</primary>
	  <secondary>let</secondary>
	</indexterm>


      <variablelist id="arops">
        <title><anchor id="arops1">operadores aritméticos</title>

	<varlistentry>
	  <term><token>+</token></term>
	  <indexterm>
	    <primary>+</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>+</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>adición</primary>
	  </indexterm>
	  <indexterm>
	    <primary>más</primary>
	  </indexterm>
	  <listitem><para>más</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token>-</token></term>
	  <indexterm>
	    <primary>-</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>-</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>sustracción</primary>
	  </indexterm>
	  <indexterm>
	    <primary>menos</primary>
	  </indexterm>
	  <listitem><para>menos</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token>*</token></term>
	  <indexterm>
	    <primary>*</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>*</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>multiplicación</primary>
	  </indexterm>
	  <listitem><para>multiplicación</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token>/</token></term>
	  <indexterm>
	    <primary>/</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>/</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>división</primary>
	  </indexterm>
	  <listitem><para>división</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><anchor id="exponentiationref"><token>**</token></term>
	  <indexterm>
	    <primary>**</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>**</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>exponenciación</primary>
	  </indexterm>
	  <listitem>
	  <para>exponenciación
	    <programlisting># Bash, version 2.02, introdujo el oprador
	    de exponenciación «**».

let "z=5**3"
echo "z = $z"   # z = 125</programlisting>
          </para>	    
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><anchor id="moduloref"><token>%</token></term>
	  <indexterm>
	    <primary>%</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>%</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>módulo</primary>
	  </indexterm>
	  <listitem>

	  <para>modulo, o mod (devuelve el resto de una operación de
	    división entera)</para>

	  <para>
	      <screen><prompt>bash$ </prompt><userinput>echo `expr 5 % 3`</userinput>
<computeroutput>2</computeroutput>
	      </screen>
	    </para>

	  <para>Este operador se usa, entre otras cosas, para
	    encontrar números dentro de un rango específico (vea el <xref
	    linkend="ex21"> y el <xref linkend="randomtest">)
	    y para formatear la salida de los programas (vea el <xref
	    linkend="qfunction">). Puede incluso usarse para generar
	    números primos, (vea el <xref linkend="primes">).</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token>+=</token></term>
	  <indexterm>
	    <primary>+=</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>+=</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>más-igual</primary>
	  </indexterm>
	  <listitem><para><quote>más-igual</quote> (incrementa una
	    variable por una constante)</para>
	    <para><userinput>let "var += 5"</userinput> resulta en 
	      <varname>var</varname> se incremente en
	      <literal>5</literal>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token>-=</token></term>
	  <indexterm>
	    <primary>-=</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>-=</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>menos-igual</primary>
	  </indexterm>
	  <listitem><para><quote>menos-igual</quote> (decrementa una
	  variable por una constante)</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token>*=</token></term>
	  <indexterm>
	    <primary>*=</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>*=</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>veces-igual</primary>
	  </indexterm>
	  <listitem><para><quote>veces-igual</quote> (multiplicar una
	    variable por una constante)</para>
	    <para><userinput>let "var *= 4"</userinput> resulta en <varname>var</varname>
	    multiplicada por <literal>4</literal>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token>/=</token></term>
	  <indexterm>
	    <primary>/=</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>/=</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>slash-igual</primary>
	  </indexterm>
	  <listitem><para><quote>slash-igual</quote> (divide la
	  variable por una constante)</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token>%=</token></term>
	  <indexterm>
	    <primary>%=</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>%=</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>mod-igual</primary>
	  </indexterm>
	  <listitem><para><quote>mod-equal</quote> (resto de dividor
	  una variable entre una constante)</para>

      <para><emphasis>Los operadores aritméticos a veces aparecen en
        una expresión <link linkend="exprref">expr</link> o <link
        linkend="letref">let</link></emphasis></para>

	    <example id="arithops">
	      <title>Uso de operaciones aritméticas</title>
	      <programlisting>&arithops;</programlisting>
	    </example>	    

	  </listitem>
	</varlistentry>

      </variablelist>

      <note><para>Las variables enteras en Bash actualmente son
	enteros largos (32 bits) con signo  (signed
	<emphasis>long</emphasis>), en el rango -2147483648 a
	2147483647. 
        Una operación que toma una variable fuera de esos límites dará
	un resultado erróneo.
	  <programlisting>a=2147483646
echo "a = $a"      # a = 2147483646
let "a+=1"         # Increment "a".
echo "a = $a"      # a = 2147483647
let "a+=1"         # increment "a" again, past the limit.
echo "a = $a"      # a = -2147483648
                   #      ERROR (out of range)</programlisting>
	</para></note>

      <caution><para>Bash no entiende de aritmética de coma flotante. Trata
        los números con una coma decimal como cadenas.
        <programlisting>a=1.5

let "b = $a + 1.3"  # Error.
# t2.sh: let: b = 1.5 + 1.3: syntax error in expression (error token is ".5 + 1.3")

echo "b = $b"       # b=1</programlisting>

        Use <link linkend="bcref">bc</link> en scripts que necesiten
	cálculos de coma flotanteo funciones de biblioteca matemática.</para></caution>



      <formalpara><title>operadores de bits</title>
      <para>Los operadores de bits hacen su aparición en los scripts
      de shell. Su mayor uso parece ser manipular y testear los
      valores leídos de puertos  o sockets. <quote>Bit
      flipping</quote> es más relevante para los lenguajes compilados,
      como C o C++, los cuales se ejecutan lo suficientemente rápido
      como para permitir su uso al vuelo..</para></formalpara>

      <variablelist id="bitwsops">
        <title><anchor id="bitwsops1">operadores de bits</title>

	<varlistentry>
	  <term><token><<</token></term>
	  <indexterm>
	    <primary><<</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary><<</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>desplazar a la izquierda</primary>
	  </indexterm>
	  <listitem><para>desplaza a la izquierda (multiplica por <literal>2</literal>
	      por cada posición desplazada)</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token><<=</token></term>
	  <indexterm>
	    <primary><<=</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary><<=</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>desplazamiento-izquierdo-igual</primary>
	  </indexterm>
	  <listitem><para><quote>left-shift-equal</quote></para>
	    <para><userinput>let "var <<= 2"</userinput> resulta en <varname>var</varname>
	    desplazado a la izquierda <literal>2</literal> bits (multiplicado por <literal>4</literal>)</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token>>></token></term>
	  <indexterm>
	    <primary>>></primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>>></secondary>
	  </indexterm>
	  <indexterm>
	    <primary>desplazamiento derecho</primary>
	  </indexterm>
	  <listitem><para>desplazamiento a la derecha bit a bit (divide por <literal>2</literal>
	      por cada posición desplazada)</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token>>>=</token></term>
	  <indexterm>
	    <primary>>>=</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>>>=</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>desplazamiento-derecho-igual</primary>
	  </indexterm>
	  <listitem><para><quote>desplazamiento-derecho-igual</quote> (inverse of <token><<=</token>)</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token>&</token></term>
	  <indexterm>
	    <primary>&</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>&</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>AND</primary>
	    <secondary>bit a bit</secondary>
	  </indexterm>
	  <listitem><para>operación and bit a bit</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token>&=</token></term>
	  <indexterm>
	    <primary>&=</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>&=</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>and-igual</primary>
	  </indexterm>
	  <listitem><para><quote>and bit a bit con asignación</quote></para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token>|</token></term>
	  <indexterm>
	    <primary>|</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>|</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>OR</primary>
	    <secondary>bit a bit</secondary>
	  </indexterm>
	  <listitem><para>OR bit a bit</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token>|=</token></term>
	  <indexterm>
	    <primary>|=</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>|=</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>OR-con asignación</primary>
	  </indexterm>
	  <listitem><para><quote>OR bit a bit con asignación</quote></para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token>~</token></term>
	  <indexterm>
	    <primary>~</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>~</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>negación</primary>
	  </indexterm>
	  <listitem><para>negación bit a bit</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token>!</token></term>
	  <indexterm>
	    <primary>!</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>!</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>NOT</primary>
	  </indexterm>
	  <listitem><para>negación bit a bit</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token>^</token></term>
	  <indexterm>
	    <primary>^</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>^</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>XOR</primary>
	  </indexterm>
	  <listitem><para>XOR bit a bit</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token>^=</token></term>
	  <indexterm>
	    <primary>^=</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>^=</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>XOR con asignación</primary>
	  </indexterm>
	  <listitem><para><quote>XOR bit a bit con asignación</quote></para>
	  </listitem>
	</varlistentry>

      </variablelist>


      <variablelist id="logops">
        <title><anchor id="logops1">operadores lógicos</title>

	<varlistentry>
	  <term><token>&&</token></term>
	  <indexterm>
	    <primary>&&</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operador</primary>
	    <secondary>&&</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>AND</primary>
	    <secondary>lógico</secondary>
	  </indexterm>
	  <listitem><para>and (lógico)</para>
	    <para><programlisting>if [ $condition1 ] && [ $condition2 ]
# Lo mismo que:  if [ $condition1 -a $condition2 ]
# Devuelve true si ambas condiciones condición1 y condición2 son verdaderas...

if [[ $condition1 && $condition2 ]]    # También funciona.
# Note que el operador && no está permitido en el interior de la construcción [ ... ].</programlisting></para>

	  <note><para><token>&&</token> puede además, dependiendo del
	    contexto, usarse en una 
             <link linkend="listconsref">lista and</link>
	    para concatenar comandos.</para></note>

	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><token>||</token></term>
	  <indexterm>
	    <primary>||</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operador</primary>
	    <secondary>||</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>OR</primary>
	    <secondary>lógico</secondary>
	  </indexterm>
	  <listitem><para>or  (lógico)</para>
	    <para><programlisting>if [ $condicion1 ] || [ $condicion2 ]
# Lo mismo que:  if [ $condition1 -o $condition2 ]
# Devuelve true si cualquiera de la condicion1 o la condicion2
	    contiene true...

if [[ $condition1 || $condition2 ]]    # También funciones.
# Note que el operador || no está permitido en el interior de la
construcción [ ... ].</programlisting></para>

	  <note><para>Bash tests the <link linkend="exitstatusref">exit
	    status</link> of each statement linked with a logical
	    operator.</para></note>

	<example id="andor">
	  <title>Compound Condition Tests Using && and ||</title>
       	    <programlisting>&andor;</programlisting>
	 </example>   

	    <para>The <token>&&</token> and <token>||</token> operators also
	      find use in an arithmetic context.</para>
	      
	  <para>
	      <screen><prompt>bash$ </prompt><userinput>echo $(( 1 && 2 )) $((3 && 0)) $((4 || 0)) $((0 || 0))</userinput>
<computeroutput>1 0 1 0</computeroutput>
	      </screen>
	    </para>
	      
	  </listitem>
	</varlistentry>

      </variablelist>

      <variablelist id="miscop">
        <title><anchor id="miscop1">miscellaneous operators</title>

	<varlistentry>
	  <term><anchor id="commaop"><token>,</token></term>
	  <indexterm>
	    <primary>,</primary>
	  </indexterm>
	  <indexterm>
	    <primary>operación</primary>
	    <secondary>,</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>linking</primary>
	  </indexterm>
	  <listitem>
	    <para>comma operator</para>
	    <para>The <command>comma operator</command> chains together
	      two or more arithmetic operacións. All the operacións are
	      evaluated (with possible <emphasis>side effects</emphasis>,
	      but only the last operación is returned.</para>

	     <para>
	     <programlisting>let "t1 = ((5 + 3, 7 - 1, 15 - 4))"
echo "t1 = $t1"               # t1 = 11

let "t2 = ((a = 9, 15 / 3))"  # Set "a" and calculate "t2".
echo "t2 = $t2    a = $a"     # t2 = 5    a = 9</programlisting>
	     </para>

	     <para>The comma operator finds use mainly in <link
	       linkend="forloopref1">for loops</link>. See <xref
	       linkend="forloopc">.</para>

	  </listitem>

	</varlistentry>
      </variablelist>

    </sect1> <!-- Operators -->

    <sect1 id="Numerical-Constants">
      <title>Constantes numéricas</title>

      <para><anchor id="numconstants">Un script de shell interpreta un
	número como decimal (base 10), a no ser que el número tenga un 
        prefijo o notación especial. Un número precedido por un 
	<replaceable>0</replaceable> es <replaceable>octal</replaceable>
	(base 8). Un número precedido por <replaceable>0x</replaceable>
	es <replaceable>hexadecimal</replaceable> (base 16). Un número
	con un <replaceable>#</replaceable> entremedias se evalúa como
	<replaceable>BASE#NÚMERO</replaceable> (esta opción es de
	utilidad limitada debido a las restricciones de rango).</para>

	    <example id="numbers">
	      <title>Representación de constantes numéricas<token>:</token></title>
	      <programlisting>&numbers;</programlisting>
	    </example>

    </sect1> <!-- Numerical-Constants -->

  </chapter> <!-- Operacións -->
