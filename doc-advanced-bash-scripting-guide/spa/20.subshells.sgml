  <chapter id="subshells">
    <title>Subshells</title>

      <para><anchor id="subshellsref"></para>

      <para>Ejecutar un guión shell lanzado en otra instancia del 
        procesador de comandos. Asi como los comandos son interpretados en  
        la linea de comandos del sistema, del mismo modo hace un guión
		  script procesando una lista de comandos en un fichero. Cada guión
		  shell ejecudo es, en efecto, un subproceso del shell 
        <link linkend="forkref">padre</link>,
        el que te proporciona la linea de comandos en consola o en un
		  ventana xterm.</para>
	
      <para>Un guión shell puede ademas lanzar subprocesos. Estos
        <emphasis>subshells</emphasis> permiten al guión hacer un 
        procesamiento en paralelo, de hecho ejecutando multiples subtareas
		  simultaneamente.</para>
      
      <variablelist id="subshellparens">
        <title><anchor id="subshellparens1">Lista de comandos entre
		  parentesis</title>

	<varlistentry>
	  <term>( comando1; comando2; comando3; ... )</term>
	<listitem>
	  <para>Una lista de comandos entre parentesis 
	  <replaceable>parentesis</replaceable> funciona como un
	  subshell.</para>
	</listitem>
	</varlistentry>
      </variablelist>

      <note><para><anchor id="parvis">Las variables en un subshell
        <emphasis>no</emphasis> son visibles fuera del bloque de código 
        en el subshell. Estas no son accesibles al <link
        linkend="forkref">proceso padre</link>, que es el shell
        que lanza el subshell. Son, de hecho, <link
        linkend="localref">variables locales</link>.</para></note>

      <example id="subshell">
	<title>Rango de la variable en un shubshell</title>
	<programlisting>&subshell;</programlisting>
      </example>
      <para>Mirar ademas <xref linkend="subpit">.</para>

      <para>+</para>

      <para>Los cambios hecho en un subshell no son arrastrados al
        shell padre.</para>

      <example id="allprofs">
	<title>Caracteristica de la lista de usuario</title>
	<programlisting>&allprofs;</programlisting>
      </example>


      <para>Un subshell puede ser usado par establecer un <quote>entorno
	      dedicado</quote> para un grupo de comandos.
	      <programlisting>COMMAND1
COMMAND2
COMMAND3
(
  IFS=:
  PATH=/bin
  unset TERMINFO
  set -C
  shift 5
  COMMAND4
  COMMAND5
  exit 3 # Solo sale el subshell.
)
# El shell padre no ha sido afectado, y el entorno es preservado.
COMMAND6
COMMAND7</programlisting>

            Una aplicación de esto es comprobar si una variable es definida.
              <programlisting>if (set -u; : $variable) 2&gt; /dev/null
then
  echo "Variable is set."
fi

# Puede tambien ser escrito asi [[ ${variable-x} != x || ${variable-y} != y ]]
# o asi                         [[ ${variable-x} != x$variable ]]
# o asi                         [[ ${variable+x} = x ]])</programlisting>

            Otra aplcacion es comprobar si un fichero esta bloqueado:
	      <programlisting>if (set -C; : &gt; lock_file) 2&gt; /dev/null
then
  echo "Another user is already running that script."
  exit 65
fi   

# Gracias, S.C.</programlisting>
      </para>   


      <para>Los procesos puede ser ejecutados en paralelo dentro de
		diferentes subshell. Esto permite descomponer una compleja tarea 
		en partes de procesos concurrentemente.</para>

      <example id="parallel-processes">
	<title>Ejecutar procesos en paralelo en subshells</title>
	<programlisting>
	(cat list1 list2 list3 | sort | uniq > list123) &
	(cat list4 list5 list6 | sort | uniq > list456) &
	# Mezclar y ordenar ambos conjuntos de listas simultaneamente.
	# Ejecutar en segundo plano asegura una ejecución en paralelo.
	#
	# El mismo efecto que
	#   cat list1 list2 list3 | sort | uniq > list123 &
	#   cat list4 list5 list6 | sort | uniq > list456 &
	
	wait   # No ejecutar el siguiente comando hasta terminar el subshell.
	
	diff list123 list456</programlisting>
	</example>

	<para>Redireccionado E/S a un subshell usando <quote>|</quote> el
	operador tuberia, como en <userinput>ls -al | (comando)</userinput>.</para>


	  <note><para>Un bloque de comandos entre <replaceable>corchetes
	  </replaceable> <emphasis>no</emphasis> lanza
	  un shubshell.</para>
	  <para>{ comando1; comando2; comando3; ... }</para></note>


  </chapter> <!-- Subshells -->
