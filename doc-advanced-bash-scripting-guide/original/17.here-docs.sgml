  <chapter id="here-docs">
    <title>Here Documents</title>

      <para><anchor id="heredocref"></para>

      <indexterm>
	<primary><<</primary>
      </indexterm>
      <indexterm>
	<primary>special character</primary>
	<secondary><<</secondary>
      </indexterm>
      
      <para>A <firstterm>here document</firstterm> uses a special form
	of <link linkend="ioredirref">I/O redirection</link>
	to feed a command script to an interactive program, such
	as <link linkend="ftpref">ftp</link>, <link
	linkend="telnetref">telnet</link>, or <command>ex</command>.
	Typically, the script consists of a command list to the
	program, delineated by a limit string.	The special symbol
	<token><<</token> precedes the limit string.  This has the effect
	of redirecting the output of a file into the program, similar
	to <userinput>interactive-program < command-file</userinput>,
	where <filename>command-file</filename> contains
	  <programlisting>command #1
command #2
...</programlisting></para>

      <para>The <quote>here document</quote> alternative looks like this:
	<programlisting>#!/bin/bash
interactive-program &lt;&lt;LimitString
command #1
command #2
...
LimitString</programlisting></para>

      <para>Choose a limit string sufficiently unusual that it will not occur anywhere
	in the command list and confuse matters.</para>

      <para>Note that <emphasis>here documents</emphasis> may sometimes
	be used to good effect with non-interactive utilities and
	commands.</para>

      <example id="ex69">
	<title><command>dummyfile</command>: Creates a 2-line dummy file</title>
	<programlisting>&ex69;</programlisting>
      </example>

      <para>The above script could just as effectively have been implemented with
	<command>ex</command>, rather than <command>vi</command>. Here documents
	containing a list of <command>ex</command> commands are common enough to
	form their own category, known as <firstterm>ex scripts</firstterm>.</para>

      <example id="ex70">
	<title><command>broadcast</command>: Sends message to everyone logged in</title>
	<programlisting>&ex70;</programlisting>
      </example>

      <example id="ex71">
	<title>Multi-line message using <command>cat</command></title>
	<programlisting>&ex71;</programlisting>
      </example>

      <para>The <option>-</option> option to mark a here document limit string
	(<userinput>&lt;&lt;-LimitString</userinput>) suppresses tabs (but
	not spaces) in the output. This may be useful in making a script
	more readable.</para>

      <example id="ex71a">
	<title>Multi-line message, with tabs suppressed</title>
	<programlisting>&ex71a;</programlisting>
      </example>


      <para>A here document supports parameter and command substitution.
	It is therefore possible to pass different parameters to the
	body of the here document, changing its output accordingly.</para>

      <example id="ex71b">
	<title>Here document with parameter substitution</title>
	<programlisting>&ex71b;</programlisting>
      </example>

      
      <para>Quoting or escaping the <quote>limit string</quote> at the
        head of a here document disables parameter substitution within its
	body. This has very limited usefulness.</para>

      <example id="ex71c">
	<title>Parameter substitution turned off</title>
	<programlisting>&ex71c;</programlisting>
      </example>
      

      <para>This is a useful script containing a here document with
        parameter substitution.</para>

      <example id="ex72">
	<title><command>upload</command>: Uploads a file pair to <quote>Sunsite</quote>
	  incoming directory</title>
	<programlisting>&ex72;</programlisting>
      </example>


      <para>It is possible to use <token>:</token> as a dummy command
        accepting output from a here document. This, in effect, creates an
	<quote>anonymous</quote> here document.</para>

	<example id="anonheredoc">
	  <title><quote>Anonymous</quote> Here Document</title>
	<programlisting>#!/bin/bash

: &lt;&lt;TESTVARIABLES
${HOSTNAME?}${USER?}${MAIL?}  # Print error message if one of the variables not set.
TESTVARIABLES

exit 0</programlisting>
       </example>

	  <note>
	  <para>Here documents create temporary files, but these
	    files are deleted after opening and are not accessible to
	    any other process.</para>
	  <para>
	      <screen><prompt>bash$ </prompt><userinput>bash -c 'lsof -a -p $$ -d0' << EOF</userinput>
<prompt>&gt; </prompt><userinput>EOF</userinput>
<computeroutput>lsof    1213 bozo    0r   REG    3,5    0 30386 /tmp/t1213-0-sh (deleted)</computeroutput>
	      </screen>
	  </para>
	  </note>

	<caution><para>Some utilities will not work in a here
	  document.</para></caution>

	<para>For those tasks too complex for a <quote>here
	  document</quote>, consider using the <command>expect</command>
	  scripting language, which is specifically tailored for feeding
	  input into interactive programs.</para>



  </chapter> <!-- Here Documents -->
