  <chapter id="gotchas">
    <title>Gotchas</title>

    <epigraph>
      <attribution>Puccini</attribution>
      <para>Turandot: Gli enigmi sono tre, la morte una!</para>
      <para>Caleph: No, no! Gli enigmi sono tre, una la vita!</para>
    </epigraph>

      <para>Assigning reserved words or characters to variable names.
	<programlisting>case=value0       # Causes problems.
23skidoo=value1   # Also problems.
# Variable names starting with a digit are reserved by the shell.
# Try _23skidoo=value1. Starting variables with an underscore is o.k.

# However...      using just the underscore will not work.
_=25
echo $_           # $_ is a special variable set to last arg of last command.

xyz((!*=value2    # Causes severe problems.</programlisting>
	</para>

      <para>Using a hyphen or other reserved characters in a variable name.
	<programlisting>var-1=23
# Use 'var_1' instead.</programlisting>
      </para>

      <para>Using the same name for a variable and a function. This can make a
        script difficult to understand.
        <programlisting>do_something ()
{
  echo "This function does something with \"$1\"."
}

do_something=do_something

do_something do_something

# All this is legal, but highly confusing.</programlisting>
	</para>


      <para><anchor id="wsbad">Using <link
	linkend="whitespaceref">whitespace</link> inappropriately
	(in contrast to other programming languages, Bash can be quite
	finicky about whitespace).

	<programlisting>var1 = 23   # 'var1=23' is correct.
# On line above, Bash attempts to execute command "var1"
# with the arguments "=" and "23".
	
let c = $a - $b   # 'let c=$a-$b' or 'let "c = $a - $b"' are correct.

if [ $a -le 5]    # if [ $a -le 5 ]   is correct.
# if [ "$a" -le 5 ]   is even better.
# [[ $a -le 5 ]] also works.</programlisting>
	</para>

      <para>Assuming uninitialized variables (variables before a value is
	assigned to them) are <quote>zeroed out</quote>. An
	uninitialized variable has a value of <quote>null</quote>,
	<emphasis>not</emphasis> zero.</para>

	<para>Mixing up <emphasis>=</emphasis> and <emphasis>-eq</emphasis> in
	a test. Remember, <emphasis>=</emphasis> is for comparing literal
	variables and <emphasis>-eq</emphasis> for integers.

	<programlisting>if [ "$a" = 273 ]      # Is $a an integer or string?
if [ "$a" -eq 273 ]    # If $a is an integer.

# Sometimes you can mix up -eq and = without adverse consequences.
# However...


a=273.0   # Not an integer.
	   
if [ "$a" = 273 ]
then
  echo "Comparison works."
else  
  echo "Comparison does not work."
fi    # Comparison does not work.

# Same with   a=" 273"  and a="0273".


# Likewise, problems trying to use "-eq" with non-integer values.
	   
if [ "$a" -eq 273.0 ]
then
  echo "a = $a'
fi  # Aborts with an error message.  
# test.sh: [: 273.0: integer expression expected</programlisting>
        </para>
	  

      <para>Sometimes variables within <quote>test</quote> brackets
	([ ]) need to be quoted (double quotes).  Failure to do so may
	cause unexpected behavior. See <xref linkend="strtest">, <xref
	linkend="redir2">, and <xref linkend="arglist">.</para>

      <para>Commands issued from a script may fail to execute because
	the script owner lacks execute permission for them. If a user
	cannot invoke a command from the command line, then putting it
	into a script will likewise fail. Try changing the attributes of
	the command in question, perhaps even setting the suid bit
	(as root, of course).</para>


      <para>Attempting to use <command>-</command> as a redirection
        operator (which it is not) will usually result in an unpleasant
	surprise.
	<programlisting>command1 2&gt; - | command2  # Trying to redirect error output of command1 into a pipe...
#    ...will not work.	

command1 2&gt;&amp; - | command2  # Also futile.

Thanks, S.C.</programlisting></para>


      <para>Using Bash <link linkend="bash2ref">version 2+</link>
	functionality may cause a bailout with error messages. Older
	Linux machines may have version 1.XX of Bash as the default
	installation.
	<programlisting>#!/bin/bash

minimum_version=2
# Since Chet Ramey is constantly adding features to Bash,
# you may set $minimum_version to 2.XX, or whatever is appropriate.
E_BAD_VERSION=80

if [ "$BASH_VERSION" \< "$minimum_version" ]
then
  echo "This script works only with Bash, version $minimum or greater."
  echo "Upgrade strongly recommended."
  exit $E_BAD_VERSION
fi

...</programlisting></para>
	

      <para>Using Bash-specific functionality in a Bourne shell script
	(<userinput>#!/bin/sh</userinput>) on a non-Linux machine
	may cause unexpected behavior. A Linux system usually aliases
	<command>sh</command> to <command>bash</command>, but this does
	not necessarily hold true for a generic UNIX machine.</para>

      <para>A script with DOS-type newlines (<replaceable>\r\n</replaceable>)
	will fail to execute, since <userinput>#!/bin/bash\r\n</userinput>
	is not recognized, <emphasis>not</emphasis> the same as the
	expected <userinput>#!/bin/bash\n</userinput>. The fix is to
	convert the script to UNIX-style newlines.</para>

      <para>A shell script headed by <userinput>#!/bin/sh</userinput>
	may not run in full Bash-compatibility mode. Some Bash-specific
	functions might be disabled. Scripts that need complete
	access to all the Bash-specific extensions should start with
	<userinput>#!/bin/bash</userinput>.</para>

      <para>A script may not <command>export</command> variables back
	to its <link linkend="forkref">parent process</link>, the shell,
	or to the environment. Just as we learned in biology, a child
	process can inherit from a parent, but not vice versa.
	  <programlisting>WHATEVER=/home/bozo
export WHATEVER
exit 0</programlisting>
          <screen><prompt>bash$ </prompt><command>echo $WHATEVER</command>
<computeroutput>

</computeroutput>
<prompt>bash$ </prompt></screen>
        Sure enough, back at the command prompt, $WHATEVER remains unset. 		  
	  </para>
      
      <para>Setting and manipulating variables in a subshell, then attempting
        to use those same variables outside the scope of the subshell will
	result an unpleasant surprise.</para>

      <example id="subpit">
	<title>Subshell Pitfalls</title>
	<programlisting>&subpit;</programlisting>
      </example>

      <para>Using <quote>suid</quote> commands in scripts is risky,
	as it may compromise system security.
	  <footnote><para>Setting the <emphasis>suid</emphasis> permission on
	    a script has no effect.</para></footnote>
	</para> 

      <para>Using shell scripts for CGI programming may be problematic. Shell
        script variables are not <quote>typesafe</quote>, and this can cause
	undesirable behavior as far as CGI is concerned. Moreover, it is
	difficult to <quote>cracker-proof</quote> shell scripts.</para>

    <epigraph>
      <attribution>A.J. Lamb and H.W. Petrie</attribution>
      <para>Danger is near thee --</para>
      <para>Beware, beware, beware, beware.</para>
      <para>Many brave hearts are asleep in the deep.</para>
      <para>So beware --</para>
      <para>Beware.</para>
    </epigraph>

  </chapter> <!-- Gotchas -->
