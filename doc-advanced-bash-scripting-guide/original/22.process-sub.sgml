  <chapter id="process-sub">
    <title>Process Substitution</title>

      <para><anchor id="processsubref"><replaceable>Process
	substitution</replaceable> is the counterpart to <link
	linkend="commandsubref">command substitution</link>. Command
	substitution sets a variable to the result of a command, as in
	<command>dir_contents=`ls -al`</command> or <command>xref=$(
	grep word datafile)</command>. Process substitution feeds the
	output of a process to another process (in other words, it sends
	the results of a command to another command).</para>

      <variablelist id="commandsparens">
        <title><anchor id="commandsparens1">Command substitution template</title>

	<varlistentry>
	  <term>command within parentheses</term>

	<listitem>
	  <para><command>&gt;(command)</command></para>
	  <para><command>&lt;(command)</command></para>
	  <para>These initiate process substitution. This uses
	    <filename>/dev/fd/&lt;n&gt;</filename> files to send the
	    results of the process within parentheses to another process.
	      <footnote><para>This has the same effect as a
		<link linkend="namedpiperef">named pipe</link> (temp
		file), and, in fact, named pipes were at one time used
		in process substitution.</para></footnote>
	  </para>

          <note><para>There is <emphasis>no</emphasis> space between the
            the <quote><</quote> or <quote>></quote> and the parentheses.
            Space there would give an error message.</para></note>

	</listitem>
	
	</varlistentry>
      </variablelist>


              <para>
	      <screen><prompt>bash$ </prompt><userinput>echo >(true)</userinput>
<computeroutput>/dev/fd/63</computeroutput>

<prompt>bash$ </prompt><userinput>echo <(true)</userinput>
<computeroutput>/dev/fd/63</computeroutput>
	      </screen>

	  Bash creates a pipe with two <link linkend="fdref">file
	  descriptors</link>, <filename>--fIn</filename> and
	  <filename>fOut--</filename>.	The <filename>stdin</filename>
	  of <link linkend="trueref">true</link> connects
	  to <filename>fOut</filename> (dup2(fOut, 0)),
	  then Bash passes a <filename>/dev/fd/fIn</filename>
	  argument to <command>echo</command>. On systems lacking
	  <filename>/dev/fd/&lt;n&gt;</filename> files, Bash may use
	  temporary files. (Thanks, S.C.)</para>

      <para><programlisting>cat <(ls -l)
# Same as     ls -l | cat

sort -k 9 <(ls -l /bin) <(ls -l /usr/bin) <(ls -l /usr/X11R6/bin)
# Lists all the files in the 3 main 'bin' directories, and sorts by filename.
# Note that three (count 'em) distinct commands are fed to 'sort'.

 
diff <(command1) <(command2)    # Gives difference in command output.

tar cf >(bzip2 -c > file.tar.bz2) dir
# Calls "tar cf /dev/fd/?? dir", and "bzip2 -c > file.tar.bz2".
#
# Because of the /dev/fd/&lt;n&gt; system feature,
# the pipe between both commands does not need to be named.
#
# This can be emulated.
#
bzip2 -c < pipe > file.tar.bz2&
tar cf pipe dir
rm pipe
#        or
exec 3>&1
tar cf /dev/fd/4 dir 4>&1 >&3 3>&- | bzip2 -c > file.tar.bz2 3>&-
exec 3>&-


# Thanks, S.C.</programlisting></para>


      <para>A reader of this document sent in the following interesting
        example of process substitution.</para>

      <para><programlisting># Script fragment taken from SuSE distribution:

while read  des what mask iface; do
# Some commands ...
done < <(route -n)  


# To test it, let's make it do something.
while read  des what mask iface; do
  echo $des $what $mask $iface
done < <(route -n)  

# Output:
# Kernel IP routing table
# Destination Gateway Genmask Flags Metric Ref Use Iface
# 127.0.0.0 0.0.0.0 255.0.0.0 U 0 0 0 lo


# As S.C. points out, an easier-to-understand equivalent is:
route -n |
  while read des what mask iface; do   # Variables set from output of pipe.
    echo $des $what $mask $iface
  done  # Same output as above.</programlisting></para>



  </chapter> <!-- Process Substitution -->
