  <chapter id="arrays">
    <title>Arrays</title>

      <para><anchor id="arrayref"></para>

      <para>Newer versions of <command>bash</command> support one-dimensional
	arrays.  Arrays may be declared with the <userinput>variable[xx]</userinput>
	notation or explicitly by a <userinput>declare -a variable</userinput>
	statement. To dereference (find the contents of) an array variable, use
	<firstterm>curly bracket</firstterm> notation, that is, <userinput>${variable[xx]}</userinput>.</para>

      <example id="ex66">
	<title>Simple array usage</title>
	<programlisting>&ex66;</programlisting>
      </example>

      <para>Arrays variables have a syntax all their own, and even
	standard Bash commands and operators have special options adapted
	for array use.</para>

      <para>
      <programlisting> array=( zero one two three four five )

echo ${array[0]}       #  zero
echo ${array:0}        #  zero
                       #  Parameter expansion of first element.
echo ${array:1}        #  ero
                       #  Parameter expansion of first element,
                       #+ starting at position #1 (2nd character).

echo ${#array}         #  4
                       #  Length of first element of array.</programlisting>
      </para>

      <para>In an array context, some Bash <link
	linkend="builtinref">builtins</link> have a slightly altered
	meaning. For example, <link linkend="unsetref">unset</link>
	deletes array elements, or even an entire array.</para>

      <example id="ex67">
	<title>Some special properties of arrays</title>
	<programlisting>&ex67;</programlisting>
      </example>

      <para>As seen in the previous example, either
	<command>${array_name[@]}</command> or
	<command>${array_name[*]}</command> refers to
	<emphasis>all</emphasis> the elements of the array.
	Similarly, to get a count of the number of elements in an
	array, use either <command>${#array_name[@]}</command>
	or <command>${#array_name[*]}</command>.
	<command>${#array_name}</command> is the length (number of
	characters) of <command>${array_name[0]}</command>, the first
	element of the array.</para>

      <example id="emptyarray">
	<title>Of empty arrays and empty elements</title>
	<programlisting>&emptyarray;</programlisting>
      </example>

      <para>The relationship of <command>${array_name[@]}</command>
	and <command>${array_name[*]}</command> is analogous to that
	between <link linkend="appref">$@ and $*</link>. This powerful
	array notation has a number of uses.</para>

      <para>
      <programlisting># Copying an array.
array2=( "${array1[@]}" )

# Adding an element to an array.
array=( "${array[@]}" "new element" )
# or
array[${#array[*]}]="new element"

# Thanks, S.C.</programlisting>
      </para>

      <para>--</para>

      <para>Arrays permit deploying old familiar algorithms as shell scripts.
        Whether this is necessarily a good idea is left to the reader to
	decide.</para>

      <example id="bubble">
	<title>An old friend:
             <emphasis>The Bubble Sort</emphasis></title>
	<programlisting>&bubble;</programlisting>
      </example>
      
      <para>--</para>

      <para>Arrays enable implementing a shell script version of the <emphasis>Sieve of
	Erastosthenes</emphasis>. Of course, a resource-intensive application of this
	nature should really be written in a compiled language, such as C. It
	runs excruciatingly slowly as a script.</para>

      <example id="ex68">
	<title>Complex array application:
             <emphasis>Sieve of Erastosthenes</emphasis></title>
	<programlisting>&ex68;</programlisting>
      </example>

      <para>Compare this array-based prime number generator with with an
        alternative that does not use arrays, <xref
        linkend="primes">.</para>

      <para>--</para>

      <para>Fancy manipulation of array <quote>subscripts</quote> may require
        intermediate variables. For projects involving this, again consider
	using a more powerful programming language, such as Perl or C.</para>

      <example id="qfunction">
	<title>Complex array application:
             <emphasis>Exploring a weird mathematical series</emphasis></title>
	<programlisting>&qfunction;</programlisting>
      </example>

      <para>--</para>

      <para>Bash supports only one-dimensional arrays, however a little
        trickery permits simulating multi-dimensional ones.</para>

      <example id="twodim">
	<title>Simulating a two-dimensional array, then tilting it</title>
	<programlisting>&twodim;</programlisting>
      </example>

  </chapter> <!-- Arrays -->
