  <chapter id="list-cons">
    <title>List Constructs</title>

      <para><anchor id="listconsref"></para>

      <indexterm>
	<primary>&&</primary>
      </indexterm>
      <indexterm>
	<primary>special character</primary>
	<secondary>&&</secondary>
      </indexterm>
      <indexterm>
	<primary>AND</primary>
	<secondary>list</secondary>
      </indexterm>
      <indexterm>
	<primary>||</primary>
      </indexterm>
      <indexterm>
	<primary>special character</primary>
	<secondary>||</secondary>
      </indexterm>
      <indexterm>
	<primary>OR</primary>
	<secondary>list</secondary>
      </indexterm>

      <para>The <quote>and list</quote> and <quote>or list</quote>
	constructs provide a means of processing a number of commands
	consecutively. These can effectively replace complex 
	nested <command>if</command>/<command>then</command> or even
	<command>case</command> statements.</para>
	

      <variablelist id="lcons">
        <title><anchor id="lcons1">Chaining together commands</title>

	<varlistentry>
	  <term>and list</term>
	  <listitem>
	    <para><programlisting>command-1 && command-2 && command-3 && ... command-n</programlisting>
	      Each command executes in turn provided that
	      the previous command has given a return value of
	      <returnvalue>true</returnvalue> (zero). At the first
	      <returnvalue>false</returnvalue> (non-zero) return, the
	      command chain terminates (the first command returning
	      <returnvalue>false</returnvalue> is the last one to
	      execute).</para>

	    <example id="ex64">
	      <title>Using an <quote>and list</quote> to test for command-line arguments</title>
	      <programlisting>&ex64;</programlisting>
	    </example>

	    <example id="andlist2">
	      <title>Another command-line arg test using an <quote>and list</quote></title>
	      <programlisting>&andlist2;</programlisting>
	    </example>

	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>or list</term>
	  <listitem>
	    <para><programlisting>command-1 || command-2 || command-3 || ... command-n</programlisting>
	      Each command executes in turn for as long as the previous
	      command returns <returnvalue>false</returnvalue>. At
	      the first <returnvalue>true</returnvalue> return, the
	      command chain terminates (the first command returning
	      <returnvalue>true</returnvalue> is the last one to
	      execute). This is obviously the inverse of the <quote>and
	      list</quote>.</para>

	    <example id="ex65">
	      <title>Using <quote>or lists</quote> in combination with an <quote>and list</quote></title>
	      <programlisting>&ex65;</programlisting>
	    </example>

	    <caution><para>If the first command in an <quote>or list</quote>
	      returns <returnvalue>true</returnvalue>, it
	      <replaceable>will</replaceable> execute.</para></caution>

	  </listitem>
	</varlistentry>

	</variablelist>

	<important><para>The <link linkend="exitstatusref">exit
	  status</link> of an <userinput>and list</userinput> or an
	  <userinput>or list</userinput> is the exit status of the last
	  command executed.</para></important>

	<para>Clever combinations of <quote>and</quote> and <quote>or</quote>
	lists are possible, but the logic may easily become convoluted and
	require extensive debugging.
	  <programlisting>false && true || echo false    # false

# Same result as
( false && true ) || echo false     # false
# But *not*
false && ( true || echo false )     # (nothing echoed)

# Note left-to-right grouping and evaluation of statements,
# since the logic operators "&&" and "||" have equal precedence.

# It's best to avoid such complexities, unless you know what you're doing.

# Thanks, S.C.</programlisting>
	</para>

	<para>See <xref linkend="daysbetween"> for an illustration of using
	an <userinput>and / or list</userinput> to test variables.</para>
	

  </chapter> <!-- List Constructs -->
