  <chapter id="miscellany">
    <title>Miscellany</title>

    <epigraph>
      <attribution>Tom Duff</attribution>
      <para>Nobody really knows what the Bourne shell's grammar is. Even
        examination of the source code is little help.
      </para>
    </epigraph>

      <sect1 id="intandnonint">
        <title>Interactive and non-interactive shells and scripts</title>
         
	 <para>An <emphasis>interactive</emphasis> shell reads commands from
	   user input on a <filename>tty</filename>. Among other things,
	   such a shell reads startup files on activation, displays
	   a prompt, and enables job control by default. The user can
	   <emphasis>interact</emphasis> with the shell.</para>

	 <para>A shell running a script is always a non-interactive
	   shell. All the same, the script can still access its
	   <filename>tty</filename>. It is even possible to emulate an
	   interactive shell in a script.

	   <programlisting>#!/bin/bash
MY_PROMPT='$ '
while :
do
  echo -n "$MY_PROMPT"
  read line
  eval "$line"
  done

exit 0

# This example script, and much of the above explanation supplied by
# Stephane Chazelas (thanks again).</programlisting></para>

	 <para>Let us consider an <emphasis>interactive</emphasis> script
	   to be one that requires input from the user, usually with
	   <link linkend="readref">read</link> statements (see <xref
	   linkend="ex36">).  <quote>Real life</quote> is actually a
	   bit messier than that.  For now, assume an interactive script
	   is bound to a tty, a script that a user has invoked from the
	   console or an xterm.</para>

	 <para>Init and startup scripts are necessarily non-interactive,
	   since they must run without human intervention. Many
	   administrative and system maintenance scripts are likewise
	   non-interactive.  Unvarying repetitive tasks cry out for
	   automation by non-interactive scripts.</para>

	 <para>Non-interactive scripts can run in the background, but
	   interactive ones hang, waiting for input that never comes.
	   Handle that difficulty by having an <command>expect</command>
	   script or embedded <link linkend="heredocref">here
	   document</link> feed input to an interactive script running
	   as a background job.  In the simplest case, redirect a
	   file to supply input to a <command>read</command> statement
	   (<command>read variable &lt;file</command>).  These particular
	   workarounds make possible general purpose scripts that run
	   in either interactive or non-interactive modes.</para>

	 <para>If a script needs to test whether it is running in an
	   interactive shell, it is simply a matter of finding
	   whether the <emphasis>prompt</emphasis> variable, <link
	   linkend="ps1ref">$PS1</link> is set. (If the user is being
	   prompted for input, then the script needs to display a prompt.)

	   <programlisting>if [ -z $PS1 ] # no prompt?
then
  # non-interactive
  ...
else
  # interactive
  ...
fi</programlisting>

	   <anchor id="iitest">Alternatively, the script can test
	   for the presence of option <quote>i</quote> in the <link
	   linkend="flpref">$-</link> flag.

           <programlisting>case $- in
*i*)    # interactive shell
;;
*)      # non-interactive shell
;;
# (Thanks to "UNIX F.A.Q.", 1993)</programlisting></para>


	 <note><para>Scripts may be forced to run in interactive
	   mode with the <token>-i</token> option or with a
	   <emphasis>#!/bin/bash -i</emphasis> header. Be aware that this
	   can cause erratic script behavior or show error messages even
	   when no error is present.</para></note>


      </sect1> <!-- Interactive and non-interactive scripts -->


    <sect1 id="wrapper">
      <title>Shell Wrappers</title>

      <para>A <quote>wrapper</quote> is a shell script that embeds
	a system command or utility, that saves a set of parameters
	passed to to that command. Wrapping a script around a complex
	command line simplifies invoking it.  This is expecially
	useful with <link linkend="sedref">sed</link> and <link
	linkend="awkref">awk</link>.</para>
      
      <para>A 
	<command>
	  <indexterm>
	    <primary>sed</primary>
	  </indexterm>
	  <indexterm>
	    <primary>script</primary>
	    <secondary>sed</secondary>
	  </indexterm>
	  sed</command> or 
	<command>
	  <indexterm>
	    <primary>awk</primary>
	  </indexterm>
	  <indexterm>
	    <primary>script</primary>
	    <secondary>awk</secondary>
	  </indexterm>
	    awk</command> script would normally be invoked
	    from the command line by a <userinput>sed -e
	    <replaceable>'commands'</replaceable></userinput>
	    or <userinput>awk
	    <replaceable>'commands'</replaceable></userinput>.	Embedding
	    such a script in a Bash script permits calling it more simply,
	    and makes it <quote>reusable</quote>. This also enables
	    combining the functionality of <command>sed</command>
	    and <command>awk</command>, for example <link
	    linkend="piperef">piping</link> the output of a set of
	    <command>sed</command> commands to <command>awk</command>.
	    As a saved executable file, you can then repeatedly invoke it
	    in its original form or modified, without the inconvenience
	    of retyping it on the command line.</para>

      <example id="ex3">
	<title><command>shell wrapper</command></title>
	<programlisting>&ex3;</programlisting>
      </example>
      
      <example id="ex4">
	<title> A slightly more complex <command>shell wrapper</command></title>
	<programlisting>&ex4;</programlisting>
      </example>

      <example id="coltotaler">
	<title> A <command>shell wrapper</command> around an awk script</title>
	<programlisting>&coltotaler;</programlisting>
      </example>


      <para><anchor id="perlref">For those scripts needing a single
	do-it-all tool, a Swiss army knife, there is Perl. Perl
	combines the capabilities of <command>sed</command> and
	<command>awk</command>, and throws in a large subset of
	<command>C</command>, to boot. It is modular and contains support
	for everything ranging from object-oriented programming up to and
	including the kitchen sink. Short Perl scripts lend themselves to
	embedding in shell scripts, and there may even be some substance
	to the claim that Perl can totally replace shell scripting
	(though the author of this document remains skeptical).</para>

      <example id="ex56">
	<title>Perl embedded in a <command>Bash</command> script</title>
	<programlisting>&ex56;</programlisting>
      </example>
     
      <para>It is even possible to combine a Bash script and Perl script
        within the same file. Depending on how the script is invoked, either
	the Bash part or the Perl part will execute.</para>

      <example id="bashandperl">
	<title>Bash and Perl scripts combined</title>
	<programlisting>&bashandperl;</programlisting>
      </example>

	      <para>
	      <screen><prompt>bash$ </prompt><userinput>bash bashandperl.sh</userinput>
<computeroutput>Greetings from the Bash part of the script.</computeroutput>


<prompt>bash$ </prompt><userinput>perl -x bashandperl.sh</userinput>
<computeroutput>Greetings from the Perl part of the script.</computeroutput>
	      </screen>
	      </para>

    </sect1> <!-- Shell wrappers -->


      <sect1 id="testsandcomparisons">
        <title>Tests and Comparisons: Alternatives</title>

	<para>For tests, the <link linkend="dblbrackets">[[    ]]</link>
	  construct may be more appropriate than <userinput>[
	  ]</userinput>. Likewise, arithmetic comparisons might benefit
	  from the <link linkend="dblparens">((    ))</link> construct.

	  <programlisting>a=8

# All of the comparisons below are equivalent.
test "$a" -lt 16 && echo "yes, $a < 16"         # "and list"
/bin/test "$a" -lt 16 && echo "yes, $a < 16" 
[ "$a" -lt 16 ] && echo "yes, $a < 16" 
[[ $a -lt 16 ]] && echo "yes, $a < 16"          # Quoting variables within
(( a < 16 )) && echo "yes, $a < 16"             # [[ ]] and (( )) not necessary.

city="New York"
# Again, all of the comparisons below are equivalent.
test "$city" \< Paris && echo "Yes, Paris is greater than $city"  # Greater ASCII order.
/bin/test "$city" \< Paris && echo "Yes, Paris is greater than $city" 
[ "$city" \< Paris ] && echo "Yes, Paris is greater than $city" 
[[ $city < Paris ]] && echo "Yes, Paris is greater than $city"    # Need not quote $city.

# Thank you, S.C.</programlisting></para>

      </sect1> <!-- Tests and Comparisons: Alternatives -->



      <sect1 id="optimizations">
        <title>Optimizations</title>

	<para>Most shell scripts are quick 'n dirty solutions to non-complex
	  problems. As such, optimizing them for speed is not much of an
	  issue.  Consider the case, though, where a script carries out
	  an important task, does it well, but runs too slowly. Rewriting
	  it in a compiled language may not be a palatable option. The
	  simplest fix would be to rewrite the parts of the script
	  that slow it down. Is it possible to apply principles of code
	  optimization even to a lowly shell script?</para>

	<para>Check the loops in the script. Time consumed by repetitive
	  operations adds up quickly. Use the <link
	  linkend="timref">time</link> and <link
	  linkend="timesref">times</link> tools to profile
	  computation-intensive commands. Consider rewriting time-critical
	  code sections in C, or even in assembler.</para>

	 <para>Try to minimize file i/o. Bash is not particularly efficient at
	   handling files, so consider using more appropriate tools for
	   this within the script, such as awk or Perl.</para>

	 <para>Try to write your scripts in a structured, coherent form, so
	   they can be reorganized and tightened up as necessary. Some of the
	   optimization techniques applicable to high-level languages may work
	   for scripts, but others, such as loop unrolling, are mostly
	   irrelevant. Above all, use common sense.</para>

      </sect1> <!-- Optimizations -->


      <sect1 id="assortedtips">
        <title>Assorted Tips</title>

      <itemizedlist>

	<listitem>

	  <para>To keep a record of which user scripts have run
	    during a particular sesssion or over a number of sessions,
	    add the following lines to each script you want to keep track
	    of. This will keep a continuing file record of the script
	    names and invocation times. </para>

	  <para>
	  <programlisting># Append (>>) following to end of each script tracked.

date>> $SAVE_FILE      #Date and time.
echo $0>> $SAVE_FILE   #Script name.
echo>> $SAVE_FILE      #Blank line as separator.

# Of course, SAVE_FILE defined and exported as environmental variable in ~/.bashrc
# (something like ~/.scripts-run)</programlisting>
          </para>
	</listitem>

	<listitem>
	  <para><anchor id="prependref"></para>
	  <para>The <token>&gt;&gt;</token> operator appends lines to a file.
	    What if you wish to <emphasis>prepend</emphasis> a line to an
	    existing file, that is, to paste it in at the beginning?</para>

	  <para>
	  <programlisting>file=data.txt
title="***This is the title line of data text file***"

echo $title | cat - $file >$file.new
# "cat -" concatenates stdout to $file.
#  End result is
#+ to write a new file with $title appended at *beginning*.</programlisting>
	  </para>

	  <para>Of course, <link linkend="sedref">sed</link> can also do
	    this.</para>


	</listitem>

	<listitem>
	  <para>A shell script may act as an embedded command inside
	    another shell script, a <emphasis>Tcl</emphasis> or
	    <emphasis>wish</emphasis> script, or even a <link
	    linkend="makefileref">Makefile</link>. It can be invoked
	    as as an external shell command in a C program using the
	    <replaceable>system()</replaceable> call, i.e.,
	   <replaceable>system("script_name");</replaceable>.</para>
	</listitem>

	<listitem>
	  <para>Put together files containing your favorite and most useful
	    definitions and functions.	As necessary,
	    <quote>include</quote> one or more of these
	    <quote>library files</quote> in scripts with either the
	    <link linkend="dotref">dot</link> (<command>.</command>)
	    or <link linkend="sourceref">source</link> command.</para>

	  <para>  
            <programlisting># SCRIPT LIBRARY
# ------ -------

# Note:
# No "#!" here.
# No "live code" either.


# Useful variable definitions

ROOT_UID=0             # Root has $UID 0.
E_NOTROOT=101          # Not root user error. 
MAXRETVAL=256          # Maximum (positive) return value of a function.
SUCCESS=0
FAILURE=-1



# Functions

Usage ()               # "Usage:" message.
{
  if [ -z "$1" ]       # No arg passed.
  then
    msg=filename
  else
    msg=$@
  fi

  echo "Usage: `basename $0` "$msg""
}  


Check_if_root ()       # Check if root running script.
{                      # From "ex39.sh" example.
  if [ "$UID" -ne "$ROOT_UID" ]
  then
    echo "Must be root to run this script."
    exit $E_NOTROOT
  fi
}  


CreateTempfileName ()  # Creates a "unique" temp filename.
{                      # From "ex51.sh" example.
  prefix=temp
  suffix=`eval date +%s`
  Tempfilename=$prefix.$suffix
}


isalpha2 ()            # Tests whether *entire string* is alphabetic.
{                      # From "isalpha.sh" example.
  [ $# -eq 1 ] || return $FAILURE

  case $1 in
  *[!a-zA-Z]*|"") return $FAILURE;;
  *) return $SUCCESS;;
  esac                 # Thanks, S.C.
}


abs ()                           # Absolute value.
{                                # Caution: Max return value = 256.
  E_ARGERR=-999999

  if [ -z "$1" ]                 # Need arg passed.
  then
    return $E_ARGERR             # Obvious error value returned.
  fi

  if [ "$1" -ge 0 ]              # If non-negative,
  then                           #
    absval=$1                    # stays as-is.
  else                           # Otherwise,
    let "absval = (( 0 - $1 ))"  # change sign.
  fi  

  return $absval
}</programlisting>
          </para>

	</listitem>

	<listitem>
	  <para>Use special-purpose comment headers to increase clarity
	    and legibility in scripts.</para>
	  <para><programlisting>## Caution.
rm -rf *.zzy   ##  The "-rf" options to "rm" are very dangerous,
               ##+ especially with wildcards.

#+ Line continuation.
#  This is line 1
#+ of a multi-line comment,
#+ and this is the final line.

#* Note.

#o List item.

#> Another point of view.
while [ "$var1" != "end" ]    #> while test "$var1" != "end"</programlisting></para>
	
	</listitem>
	
	<listitem>
	  <para>Using the <link linkend="xstatvarref">$? exit status
	    variable</link>, a script may test if a parameter contains
	    only digits, so it can be treated as an integer.</para>

	  <para>  
	    <programlisting>#!/bin/bash

SUCCESS=0
E_BADINPUT=65

test "$1" -ne 0 -o "$1" -eq 0 2>/dev/null
# An integer is either equal to 0 or not equal to 0.
# 2>/dev/null suppresses error message.

if [ $? -ne "$SUCCESS" ]
then
  echo "Usage: `basename $0` integer-input"
  exit $E_BADINPUT
fi

let "sum = $1 + 25"             # Would give error if $1 not integer.
echo "Sum = $sum"

# Any variable, not just a command line parameter, can be tested this way.

exit 0</programlisting>
          </para>
	</listitem>


        <listitem>
	  <para>Using the double parentheses construct, it is possible
	    to use C-like syntax for setting and incrementing variables
	    and in <link linkend="forloopref1">for</link> and <link
	    linkend="whileloopref">while</link> loops.	See <xref
	    linkend="forloopc"> and <xref linkend="whloopc">.</para>
	</listitem>

	<listitem>
	  <para>The <link linkend="runpartsref">run-parts</link>
	    command is handy for running a set of command
	    scripts in sequence, particularly in combination
	    with <link linkend="cronref">cron</link> or <link
	    linkend="atref">at</link>.</para>
	</listitem>   

	<listitem>
	  <para>It would be nice to be able to invoke X-Windows widgets
	    from a shell script. There happen to exist
	    several packages that purport to do so, namely
	    <emphasis>Xscript</emphasis>, <emphasis>Xmenu</emphasis>,
	    and <emphasis>widtools</emphasis>.	The first two of
	    these no longer seem to be maintained.  Fortunately, it is
	    still possible to obtain <emphasis>widtools</emphasis> <ulink
	    url="http://www.batse.msfc.nasa.gov/~mallozzi/home/software/xforms/src/widtools-2.0.tgz">here</ulink>.
	    </para>

	  <caution><para>The <emphasis>widtools</emphasis> (widget tools)
	    package requires the <emphasis>XForms</emphasis> library to
	    be installed. Additionally, the <link
	    linkend="makefileref">Makefile</link> needs some judicious
	    editing before the package will build on a typical Linux
	    system. Finally, three of the six widgets offered do not work
	    (and, in fact, segfault).</para></caution>


	  <para>For more effective scripting with widgets, try
	    <emphasis>Tk</emphasis> or <emphasis>wish</emphasis>
	    (<emphasis>Tcl</emphasis> derivatives),
	    <emphasis>PerlTk</emphasis> (Perl with Tk extensions),
	    <emphasis>tksh</emphasis> (ksh with Tk extensions),
	    <emphasis>XForms4Perl</emphasis> (Perl with XForms
	    extensions), <emphasis>Gtk-Perl</emphasis> (Perl with Gtk
	    extensions), or <emphasis>PyQt</emphasis> (Python with
	    Qt extensions).</para>

	  </listitem>


      </itemizedlist>

      </sect1> <!-- Assorted Tips -->

      <sect1 id="oddities">
        <title>Oddities</title>

	<para>Can a script <link linkend="recursionref">recursively</link>
	  call itself? Indeed.</para>

	    <example id="recurse">
	      <title>A script that recursively calls itself</title>
	      <programlisting>&recurse;</programlisting>
	    </example>

	<caution><para>Too many levels of recursion can exhaust the
	  script's stack space, causing a segfault.</para></caution>

      </sect1> <!-- Oddities -->


      <sect1 id="portabilityissues">
        <title>Portability Issues</title>

	<para>This book deals specifically with Bash scripting on
	  a GNU/Linux system. All the same, users of <command>sh</command>
	  and <command>ksh</command> will find much of value here.</para>

	<para>As it happens, many of the various shells and scripting
	  languages seem to be converging toward the POSIX 1003.2
	  standard. Invoking Bash with the <option>--posix</option>
	  option or inserting a <command>set -o posix</command> at the
	  head of a script causes Bash to conform very closely to this
	  standard. Even lacking this measure, most Bash scripts will run
	  as-is under <command>ksh</command>, and vice-versa, since
	  Chet Ramey has been busily porting <command>ksh</command>
	  features to the latest versions of Bash.</para>

	<para>On a commercial UNIX machine, scripts using GNU-specific
	  features of standard commands may not work. This has become
	  less of a problem in the last few years, as the GNU utilities
	  have pretty much displaced their proprietary counterparts even
	  on <quote>big-iron</quote> UNIX. Caldera's recent release of
	  the source to many of the original UNIX utilities will only
	  accelerate the trend.</para>

      </sect1> <!-- Portability Issues -->

  </chapter> <!-- Miscellany -->
