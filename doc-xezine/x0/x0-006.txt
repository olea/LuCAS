
-=|=======================[ x-eZine #0 / Art. 006 ]=======================|=-
-=|======================[ Redes: Nivel de enlace. ]======================|=-
-=|====================[ By c|-|uKy <chuky@x0und.net> ]===================|=-

Indice del Documento:

 1.- Introduccion del Documento:

 2.- Introducion a Internet:
 
 3.- Que es la interfaz de bucle de retorno ?
 
 4.- Que es TCP/IP ?
  
  4.1.- Capa de Enlace y sus Protocolos:
   
   4.1.1.- PPP ( Point-to-Point Protocol ):
   
   4.1.2.- Ethernet:
   
   4.1.3.- PPPoE ( Point-to-Point Protocol Over Ethernet ):
   
   4.1.4.- ARP ( Advanced Routing Protocol ):
   
   4.1.5.- RARP ( Reverse Advanced Routing Protocol ):
   
   4.1.6.- MTU ( Maxim Transfer Unit ):
 
 5.- Hasta la Proxima:


1.- Introduccion al Documento:

  Hola, muy buenas soy c|-|uKy y hace  poco que escribo atriculos, si escribo
mal, faltas de ortografia,  me explico  mal... TODO lo malo que veais es SOLO
mi culpa, en contra  TODO  lo  BUENO  que  veas  esta dedicado a x-ezine, por
apoyarme y a 7a69ezine, por  darme  una  oportunidad  para escribir mi primer
articulo. Gracias a todos/as, algun  dia os lo devolvere :)

 Bueno, ya he saludado a todos y si  me dejo a alguien que se de por saludado
vamos a comentar de que va esto.  Este  articulo  intentara explicar lo mejor
posible "Como funciona Internet", bastante por encima, ya que podria escribir
libros sobre esto. La  informacion  sera  facilitado  por  varios  articulos, 
llamemosles "fasciculos", para hacernos una idea. Empezaremos por explicar lo
mas esencial, TCP/IP y mas adelante explicaremos IP, ARP, RARP... etc. Espero
que os guste el panorama. Sin  mas  preambulos empezamos a explicar de que va
todo esto, un saludo. :)

2.- Introducion a Internet:

Bien todos/as sabemos que es Internet, la respuesta menos comprometida seria:
marcamos y podemos ver webs, si aun marcais... Pero la verdad que esa defini-
cion es un poco cutre para  nuestro  fin. Internet se compone por millones de
maquinas, entiendase maquinas  como  PC's,  que  estan  conectadas entre si y
crean lo que llaman "La Red". Expliquemos un poco de historia, que ya va bien
Internet en el fondo, como ya hemos  comentando, consiste en que dos maquinas
establezcan una comunicacion, que  hablen  entre ellas. Al principio de todo,
cuando no existia un estandar, como ahora, para que una maquina X hablara con
Y, si estas eran  diferentes  "marcas"  el  programador de X o de Y tenia que
escribir otro programa para que  se  pudiese establecer la comunicacion, como
cuando Europa empezo a crear  las  vias  para  el tren que cada pais o region
construia un ancho de via que le  parecia, pues lo mismo aplicado a esa comu-
nicacion.

En los primeros  intentos  de  establecer  la  comunicacion,  se crearon unos
protocolos patentados que  permitian  hablar  una  maquina  X  con una X, por
ejemplo una IBM con una IBM, pero no  una  IBM con una CLONICA. un ejemplo de
estos protocolos puede ser UUCP  (Unix to Unix Copy Program), es un protocolo
monolitico que solo puede hablar con una maquina que sepa interpretar UUCP. 

  Avanzamos un poco mas adelante y nos encontramos ya con una cosa totalmente
diferente. Se crea un protocolo basado en Capas, cada capa esta compuesta por
varios protocolos mas.El funcionamiento es pasar la informacion verticalmente
dentro de la pila (ahora hacemos un ascii-art), un ejemplo muy tipico y claro
puede ser TCP/IP, que  contiene XNS  ( eXtensible Name Server ), SNA ( System 
Network Arquitecture ) de IBM. 
                            __________________
   Capa de Aplicacion ---> [__________________]
                            __________________
   Capa de Transporte ---> [__________________]
                            __________________
   Capa de Red ----------> [__________________]
                            __________________
   Capa de Enlace -------> [__________________]
                                                      ____
Mis dibujos no son una  maravilla,  pero  bueno  cada [____] se supone que es
una capa y tal... ponerle imaginacion si no lo veis.

   Bueno pues hasta  aqui  una  breve  puesta  a  punto, para situarnos en la 
 historia y en el articulo. Ahora empieza lo bueno :)

3.- Que es la interfaz de bucle de retorno ?

    La Interfaz de  Retorno es  aquello  que  todos vemos pero que nadie sabe
para que sirve a nos  er que  lo  haya  buscado. Muy bien pues la Interfaz de
Retorno de Bucle es esto:

root@byrOn:~# ifconfig lo
lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:234 errors:0 dropped:0 overruns:0 frame:0
          TX packets:234 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:12040 (11.7 KiB)  TX bytes:12040 (11.7 KiB)

Sirve principalmente para poder hacer posible conexiones tipo
cliente-servidor dentro de una misma maquina, como por ejemplo las X, mirar:

chuky      881  0.0  0.4  2312  876 tty11    T    Mar26   0:00 /bin/sh /usr/bin/X11/startx
chuky      888  0.0  0.2  2224  536 tty11    T    Mar26   0:00 xinit /home/chuky/.xinitrc -- /usr/X11R6/lib/X11/xinit/xserverrc
root       889  0.0  8.2 33872 15732 ?       S<   Mar26   0:39 /usr/bin/X11/X -dpi 100 -nolisten tcp

Esto ayuda a evitar  trafico  en la  Red Local e incluso permite que este tipo
de aplicaciones  funcionen sin  que  tenga que haber una red fisica con cables
y demas. Bueno espero que  lo  hayais  entendido,  no se si aprecias realmente
lo que comporta esto, pero es un gran invento. 

4.- Que es TCP/IP ?

  TCP/IP viene a significar Transfer  Control Protocol ( Protocolo de Control
de Transferencia ) e IP  que  es  Internet  Protocol  ( Protocolo Internet ).
TCP/IP no es un unico  protocolo, si  no el  contrario, TCP y separado IP, lo
que pasa que siempre  actuan  juntos.  Cuando  establecemos  una conexion por
ejemplo con www.polarhome.com/~x-ezine/  contactamos  mediante TCP a esa web,
para transportar los  paquetes  con  informacion  que solicitamos al servidor
Apache, junto por  supuesto  las  capas  que  más adelante explicaremos y los
protocolos que usan cada capa. Para este tipo de conexion usamos el protocolo
IP junto a TCP. Una explicacion  bastante  sencilla de una conexion TPC/IP la
podemos explicar en este dibujo, luego lo comentamos:

 1.- Host X    ---------- SYN -------->   Host http://www.polarhome.com/~x-ezine/
 2.- Host X    <-------SYN/ACK+1 ------   Host http://www.polarhome.com/~x-ezine/
 3.- Host X    -------- ACK+1 -------->   Host http://www.polarhome.com/~x-ezine/
 
  -> SYN = Establece el numero de secuencia inicial del Host. Este bit solo se
           establece durante el principio de la conexion.
  -> ACK = El numero de acuso de recibo, el cual contiene un valor valido para
           establecer la conexion.

Estos dos son los que podemos ver en este comienzo de conexion, pero hay algu-
nos indicadores mas, los expongo aqui:
 
  -> URG  = Este segmento contiene datos urgentes.
  -> PUSH = Este otro solicita una manipulacion del paquete mucho mas rapida.
  -> RST  = Solicita una finalizacion de la conexion porque el proceso local  
            se esta cerrando o se ha cerrado.
  -> FIN  = Indica la finalizacion de la conexion de forma normal.
  
Un ejemplo mas o menos normal seria este... aunque no pongamos todos pero al
menos cerramos la conexion normalmente:

 1.- Host X    ---------- SYN -------->   Host http://www.polarhome.com/~x-ezine/
 2.- Host X    <------ SYN/ACK+1 ------   Host http://www.polarhome.com/~x-ezine/
 3.- Host X    -------- ACK+1 -------->   Host http://www.polarhome.com/~x-ezine/
 4.- Host X    <----  ESTABLISHED ---->   Host http://www.polarhome.com/~x-ezine/
 5.- Host X    <--- Envio de Datos --->   Host http://www.polarhome.com/~x-ezine/
 6.- Host X    ---------- FIN -------->   Host http://www.polarhome.com/~x-ezine/
    
Bueno mas o menos, seria  asi,  podeis  ver  en  que  paso esta la conexion si
haceis un netstat en vuestra  consola  o en DOS, que conste que NO apoyo a M$,
pero si estas usandolo... pues borralo  y  esas cosas :). Si mirais el netstat
os tendra que salir una cosa asi, mas o menos :

 root@byrOn:~# netstat
 Active Internet connections (w/o servers)
 Proto Recv-Q Send-Q Local Address           Foreign Address         State
 tcp        0      0 193-153-123-127.uc:1070 213.4.131.1:7171        ESTABLISHED
 
 Bueno despues de estas  aclaraciones,  comentemos el ejemplo mas largo que he
puesto, el que se finaliza  la  sesion  con  FIN  de  manera normal, el primer
caso solo era el Inicio de Sesion, creo mas oportuno comentar todo.
  
  - Triple HandShake ( Triple Apreton de Manos; 1, 2 y 3 ):
  
     · Comienza cuando el Host X envia un datagrama al Host 
       http://www.polarhome.com/~x-ezine/  ( Servidor ),  este datagrama tiene
       en su interior el  indicador  SYN  y  el  valor  inicial  del numero de
       secuencia del cliente. 
	
     · En el Segundo paso el Servidor  envia  un datagrama al cliente, en este
       momento estan establecidos tanto el SYN como el ACK, se acusa el recibo
       del numero de  la  secuencia  del  cliente  y se establece el numero de
       secuencia del Servidor y sumandole 1.
       
     · El Tercer paso se dirige del client al servidor y se envia un datagrama
       ACK acusando el numero de secuencia del Servidor sumandole a este acuso
       de recibo 1.
       
 - ESTABLISHED y Envio de Datos ( 4 y 5 ):
 
     · Ahora si el Host X ha  enviado  un  datagrama  ACK  valido en el tercer
       paso la conexion se establece, si no lo hace, se crea un RST, ya que el
       Servidor no recibe el  numero  del  ACK esperado y por lo tanto valido.
       Nosotros contaremos con que si que se ha establecido la conexion. Ahora
       es cuando podemos enviar y  recibir  datos,  por ejemplo podemos ver la
       web o bajarnos un mp3 o cualquier cosa que el server nos pueda ofrecer.
       
 - FIN ( 6 ):
 
     · En este ultimo paso se cierra  la conexion, puede ser cualquiera de las
       dos partes quien envie el Datagrama FIN, haremos que lo envia el Host X
       por que ya ha acabado de  ver  la web y quiere cerrar la conexion, pues
       envia un datagrama FIN y cierra la conexion junto al Servidor.
	
Cada conexion que realizamos  con  cualquier  Host implica tener un numero de
secuencia distinto, por lo tanto un  ACK  diferente, aunque conectemos con la
misma web 2 segundos despues, ya habra canviado. 
 
                      CLOSED ------\------------------ \
                        |          |                   |
                        |          |                   |
     		      LISTEN       |                   |
		      /   \        |                   |
	            /       \      |                   |
	          /           \    |                   |
	     SYN_RCVD       SYN_SENT ----------------/ |
	          \           /  \                     |
	            \       /      \                   |
	              \	  /          \                 |
		    ESTABLISHED        \               |
		        |                \             |   
		        |             CLOSE_WAIT       |
	                |	           |           |
		    FIN_WAIT_1             |           |
		    /   |    \         LAST_ACK -----/ |
		  /     |      \                       |
	        /       |     CLOSING                  |
	      /         |       |                      |
	    /           |       |                      |
	FIN_WAIT_2 --------- TIME_WAIT --------------- /
  
  Este pedazo de esquema  que  veis  arriba que espero que entendais, por que
estuve  20  minutos  haciendolo...  es  un  esquema  de  todas  las poisibles
opciones que hay cuando  intentamos  conectar  con cualquier Host, el grafico
va de CLOSED  hacia  abajo,  por  lo  tanto  las  lineas  siguen un orden, la
inclinacion de algunas indican la direccion que toma el/los paquetes.

  Espero que esta pequeña introduccion os haya metido un poco mas en el tema,
no es muy extensa, lo siento, si  nos  expandimos en todo podemos escribir un
libro y no es plan :)

4.1.- Capa de Enlace y sus Protocolos:

   La Capa de Enlace, que otros pueden llamar planta o seccion o como quieras
llamarle, yo prefiero capa ya que es mas entendible.. Bueno la Capa de Enlace
proporciona a los protocolos de  esta  capa  los medios a las maquinas, PC's,
para que se puedan comunicar entre si  cuando hay un enlace fisico comun, por
ejemplo la linea telefonica o una LAN, Local Area Network ( Red de Area Local
) que se comunica la maquina 1 con la 2 y estas a la vez tienen un enlace PPP 
dedicado hacia la maquina 3:

      Maquina 1 \
         |        \
         | LAN      > - - -  PPP - - - Maquina 3
         |        /
      Maquina 2 /

La capa Superior a esta ( que proximamente veremos )  depende de esta, ya que
si no, no se puede  establecer  conexion  y  no  encuentra  al Host con quien
contactar.

4.1.1.- PPP ( Point-to-Point Protocol ):

  PPP viene a ser Point-to-Point Protocolo ( Protocolo de Punto-a-Punto ), la
conexion que aun todavia algunos, como yo, establecemos con EresMas o Timofi-
nica por ejemplo con el modem de 56ks. Antes  de PPP existia SLIP que viene a
ser Serial Line IP ( IP de Linea en Serie ),  pero PPP lo suplanto por varias
razones, como por ejempo estas:
   
   - SLIP no ofrece ningun mecanismo para transferir ningun protocolo a parte
     de IP.
     
   - SLIP no tiene un mecanismo de comprobacion de errores dejando el trafico
     abierto a la corrupcion debido a los problemas de la linea telefonica.
     
   - SLIP no posee ningun mecanismo para anunciar direcciones IP, con lo cual
     debemos saber la IP de cada lado, la  nuestra y la del Servidor antes de
     empezar a enviar paquetes.
     
Ahora explicaremos un poco el  proocolo  PPP  basandonos, por supuesto, en un
Sistema GNU/Linux en ningun  caso  nos referimos al PPP de Windoze, ya que no
suelo usarlo  mucho. Lo  haremos  algo  superficial  por  que  si lo queremos 
explicar enterono podemos hacer otro libro casi...

   PPP proporciona un encapsulamiento de datos ke mas tarde podra transportar
sobre una erd multi-protocolo que estan unidas entre si  por enlaces PPP. Los
marcos de PPP tienen un encabezamiento de 5 bytes hasta 1500 bytes de datos y
despues un trailer de 3 bytes.Este encabeazamiento siempre tiene un indicador
de inicio de 1 byte, que es siempre  0x7e,  un cammpo de direccion de 1 byte,
siempre 0xff, un campo  de  control  de  1  byte,  siempre 0x03 y un campo de
protocolo de 2 bytes, todos los  valores  del  campo  de protocolo han de ser
impares.

4.1.2.- Ethernet:

   Me gustaria aclarar un tema antes  de empezar a hablar de Ethernet. Queria
decir que aunque todo  dios  se  imagine  o  piense  que  Ethernet es un solo
protocolo, pues que sepan que se  equivocan,  porque son 2 los protocolos que
lo forman. El ams normal de los  dos  es  Ethernet  II pero existe tambien el
Ethernet estilo  802.3  IEEE,  es  menos  utilizado  pero  existe. Hecha esta
aclaracion continuo con el documento. 

   Os lo explicare desde la base  de  Ethernet  II,  que  es  lo mas usado, y
señalare donde difiere de Ethernet estilo  802.3 IEEE. Todo esto fue diseñado
por DEC, Intel y Xerox en 1982,  ya les  podeis dar las gracias. Ethernet usa
un Bus compartido, tanto fisico o logico,  para la comunicacion y controla el
acceso mediante  "Acceso  Multiple  con  Sentido  Portador  con  Deteccion de
Colision" ( CSMA/CD ). Esto viene a significar en nuestro lenguaje que lo que
hace Ethernet es compartir con  todos  los hosts de una LAN un dispositivo de
comunicacion multiple, acceso multiple, cuando un host tiene trafico de datos
para enviar espera a una  paertura  ( sentido portador )  y despues intenta y
envia todo loq ue tenga que enviar, entonces si mas de un host intenta enviar
datos a la misma vez se produce una  colision  de datos y ambos hosts esperan
un tiempo que no esta determinado  para volver  a enviar los datos que tienen
que enviar, el tiempo de espera es  aleatorio  para evitar una nuva colision.
Un ejemplo bastante claro es cuando esta hablando por el mobil y la cobertura
falla un poco entonces hablais los dos a la vez y os callais un tiempo x para
poder escuchar al otro.

   Los paquetes de Ethernet esta compuestos por un encabezamiento de 14 bytes
algo mas que PPP, un campo de datos  de 46 a 1500 bytes y una Comprobacion de
Redudancia Cicica ( CRC ) de 4 bytes. Los primeros 6 bytes del encabezamiento
forman la direccion  Ethernet,  llamada  MAC  o  direccion de tu maquina, del
sistema de destino. Los segundos 6  bytes  corresponden a la direccion MAC de
origen y los ultimos 2 bytes los forman el campo Tipo ( en Ethernet 802.3 los
bytes 13 y 14 son un campo  de  Longitud.  y  exige que los paquetes de 802.3
lleven informacion de codigo de tipo d otro encabezamiento dentro de su campo
de datos ). Un ejemplo de lo mas usado:

     Codigo de Tipo                  Tipo de Carga Util
       0x0800                              IPv4
       0x86DD                              IPv6
       0x0806                              ARP
       0x8035                              RARP
       0x809B                              AppleTalk
       
   Como hay una  longitud  minima  de  46  bytes  para  el  campo de datos de
Ethernet, puede que los datos  necesiten  relleno,  que son bytes adicionales
que su utilidad  es  rellenar  hasta  46  bytes  que es el tamaño minimo. Los
paquetes de menos de 64 bytes, 14 bytes  de encabezamiento, 46 bytes de datos
y 4 bytes de trailer, tienen nombre propio  que es alfeñiques y se ignoran ya
que reducen tu ancho de banda y  no  sirven,  en cambio los paquetes normales
digamos, de mas de 1518 byes, 14  bytes de encabezamiento 1500 bytes de datos
y 4 bytes de CRC, se llaman  gigantes  y  tambien se ignoran. Las direcciones
MAC estan formadas de dos secciones.  Los primeros 3 bytes componen la ID del
distribuidor, los segundos 3 byes  componen  la ID unica de la tarjeta ( esta
direccion MAC es posible cambiarla  en  sistemas como Linux pero puede darnos
muchos y obsrtusos problemas, no  te  lo  recomiendo si no sabes lo que haces
). Es bastante importante que  recuerdes que un paquete aunque este dirgido a
un host especifico NO es privado,  puesto  que todos los hosts de un segmento
determinado reciben todos los paketes enviados al otro host, repito, si pasan
por ese segmento. Ahora pensaras mierda si estoy en una LAN me estan snifando
los paquetes de la ostia  y  ademas  por  defecto.. bueno pues si pero no, me
explico; cada hosts de ese segmento recibe todos los paquetes que van al otro 
host, pero solo procesa y le da  importancia los que van dirigidos a el y los 
que van a otros hosts lo ignora. Un ejemplo:

Ethernet A                     Ehternet B                        Ethernet C
Paquete A-C ----------------------------------------------------> Paquete A-C
 Enviado                        Ignorado                           Recibido
 
  Bueno no es un gran dibujo pero no  se, mas o menos ya hace. Ladireccion de
Destino de los pquetes Ethernet se coloca al principio para poder administrar
mejor todos los paquetes que llegan a  un host y enviarlos a otro. Esto marca
una gran diferencia entre PPP y Ethernet como podreis observar. PPP transmite
de tal manera que solo ve el Origen  y  el  Final de los envios y Ethernet en
cambio es un medio de difusion, todo lo que esta en una LAN oira cada porcion
de lo que envie un host.  

4.1.3.- PPPoE ( Point-to-Point Protocol Over Ethernet ):

   PPPoE viene a significar  eso  que  va  entre  parentesis,  Point-to-Point
Protocol Over Ethernet. Este  tipo  no es bastante comun que digamos y se usa
basicamente para encapsular  paquetes  PPP  en  Ethernet y se usa normalmente
sobre lineas DSL  ( Digital Subscriber Line ).  El  protocolo PPPoE separa el
trafico de dos  grandes  clases,  cada  uno  de  ellos  enviado  en una etapa
diferente ( luego lo veremos ).  La sesion empieza cuando se inicia una etapa 
de descubrimiento y pasa a una  etapa de sesion PPP. La ID de cada una de las
etapas es diferente, en la etapa  de  descubrimiento es 0x8863 y la de inicio
de sesion PPP es 0x8864, en  cambio  el  encabezamiento  siempre es el mismo,
cuidado con esto que es importante. El  encabezamiento de PPPoE es de 6 bytes
y dentro de estos 6 bytes  hay  cinco  campos.  Los primeros 4 bits son de el
campo de Version y se  establece  en  0x1,  los segundos 4 bits pertenecen al
campo de Tipo y se establecen  en  0x1,  el siguiente es de 1 byte de largo y
esta formado por  el  campo  de  Codigo  ( este  se define diferente segun la
etapa en que este situado  si  la  de  descubrimiento  o  en  la de inicio de
sesion de PPP ). Ahora ya toca  el  campo de ID, que esta formado por 2 bytes
y el ultimo campo es el de Longitud que esta formado por 2 bytes y especifica
la carga util de PPPoE, dejando de la lado los encabezamientos tanto de PPPoE
como de Ethernet.

  Bueno, vamos a ver las diferentes etapas que comentabamos antes para
aclararnos un poco de como va todo este tinglao:
   
   1.- Etapa de descubrimiento:
   2.- Iniciacion del descubrimiento activo de PPPoE.
   3.- Oferta de descubrimiento de PPPoE.
   4.- Solicitud de descubrimiento activo de PPPoE.
   5.- Confirmacion de sesion de descubrimiento activo de PPPoE.
   6.- Terminacion de descubrimiento activo de PPPoE.
   7.- Etapa de sesion PPP.
   
  Antes de expicar  las  diferentes  etapas,  me  gustaria deciros que en una
sesion de PPPoE hay dos  hosts  implicados,  supongo  que lo habiais deducido
pero por si als moscas. El host  de  inicio  se  llama  Cliente y nuestro ISP
seria el Concentrador de Acceso,  vamos  como  todo  el mundo sabe :) Vamos a
ello, que me estoy enrollando demasiado... :

1.- Etapa de descubrimiento:  durante esta etapa la carga util de PPPoE lleva
consigo una  serie  de  tags  que  estan  definidos.  Un  tag  esta compuesto
principalemente por tres campos. El  primer  campo representa el tipo de tag,
tiene un tamaño de 2 bytes,  los  segundos  2  bytes  representan el campo de
longitud del tag y el tercer campo  representa el valor del tag y su longitud
es variable; pondremos unos ejemplos  para que veais como va el rollo este de
los tags:

Tag       Nombre del Tag                    Significado y Valor

0x201     Error de Nombre de Servicio       Este tag  indica lo  que muy bien
                                            has leido antes que  hay un error 
					    en el Nombre de Servicio. 
				
0x0000    Fin de Lista                      Este tag  indica   que no hay mas
                                            indicadores en   el paquete. Este
					    tag  es  opcional,  no  tiene  un
					    valor fijo.
			      
0x0105    Nombre del Concentrador           Este  tag  se   puede  usar  para
          de Acceso ( ISP )                 pasar  informacion patentada  del
	                                    distribuidor.  El  contenido  del 
					    campo de Valor  que  comienza con
					    un ID de distribuidor  de 4 bytes
					    que es 0x00 seguido de la porcion
					    de la porcion del distribuidor de
					    3 bytes de  la  direccion  MAC de
					    Ethernet. No es recomendable usar
					    este tag y puede ser ignorado con
					    tranquilidad.
					    
2.- Iniciacion  del  descubrimiento  activo  de  PPPoE:  esta estapa comienza
cuando el cliente envia el  primer  paquete  de Iniciacion del descubrimiento 
activo de PPPoE a la direccion  de  difusion  de Ethernet. El campo de Codigo
se establece  en  0x09  y  el  ID  de  la  sesion  sigue  siendo  0x0000,  lo 
imprescindible de esto es  que  el  paquete  deve  llevar un tag de nombre de
servicio, solamente puede llevar este.

3.- Oferta de descubrimiento de  PPPoE: la  oferta de descubrimiento de PPPoE 
la puede realizar cualquier server o  concentrador de acceso de una red local
o LAN, todos todos no, pero el que  de  este tipo de servicio si. El campo de
Codigo se establece en 0x09 y la  ID  de  sesion se mantiene, en 0x0000. Este
tipo de servicio lleva un tag que le  distingue de los demas, lleva un nombre
de servicio con el paquete  iniciacion  del  descubrimiento activo de PPPoE y
otro tag de nombre AC que contenga su propio y unico nombre. A parte de todos
estos tags, tambien puede llevar todos los tags necesarios que indique lo que
el cliente solicita.

4.- Solicitud de descubrimiento activo de  PPPoE: este paso se produce cuando
el cliente ha recibido uno o varios  paquetes  de oferta de descubrimiento de 
PPPoE y se dispone a selecionar uno y respondrele con un paquete de solicitud 
de descubrimiento activo de  PPPoE.  La I de la sesion continua manteniendose
en 0x0000 y el campo del Codigo en 0x19. El paquete de solicitud de descubri-
miento activo de PPPoE debe  contener  un  tag  que indique lo que el client
e desea aparte otros varios tags.

5.- Confirmacion de sesion  de  descubrimiento  activo de PPPoE: ahoare viene
cuando el servidor responde al cliente que ha enviado un paquete de solicitud
de descubrimiento activo de PPPoE con un paquete de confirmacion de sesion de 
descubrimiento activo de PPPoE. Ahora  la  ID de la sesion cambia de 0x0000 y
pasa a tener una  longitud  de  2  bytes  que  identifica  a esta sesion como
unica, mientras que el campo  de  Codigo  se establece en 0x65. El paquete de 
confirmacion de sesion  de  descubrimiento  activo  de PPPoE debe contener un
tag que indique el nombre  del  servicio,  si  no puede contener este tipo de
tag del paquete de solicitud de  descubrimiento  activo  de PPPoE la ID de la
sesion se vuelve a establecer en  0x0000,  el paquete puede contener muchos o
pocos tags mas. A partir de ahora  se  he  iniciado la sesion PPPoE y vamos a
empezar a usar ya PPP.

6.- Terminacion de  descubrimiento  activo  de  PPPoE:  este  paso se realiza
cuando queremos cortar  una  conexion  PPPoE.  Se hace enviando un paquete de
terminacion de descubrimiento  activo  de  PPPoE, tanto cliente-servidor como
servidor-cliente. El  campo  de  Codigo  es  de  0xa7 y tiene un ID que es el
mismo que tiene en confirmacion de sesion  de descubrimiento activo de PPPoE.
Este paquete logicamente no tiene  ningun  tag,  pues lo que hace es "denegar
un servicio" o mas bien dicho finalizarlo.

7.- Etapa de sesion PPP: ahora  ya  podemos  enviar  trafico PPP dentro de la
sesion PPPoE. La carga util de  PPPoE  es  un  paquete de PPP, pues es lo que
envia y el campo de Codigo se establece en 0x00 en toda la sesion.

4.1.4.- ARP ( Advanced Routing Protocol ):

   Para hacernos una idea en plan  simple de como funciona ARP podemos pensar
que ARP pregunta: ¿ De  quien  es  la  direccion IP xxx.xxx.xxx.xxx ?, cuando
esta pregunta esta  respuesta  entonces  se  puede establecer una comunacion.
Bueno esto es plan cutre salchichero ahora vamos a verlo un poco mas a fondo.

   ARP necesita dos tipos paquetes:  peticiones  ARP  ( pide la direccion MAC
que corresponde con una direccion  IP )  y respuestas ARP ( dan la correspon-
dencia entre la direccion MAC  y  la  IP ).  Antiguamente,  y supongo que aun
pasara el algun sitio, habia maquinas ke no podian determinar si la direccion
IP que tenian era de una Red Local o no, lo ke hace ARP es llamar a Proxy ARP
que se encarga de esto.  Los  paquetes  ARP  estan  compuestos por un tipo de
hardware de 2 bytes,  un  tipo  de  protocolo  de  2  bytes,  una longitud de
direccion de hardware de 1 byte, una  longitud de direccion de protocolo de 1
byte, un opcode de 2 bytes con  un  valor  de  0001, una direccionde hardware
remitente de longitud  variable,  una  direccion  de  protocolo  remitente de
longitud variables, una direccion de hardware d objetivo de longitud variable
y por ultimo una direccion de protocolode  objetivo de longitud variable. Los
paquetes de respuesta ARP son mas o  menos  parecidos a los anteriores lo que
difiere en qu el valor del opcode es  de  0002  y el campo de la direccion de
hard objetivo se rellena con la direccion MAC que corresponda en cada caso. 

    El uso normal de ARP es para  intentar averiguar la direccion de hardware
de otras maquinas aunque  hay  sistemas  que lo que hacen es " Free ARP ", se
trata de una operacion que  hacen  al  subir  su  tarjeta  Ethernet  a la red
utilizan su misma direccion IP como ARP,  lo  que ayuda esto es a reducir los
conflictos de direcciones  IP.  Veamos  un  ejemplo  de  una salida de ARP en
cualquier sistema operativo Linux ( en mi caso Debian GNU/Linux ):

root@byrOn:~# arp -av
? (192.168.0.4) at 00:50:56:40:00:47 [ether] on eth0
? (192.168.0.1) at 00:20:EA:B3:44:A4 [ether] on eth0
Entries: 2      Skipped: 0      Found: 2

4.1.5.- RARP ( Reverse Advanced Routing Protocol ):

   RARP lo que intenta hacer  es  que la maquina solicitante pueda obtener du
direccion IP dinamicamente. ARP lo  que hace es hacer responsable a cada host
de hacer corresponder su  direccion  IP  con  su  direccion MAC, mientras que
RARP lo que hace  es  corresponder  diferentes  direcciones  IP de diferentes
hosts. Los paquetes de  RARP  estan  considerados dentro del Pack de Ethernet
II del tipo 0800. El opcode  de  RARP es de 3 mientras que las respuestas son
de 4, el resto de paquete  es  muy  parecido al de ARP, aunque no hay opcodes
del tipo " error ",  " no encontrado ";  puesto  que cualquier host de la red
puede responder a la pregunta de RARP. RARP esta en desuso puesto que existen
otro tipo de herramientas mucho  mas  usadas  y completas que la substituyen,
como por ejemplo DHCP o BOOTP. Por ultimo deciros que RARP no es encaminable,
una pena, cada LAN de  maquinas  debe  tener  al menos  un  servidor  de RARP
configurado.

4.1.6.- MTU ( Maxim Transfer Unit ):

   MTU se utiliza en la capa de  Enlace  puesto que cada uno de los protcolos
que la componen tiene una  Unidad  Maxima  de Transferencia. Esto es un tanto
complejo y lo tenemos ke dejar para el proximo numero para poder comprenderlo
bien, ya que cada capa y  protocolo  tiene  su MTU, la estudiamos un poco mas
adelante. De todas  maneras  os  facilito  una  serie  de datos que seguro os
interesan y un ejemplo despues:

        - La MTU de PPP es de 296.
	- La MTU de Ethernet es de 1500.
	- La MTU de Token Ring de 4mbps es de 4464.
	
	
	Maquina 1 --------------- Ethernet ------------------  Maquina 2
	       |                                                   |
	       |------------------- PPP ---------------------------|
	                             |
				     |
				     |
	                          Maquina 3
				  
				  
 Entre la Maquina 1 y 2  tenemos  un  MTU  de  1500,  puesto que estan unidas
entre si por una LAN mediante Ethernet  tansolo, mientras que entre Maquina 1
o 2 hacia Maquina 3  tenemos  una  MTU  de  296  ya  que estan unidas por una
conexion mediante PPP, la MTU es el tamaño maximo d un paquete que explicamos
antes, espero que os acordeis.

5.- Hasta la Proxima:

   Bueno no ha sido muy largo ni muy  bueno, pero es lo que hay... ya lo dije
que yo no me se explicar bien  y  tal,  pero bueno si te ha gustado bien y si
no pue slo siento no soy precisamente un buen escritor. En la proxima entrega
de x-ezine mi articulo sera de la proxima capa:"Protocolos de la Capa de Red"

La Bibliografia basicamente a sido esta:
 
 rfc1661 -> Point-to-Point Protocol
 rfc2516 -> PPPoE Protocol
 rfc826 --> ARP Protocol
 rfc894 --> Standard de Transmision de Datagramas IP a traves de Redes
            Ethernet
 rfc903 --> RARP Protocol 
  
Bueno espero que os haya gustado o por lo menos ke hayais aprendido/entendido
algo, gracias por vuestra paciencia y hasta la proxima.
Recuerdos a b0nk, KaZiS, Ripe,  TODO  #linux_gey, bi0s, scOrpiOnn y como no a
BaCkSiDe y a mi mismo, si eres chica  y quieres ser mi amiga, por favor habla
conmigo. Un Besito a LaPerla. Bueno  y  como  no  a  mi revista y a todos sus
componentes y a Raciel por ser el mas gey. Un Saludo.

cHuKy SeCoND CReW !! for x-ezine mié mar 27 16:29:00 CET 2002 
