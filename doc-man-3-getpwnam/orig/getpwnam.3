.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\"
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 1996-05-27 by Martin Schulze (joey@linux.de)
.\" Modified 2003-11-15 by aeb
.\"
.TH GETPWNAM 3  1996-05-27 "GNU" "Linux Programmer's Manual"
.SH NAME
getpwnam, getpwnam_r, getpwuid, getpwuid_r \- get password file entry
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <pwd.h>
.sp
.BI "struct passwd *getpwnam(const char *" name );
.sp
.BI "struct passwd *getpwuid(uid_t " uid );
.sp
.BI "int getpwnam_r(const char *" name ", struct passwd *" pwbuf ,
.br
.BI "        char *" buf ", size_t " buflen ", struct passwd **" pwbufp );
.sp
.BI "int getpwuid_r(uid_t " uid ", struct passwd *" pwbuf ,
.br
.BI "        char *" buf ", size_t " buflen ", struct passwd **" pwbufp );
.fi
.SH DESCRIPTION
The
.B getpwnam()
function returns a pointer to a structure containing
the broken out fields of a line from
.I /etc/passwd
for the entry that matches the user name
.IR name .
.PP
The
.B getpwuid()
function returns a pointer to a structure containing
the broken out fields of a line from
.I /etc/passwd
for the entry that matches the user uid
.IR uid .
.PP
The
.B getpwnam_r()
and
.B getpwuid_r()
functions find the same information, but store the retrieved passwd structure
in the space pointed to by
.IR pwbuf .
This passwd structure contains pointers to strings, and these strings
are stored in the buffer
.I buf
of size
.IR buflen .
A pointer to the result (in case of success) or NULL (in case no entry
was found or an error occurred) is stored in
.RI * pwbufp .
.PP
The \fIpasswd\fP structure is defined in \fI<pwd.h>\fP as follows:
.sp
.RS
.nf
struct passwd {
      char    *pw_name;      /* user name */
      char    *pw_passwd;    /* user password */
      uid_t   pw_uid;        /* user id */
      gid_t   pw_gid;        /* group id */
      char    *pw_gecos;     /* real name */
      char    *pw_dir;       /* home directory */
      char    *pw_shell;     /* shell program */
};
.fi
.RE
.PP
The maximum needed size for
.I buf
can be found using
.BR sysconf (3)
with the _SC_GETPW_R_SIZE_MAX parameter.
.SH "RETURN VALUE"
The \fBgetpwnam()\fP and \fBgetpwuid()\fP functions return a pointer to
the passwd structure, or NULL if the matching entry is not found or
an error occurs. If an error occurs,
.I errno
is set appropriately. If one wants to check
.I errno
after the call, it should be set to zero before the call.
.LP
The return value may point to static area, and may be overwritten
by subsequent calls to
.BR getpwent() ,
.BR getpwnam() ,
or
.BR getpwuid() .
.LP
The  \fBgetpwnam_r()\fP and \fBgetpwuid_r()\fP functions return
zero on success. In case of error, an error value is returned.
.SH ERRORS
.TP
.BR 0 " or " ENOENT " or " ESRCH " or " EBADF " or " EPERM " or ... "
The given
.I name
or
.I uid
was not found.
.TP
.B EINTR
A signal was caught.
.TP
.B EIO
I/O error.
.TP
.B EMFILE
The maximum number (OPEN_MAX) of files was open already in the calling process.
.TP
.B ENFILE
The maximum number of files was open already in the system.
.TP
.B ENOMEM
Insufficient memory to allocate passwd structure.
.\" This structure is static, allocated 0 or 1 times. No memory leak. (libc45)
.TP
.B ERANGE
Insufficient buffer space supplied.
.SH FILES
.TP
.I /etc/passwd
password database file
.fi
.SH "CONFORMING TO"
SVID 3, BSD 4.3, POSIX 1003.1-2003
.SH NOTES
The formulation given above under "RETURN VALUE" is from POSIX 1003.1-2001.
It does not call "not found" an error, hence does not specify what value
.I errno
might have in this situation. But that makes it impossible to recognize
errors. One might argue that according to POSIX
.I errno
should be left unchanged if an entry is not found. Experiments on various
Unix-like systems shows that lots of different values occur in this
situation: 0, ENOENT, EBADF, ESRCH, EWOULDBLOCK, EPERM and probably others.
.\" more precisely:
.\" AIX 5.1 - gives ESRCH
.\" OSF1 4.0g - gives EWOULDBLOCK
.\" libc, glibc, Irix 6.5 - give ENOENT
.\" FreeBSD 4.8, OpenBSD 3.2, NetBSD 1.6 - give EPERM
.\" SunOS 5.8 - gives EBADF
.\" Tru64 5.1b, HP-UX-11i, SunOS 5.7 - give 0
.SH "SEE ALSO"
.BR endpwent (3),
.BR fgetpwent (3),
.BR getgrnam (3),
.BR getpw (3),
.BR getpwent (3),
.BR putpwent (3),
.BR setpwent (3),
.BR passwd (5)
