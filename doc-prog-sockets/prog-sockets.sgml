<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V3.1//EN">

<!--Este documento fue formateado a mano en emacs por Sebastián Gurin <cancerbero_sgx@users.sourceforge.net>, quien también lo tradujo al español. Él pide, desde ya,  disculpas por errores tanto de formato como de sintáxis-->
<!--Revisión 1 por francisco Javier Fernández Serrador-->
<article lang="es">
  
  <artheader>
    <author>
      <firstname>BracaMan</firstname>
    </author>
    <publisher>
      <publishername>Sebastián Gurin</publishername>
      <address><email>cancerbero_sgx@users.sourceforge.net</email></address> 
    </publisher>
    <publisher>
      <publishername>Francisco Javier Fernández</publishername>
      <address><email>serrador@arrakis.es</email></address>
    </publisher>
   
    <title>Programación Básica de Sockets en Unix para Novatos</title>
    <titleabbrev>Programación Básica de Sockets en Unix para Novatos</titleabbrev>
    
    <revhistory>
      <revision>
        <revnumber>1.0</revnumber>
        <date>1 de Febrero de 2002</date>
        <revremark>Formateado con LaTEX. </revremark>
      </revision>
      <revision>
        <revnumber>2.0</revnumber>
        <date>6 de Febrero de 2002</date>
        <revremark>Formateado con docbook, versión 3.1</revremark>
      </revision>
      <revision>
        <revnumber>2.0.1</revnumber>
	<date>22 de agosto de 2002</date>
	<revremark>Revisión de calidad tldp-es</revremark>
      </revision>
    </revhistory>
  </artheader>

    
  <section id="intro">
    <title>Introducción</title>
    
    <para>
   ¿Estás tratando de aprender programación de sockets en C? ¿O piensas que es una tarea demasiado difícil? Si es así, debes leer este tutorial básico para aprender las ideas y conceptos 
   básicos y así, empezar a trabajar con sockets. Tras leer este tutorial no esperes ser un &ldquo;maestro&rdquo; en la programación de sockets. Sólo lo serás si practicas y lees mucho. 
</para>
  </section>
  
  <section id="sockets-diff">
    
    <title>Diferentes tipos de sockets en Internet</title>
    
    <para>En primer lugar deberé explicar qué es un socket. De un modo muy simple, se puede decir que es una manera de hablar con otra computadora. Para ser más preciso, es una manera de hablar con otras computadoras usando descriptores de ficheros estándar de Unix. En Unix, todas las acciones de entrada y salida son desempeñadas escribiendo o leyendo en uno de estos descriptores de fichero, los cuales son simplemente un número entero, asociado a un fichero abierto que puede ser una conexión de red, un terminal, o cualquier otra cosa<footnote><para>Recuérdese uno de los primeros conceptos que aprendemos al usar UNIX, &ldquo;En un sistema Unix, todo es un fichero&rdquo;. Nota del T.</para></footnote></para>
    
    <para>Ahora bien, sobre los diferentes tipos de sockets en Internet, hay muchos tipos pero sólo se describirán dos de ellos - Sockets de Flujo (<varname>SOCK_STREAM</varname>) y Sockets de Datagramas (<varname>SOCK_DGRAM</varname>). </para>
    
    <para>Y &ldquo;¿cuál es la diferencia entre estos dos tipos?&rdquo;, podrías preguntarte. He aquí la respuesta:</para>
    
    <formalpara><title>Sockets de Flujo</title>
      <para> Están libres de errores: Si por ejemplo, enviáramos por el socket de flujo tres objetos "A, B, C", llegarán al destino en el mismo orden -- "A, B, C". Estos sockets usan <acronym>TCP</acronym> ("Transmission Control Protocol"<footnote><para>Protocolo de Control de Transmisión. Nota del T.</para></footnote>) y es este protocolo el que nos asegura el orden de los objetos durante la transmisión. </para>
    </formalpara>
    
    <formalpara><title>Sockets de Datagramas</title>
      <para>Éstos usan <acronym>UDP</acronym> (&ldquo;User Datagram Protocol&rdquo;<footnote><para>Protocolo de los Datagramas de Usuario. Nota del T. </para></footnote>), y no necesitan de una conexión accesible como los Sockets de Flujo -- se construirá un paquete de datos con información sobre su destino y se  enviará afuera, sin necesidad de una conexión. </para>
    </formalpara>
    
    <para>Mucho más podría explicarse aquí sobre estas dos clases de sockets, pero creo que esto es suficiente como para captar el concepto básico de socket. Entender qué es un socket y algo sobre estos dos tipos de sockets de Internet es un buen comienzo, pero lo más importante será saber cómo trabajar con ellos. Esto se aprenderá en las próximas secciones. </para>
    
  </section>

  <section id="struct">
    <title>Estructuras</title>   
    
    <para>El propósito de esta sección no es enseñar el concepto de <emphasis>estructuras</emphasis> en programación, sino enseñar cómo se usan éstas en la programación de Sockets en C. Si no sabes lo que es una estructura, mi consejo es leer un buen tutorial de C. Por el momento, digamos simplemente que una estructura es un tipo de dato que es un conglomerado, o sea, que puede contener otros tipos de datos, los cuales son agrupados todos juntos en un único tipo definido por el programador. </para>
    
    <para>Las estructuras son usadas en la programación de sockets para almacenar información sobre direcciones. La primera de ellas es <type>struct</type> <structname>sockaddr</structname>, la cual contiene información del socket. </para>
    
    <programlisting>
struct sockaddr 
{ 
   unsigned short sa_family;  /* familia de la dirección */ 
   char sa_data[14];          /* 14 bytes de la dirección del protocolo */  
}; 

    </programlisting>
    
          <para>Pero, existe otra estructura, <type>struct</type> <structname>sockaddr_in</structname>, la cual nos ayuda a hacer referencia a los elementos del socket. </para>
   
    <programlisting>
<![CDATA[
struct sockaddr_in 
{ 
   short int sin_family;        /* Familia de la Dirección              */ 
   unsigned short int sin_port; /* Puerto                               */
   struct in_addr sin_addr;     /* Dirección de Internet                */
   unsigned char sin_zero[8];   /* Del mismo tamaño que struct sockaddr */ 
}; 
]]>
    </programlisting>
    
    <formalpara> <title>Nota</title> 
        <para><structname>sin_zero</structname> puede ser configurada con ceros usando las funciones <function>memset()</function> o <function>bzero()</function> (Ver los ejemplos más abajo). </para>
    </formalpara>
    
    <para>La siguiente estructura no es muy usada pero está definida como una unión. </para>
    
    <para>Como se puede ver en los dos ejemplos de abajo (ver <xref linkend="server-ex"> y <xref linkend="client-ex">), cuando se declara, por ejemplo &ldquo;client&rdquo; para que sea del tipo <structname>sockaddr_in</structname>, luego se hace <varname>client.sin_addr = (...)</varname>. </para>
    
    <para>De todos modos, aquí está la estructura: </para>
    
    <programlisting>
    <![CDATA[
struct in_addr 
{
   unsigned   long s_addr;
};
]]>
</programlisting>

    <para>Finalmente, creo que es mejor hablar sobre la estructura <structname>hostent</structname>. En el ejemplo de Cliente de Flujos (ver <xref linkend="client-ex">), se puede ver cómo se usa esta estructura, con la cual obtenemos información del nodo remoto<footnote><para><emphasis>&ldquo;nodo&rdquo;</emphasis>'' será la traducción del término en inglés ``<emphasis>host</emphasis>'', que se usará a lo largo de este texto. Nota del T.</para></footnote>. </para>
    
    <para>Aquí se puede ver su definición: </para>
    
    <programlisting>
    <![CDATA[
struct hostent 
{   
   char *h_name;                   /* El nombre oficial del nodo.               */
   char **h_aliases;               /* Lista de Alias.                           */
   int h_addrtype;                 /* Tipo de dirección del nodo.               */
   int h_length;                   /* Longitud de la dirección.                 */
   char **h_addr_list;             /* Lista de direcciones del nombre del       */
                                   /* servidor.                                 */
   #define h_addr  h_addr_list[0]  /* Dirección, para la compatibilidad con     */
                                   /* anteriores.                               */
};
]]>
</programlisting>
    
    <para>Esta estructura está definida en el fichero <filename>netdb.h</filename>. </para>
    
    <para>Al principio, es posible que estas estructuras nos confundan mucho. Sin embargo, después de  empezar a escribir algunas líneas de código, y tras ver
los ejemplos que se incluyen en este tutorial, será mucho más fácil entenderlas. Para ver cómo se pueden usar estas estructuras, recomiendo ver los ejemplos de <xref linkend="server-ex"> y <xref linkend="client-ex">.</para> 
    
  </section>
  
  <section id="conv">
    <title>Conversiones</title>
    
    <para>Existen dos tipos de ordenamiento de bytes: <emphasis>bytes más significativos</emphasis>, y <emphasis>bytes menos significativos</emphasis>. Éste es llamado &ldquo;Ordenación de Bytes para Redes&rdquo;<footnote><para>que es la traducción al español de Network Byte Order. El término también es conocido como <emphasis>&ldquo;Big-Endian Byte Order&rdquo;</emphasis>. Tener en cuenta que, si no se habla de Ordenación de Bytes para Redes, se hablará de Ordenación de Bytes para Nodos. Nota del T.</para></footnote>, algunas máquinas utilizan este tipo de ordenación  para guardar sus datos internamente. </para>
    
    <para>Existen dos tipos a los cuales seremos capaces de convertir: <type>short</type> y <type>long</type>
		<footnote><para>los cuales ocupan 2 y 4 bytes de memoria, respectivamente.</para></footnote>. 
		Imaginémonos que se quiere convertir una variable larga de Ordenación de Bytes para Nodos a una de Orden de Bytes para Redes. ¿Qué haríamos? Existe una función llamada <function>htonl()</function> que haría exactamente esta conversión. Las siguientes funciones son análogas a ésta y se encargan de hacer este tipo de conversiones: </para>

    <itemizedlist>
      
      <listitem>
	<para><function>htons()</function> -&gt; ``Nodo a variable corta de Red'' </para>
      </listitem>
      <listitem>
	<para><function>htonl()</function> -&gt; ``Nodo a variable larga de Red'' </para>
      </listitem>
      <listitem>
	<para><function>ntohs()</function> -&gt; ``Red a variable corta de Nodo'' </para>
      </listitem>
      <listitem>
	<para><function>ntohl()</function> -&gt; ``Red a variable larga de Nodo'' </para>
      </listitem>
      
    </itemizedlist>	
    
    <para>Estarás pensando ahora para qué necesitamos todas estas funciones, y el porqué de estos ordenamientos. Bien, cuando se termine de leer este documento todas estas dudas se aclararán (aunque sea un poco). Todo lo que necesitará es leer y practicar mucho. </para>
    <para>Una cosa importante, es que <varname>sin_addr</varname> y <varname>sin_port</varname>, de la estructura <structname>sockaddr_in</structname>, deben ser del tipo Ordenación de Bytes para Redes. Se verá, en los ejemplos, las funciones que aquí se describen para realizar estas conversiones, y a ese punto se entenderán mucho mejor. </para>
    
  </section>
  
  <section id="ip">
    <title>Direcciones IP</title> 
    <para>En <acronym>C</acronym>, existen algunas funciones que nos ayudarán a manipular <emphasis>direcciones IP</emphasis>. En esta sección se hablará de las funciones <function>inet_addr()</function> y <function>inet_ntoa()</function>. </para>
    
    <para>Por un lado, la función <function>inet_addr()</function> convierte una dirección IP en un entero largo sin signo (<type>unsigned long int</type>), por ejemplo: </para>
    <programlisting>		     
(...) 

dest.sin_addr.s_addr = inet_addr("195.65.36.12"); 

(...)

/*Recordar que esto sería así, siempre que tengamos una estructura "dest" 
del tipo sockaddr_in*/

   </programlisting>
    
    <para>Por otro lado, <function>inet_ntoa()</function> convierte a una cadena que contiene una dirección IP en un entero largo. Por ejemplo: </para>
    <programlisting>
		      
(...)

char *ip;

ip=inet_ntoa(dest.sin_addr);

printf("La dirección es: %s\n",ip);

(...)
    </programlisting>
    <para>Se deberá recordar también que la función <function>inet_addr()</function> devuelve la dirección en formato de Ordenación de Bytes para Redes por lo que no necesitaremos llamar a <function>htonl()</function>. </para>
 
	</section>
  
  
  <section id="func">
    <title>Funciones Importantes</title>
    
    <para>En esta sección, (en la cual se nombrarán algunas de las funciones más utilizadas para la programación en <acronym>C</acronym> de sockets), se mostrará la sintaxis de la función, las bibliotecas necesarias a incluir para llamarla, y algunos pequeños comentarios. Además de las que se mencionan aquí, existen muchas funciones más, aunque sólo decidí incluir éstas. Tal vez sean incluidas en una futura versión de este documento<footnote><para>Se puede indagar más sobre éstas y las demás funciones relacionadas con Sockets en UNIX, leyendo las páginas de manual correspondientes a cada una. Nota del Traductor. </para></footnote>. Nuevamente, para ver ejemplos sobre el uso de estas funciones, se podrá leer <xref linkend="server-ex"> y <xref linkend="client-ex">,  en las cuales hay código fuente de un <emphasis>Cliente de Flujos</emphasis> y un <emphasis>Servidor de Flujos</emphasis>. </para>
    
    <section id="socket">
      
      <title><function>socket() </function></title>
      
      <programlisting>
     <![CDATA[
#include <sys/types.h>
#include <sys/socket.h>

int socket(int domain,int type,int protocol);
     ]]>
	</programlisting>
      
      
      <para>Analicemos los argumentos: </para>
      
      <itemizedlist>
	<listitem>
	  <formalpara><title>domain</title><para>Se podrá establecer como <varname>AF_INET</varname> (para usar los protocolos ARPA de Internet), o como <varname>AF_UNIX</varname> (si se desea crear sockets para la comunicación interna del sistema). Éstas son las más usadas, pero no las únicas. Existen muchas más, aunque no se nombrarán aquí. </para></formalpara>
	</listitem>
	<listitem>	
	  <formalpara><title>type</title><para>Aquí se debe especificar la clase de socket que queremos usar (de Flujos o de Datagramas). Las variables que deben aparecer son <varname>SOCK_STREAM</varname> o <varname>SOCK_DGRAM</varname> según querramos usar sockets de Flujo o de Datagramas, respectivamente. </para></formalpara>
	</listitem>
	<listitem>	
	  <formalpara><title>protocol</title><para>Aquí, simplemente se puede establecer el protocolo a 0. </para></formalpara>
	</listitem>
      </itemizedlist>
      
      <para>La función <function>socket()</function> nos devuelve un descriptor de socket, el cual podremos usar luego para llamadas al sistema. Si nos devuelve <emphasis>-1</emphasis>, se ha producido un error (obsérvese que esto puede resultar útil para rutinas de verificación de errores). </para>
    </section>
    
    
    <section id="bind">
      <title>bind() </title>
      
      <programlisting>
     <![CDATA[
#include <sys/types.h>
#include <sys/socket.h>

int bind(int fd, struct sockaddr *my_addr,int addrlen);
      ]]>
      </programlisting>
      
      <para>Analicemos los argumentos: </para>
      <itemizedlist>
	<listitem>
	  <formalpara><title>fd</title><para>Es el descriptor de fichero socket devuelto por la llamada a <function>socket()</function>. </para></formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>my_addr</title>
	    <para>es un puntero a una estructura <structname>sockaddr</structname></para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>addrlen</title>
	    <para>contiene la longitud de la estructura <structname>sockaddr</structname> a la cuál apunta el puntero <varname>my_addr</varname>. Se debería establecer como <function>sizeof(struct sockaddr)</function>.</para>
	  </formalpara>
	</listitem>
      </itemizedlist>
      
      <para>La llamada <function>bind()</function> se usa cuando los puertos locales de nuestra máquina están en nuestros planes (usualmente cuando utilizamos la llamada <function>listen()</function>). Su función esencial es asociar un socket con un puerto (de nuestra máquina). Análogamente <function>socket()</function>, devolverá -1 en caso de error. </para>
      
      <para>Por otro lado podremos hacer que nuestra dirección IP y puerto sean elegidos automáticamente: </para>

      <programlisting>
    
      server.sin_port = 0;                 /* bind() elegirá un puerto aleatoriamente */
      server.sin_addr.s_addr = INADDR_ANY; /* pone la Ip del seridor automáticamente  */
    
      </programlisting>

      <para>Un aspecto importante sobre los puertos y la llamada <function>bind()</function> es que todos los puertos menores que 1024 están reservados. Se podrá establecer un puerto, siempre que esté entre 1024 y 65535 (y siempre que no estén siendo usados por otros programas).</para> 

    </section>

    <section id="connect">

      <title>connect() </title>

      <programlisting><![CDATA[
      
#include <sys/types.h>
#include <sys/socket.h>

int connect(int fd, struct sockaddr *serv_addr, int addrlen);
 ]]>
      </programlisting>

      <para>Analicemos los argumentos: </para>

      <itemizedlist>
	<listitem>
	  <formalpara>
	    <title>fd</title>
	    <para>Debería configurarse como el fichero descriptor del socket, el cuál fue devuelto por la llamada a <function>socket()</function>. </para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>serv_addr</title>
	    <para>Es un puntero a la estructura <structname>sockaddr</structname> la cuál contiene la dirección IP destino y el puerto. </para>
	  </formalpara>
	</listitem>	
	<listitem>
	  <formalpara>
	    <title>addrlen</title>
	    <para>Análogamente de lo que pasaba con <function>bind()</function>, este argumento debería establecerse como <function>sizeof(struct sockaddr)</function>. </para>
	  </formalpara>
	</listitem>

      </itemizedlist>

      <para>La función <function>connect()</function> se usa para conectarse a un puerto definido en una dirección IP. Devolverá -1 si ocurre algún error. </para>

    </section>

    <section id="listen">

      <title>listen() </title>

      <programlisting><![CDATA[
      
#include <sys/types.h>
#include <sys/socket.h>

int listen(int fd,int backlog); 
]]> 
      </programlisting>

      <para>Veamos los argumentos de <function>listen()</function>: </para>

      <itemizedlist>
	<listitem>
	  <formalpara>
	    <title>fd</title>
	    <para> Es el fichero descriptor del socket, el cual fue devuelto por la llamada a <function>socket()</function></para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>backlog</title>
	    <para>Es el número de conexiones permitidas.</para>
	  </formalpara>
	</listitem>
      </itemizedlist>

      <para>La función <function>listen()</function> se usa si se están esperando conexiones entrantes, lo cual significa, si se quiere, que alguien pueda conectarse a nuestra máquina.</para>

      <para>Después de llamar a <function>listen()</function>, se deberá llamar a <function>accept()</function>, para así aceptar las conexiones entrantes. La secuencia resumida de llamadas al sistema es:</para>

      <orderedlist>
	<listitem>
	  <para><function>socket()</function></para>
	</listitem>
	<listitem>
	  <para><function>bind() </function></para>
	</listitem>
	<listitem>
	  <para><function>listen()</function></para>
	</listitem>
	<listitem>
	  <para><function>accept()</function>/* En la próxima sección se explicará como usar esta llamada */</para>
	</listitem>
      </orderedlist>

      <para>Como todas las funciones descritas arriba, listen() devolverá -1 en caso de error. </para>

    </section>


    <section>
      <title>accept()</title>

      <programlisting>
 <![CDATA[
#include <sys/types.h>
#include <sys/socket.h>

int accept(int fd, void *addr, int *addrlen);
]]>
      </programlisting>

      <para>Veamos los argumentos de la función: </para>

      <itemizedlist>
	<listitem>
	  <formalpara>
	    <title>fd</title>
	    <para>Es el fichero descriptor del socket, que fue devuelto por la llamada a <function>listen()</function>. </para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>addr</title>
	    <para>Es un puntero a una estructura <structname>sockaddr_in</structname> en la quel se pueda determinar qué nodo nos está contactando y desde qué puerto. </para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>addrlen</title>
	    <para>Es la longitud de la estructura a la que apunta el argumento <varname>addr</varname>, por lo que conviene establecerlo como <function>sizeof(struct sockaddr_in)</function>, antes de que su dirección sea pasada a <function>accept()</function>. </para>
	  </formalpara>
	</listitem>
      </itemizedlist>

      <para>Cuando alguien intenta conectarse a nuestra computadora, se debe usar <function>accept()</function> para conseguir la conexión. Es muy fácil de entender: alguien sólo podrá conectarse (asóciese con <function>connect()</function>) a nuestra máquina, si nosotros aceptamos (asóciese con <function>accept()</function>) ;-) </para>

      <para>A continuación, Se dará un pequeño ejemplo del uso de <function>accept()</function> para obtener la conexión, ya que esta llamada es un poco diferente de las demás. </para>
      
      <programlisting>
      <![CDATA[
(...)

sin_size=sizeof(struct sockaddr_in);
/* En la siguiente línea se llama a accept() */ 
if ((fd2 = accept(fd,(struct sockaddr *)&client,&sin_size))==-1){ 
printf("accept() error\n");
exit(-1);
}

(...)
]]>
</programlisting>

      <para>A este punto se usará la variable <varname>fd2</varname> para añadir las llamadas <function>send()</function> y <function>recv()</function>. </para>

    </section>


    <section id="send">

      <title>send() </title>

      <programlisting>
      <![CDATA[
#include <sys/types.h>
#include <sys/socket.h>

int send(int fd,const void *msg,int len,int flags);
]]>
</programlisting>

      <para>Y sobre los argumentos de esta llamada: </para>

      <itemizedlist>
	<listitem>
	  <formalpara>
	    <title>fd</title>
	    <para>Es el fichero descriptor del socket, con el cual se desea enviar datos. </para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>msg</title>
	    <para>Es un puntero apuntando al dato que se quiere enviar.</para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>len</title>
	    <para>es la longitud del dato que se quiere enviar (en bytes).</para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>flags</title>
	    <para>deberá ser establecido a 0<footnote><para>El argumento ``<emphasis>flags</emphasis>'', también contenido en otras funciones de manejo de sockets, no es una característica propia del mensaje, y puede omitirse. En este caso, hace distinción entre los modos de enviar un paquete, además de otras cosas. Para más información, se puede leer el manual de send() (man 2 send). Nota del T.</para></footnote> . </para>
	  </formalpara>
	</listitem>
      </itemizedlist>

      <para>El propósito de esta función es enviar datos usando sockets de flujo o sockets conectados de datagramas. Si se desea enviar datos usando sockets no conectados de datagramas debe usarse la llamada <function>sendto()</function>. Al igual que todas las demás llamadas que aquí se vieron, <function>send()</function> devuelve -1 en caso de error, o el número de bytes enviados en caso de éxito. </para>

    </section>

    <section id="recv">

      <title>recv() </title>

      <programlisting>
<![CDATA[
#include <sys/types.h>
#include <sys/socket.h>

int recv(int fd, void *buf, int len, unsigned int flags);
]]>
</programlisting>

      <para>Veamos los argumentos: </para>

      <itemizedlist>
	<listitem>
	  <formalpara>
	    <title>fd</title>
	    <para>Es el descriptor del socket por el cual se leerán datos.</para>
	  </formalpara>
	  <formalpara>
	    <title>buf</title>
	    <para>Es el búfer en el cual se guardará la información a recibir.</para>
	  </formalpara>
	  <formalpara>
	    <title>len</title>
	    <para>Es la longitud máxima que podrá tener el búffer. </para>
	  </formalpara>
	  <formalpara>
	    <title>flags</title>
	    <para>Por ahora, se deberá establecer como 0.</para>
	  </formalpara>
	</listitem>
      </itemizedlist>

      <para>Al igual de lo que se dijo para <function>send()</function>, esta función es usada con datos en sockets de flujo o sockets conectados de datagramas. Si se deseara enviar, o en este caso, recibir datos usando sockets <emphasis>desconectados</emphasis> de Datagramas, se debe usar la llamada <function>recvfrom()</function>. Análogamente a <function>send()</function>, <function>recv()</function> devuelve el número de bytes leídos en el búfer, o -1 si se produjo un error. </para>

    </section>

    <section id="recvfrom">
      <title>recvfrom()</title>

      <programlisting><![CDATA[
     
#include <sys/types.h>
#include <sys/socket.h>

int recvfrom(int fd,void *buf, int len, unsigned int flags
struct sockaddr *from, int *fromlen);
        ]]>
	</programlisting>

<para>Veamos los argumentos:</para>

      <itemizedlist>
	<listitem>
	  <formalpara>
	    <title>fd</title>
	    <para>Lo mismo que para <function>recv()</function></para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>buf</title>
	    <para>Lo mismo que para <function>recv()</function></para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>len</title>
	    <para>Lo mismo que para <function>recv()</function></para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>flags</title>
	    <para>Lo mismo que para <function>recv()</function></para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>from</title>
	    <para>Es un puntero a la estructura <structname>sockaddr</structname>. </para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>fromlen</title>
	    <para>Es un puntero a un entero local que debería ser inicializado a <function>sizeof(struct sockaddr)</function>.</para>
	  </formalpara>
	</listitem>
      </itemizedlist>

<para>Análogamente a lo que pasaba con <FUNCTION>recv()</function>, <FUNCTION>recvfrom()</FUNCTION> devuelve el número de bytes recibidos, o -1 en caso de error. </para>

    </section>

    <section id="close">
      <title>close()</title>

      <programlisting>
<![CDATA[
#include <unistd.h>

close(fd);
]]>
</programlisting>

<para>La función <FUNCTION>close()</FUNCTION> es usada para cerrar la conexión de nuestro descriptor de socket. Si llamamos a <FUNCTION>close()</FUNCTION> no se podrá escribir o leer usando ese socket, y si alguien trata de hacerlo recibirá un mensaje de error. </para>

    </section>

    <section id="shutdown">
      <title>shutdown()</title>

      <programlisting>  <![CDATA[
#include <sys/socket.h>

int shutdown(int fd, int how);
]]>
</programlisting>

<para>Veamos los argumentos: </para>

      <itemizedlist>
	<listitem>
	  <formalpara>
	    <title>fd</title>
	    <para>Es el fichero descritor del socket al que queremos aplicar esta llamada. </para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>how</title>
	    <para>Sólo se podrá establecer uno de estos nombres:</para>
	  </formalpara>
	  <itemizedlist>
	    <listitem>
	      <formalpara>
		<title>0</title>
		<para>Prohibido recibir. </para>
	      </formalpara>
	    </listitem>
	    <listitem>
	      <formalpara>
		<title>1</title>
		<para>Prohibido enviar. </para>
	      </formalpara>
	    </listitem>
	    <listitem>
	      <formalpara>
		<title>2</title>
		<para>Prohibido recibir y enviar. </para>
	      </formalpara>
	    </listitem>
	  </itemizedlist>
	</listitem>
      </itemizedlist>

<para>Es lo mismo llamar a <FUNCTION>close()</FUNCTION> que establecer <FUNCTION>how</FUNCTION> a 2. <FUNCTION>shutdown()</FUNCTION> devolverá 0 si todo ocurre bien, o -1 en caso de error. </para>

    </section>

    <section>
      <title>gethostname()</title>

      <programlisting>
<![CDATA[
#include <unistd.h>

int gethostname(char *hostname, size_t size);
]]>
</programlisting>
      
      <para>Veamos de qué se tratan los argumentos: </para>

      <itemizedlist>
	<listitem>
	  <formalpara>
	    <title>hostname</title>
	    <para>Es un puntero a un array que contiene el nombre del nodo actual. </para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>size</title>
	    <para>La longitud del array que contiene al nombre del nodo (en bytes). </para>
	  </formalpara>
	</listitem>
      </itemizedlist>

      <para>La función <FUNCTION>gethostname()</FUNCTION> es usada para obtener el nombre de la máquina local. </para>
      
    </section>

  </section>

  <section id="dns">

    <title>Algunas palabras sobre dns</title>

    <para>Esta sección fue creada ya que el lector debería saber qué es un <emphasis>DNS</emphasis>. </para>
    
    <para>DNS son las siglas de <emphasis>&ldquo;Domain Name Service&rdquo;<footnote><para>que se traduce como &ldquo;Servicio de Nombres de Dominio&rdquo;. Nota del T</para></footnote></emphasis> y, básicamente es usado para traducir direcciones IP. Por ejemplo, necesito saber la dirección IP del servidor <ulink url="http://queima.ptlink.net">queima.ptlink.net</ulink> y usando el DNS puedo obtener la dirección IP <ulink url="http://212.13.37.13">212.13.37.13</ulink>. </para>
    
    <para>Esto es importante en la medida de que las funciones que ya vimos (como <function>bind()</function> y <function>connect()</function>) son capaces de trabajar con direcciones IP. </para>

    <para>Para mostrar cómo se puede obtener la dirección IP de un servidor, por ejemplo de <ulink url="http://queima.ptlink.net">queima.ptlink.net</ulink>, utilizando C, el autor ha realizado un pequeño ejemplo: </para>
    
    <programlisting>
<![CDATA[

#include <stdio.h>
#include <netdb.h>   /* gethostbyname() necesita esta cabecera */
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

  
int main(int argc, char *argv[])
{ 

   struct hostent *he;

   if (argc!=2) {
      printf("Uso: %s &lt;hostname&gt;\n",argv[0]);
      exit(-1);
   }

   if ((he=gethostbyname(argv[1]))==NULL) {
      printf("error de gethostbyname()\n");
      exit(-1);
   }

   printf("Nombre del host: %s\n",he->h_name);  
      /* muestra el nombre del nodo */
   printf("Dirección IP: %s\n",
          inet_ntoa(*((struct in_addr *)he->h_addr)));
      /* muestra la dirección IP */

}

]]>	
</programlisting>	
  </section>
  <section id="server-ex">

    <title>Un ejemplo de <emphasis>Servidor de Flujos</emphasis></title>
    
    <para>En esta sección, se describirá un bonito ejemplo de un servidor de flujos. El código fuente tiene muchos comentarios para que así, al leerlo, no nos queden dudas. </para>
    
    <para>Empecemos:</para>

    <programlisting>
<![CDATA[

/* Estos son los ficheros de cabecera usuales */
#include <stdio.h>          
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

#define PORT 3550 /* El puerto que será abierto */
#define BACKLOG 2 /* El número de conexiones permitidas */

main()
{

   int fd, fd2; /* los ficheros descriptores */

   struct sockaddr_in server; 
   /* para la información de la dirección del servidor */

   struct sockaddr_in client; 
   /* para la información de la dirección del cliente */

   int sin_size;

   /* A continuación la llamada a socket() */
   if ((fd=socket(AF_INET, SOCK_STREAM, 0)) == -1 ) {  
      printf("error en socket()\n");
      exit(-1);
   }

   server.sin_family = AF_INET;         

   server.sin_port = htons(PORT); 
   /* ¿Recuerdas a htons() de la sección "Conversiones"? =) */

   server.sin_addr.s_addr = INADDR_ANY; 
   /* INADDR_ANY coloca nuestra dirección IP automáticamente */

   bzero(&(server.sin_zero),8); 
   /* escribimos ceros en el reto de la estructura */


   /* A continuación la llamada a bind() */
   if(bind(fd,(struct sockaddr*)&server,
           sizeof(struct sockaddr))==-1) {
      printf("error en bind() \n");
      exit(-1);
   }     

   if(listen(fd,BACKLOG) == -1) {  /* llamada a listen() */
      printf("error en listen()\n");
      exit(-1);
   }

   while(1) {
      sin_size=sizeof(struct sockaddr_in);
      /* A continuación la llamada a accept() */
      if ((fd2 = accept(fd,(struct sockaddr *)&client,
                        &sin_size))==-1) {
         printf("error en accept()\n");
         exit(-1);
      }

      printf("Se obtuvo una conexión desde %s\n",
             inet_ntoa(client.sin_addr) ); 
      /* que mostrará la IP del cliente */

      send(fd2,"Bienvenido a mi servidor.\n",22,0); 
      /* que enviará el mensaje de bienvenida al cliente */

      close(fd2); /* cierra fd2 */
   }
}

]]>
</programlisting>

  </section>
  
  <section id="client-ex">
    <title>Un ejemplo de <emphasis>Cliente de Flujos</emphasis></title>

    <para>Todo será análogo a lo visto en la sección anterior.</para>

    <programlisting>
    <![CDATA[

#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>        
/* netbd.h es necesitada por la estructura hostent ;-) */

#define PORT 3550         
/* El Puerto Abierto del nodo remoto */

#define MAXDATASIZE 100   
/* El número máximo de datos en bytes */

int main(int argc, char *argv[])
{
   int fd, numbytes;       
   /* ficheros descriptores */

   char buf[MAXDATASIZE];  
   /* en donde es almacenará el texto recibido */

   struct hostent *he;         
   /* estructura que recibirá información sobre el nodo remoto */

   struct sockaddr_in server;  
   /* información sobre la dirección del servidor */

   if (argc !=2) { 
      /* esto es porque nuestro programa sólo necesitará un
      argumento, (la IP) */
      printf("Uso: %s <Dirección IP>\n",argv[0]);
      exit(-1);
   }

   if ((he=gethostbyname(argv[1]))==NULL){       
      /* llamada a gethostbyname() */
      printf("gethostbyname() error\n");
      exit(-1);
   }

   if ((fd=socket(AF_INET, SOCK_STREAM, 0))==-1){  
      /* llamada a socket() */
      printf("socket() error\n");
      exit(-1);
   }

   server.sin_family = AF_INET;
   server.sin_port = htons(PORT); 
   /* htons() es necesaria nuevamente ;-o */
   server.sin_addr = *((struct in_addr *)he->h_addr);  
   /*he->h_addr pasa la información de ``*he'' a "h_addr" */
   bzero(&(server.sin_zero),8);

   if(connect(fd, (struct sockaddr *)&server,
      sizeof(struct sockaddr))==-1){ 
      /* llamada a connect() */
      printf("connect() error\n");
      exit(-1);
   }

   if ((numbytes=recv(fd,buf,MAXDATASIZE,0)) == -1){  
      /* llamada a recv() */
      printf("Error en recv() \n");
      exit(-1);
   }

   buf[numbytes]='\0';

   printf("Mensaje del Servidor: %s\n",buf); 
   /* muestra el mensaje de bienvenida del servidor =) */

   close(fd);   /* cerramos fd =) */

}


]]>
</programlisting>

  </section>		


  <section id="lastwords">

    <title>Últimas Palabras </title>

    <para>En esta sección el autor de este documento, BracaMan, añadirá algunas palabras. Se lo puede encontrar mandando un correo electrónico a <ulink url="mailto:BracaMan@clix.pt">&lt;BracaMan@clix.pt&gt;</ulink>. Su número ICQ es 41476410 y se puede visitar por URL en <ulink url="http://www.BracaMan.net">http://www.BracaMan.net</ulink></para>

<para>Soy un simple humano, y como tal me equivoco, por lo que es casi seguro que haya errores en este documento. Y al decir errores me refiero a errores en el uso del Inglés<footnote><para>Seguramente también los haya en la traducción ;-). Nota del T.</para></footnote> (no sería raro dado que éste no es mi lenguaje nativo), como también errores técnicos. Sería muy bueno que si se encuentran errores en este tutorial, yo sea notificado vía email. </para>

<Para> Sin embargo, debe entenderse que ésta es simplemente la primera versión del documento, por lo que es natural que no esté muy completa (de hecho pienso que así es), y también es natural que existan errores estúpidos. Sea como sea, puedo asegurar que los fragmentos de código fuente que se encuentran en este documento funcionan perfectamente. Si se necesitara ayuda en lo que a esto respecta se puede contactarme mandando un email a <ulink url="mailto:BracaMan@clix.pt">&lt;BracaMan@clix.pt&gt;</ulink>. </para>


<para>Agradecimientos especiales a: Ghost_Rider (mi viejo y querido camarada), Raven (por dejarme escribir este tutorial) y para todos mis amigos =)</para>

<para>Todos los copyrights están reservados. Se puede distribuir este tutorial libremente, siempre que no se cambie ningún nombre ni URL. No se podrá cambiar una o dos líneas del texto, o agregar algunas líneas y luego decir que el autor de este tutorial eres tú. Si se desea cambiar algo en el documento, por favor avísame enviando un email a &lt;BracaMan@clix.pt&gt;.</para>

    <para>En cuanto al traductor de este documento al español, su nombre es Sebastián Gurin, y se puede entrar en contacto con él mandándole un correo a <ulink url="mailto:cancerbero_sgx@users.sourceforge.net">cancerbero_sgx@users.sourceforge.net</ulink>. Él fue también quien ha dado formato usando <productname>DocBook -- SGML, versión 3.1</productname> por lo que, si se encuentran errores tanto en el formato como en la traducción, se deberían enviar comentarios a la dirección de correo electrónico anterior. </para>

  </section>

</article>