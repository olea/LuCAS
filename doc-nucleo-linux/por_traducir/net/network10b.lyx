#This file was created by <asimov> Thu Feb 24 12:45:30 2000
#LyX 1.0 (C) 1995-1999 Matthias Ettrich and the LyX Team
\lyxformat 2.15
\textclass linuxdoc
\language default
\inputencoding default
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Section

La capa de Sockets INET
\layout Standard

La capa de sockets de INET soporta la familia de direcciones de internet
 la cual contiene los protocolos TCP/IP.
 Como se discutió parrafos anteriores, estos protocolos se desarrollan en
 capas, un protocolo usa los servicios de otro.
 El código y estructuras de datos de TCP/IP de Linux reflejan estas capas.
 El interfaz con la capa de sockets BSD se realiza a través del conjunto
 de operaciones con sockets de la familia de direcciones de Internet, la
 cual se registra con la capa socket BSD durante la inicialización de la
 red.
 Estas operaciones son mantenidas en el vector 
\emph on 
pops 
\emph default 
junto a otras familias de direcciones registradas.
 La capa de sockets BSD llama a las rutinas que dan soporte a la capa INET
 desde la estructura registrada 
\emph on 
proto_ops
\emph default 
 de INET para que hagan algún trabajo.
 Por ejemplo, un socket BSD que crea un petición con la familia de direcciones
 INET usará la función 
\emph on 
create 
\emph default 
de la capa inferior INET.
 La capa de sockets BSD pasa la estructura de datos 
\emph on 
socket
\emph default 
 representando al socket BSD para la capa INET en cada una de estas operaciones.
 Para evitar el desorden del socket BSD con la 
\emph on 
información
\emph default 
 específica de TCP/IP, la capa socket INET usa su propia estructura de datos,
 la 
\emph on 
sock 
\emph default 
con la que enlaza a la estructura 
\emph on 
socketdata
\emph default 
 de BSD.
 Este enlace puede ser visto en la figura 
\begin_inset LatexCommand \ref{a}

\end_inset 

.
 Enlaza la estructura de datos 
\emph on 
sock 
\emph default 
a la estructurad de datos BSD 
\emph on 
socket
\emph default 
 usando el puntero 
\emph on 
data
\emph default 
 en el 
\emph on 
socket 
\emph default 
BSD.
 Esto significa que la llamada al socket INET siguiente puede recuperar
 fácilmente la estructura de datos 
\emph on 
sock
\emph default 
.
 El puntero a las operaciones de protocolo de la estructura de datos 
\emph on 
sock 
\emph default 
es incluso configurada en el momento de la creación y depende del protocolo
 pedido.
 Si TCP es solicitado, entonces el puntero a las operaciones de protocolo
 de la estructrua de datos 
\emph on 
sock
\emph default 
 apuntará a un conjunto de operaciones del protocolo TCP necesitadas para
 una conexión TCP.
 
\begin_float fig 
\layout Standard


\begin_inset LatexCommand \label{a}

\end_inset 

Estructura de Datos de un Socke BSD en Linux
\layout Standard


\begin_inset Figure size 385 389
file sockets.eps
flags 9

\end_inset 


\end_float 
 
\layout Subsection

Creando un Socket BSD.
\layout Standard

La llamada al sistema para crear un nuevo socket pasa identificadores para
 la familia de direcciones , tipo de socket y protocolo que se va a usar.
 Primeramente, se usa la familia de direcciones solicitada para buscar el
 vector 
\emph on 
pops
\emph default 
 para ésta.
 Puede ser que la familia de direcciones particular estea implementada como
 un módulo, y, en este caso, el hilo del núcleo 
\emph on 
kmod
\emph default 
 o el proceso 
\emph on 
kerneld 
\emph default 
debe cargar el módulo antes de que podamos continuar.
 Un nueva estructura de datos 
\emph on 
socket
\emph default 
 es reservada para representar al socket BSD.
 Actualmente, la estructura de datos 
\emph on 
socket
\emph default 
 es físicamente parte de la estructura de datos 
\emph on 
inode
\emph default 
 del VFS y reservar un socket realmente significa reservar un inodo VFS.
 Esto puede parecer estraño al no ser que se considere que los sockets pueden
 ser manjeados del mismo modo que los ficheros ordinarios.
 Todos estos ficheros son representados por una estructura de datos del
 VFS 
\emph on 
inode,
\emph default 
 entonces, para soportar las opereaciones de ficheros, los sockets BSD deben
 estar representados por una estructura de datos VFS 
\emph on 
inode.
\layout Standard

La reciente estructura de datos 
\emph on 
socket 
\emph default 
BSD creada contiene un puntero a las rutinas de sockets específicas a la
 familia de direcciones y esto es puesto a la estructura de datos 
\emph on 
proto_ops
\emph default 
 recibida desde el vector 
\emph on 
pops.

\emph default 
 Su tipo es configurado como el tipo de socket solicitado; uno de SOCK_STREAM,
 SOCK_DGRAM.
 La runtina específica de la creación de la familia de direcciones es llamada
 usando la dirección mantenida en la estructura de datos 
\emph on 
proto_ops.
\layout Standard

Un descriptor de fichero libre es reservado desde el vector 
\emph on 
vd
\emph default 
 del proceso actual y la estructura de datos 
\emph on 
file
\emph default 
 que lo apunta es inicializado.
 Esto incluye la configuración del puntero a las operaciones del fichero
 para apuntar al conjunto de operaciones de ficheros sobre sockets BSD soportada
s por el interfaz del sockets BSD.
 Cualquier operación futura será directa sobre la interfaz del socket y
 se redireccionará a la familia de direcciones que lo soporta llamando a
 las rutinas de su familia de direcciones.
\layout Subsection

Enlazando una dirección a un Socket BSD INET.
\layout Standard

Con el fin de ser capaces de escuchar por peticiones de conexión entrantes
 de internet, cada servidor debe crear un socket BSD INET y enlazar su dirección
 a él.
 La operación de enlazado (bind), es manejado mayoritariametne dentro de
 la capa de sockets INET con algún soporte de las capas inferiores TCP y
 UDP.
 El socket que tiene una dirección enlazada no puede ser usado para otra
 comunicación.
 Esto significa que el estado del socket debe ser TCP_CL0SE.
 La estructura 
\emph on 
sockaddr
\emph default 
 pasada a la operación de enlazado (bind) contiene la dirección IP a la
 cual será enlazada, y opcionalmente, un número de puerto.
 Normalmente el enlace de la dirección IP debiera ser el que ha sido asignado
 al dispositivo de red que soporta la familia de direcciones INET y cuyo
 interfaz está activo y se puede usar.
 Puedes ver las interfaces de red que están activas en el sistema usando
 el comadno 
\emph on 
ifconfig.
 
\emph default 
La dirección IP incluso puede ser la dirección broadcast IP de todo unos
 o todo ceros.
 Éstas son direcciones especiales que significan 
\begin_inset Quotes eld
\end_inset 

enviar a todos
\begin_inset Quotes erd
\end_inset 


\begin_float footnote 
\layout Standard

¿Para qué es usado?
\end_float 
.
 La dirección IP incluso podría ser especificada como cualquier dirección
 IP si la máquina actua como un proxy transparente o firewall, pero sólamente
 los procesos con privilegios de superusuario pueden unirse a cualquier
 dirección IP.
 El enlace de la dirección IP es salvado en la estructura de datos 
\emph on 
sock
\emph default 
, en los campos 
\emph on 
recv_addr y saddr.
 
\emph default 
Estos son usados en búsquedas hash y como la dirección IP enviada respectivament
e.
 El número de puerto es opcional y si no es especificado, se le pregunta
 al soporte de red por uno libre.
 Por convenio, los números de puerto menores que 1024 no pueden ser usados
 por procesos sin privilegios de superusuario.
 Si la capa de red reserva un número de puerto, siempre reservará uno más
 grande de 1024.
\layout Standard

Todos los paquetes que son recibidos por los dispositivos de la capa de
 red, deben ser dirigidos a los sockets BSD INET correctos, para que puedan
 ser procesados.
 Por esta razón UDP y TCP mantienen tablas hash usadas para buscar direcciones
 dentro de los mensajes entrantes IP y direccionarlos al par correcto 
\emph on 
socket/sock.
\emph default 
TCP es un protocolo orientado a conexión y por lo tanto hay más información
 envuelta en el procesado de los paquetes TCP que en el procesamiento de
 los paquetes UDP.
\layout Standard

UDP mantiene una tabla hash de puertos UDP reservados, la tabla 
\emph on 
udp_hash
\emph default 
.
 Ésta consiste en punteros a estructuras de datos 
\emph on 
sock
\emph default 
 indexadas por una función hash basada en el número de puerto.
 Como la tabla hash UDP es más pequeña que el número de puertos permisibles
 (
\emph on 
udp_hash
\emph default 
 es de solo 128 o UDP_HTABLE_SIZE bytes de largo) algunas entradas en la
 tabla apuntan a una cadena de estructuras de datos enlazada usando para
 ello, el puntero next de 
\emph on 
sock
\emph default 
.
\layout Standard

TCP es mucho más complejo ya que mantiene varias tablas hash.
 Sin embargo, actualmente TCP no añade el enlace de la estructura de datos
 
\emph on 
sock
\emph default 
 en sus tablas hash durante la operación de enlazado (bind), simplemente
 chequea que el número de puerto pedido no está siendo usado.
 La estructura de datos 
\emph on 
sock
\emph default 
 es añadida a las tablas hash de TCP durante la operación de 
\emph on 
listen
\emph default 
.
\layout Standard

NOTA DE REVISIÓN:
\emph on 
 ¿Qué hay sobre la entrada route?
\layout Subsection

Realizando una conexión a un socket BSD INET
\layout Standard

Una vez que el socket ha sido creado y, visto que que no ha sido usado para
 escuchar por peticiones de conexiones entrantes, puede ser usado para peticione
s de conexión salientes.
 Para protocolos sin conexión como UDP esta operación del socket no hace
 gran cosa, pero para protocolos orienteados a la conexión como TCP envuelve
 la construcción de un circuito virtual entre las dos aplicaciones.
\layout Standard

Una conexión saliente sólamente podrá ser hecha en un socket BSD INET que
 está en el estado correcto, es decir, que todavía no tiene una conexión
 establecida y que no ha sido usado para escuchar en conexiones entrantes.
 Esto significa que la estructura de datos 
\emph on 
socket
\emph default 
 BSD debe estar en el estado SS_UNCONNECTED.
 El protocolo UDP no establece ninguna conexión entre aplicaciones, todos
 lo mensajes son datagramas, cualquiera de los mensajes pueden o no pueden
 tener destinatarios.
 Sin embargo soporta la operación de sockets BSD 
\emph on 
connect
\emph default 
.
 Una operación de conexión en un socket BSD INET UDP simplemente configura
 la dirección de la aplicación remota; su dirección IP y su número de puerto
 IP.
 Adicionalmente configura una caché para la entrada de la tabla de enrutado
 así que los paquetes enviados por este socket BSD no necesiten chequear
 la base de datos del enrutado otra vez (al no ser que esta ruta llegue
 a ser inválida).
 La información del enrutado del caché, es manentida desde el puntero 
\emph on 
ip_route_cache 
\emph default 
en la estructra de datos 
\emph on 
sock
\emph default 
 INET.
 Si no se da ninguna inforamción de direccionamiento, esta caché de enrutado
 y la información del direccionameinto IP serán automáticamente usados para
 mensajes enviados usando este socket BSD.
 UDP mueve el estado de 
\emph on 
sock
\emph default 
 a TCP_ESTABLISHED.
\layout Standard

Para una operación de conexión en un socket BSD INET, TCP debe construir
 un mensaje TCP que contenga la información de conexión y enviarlo al destino
 IP dado.
 El mensaje TCP contiene información sobre la conexión, un número de secuencia
 del mensaje de comienzo único, el tamaño máximo del mensaje que puede ser
 manejado por el host, el tamaño de la ventana de transmisión y recepción
 y demás.
 Todos los mensajes TCP son numerados y el número de secuencia inicial es
 usado como el número del primer mensaje.
 Linux elige un valor razonablemente aleatorio para evitar ataques de protocolo
 maliciosos.
 Cada mensaje transmitido por el terminal de la conexión TCP y satisfactoriament
e recibido por el otro, es reconocido (Ack) para decir que llegó bien e
 incorrupto.
 Los mensajes no satisfactorios serán retransmitidos.
 El tamaño de ventana de transmisión y recepción es el número de mensajes
 salientes que pueden ser enviados sin recibir su reconocimiento.
 El tamaño máximo del mensaje está basado en el dispositivo de red que está
 siendo usado por el terminal de la petición.
 Si el dispositivo terminal que recibe soporta tamaño de mensajes más pequeños
 entonces la conexíón usará el mínimo de los dos.
 La aplicación que hace la petición de la conexión del enlace TCP debe esperar
 por una respuesta desde la aplicación objetivo por una aceptación o rechazo
 de la petición de conexión.
 Como el 
\emph on 
sock
\emph default 
 TCP está ahora esperando mensajes entrantes, es añadido a la 
\emph on 
tcp_listening_hash
\emph default 
 así que los mensajes TCP entrantes puedan ser direccionados a esta estructra
 de datos 
\emph on 
sock
\emph default 
.
 TCP incluso lanza temporizadores así que la petición de conexión enlazada
 puede ser expirada si la aplicación objetivo no responde a la petición.
\layout Subsection

Escuchando en un socket BSD INET
\layout Standard

Una vez que un socket tiene una dirección enlazado a él, debe escuchar por
 peticiones de conexión entrantes especificadas en la dirección enlazada.
 Una aplicación de red puede escuchar en un socket sin enlazarlo primero
 a un dirección; en este caso, la capa de sockets INET busca un número de
 puerto sin usar (para este protocolo) y automáticamente lo enlaza al socket.
 La función de socket 
\emph on 
listen
\emph default 
 mueve el socket a un estado TCP_LISTEN y hace cualquier trabajo específico
 de red necesitado para permitir conexiones entrantes.
\layout Standard

Para sockets UDP, el cambio del estado del socket es suficiente pero TCP
 añade la estructura de datos 
\emph on 
sock
\emph default 
 del socket en dos tablas hash tan pronto como estea activo.
 Éstas son la tabla 
\emph on 
tcp_bound_hash
\emph default 
 y la 
\emph on 
tcp_listening_hash.

\emph default 
 Ambas son indexadas via función hash basada en el número de puerto IP.
\layout Standard

Cada vez que una petición de conexión TCP entrante es recibida por un socket
 que esá escuchando, TCP construye una nueva estructura de datos 
\emph on 
sock
\emph default 
 para representarla.
 Esta estructura de datos 
\emph on 
sock
\emph default 
 llegará a ser la 
\begin_inset Quotes eld
\end_inset 

bottom half
\begin_inset Quotes erd
\end_inset 

 de la conexión TCP cuando sea aceptada.
 Incluso clona el 
\emph on 
sk_buff
\emph default 
 entrante que contiene la petición de conexión y lo encola en 
\emph on 
receive_queue 
\emph default 
para la estructura de datos 
\emph on 
sock
\emph default 
 escuchada.
 El clon 
\emph on 
sk_buff
\emph default 
 contiene un puntero a la nueva estructura de datos 
\emph on 
sock 
\emph default 
creada.
\layout Subsection

Aceptando peticiones de conexión
\layout Standard

UDP no soporta el concepto de conexiones, el aceptar conexiones de sockets
 INET sólo aplica al protocolo TCP como una operación accept en un socket
 que está escuchando, lo que genera una nueva estructura de datos 
\emph on 
socket
\emph default 
 para ser clonada desde el 
\emph on 
socket 
\emph default 
original que está escuchando.
 La operación de acceptación es entonces pasada a la capa del protocolo
 soportado, en este caso INET para aceptar cualqueir petición de conexión
 entrante.
 La capa del protocolo INET hará fallar la operación de aceptación si el
 protocolo de la subcapa, por ejemplo UDP, no soporta conexiones.
 De lo contrario, la operación de aceptación es pasada a través del protocolo
 real, en este caso TCP.
 La operació de aceptación puede ser tanto bloqueante como no-bloqueante.
 En el caso de ser no bloqueante, si no hay conexiones entrantes para aceptar,
 la operación de aceptación fallará y la nueva estructura de datos 
\emph on 
socket
\emph default 
 creada será desechada.
 En el caso bloqueante, la aplicación de red que realiza la operación de
 aceptación será añadida a la cola de espera y entonces será suspendida
 hasta que una petición de conexión sea recibida.
 Una vez que la petición de conexión haya sido recibida, el 
\emph on 
sk_buff
\emph default 
 que contiene la petición es descartado y la estructura de datos 
\emph on 
sock
\emph default 
 es devuelta a la capa de sockets INET, donde es enlazada a la nueva estructura
 de datos 
\emph on 
socket
\emph default 
 creada antes.
 El número de descriptor de fichero (fd) del nuevo 
\emph on 
socket
\emph default 
 es devuelto a la aplicación de red, y la aplicación puede entonces usar
 este descriptor de fichero las en operaciones de socket sobre el socket
 BSD INET creado.
\the_end
