List of Work @ December 1997
----------------------------

This all relates to version "DRAFT 0.1-13(31)".

[1] Apply marked up review comments

[2] Chapter 2 Software Basics, section 2.3, p12

Route cache example - this is a little complex, the user does not yet know about routing
tables and so on.  A simpler example is needed.

file_system_type data structure has a pointer to a read function for the file system's
super block.  Again, too complex at this point, the reader does not know this yet.

[3] Chapter 3 Memory Management, section 3.1.1, p16.   

What if the faulting address is not valid?  Give and explain this option.

[4] Chapter 3 Memory Management, section 3.8, p26

The expression (see algorithm) is quite confusing and should be stated in another way.
Also if (nr_free_pages + nr_async_pages) is less than free_pages_low it must also be less
than free_pages_high (TRUE).   Look again at mm/vmscan.c and work out EXACTLY when the 
swap daemon is woken up.

[5] Chapter 3 Memory Management, section 3.8.4, para 2

This paragraph ("The swapped out page fault handling code...") is gobbledegook and 
needs reworking.  Make it 3 sentences rather than 1.

[6] Chapter 4 Processes, section 4.5, last paragraph (page 41)

What if the faulting virtual address is not in the current processes virtual address
space?  Explain what happens.

[6a] Chapter 4 Processes, section 4.8.1 ELF, ELF Shared Libraries

Expand the dynamic linking section, two processes sharing code, how?

[7] General, bottom half handler

This is mentioned all over the text before chapter 11 (Kernel Mechanisms).  Do I need
to describe this earlier (at least in overview, say in the Software chapter)?

[8] Chapter 5 Interprocess Communication Mechanisms, section 5.1, page 48

"The Linux signal processing code ..."  How does Linux get to this, where is it?
How to processes elect to wait for signals (Perl example?).  Expand this description.

[8a] Chapter 5 Interprocess Communication Mechanisms, 5.3 Sockets

Describe how sockets can be used for IPC purposes.

[9] Chapter 6 PCI, p68, l-2

Describe better where the memory that becomes PCI I/O or PCI memory actually is (on board
the device) and what happens when that memory is enabled by the BIOS/setup code.

[10] Chapter 7 Interrupts and Interrupt Handling, section 7.2, para 3 (page 73)

Probing for interrupts.  What if more than one interrupt goes off?  Expand and explain.

[10a] Chapter 7 Interrupts and Interrupt Handling, sectino 7.3 Interrupt Handling

Fast and slow interrupts, look at the code!  Is this an Intel thing, if so ask
the kernel list what these are.

[11] Chapter 8 Device Drivers, section 8.5 Hard Disks

Is a hard disk's sector size really set at manufacture?  Is the block size really the
same as the sector size?  [Ask Linux kernel list]

[12] Chapter 8 Device Drivers, section 8.5.2 Initializing the IDE subsystem

Why does the partition checking code have to understand that IDE controllers may each
control up to two IDE disks?

[13] Chapter 8 Device Drivers, section 8.6, Bus Information

What does this mean for the loopback device?

[14] Chapter 9 The File System, figure 9.3

What are the numbers 5 and 14 (answer: length fields).  What happens when you rename
a file, the EXT2 directory data structure looks very static.

[15] Chapter 9 The File System, section 9.2.1 The VFS Superblock

"File System Specific" - such as?

[16] Chapter 9 The File System, section 9.2.4 Mounting a File System.

The sentence "Whatever the file system, filling out the VFS superblock..."
(page 107, second to last para) needs reworking.

[17] Chapter 9 The File System, section 9.2.9 The Directory Cache

Describe in detail the LRU lists of the directory cache, together with diagrams.

[18] Chapter 9 The File System, section 9.2.7 Creating a File in the VFS

Write this section.

[19] Appendix B The Alpha AXP Processor

Very incomplete, needs reworking, base on Microprocessor Review paper?

