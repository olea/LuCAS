<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<article lang="es">
  <articleinfo>
    <title>
      Creación y mantenimiento de traducciones de software libre
      usando memorias de traducción
    </title>
    <subtitle>
      Gestión de traducciones usando memorias de traducción con
      gettext y Docbook/XML
    </subtitle>
    
    <author>
      <firstname>Ismael</firstname>
      <surname>Olea</surname>
      <email>ismaelARROBAolea.org</email>
    </author>

    <revhistory>
      <revision>
        <revnumber>0.0</revnumber>
        <date>Fecha sin cerrar</date>
        <revremark>Versión de desarrollo inicial</revremark>
      </revision>
    </revhistory>
  </articleinfo>

  <abstract>
    <para>
      Se pretende explicar cómo aplicando herramientas libres
      existentes se pueden usar memorias de traducción con documentos
      Docbook-XML, lo cual ayuda a simplificar y acelerar el
      mantenimiento y sincronización de traducciones de documentos, lo
      cual ha sido hasta hoy necesariamente muy laborioso. 
    </para>
  </abstract>

  <!-- %%%%%%%%%%%% -->
  <sect1>
    <title>
      Estado actual del mantenimiento de los documentos en el
      mundo del software libre
    </title>

    <programlisting>
      - enumerar los formatos
      - cómo se ha apañado la gente hasta ahora
      - el caso de los programas
      - el esfuerzo de TLDP-ES y Juan Rafael 
    </programlisting>

    <para>
      Partiendo de la idea de «Producto Acabado = Programa Software
      + Manual de Usuario» es obvio que las proyectos de aplicaciones
      libres acaben documentando a las mismas. Con el tiempo, en función
      de los orígenes históricos y el desarrollo de los proyectos y las
      tecnologías en el mercado se ha creado una pléyade de formatos
      paralelos que hacen todavía más complicado el poco simple esfuerzo
      de gestionar la creación y mantenimiento de documentación y sus
      traducciones.
    </para>

    <para>
      Así es posible encontrarse desde texto más o menos
      estructurado, páginas del manual (man), ficheros PDF o PostScript,
      documentos compuestos con TeX/LaTeX o incluso con Troff, HTML (no
      siempre sintácticamente correcto), el formato info/texinfo de GNU,
      Linuxdoc-SGML (incorrectamente llamado formato SGML en estos
      ambientes), DebianDoc, Docbook (en las veriones SGML y XML) y en 
      menor medida
      RTF, MSDOC, OpenOffice/StarOffice. También hay muchísimo material
      en la web en HTML más o menos integrado en «CMS» que hacen difícil
      gestionarlos integralmente con el resto de doc.
    </para>

    <para>
      Afortunadamente son muchos los esfuerzos que están
      convergiendo en XML en general y en 
      <ulink
	url="http://www.oreilly.com/pub/a/oreilly/frank/oscon_summit.html">
	Docbook</ulink>
      en particular.
    </para>

    <para>
      Los que lo hacen a diario saben que trabajar con
      documentación es desgraciadamente muy poco trivial. Mantener
      sincronizada la traducción de un documento lo complica aún más. En
      el mundo profesional eso está básicamente resuelto con el tipo de
      herramientas que cubre este artículo, pero que se sepa ninguna
      puede ser ejecutiva de forma nativa en plataformas linux/*ix y
      tampoco son libres.
    </para>

    <para>
      Así pues y hasta ahora, si el trabajo de traducir ha sido
      duro y artesano, el de mantener actualizadas las traducciones lo ha
      sido muchísimo más, siendo muchos los documentos traducidos
      abandonados y muy seriamente desactualizados. Y desde el momento en
      el que existe la técnica de Memorias de Traducción (en adelante
      MMTT), es un despilfarro inmenso de tiempo, recursos y de
      conocimiento, en la forma de los pares de traducción que podrían
      haberse almacenado y reutilizado posteriormente.
    </para>
  </sect1>

  <!-- %%%%%%%%%%%%% -->
  <sect1>
    <title>Qué es una memoria de traducción</title>

    <para>Citamos a Corrigan y Foster</para>

    <programlisting>
      SUN
    </programlisting>

    <para>: 
      <citation>
	Translation memory systems, known as TM systems, work by
	looking up segments in a database containing a large number of
	previously translated segments and their translations. (Segments
	are pieces of source files, usually sentences, that can be
	translated reasonably independently.) The database might contain
	segments that match the input segment exactly or segments that are
	similar to the segment presented for translation. These
	translations are then provided to the translator as suggested
	translations for each segment.
      </citation>
    </para>

    <para>
      O sea, es una tabla con, básicamente, dos columnas que asocian
      un segmento (una frase, una expresión o una palabra) en un idioma
      con su traducción a otro.
    </para>

    <para>
      ¿Y cuál es la ventaja competitiva de las MMTT? Varias. Al
      menos:
    </para>

    <itemizedlist>
      <listitem>
        <para>
	  Permite sistematizar la gestión y el mantenimiento de las
	  traducciones con herramientas mecánicas.
	</para>
      </listitem>

      <listitem>
        <para>
	  Facilita enormemente la actualización de las
	  traducciones: al comparar una nueva versión del original con su
	  memoria, se traducen automáticamente todas aquellas partes que
	  no han variado, dejando visibles y directamente manejables los
	  nuevos segmentos.
	</para>
      </listitem>

      <listitem>
        <para>
	  Un par de traducción, el original y su traducción, son
	  ciertos, o al menos lo son dentro del área de conocimiento del
	  documento o al menos lo han sido en algún momento del ciclo de
	  actualizaciones del mismo. Si el segmento original sigue
	  vigente en el documento tiene sentido mantener su traducción.
	  Si el segmento original desapareció, sería un desperdicio
	  ignorar la vieja traducción siendo tan fácil archivarla con
	  medios automáticos. No hay garantía ninguna pero tal vez en el
	  futuro pudiera volver a ser una traducción necesaria o servir
	  al menos como sugerencia para un nuevo segmento.
	</para>
      </listitem>
    </itemizedlist>

    <para>Y además podemos imaginar otras ventajas.</para>

    <itemizedlist>
      <listitem>
        <para>
	  Conforme se trabaja con total normalidad, se va creando
	  un histórico del documento, lo que llegado el caso pudiera
	  descubrirse como muy útil para algún fin específico.
	</para>
      </listitem>

      <listitem>
        <para>
	  Si disponemos de un documento original con MMTT a varias
	  lenguas, podemos tener indirectamente un mecanismo de
	  traducción entre estas a través del idioma original.
	</para>
      </listitem>

      <listitem>
        <para>
	  Colecciones de MMTT organizadas convenientemente pueden
	  componer un corpus de traducciones de interés técnico o
	  científico.
	</para>
      </listitem>

      <listitem>
        <para>
	  Se pueden usar glosarios y terminologías de traducción
	  como MMTT símplemente dándoles el formato adecuado y
	  alimentando a nuestras herramientas de traducción. Esto puede
	  significar un salto cualitativo de la calidad y homogeneidad de
	  los trabajos de traducción.
	</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <!-- %%%%%%%%%%%%%%%%% -->
  <sect1>
    <title>Las MMTT, una técnica madura en el mundo profesional</title>

    <programlisting>
      Aplicaciones:
        - Trados
        - Wordtrans
        - Wordfast
        - DejaVù

      Estándares:
        - TMX 
        - XLIFF
    </programlisting>
  </sect1>


  <!-- %%%%%%%%%%%%%% -->
  <sect1><title>Cómo se usa una MMTT</title>

    <para>
      Vamos a mostrar el funcionamiento básico paso a paso. 
      Lo primero es crear la memoria:
    </para>

    <orderedlist>
      <listitem>
        <para>
	  Partimos de un documento original, en un idioma cualquiera.
	</para>
      </listitem>

      <listitem>
        <para>
	  Alimentamos a nuestra herramienta de MMTT (que podría ser
	  la propia herramienta asistente para la traducción) con el
	  documento original.
	</para>
      </listitem>

      <listitem>
        <para>
	  A partir de ahora obtenemos un fichero que es el
	  documento original descompuesto en pares de traducción por cada
	  segmento, obviamente. Según el algoritmo de descomposición
	  (<foreignphrase>chunking</foreignphrase>) que
	  la herramienta tenga implementado estos segmentos podrán ser
	  más o menos pequeños y por tanto la gestión de la MMTT será más
	  fina y potente.
	</para>
      </listitem>

      <listitem>
        <para>
	  En este momento se realiza el trabajo de traducción, sin
	  particularidad especial.
	</para>
      </listitem>

      <listitem>
        <para>
	  Una vez concluido el trabajo de traducción, se almacena
	  una memoria de traducción del documento y se exporta la versión
	  traducida del documento original en su mismo formato.
	</para>
      </listitem>
    </orderedlist>

    <para>
      En este momento tenemos tres ficheros: el documento original,
      el documento traducido y la memoria de traducción del mismo, que
      sólo contiene los pares de traducción para cada segmento.
    </para>

    <para>
      El siguiente proceso sería el de actualización de la
      traducción porque el documento original ha sido modificado.
      Pensemos por ejemplo que se trata de un versión corregida del
      mismo, o una versión nueva de una especificación técnica.
    </para>

    <orderedlist>
      <listitem>
        <para>
	  Tomamos la nueva versión del documento original y la
	  memoria de traducción que creamos en la traducción
	  original.
	</para>
      </listitem>

      <listitem>
        <para>
	  Alimentamos con ambos ficheros a nuestra herramienta de
	  MMTT. De nuevo la herramienta descompondrá el documento en
	  segmentos, y ahora buscará en la memoria segmentos traducidos
	  iguales o suficientemente parecidos. Si encuentra uno igual y
	  puede estar seguro de que se trata exactamente del mismo,
	  incorporará el segmento traducido directamente. Si no tiene esa
	  certeza o si el segmento no es idéntico, la herramienta tomará
	  la traducción y la usará como una posible sugerencia.
	</para>
      </listitem>

      <listitem>
        <para>
	  A continuación empieza el trabajo del traductor. Ahora se
	  encontrará que aparecerán como ya traducidos todos los
	  segmentos que no se han modificado y como trabajo pendiente
	  todos los segmentos para los que no se ha encontrado traducción
	  y para aquellos para los que hay traducciones dudosas. Las
	  traducciones dudosas se usan como sugerencias. El traductor
	  puede elegir alguna de las opciones como la definitiva,
	  utilizar alguna de ellas para escribir la definitiva o incluso
	  ignorar todas ellas para escribir una traducción completamente
	  diferente.
	</para>
      </listitem>

      <listitem>
        <para>
	  Una vez acabado el trabajo, se construye el documento
	  traducido final, usando el formato original. Por otro lado, los
	  nuevos segmentos traducidos (y se consideran traducidos porque
	  el traductor los ha revisado y validado) se almacenan en la MT
	  del documento.
	</para>
      </listitem>

      <listitem>
        <para>
	  En este momento tenemos varios ficheros: original v1,
	  original v2, traducción v1, traducción v2 y una memoria de
	  traducción de este documento que contiene los pares de
	  traducción de todos los segmentos de las dos versiones. Nuevas
	  revisiones del original servirán para alimentar de nuevo la
	  memoria de traducción. Y si ahora está pensando si de la
	  memoria se borra algo, la respuesta es no. En general la
	  memoria siempre se alimenta con nuevas traducciones y no pierde
	  información. Al fin y al cabo, si el traductor consideró que un
	  segmento que ya no se usa era correcto en su momento ¿por qué
	  no guardarlo si eso no supone ningún problema técnico?
	</para>
      </listitem>
    </orderedlist>

    <para>
      Y ahora ilustraremos el caso ideal de recuperación de
      segmentos. No hay ninguna garantía de que siempre ocurran casos
      así, pero ¿por qué desperdiciar la oportunidad si alguna vez surge
      si no causa ningún problema técnico?
    </para>

    <para>
      Imaginemos que estamos trabajando en actualizar revisiones de
      especificaciones técnicas. En una de las versiones anteriores se
      propuso un borrador para una sección determinada que ha estado en
      discusión durante varias revisiones y alguna de ellas se retiró por
      cuestiones de implementación, por ejemplo. Como para cada una de
      esas revisiones se escribió una traducción, su memoria de
      traducción contiene el histórico de toda la vida del documento en
      forma de pares de segmentos traducidos.
    </para>

    <para>
      Imaginemos ahora que en una de esas revisiones se considera
      que la tecnología ha cambiado y se recupera el viejo borrador como
      parte del documento. Al volver a procesar el original, en su más
      reciente versión, la herramienta de gestión de la
      memoria de traducción encontrará las vieja traducción que se
      realizó varias versiones atrás y la recuperará automáticamente o
      al menos como sugerencia de traducción, que el traductor sólo
      tendrá que revisar rápidamente y aceptar. Cuanto más grande sea el
      texto, mayores serán el ahorro y la productividad.
    </para>
  </sect1>


  <!-- %%%%%%%%%%%%%% -->  
  <sect1>
  	<title>Breve introducción de gettext</title>

    <programlisting>
      - breve presentación de gettext
      - presentación de herramientas
      - explicar de manera concisa cómo se trabaja normalmente con gettext
    </programlisting>
  </sect1>

  <!-- %%%%%%%%%%%%%% -->  
  <sect1>
    <title>Manejo de MMTT con gettext</title>

    <programlisting>
      - explicar un procedimiento recomendado para manejar las
        traducciones gettext con MMTT 
    </programlisting>

  </sect1>


  <!-- %%%%%%%%%%%%%%% -->
  <sect1>
    <title>
      Mantenimiento de traducciones de documentos Docbook/XML con
      MMTT: poxml
    </title>

    <para>
      Hasta ahora el panorama de las herramientas asistentes de la
      traducción con licencia libre para trabajar con documentos ha
      sido completamente desolador. Desde nuestro punto de vista es la
      explicación principal de porqué en general las traducciones de
      software están tan desactualizadas. Además ha contribuido la
      poca sensibilidad de los programadores para interesarse en los
      problemas de la adaptación lingüística y cultural del software. 
      Sólo hasta hace relativamente poco han empezado a surgir algunas
      alternativas y aún así su difusión ha sido mucho más reducida de
      lo que se merecen. Dentro de los objetivos de este documento
      está en proporcionar a estas soluciones la máxima visibilidad. 
    </para>
    
    <para>
      En las secciones anteriores hemos presentado la tecnología
      gettext. Es probable que si realizamos un análisis purista de la
      misma encontraríamos puntos mejorables y desde luego nosotros no
      nos cerramos a la innovación. Con todo, gettext es la tecnología
      de manejo de traducciones más potente y difundida en el software
      libre. Está disponible en todas las distribuciones y es la que
      usan la inmensa mayoría de los esfuerzos de traducción
      (i18n/l10n) de las aplicaciones más importantes. Además existe
      un juego de herramientas bastante completo que hace su manejo
      mucho más fácil. Pero de todas ellas en la que nos centraremos a
      continuación es en <application>poxml</application>. 
    </para>

    <para>
      <application>poxml</application> es una herramienta creada en el seno
      del proyecto <ulink url="http://kde.org">KDE</ulink>. Sirve
      para mantener traducciones de documentos Docbook/XML creando a
      partir de los mismos ficheros gettext que pueden manejarse con
      las herramientas gettext actuales y utilizar los resultados para
      acabar componiendo el documento final traducido, con la misma
      estructura del formato original. Ha sido creada por Stephan
      Kulow y trabaja particularmente bien con
      <application>Kbabel</application>, el cual ha sido extendido para
      manejarse con las marcas Docbook. 
    </para>

    <para>
      Es posible que nos pueda parecer que la versión actual de
      <application>poxml</application> no tiene todo el acabado que
      nos gustaría. En este 
      trabajo procuraremos identificar aspectos	mejorables y proponer
      soluciones. De cualquier manera, sin la menor duda, consideramos
      que esta debe ser la herramienta de referencia para la
      traducción de documentos. 
    </para>
    
    <para>
      Una de sus limitaciones es que sólo trabaja con
      Docbook/XML. Puede parecer interesante ser capaz de trabajar con
      XHTML o con cualquier DTD en general. Sin embargo entendemos lo
      complicado que puede ser la implementación y felicitamos
      públicamente a los autores por la elección del formato que se
      adapta perfectamente a las tendencias generales de documentación
      del software libre. 
    </para>
    
    <para> 
      La distribución de <application>poxml</application> se hace a
      través del paquete 
      <productname>kdesdk</productname> de la distribución de
      KDE. Desde nuestro punto de vista tiene mucho más sentido
      publicarlo independientemente del mismo, pero eso es algo que
      deberían decidir los propios autores<!-- jr: Esto se hace así
      en Debian. De hecho el paquete no 
      depende de ninguna otra librería de KDE -->. Si quiere
      descargarse el 
      paquete <productname>kdesdk</productname> probablemente lo
      tendrá ya disponible en su propia distribución. No hemos
      encontrado una URL de donde poder descargar el paquete con las
      fuentes pero al menos puede encontrarlas en su <ulink
      url="http://webcvs.kde.org/cgi-bin/cvsweb.cgi/kdesdk/poxml/">cvs
      de desarrollo</ulink>.  Tampoco hemos sabido localizar su página
      web de referencia, aunque suponemos que por ahora debería haber
      sido la del <ulink url="http://i18n.kde.org/tools/">proyecto de
      I18N de KDE</ulink>. Tampoco hemos sabido encontrar en el <ulink
      url="http://bugs.kde.org">Bugzilla de KDE</ulink> una sección
      dedicada a esta herramienta. Finalmente tampoco hemos encontrado
      más documentación sobre el mismo que la que se ofrecen en 
      <ulink
      url="http://i18n.kde.org/translation-howto/doc-translation.html">The
      KDE Translation HOWTO</ulink>. 
    </para>
  </sect1>

  <!-- %%%%%%%%%%% -->  
  <sect1>
    <title>Qué es qué en poxml</title>

    <formalpara><title><command>xml2pot</command></title>
      <para>
    	Es el filtro que genera un fichero <filename>.pot</filename> a
    	partir de un documento Docbook/XML. Este suele ser el primer
    	paso al empezar a traducir un documento por primera vez. 
      </para>
    </formalpara>

    <formalpara><title><command>transxx</command></title>
      <para>
    	Ni idea.
      </para>
    </formalpara>

    <formalpara><title><command>swappo</command></title>
      <para>
    	Esta utilidad cambia los contenidos de un fichero
    	<filename>.po</filename> alternando el contenido de los campos
    	msgid y msgstr.   
      </para>
    </formalpara>

    <formalpara><title><command>split2po</command></title>
      <para>
    	Esta utilidad sirve para alinear en un fichero
    	<filename>.po</filename> documentos ya traducidos con su
    	original. Desde este momento se puede gestionar la
    	actualización de las traducciones usando las herramientas
    	gettext y facilitar enormemente el trabajo. 
      </para>
    </formalpara>

    <formalpara><title><command>po2xml</command></title>
      <para>
    	<command>po2xml</command> tiene como parámetros el documento
	original a traducir, y el fichero
	<filename>.po</filename> traducido y devuelve un  
	documento Docbook/XML traducido.
      </para>
    </formalpara>

    <formalpara><title><command>fixsgml</command></title>
      <para>
    	Corrige el fichero sgml antes de convertirlo a xml (se sabe
	que xml es mucho más exigente con la corrección y validez del 
	marcado).
      </para>
    </formalpara>
  	
    <formalpara><title><command>xmlizer</command></title>
      <para>
    	Supuestamente esta utilidad sirve para adaptar ficheros
    	Docbook/SGML a Docbook/XML. 
      </para>
    </formalpara>
  	
  </sect1>
  
  <!-- %%%%%%%%%%%%%% -->
  <sect1>
    <title>Práctica: crear una MMTT nueva desde cero</title>

    <programlisting>
      - preparación XML
      - preparación PO
      - traducción
      - reconstrucción
    </programlisting>

    <para>
      A continuación vamos a mostrar un ejemplo real de trabajo. 
    <!-- jr: Ismael, usa mi wiki -->
    </para>
  </sect1>


  <!-- %%%%%%%%%%%%% -->
  <sect1>
    <title>Práctica: actualizando una traducción usando MMTT</title>

    <para>
    </para>
  </sect1>

  <!-- %%%%%%%%%%%%% -->
  <sect1>
    <title>
      Práctica: creando una MMTT nueva a partir de traducciones anteriores
    </title>

    <para>
    </para>
  </sect1>

  <!-- %%%%%%%%%%%%% -->
  <sect1>
    <title>Problemas al trabajar con poxml</title>

    <para>
    </para>
  </sect1>

  <!-- %%%%%%%%%%%%%% -->
  <sect1>
    <title>Sugerencias para el futuro desarrollo de poxml</title>

    <programlisting>
      - mantenerlo como un desarrollo independiente (como se hizo con
      scrollkeeper)
      - documentarlo
      - repaso de cariño a las aplicaciones.
      - especificaciones.
    </programlisting>
  </sect1>


  <!-- %%%%%%%%%%%% -->
  <sect1>
    <title>Colofón</title>

    <programlisting>
      - Recomendación encarecida del uso de MMTT
      - Realimentaciones sobre este trabajo:  
      - mejoras en <!-- jr: 'loor de' --> la claridad de este documento
      - erratas o defectos
      - otras sugerencias
      - Se buscan programatas para seguir trabajando en esta peli.
    </programlisting>

  </sect1>

    <!-- %%%%%%%%%%%%% -->
    <sect1>
      <title>Bibliografía</title>

      <programlisting>
	- el artículo del tío de Sun:
	http://developers.sun.com/dev/gadc/technicalpublications/articles/xliff.html
	- Bug 44
	- Norma XML 
	- Norma TMX
	- Norma XLIFF
	- Varios:
	http://es.tldp.org/Articulos/0000otras/doc-traduccion-libre/
	http://es.tldp.org/especificaciones/herramientas-linguisticas/herramientas-linguisticas/
	http://olea.org/articulos/diatriba-man-e-info/index.html
	http://olea.org/articulos/propuesta-l10n.html
	http://i18n.kde.org/translation-howto/doc-translation.html#doc-conversion
      </programlisting>
    </sect1>

</article>

