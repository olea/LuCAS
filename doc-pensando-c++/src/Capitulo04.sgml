<?xml  version="1.0" encoding="iso-8859-1"?>
<!-- -*- sgml -*- -->
<!--
  Editor:              Emacs 21/PSGML
  Traducción original: Sebastián Gurin <cancerbero_sgx@users.sourceforge.net>
  Formateado DocBook:  
  1ª Revisión:
  2ª Revisión
-->

<!--

cosas por hacer:

(1) en los <programlisting> que comienzan con //:
    CXX:archivo-duente.cpp hay que hacer un Xinclude. 


(2) etiquetado de palabras reservadas:
    palabras reservadas -> <literal role="keyword"> </literal>
    operadores -> <literal role="operator"> </literal>

-->

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                 "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<chapter 
  xmlns:xi="http://www.w3.org/2001/XInclude"
  id="C4">

  <title>Abstracción de Datos</title>
    
    <para>C++ es una herramienta de producción que ha sido
      mejorada con respecto a sus tecnologías predecesoras. ¿Por
      qué otro motivo usted debería hacer el esfuerzo de
      cambiarse a C++ (y es un esfuerzo, sin importar cuán
      fácilmente intentemos hacer esta transición), desde un
      lenguaje que le es bien conocido y con el cual ya es
      productivo? Sin lugar a dudas, una transición de este tipo
      hará que, mientras aprende el nuevo lenguaje, su nivel de
      productividad sea malo. ¿Por qué entonces hacerlo?  Déjeme
      responderle: es porque está convencido de que usando a esta
      nueva herramienta le podrá sacar mucho más
      provecho. </para>

    <para>En términos de programación, productividad significa
      que menos personas, en menos tiempo, puedan realizar
      programas más complejos y significativos. Desde luego, hay
      otras cuestiones que deben importarnos a la hora de escojer
      un lenguaje de programación. Aspectos a tener en cuenta son
      la eficiencia (¿la naturaleza del lenguaje hace que
      nuestros programas se enlentezcan o que sean demesiado
      grandes?), la seguridad (¿nos ayuda el lenguaje a
      asegurarnos de que nuestros programas hagan siempre lo que
      queremos? ¿maneja el lenguaje los errores apropiadamente?)
      y el mantenimiento (¿de qué manera nos ayuda el lenguaje a
      realizar código que sea fácil de entender, modificar y
      extender?). Estos son, con certeza, factores importantes
      que serán examinados en este libro. </para>

    <para>Hablando más toscamente, productividad significa que un
      programa que antiguamente les costaba a tres de ustedes una
      semana de trabajo en ser escrito, ahora le tome a tan sólo
      uno de ustede un día o dos. Esto toca varios niveles de la
      esfera económica. Usted se pone contento al ver que es
      capaz de construir algo en menos tiempo, sus clientes (o
      jefe) se sienten felices porque los productos les llegan
      más rápido y utilizando menos mano de obra y finalmente los
      compradores se sientes contentos porque pueden obtener
      productos más baratos. La única manera de obtener
      incrementos masivos en productividad es apoyándose en el
      código de otras personas; o sea, usando librerías.  </para>

    <para>Una librería es simplemente un manojo de código que
      alguien ha escrito y empaquetado todo junto. Muchas veces,
      el paquete mínimo es tan sólo un archivo con una extensión
      especial como <filename>lib</filename> y uno o más archivos
      de cabecera que le dicen al compilador qué hay en la
      librería. El enlazador sabrá cómo buscar el archivo de la
      librería y extraer el código compilado correcto. Sin
      embargo, esta es sólo una forma de entregar una
      librería. En plataformas que abarcan muchas arquitecturas,
      como Linux/Unix, el único modo sensato de entregar una
      libraría es con código fuente para que así pueda ser
      reconfigurado y reconstruido en el nuevo objetivo. </para>

    <para>De esta forma, las librerías probablemente sean las
      formas más importantes de progresar en términos de
      productividad y uno de los principales objetivos del diseño
      de C++ es hacer más fácil el uso de librerías. Esto implica
      entonces, que hay algo difícil en usar librerías en C. Si
      se entiende este factor, uno puede empezar a comprender el
      diseño de C++, y por lo tanto, cómo usarlo. </para>

  <sect1>
    <title>Una librería pequeña al estilo de C</title>

      <para>Aunque muchas veces, una librería comienza como una
        colección de funciones, si se ha usado alguna librería C
        relativamente seria se habrá observado que la cosa no
        termina ahí. Del mismo modo que "vida" es mucho más que
        comportamiento, acciones y transformaciones, en una
        biblioteca, además de funciones tenemos características
        (color, peso, textura, luminiscencia) las cuales son
        representados por datos. En C, cuando debemos representar
        características, es muy conveniente agruparlas todas
        juntas en una <emphasis>estructura</emphasis>,
        especialmente cuando queremos representar más de un tipo
        de cosa en nuestro problema. Así, se puede trabajar con
        una variable de estas <emphasis>estructuras</emphasis>
        para representar cada cosa. </para>

      <para>Así, la mayoría de las librerías en C constan de un
        conjunto de estructuras y un conjunto de funciones las
        cuales actúan sobre las primeras. Como un ejemplo sobre
        esta técnica, considérese la siguiente herramienta para
        programar la cual se comporta como un array, pero cuyo
        tamaño puede ser fijado en tiempo de ejecución, cuando se
        crea. La llamaremos <varname>CStash</varname>. Aunque la
        siguiente síntaxis es de C++, tiene el estilo clásico de
        una librería escrita en C:</para>

    <programlisting>
//: C04:CLib.h
// Archivo de cabecera para una librería al estilo C
// Una entidad parecida a un array cuyo tamaño puede 
// variar en tiempo de ejecución

typedef struct CStashTag {
   int size;      // Tamaño de cada espacio
   int quantity;  // Cantidad de espacios de almacenamiento
   int next;      // Próximo espacio vacío
   // Array dinámico de bytes:
   unsigned char* storage;
} CStash;

void initialize(CStash* s, int size);
void cleanup(CStash* s);
int add(CStash* s, const void* element);
void* fetch(CStash* s, int index);
int count(CStash* s);
void inflate(CStash* s, int increase);

///:~ 
      </programlisting>

      <para>Una etiqueta como <varname>CStashTag</varname> casi
        siempre se usa en aquellas estructuras que necesitan ser
        referenciadas dentro de ellas mismas. Tal es el caso de
        una <emphasis>lista enlazada</emphasis> en la cual se
        necesita un puntero a la siguiente variable de
        estructura, o sea, una manera de identificar el tipo de
        ese puntero dentro de la misma estructura. También es muy
        común ver en la declaración de las estructuras de una
        librería escrita en C el uso de
        <literal>typedef</literal> análogo al del ejemplo. Esto
        permite al programador tratar las estructuras como un
        nuevo tipo de dato y así definir nuevas variables (de esa
        estructura) del siguiente modo:</para>

    <programlisting>CStash A, B, C;</programlisting>

      <para>El puntero <varname>storage</varname> es un
        <type>unsigned char*</type>. Un <type>unsigned
        char</type> es la menor pieza de datos que un compilador
        C soporta aunque, en algunas máquinas puede ser de igual
        tamaño que la mayor. Aunque esto es dependiente de la
        implementación, por lo general un <type>unsigned
        char</type> es de un byte de tamaño. Dado que el
        <type>CStash</type> está diseñado para almacenar
        cualquier tipo de estructura el lector se puede preguntar
        si un puntero <type>void *</type> no sería más
        apropiado. Sin embargo, la idea no es tratar este puntero
        de almacenamiento como un bloque de datos de tipo
        desconocido, sino como un bloque de bytes
        contiguos. </para>

      <para>El archivo de código fuente para la implementación
        luce del siguiente modo (tener en cuenta que si la
        librería fuera comercial, es probable que no tengamos
        acceso al código fuente y sólo dispongamos de un archivo
        ya compilado <filename>obj</filename>,
        <filename>lib</filename> o <filename>dll</filename>,
        etc): </para>

    <programlisting>
//: C04:CLib.cpp {O}
// Implementation of example C-like library
// Declare structure and functions:
#include "CLib.h"
#include &lt;iostream>
#include &lt;cassert> using namespace std;
// Quantity of elements to add
// when increasing storage:
const int increment = 100;

void initialize(CStash* s, int sz) {
  s->size = sz;
  s->quantity = 0;
  s->storage = 0;
  s->next = 0;
}

int add(CStash* s, const void* element) {
  if(s->next >= s->quantity) //¿Queda suficiente espacio?
    inflate(s, increment);
  // Copiar element en storage,
  // comenzando en el siguiente espacio vacío:
  int startBytes = s->next * s->size;
  unsigned char* e = (unsigned char*)element;
  for(int i = 0; i < s->size; i++)
    s->storage[startBytes + i] = e[i];
  s->next++;
  return(s->next - 1); // índice
}

void* fetch(CStash* s, int index) {
  // Check index boundaries:
assert(0 <= index);
  if(index >= s->next)
    return 0; // To indicate the end
// Produce pointer to desired element:
return &(s->storage[index * s->size]);
}

int count(CStash* s) {
  return s->next;  // Elements in CStash
}

void inflate(CStash* s, int increase) {
  assert(increase > 0);
  int newQuantity = s->quantity + increase;
  int newBytes = newQuantity * s->size;
  int oldBytes = s->quantity * s->size;
  unsigned char* b = new unsigned char[newBytes];
  for(int i = 0; i < oldBytes; i++)
    b[i] = s->storage[i]; // Copy old to new
delete [](s->storage); // Old storage
s->storage = b; // Point to new memory
s->quantity = newQuantity;
}

void cleanup(CStash* s) {
  if(s->storage != 0) {
   cout << "freeing storage" << endl;
   delete []s->storage;
  }
} ///:~

</programlisting>

      <para><function>initialize()</function> realiza las
        disposiciones iniciales necesarias para la <type>struct
        CStash</type>, poniendo los valores apropiados en las
        variables internas. Inicialmente, el puntero
        <varname>storage</varname> es puesto a cero dado que aún
        no se ha almacenado nada. </para>

      <para>La función <function>add()</function> inserta un
        elemento en el siguiente lugar disponible de la
        <type>CStash</type>. Para esto, primero verifica que
        halla suficiente espacio disponible. Si no lo hay,
        expande el almacenaje (storage) usando la función
        <function>inflate()</function> que será descripta en
        breve.</para>

      <para>Dado que en tiempo de ejecución el compilador es
        incapaz de reconocer el tipo de variable que va a ser
        almacenado (la función tan sólo acepta un <type>void
        *</type>), no puede hacerse una simple asignación, que
        sería lo más conveniente. En lugar de esto, la variable
        es copiada byte a byte. La manera más directa de hacer
        esto es utilizando el indexado de arrays. En un momento
        dado, el caso más probable es que en
        <varname>storage</varname> ya hallan bytes almacenados,
        lo cual es indicado por <varname>next</varname>. Para
        obtener la posición de inserción correcta en el array, se
        multiplica <varname>next</varname> por el tamaño de cada
        elemento (en bytes) lo cual queda determinado en
        <varname>startBytes</varname>. Luego el argumento
        <varname>element</varname> se moldea a <type>unsigned
        char*</type> para que pueda ser referenciado y copiado
        byte a byte en el espacio disponible de
        <varname>storage</varname>. Se incrementa
        <varname>next</varname> de modo que indique el siguiente
        lugar de almacenamiento disponible y sae devuelve el
        número de índice del elemento insertado para que pueda
        ser recuperado con <function>fetch()</function>.  </para>
    
      <!-- Because the comqpiler doesn?t know the specific type
      of the variable being stored (all the function gets is a
      void*), you can?t just do an assignment, which would
      certainly be the convenient thing. Instead, you must copy
      the variable byte-by-byte. The most straightforward way to
      perform the copying is with array indexing. Typically,
      there are already data bytes in storage, and this is
      indicated by the value of next. To start with the right
      byte offset, next is multiplied by the size of each element
      (in bytes) to produce startBytes. Then the argument element
      is cast to an unsigned char* so that it can be addressed
      byte-by-byte and copied into the available storage
      space. next is incremented so that it indicates the next
      available piece of storage, and the ?index number? where
      the value was stored so that value can be retrieved using
      this index number with fetch( ).  -->

      <para><function>fetch()</function> verifica que el índice
        tenga un valor correcto y devuelve la dirección de la
        variable deseada, la cual se calcula en función del
        argumento <varname>index</varname>. Dado que
        <varname>index</varname> es el número de elementos a
        desplazarnos desde el principio [fixme: "the number of
        elements to offset into the CStash"] en la CStash, éste
        debe ser multiplicado por el tamaño en bytes que ocupa un
        elemento para obtener dicho desplazamiento pero en
        bytes. Cuando utilizamos este desplazamiento como índice
        del array <varname>storage</varname> lo que obtenemos no
        es la dirección, sino el byte almacenado en esta. Lo que
        hacemos entonces es utilizar el operador de dirección de
        memoria <literal role="operator">&amp;</literal>. </para>
    
      <!--fetch( ) checks to see that the index isn?t out of
      bounds and then returns the address of the desired
      variable, calculated using the index argument. Since index
      indicates the number of elements to offset into the CStash,
      it must be multiplied by the number of bytes occupied by
      each piece to produce the numerical offset in bytes. When
      this offset is used to index into storage using array
      indexing, you don?t get the address, but instead the byte
      at the address. To produce the address, you must use the
      address-of operator &.-->
    
      <para><function>count()</function> puede parecer un poco
        extraña a los programadores experimentados en C. Podría
        parecer demasiada complicación para una tarea que
        probablemente sea mucho más fácil de hacer a mano. Por
        ejemplo, si tenemos una <type>CStash</type> llamada
        <varname>intStash</varname>, es mucho más directo
        preguntar por la cantidad de elementos utilizando
        <varname>intStash.next</varname>, que llamando a la
        función (lo cual agrega un costo de velocidad adicional)
        <function>count(&amp;intStash)</function>. Sin embargo,
        la cantidad de elementos se calcula en función tanto del
        puntero <varname>next</varname> como del tamaño en bytes
        de cada elemento de la CStash; así la interfaz de la
        función <function>count()</function> nos permite la
        flexibilidad necesaria para no tener que preocuparnos por
        estas cosas. Pero, ¡hay!, la mayoría de los programadores
        no se preocuparán por descubrir lo que para nosotros es
        el <quote>mejor</quote> diseño para la
        librería. Probablemente lo que harán es mirar dentro de
        la estructura y obtener el valor de
        <varname>next</varname> directamente. Peor aún, podrían
        hasta cambiar el valor de <varname>next</varname> sin
        nuestro permiso. ¡Si sólo hubiera alguna manera para el
        diseñador de la librería de tener un mejor control sobre
        este tipo de cosas! (Si, estamos anunciando el comienzo
        de temas que vendrán...[fixme: ver abajo en inglés:
        foreshadowing]). </para>
    
      <!--count( ) may look a bit strange at first to a seasoned
      C programmer. It seems like a lot of trouble to go through
      to do something that would probably be a lot easier to do
      by hand. If you have a struct CStash called intStash, for
      example, it would seem much more straightforward to find
      out how many elements it has by saying intStash.next
      instead of making a function call (which has overhead),
      such as count(&intStash). However, if you wanted to change
      the internal representation of CStash and thus the way the
      count was calculated, the function call interface allows
      the necessary flexibility. But alas, most programmers won?t
      bother to find out about your ?better? design for the
      library. They?ll look at the struct and grab the next value
      directly, and possibly even change next without your
      permission. If only there were some way for the library
      designer to have better control over things like this!
      (Yes, that?s foreshadowing.)-->



    <sect2>
      <title>Almacenamiento dinámico</title>

        <!-- [FIXME: yo le hubiera llamado <title>Asignación de
      memoria dinámica</title>]-->

        <para>Dado que nunca conoceremos la cantidad máxima de
          almacenamiento que necesitaremos para una
          <type>CStash</type>, la memoria a la que apuntan los
          elementos de <varname>storage</varname> es asignada
          desde el <emphasis>heap</emphasis><footnote>

            <para><emphasis>heap</emphasis> puede traducirse al
              español como "montón" o "montículo". </para>

          </footnote>. El heap es un gran montón de memoria usado
          para asignar pequeñas piezas en tiempo de
          ejecución. Usamos el heap cuando no sabemos de antemano
          la cantidad de memoria que necesitará el programa que
          estamos escribiendo. Por ejemplo, esto se da en un
          programa en el que sólo en tiempo de ejecución sabremos
          si necesitamos memoria para 200 variables
          <type>Avion</type> o para 20. En C stándar, las
          funciones para asignación de memoria dinámica incluyen
          a <function>malloc()</function>,
          <function>calloc()</function>,
          <function>realloc()</function> y
          <function>free()</function>. En lugar de llamadas a
          librerías, C++ cuenta con una técnica más sofisticada
          (y por lo tanto más fácil de usar) para tratar con
          memoria dinámica. Esta técnica está integrada en el
          lenguaje por medio de las palabras reservadas <literal
          role="keyword">new</literal> y <literal
          role="keyword">delete</>. </para>

        <!-- You never know the maximum amount of storage you
        might need for a CStash, so the memory pointed to by
        storage is allocated from the heap. The heap is a big
        block of memory used for allocating smaller pieces at
        runtime. You use the heap when you don?t know the size of
        the memory you?ll need while you?re writing a
        program. That is, only at runtime will you find out that
        you need space to hold 200 Airplane variables instead of
        20. In Standard C, dynamic-memory allocation functions
        include malloc( ), calloc( ), realloc( ), and free(
        ). Instead of library calls, however, C++ has a more
        sophisticated (albeit simpler to use) approach to dynamic
        memory that is integrated into the language via the
        keywords new and delete.  -->

        <para>La función <function>inflate()</function> usa
          <literal role="keyword">new</> para obtener más memoria
          para la <type>CStash</type>. En este caso sólo
          expandiremos el espaciode memoria y nunca lo
          achicaremos. <function>assert()</function> garantizará
          que no se pase un número negativo como argumento a
          <function>inflate()</function> como valor de
          incremento. La nueva cantidad de elmentos que se podrán
          almacenar (una vez se halla completado
          <function>inflate()</function> se determina en la
          variable <varname>newQuantity</varname> la cual es
          multiplicada por el número de bytes que ocupa cada
          elemento para obtener el nuevo número de bytes totales
          de la asignación en la variable
          <varname>newBytes</varname>. Dado que conocemos cuántos
          bytes copiar desde la ubicación anterios,
          <varname>oldBytes</varname> es calculado usando la
          cantidad vieja de bytes
          (<varname>quantity</varname>). </para>

        <!--The inflate( ) function uses new to get a bigger
        chunk of space for the CStash. In this situation, we will
        only expand memory and not shrink it, and the assert( )
        will guarantee that a negative number is not passed to
        inflate( ) as the increase value. The new number of
        elements that can be held (after inflate( ) completes) is
        calculated as newQuantity, and this is multiplied by the
        number of bytes per element to produce newBytes, which
        will be the number of bytes in the allocation. So that we
        know how many bytes to copy over from the old location,
        oldBytes is calculated using the old quantity.-->

        <para>La asignación de memoria ocurre en la
          <emphasis>expresión-new</emphasis> la cual involucra la
          palabra clave <literal role="keyword">new</literal>:</>

      <para><programlisting>
new unsigned char[newBytes];
      </programlisting></para>

        <para>La forma general de una
          <emphasis>expresión-new</emphasis> es</>

      <programlisting>new Type;</programlisting>

        <para>donde <literal>Type</literal> describe el tipo de
          variable para la cual deseamos asignar memoria en el
          <emphasis>heap</emphasis>. Dado que en este caso,
          deseamos asignar memoria para un array de
          <type>unsigned char</type> de
          <varname>newBytes</varname> elementos, eso es lo que
          ponemos como <literal>Type</literal>. De igual forma
          podemos asignar memoria para algo más simple como un
          <type>int</type> con la expresión</>

      <programlisting>new int;</programlisting>

        <para>y aunque esto no sea muy útil muestra que la forma
          de la <emphasis>expresión-new</emphasis> es
          consistente. </para>

        <para>Una <emphasis>expresión-new</emphasis> devuelve un
          puntero a un objeto de tipo (Type) igual al
          especificado por nosotros. Así, si pedimos <literal>new
          Type</literal> obtendremos un puntero a un objeto de
          tipo <literal>Type</literal>, si decimos <literal>new
          int</literal> obtendremos un puntero a un entero. Si
          queremos un nuevo array de <type>unsigned char</type>
          (a <literal>new unsigned char </literal>array, en
          inglés) la expresión nos devolverá un puntero al primer
          elemento de dicho array. El compilador verificará que
          se asigne lo que devuelve una
          <emphasis>expresión-new</emphasis> a una variable
          puntero de tipo correcto. </para>

        <para>Por supuesto, es posible que al pedir memoria, la
          petición falle, por ejemplo, si no hay más memoria
          libre en el sistema. Como se aprenderá más adelante,
          C++ cuenta con mecanismos que entran en juego cuando la
          operación de asignación de memoria no fue
          exitosa. </para>

        <para>Sigamos con nuestro código. Una vez que hemos
          asignado memoria para el nuevo espacio de
          almacenamiento (variable <varname>storage</varname>),
          los datos que están en el viejo espacio de
          almacenamiento deben ser copiados al nuevo. Esto se
          hace, nuevamente, en un bucle, utilizando la notación
          de índexado de arrays, copiando un byte en cada
          iteración del bucle. Una vez finalizada esta copia, ya
          no necesitaremos los datos que están en el espacio de
          almacenamiento viejo por lo que pueden ser liberados de
          la memoria para que otras partes del programa puedan
          usar este espacio cuando lo necesiten. La palabra
          reservada <literal role="keyword">delete</literal> es
          el complemento de <literal role="keyword">new</> y debe
          ser utilizada sobre todas aquellas variables a las
          cuales se les halla asignado memoria con <literal
          role="keyword">new</>. (Si nos olvidamos de utilizar
          <literal role="keyword">delete</> la memoria del heap
          asignada con <literal role="keyword">new</> permanecerá
          no disponible. Si estas fugas de memoria
          (<emphasis>memory leak</emphasis>) son muchas podremos
          quedarnos sin memoria disponible para asignar.) La
          síntaxis de <literal role="keyword">delete</> es
          consistente con la de <literal role="keyword">new</>
          salvo para el caso de los arrays: cuando queremos
          liberar un array, debemos informarle al compilador que
          el puntero no apunta a un simple objeto sino a un array
          de objetos. Para esto se inserta un par de paréntesis
          rectos como prefijo del puntero que va a ser liberado:
          </para>

      <programlisting>delete []myArray;</programlisting>

        <para>Luego de liberar el viejo espacio de almacenamiento
        se asigna el nuevo (en el cual ya hicimos la copia del
        viejo) al puntero <varname>storage</varname> y se
        actualiza <varname>quantity</varname>. Así termina la
        función <function>inflate()</function>. </para>

<!-- FIXME: en el siguiente párrafo traduje "heap compaction" -->
<!-- como "defragmentación del heap" y "heap compactor" como -->
<!-- "defragmentador del heap". -->

        <para>A este punto es bueno notar que el administrador de
          memoria del heap es una primitiva del lenguaje. Nos
          provee de trozos [FIXME:chunks] de memoria cuando se lo
          pedimos con <literal role="keyword">new</> y nos los
          quita cuando invocamos a <literal
          role="keyword">delete</>. Si un programa asigna y
          libera memoria muchas veces, terminaremos con un heap
          <emphasis>fragmentado</emphasis>, es decir un heap en
          el que si bien puede haber memoria libre para ser
          utilizada, los trozos de memoria están divididos de
          modo tal que no exista un trozo lo que sea lo grande
          que necesitamos en un momento dado. Lamentablemente no
          existe una capacidad inherente del lenguaje para
          efectuar <emphasis>defragmentaciones del heap</>. Un
          defragmentador del heap complica las cosas dado que
          tiene que mover pedazos de memoria, y por lo tanto,
          hacer que los punteros dejen de apuntar a valores
          válidos. Algunos entornos operativos vienen con este
          tipo de facilidades pero obligan al programador a
          utilizar manipuladores [FIXME:handles] de memoria
          especiales en lugar de punteros (estos manipuladores
          pueden ser convertidos temporalmente en punteros luego
          de bloquear la memoria para que el defragmentador del
          heap no la modifique). También podemos construir por
          nosotros mismos uno de estos artilugios, aunque no es
          una tarea liviana.</para>

    </sect2>
    
    <sect2>
      <title>Suposiciones equivocadas</title>
      <para>
      </para>
    </sect2>
  </sect1>

  <sect1>
    <title>¿Qué está mal?</title>
    <para>
    </para>
  </sect1>

  <sect1>
    <title>El objeto básico</title>
    <para>
    </para>
  </sect1>

  <sect1>
    <title>¿Qué es un objeto?</title>
    <para>
    </para>
  </sect1>

  <sect1>
    <!-- Abstract data typing -->
    <title>Tipado de datos abstracto</title>
    <para>
    </para>
  </sect1>

  <sect1>
    <title>Detalles del objeto</title>
    <para>
    </para>
  </sect1>

  <sect1>
    <title>Conveciones de los ficheros de cabecera</title>
    <para>
    </para>
    
    <sect2>
      <title>Importancia de los ficheros de cabecera</title>
      <para>
      </para>
    </sect2>

    <sect2>
      <title>El problema de la declaración múltiple</title>
      <para>
      </para>
    </sect2>

    <sect2>
      <title>
	Las directivas del preprocesador #define, #ifndef y #endif
      </title>
      
      <para>
      </para>
    </sect2>

    <sect2>
      <title>Un estándar para los ficheros de cabecera</title>
      <para>
      </para>
    </sect2>

    <sect2>
      <title>Espacios de nombres en las cabeceras</title>
      <para>
      </para>
    </sect2>

    <sect2>
      <title>Uso de las cabeceras en proyectos</title>
      <para>
      </para>
    </sect2>
  </sect1>

  <sect1>
    <title>Estructuras anidadas</title>
    <para>
    </para>

    <sect2>
      <title>Resolución del alcance global</title>
      <para>
      </para>
    </sect2>
  </sect1>

  <sect1>
    <title>Resumen</title>
    <para>
    </para>
  </sect1>

  <sect1>
    <title>Ejercicios</title>
    <para>
    </para>
  </sect1>
</chapter>

<!-- Local Variables: -->
<!-- sgml-parent-document:"PensarEnC++.sgml" -->
<!-- End: -->
