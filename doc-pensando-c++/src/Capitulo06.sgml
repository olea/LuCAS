<?xml  version="1.0" encoding="iso-8859-1"?>
<!-- -*- sgml -*- -->
<!--
  Editor:              Emacs 21/PSGML
  Traducción original: 
  Formateado DocBook:  
  1ª Revisión:
  2ª Revisión
-->

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                 "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<chapter 
  xmlns:xi="http://www.w3.org/2001/XInclude"
  id="C6">
 
  
  <title>Inicialización y limpieza</title>

<!--
 Chapter 4 made a significant improvement in library use by taking all
 the scattered components of a typical C library and encapsulating them
 into a structure (an abstract data type, called a class from now on).
-->
  <highlights>
    <para>
      El capitulo 4 constituye una mejora significativa en el uso de
      librerías cogiendo componentes dispersos en una librería C típica y
      encapsulandolos en una estructura (un tipo abstracto de dato,
      llamado clase a partir de ahora).
    </para>
  </highlights>

    
<!--
 This not only provides a single unified point of entry into a library
 component, but it also hides the names of the functions within the
 class name. In Chapter 5, access control (implementation hiding) was
 introduced. This gives the class designer a way to establish clear
 boundaries for determining what the client programmer is allowed to
 manipulate and what is off limits. It means the internal mechanisms
 of a data type\u2019s operation are under the control and discretion
 of the class designer, and it\u2019s clear to client programmers what
 members they can and should pay attention to.
-->
  <para>
    Esto no sólo permite disponer de un sólo punto de entrada en un
    componente de librería, además también oculta los nombres de las
    funciones con el nombre de la clase. Esto le da al diseñador de la
    clase la posibilidad de establecer límites claros que determinan que
    cosas puede hacer el programador cliente y qué queda fuera de los
    límites. Eso significa que los mecanismos internos de las
    operaciones sobre los tipos de datos están bajo el control y la
    discrección del diseñdor de la clase, y deja claro a qué miembros
    puede y debe prestar atención el programador cliente.
  </para>

<!--
 Together, encapsulation and access control make a significant step in
 improving the ease of library use. The concept of \u201cnew data
 type\u201d they provide is better in some ways than the existing
 built-in data types from C. The C++ compiler can now provide
 type-checking guarantees for that data type and thus ensure a level of
 safety when that data type is being used.
-->
  <para>
    Juntos, la encapsulación y el control de acceso representan un paso
    significativo para aumentar la sencillez de uso de las librerías. El
    concepto de "nuevo tipo de dato" que ofrecen es mejor en algunos
    sentidos que los tipos de datos que incorpora C. El compilador C++
    ahora puede ofrecer garantías de comprobación de tipos para esos
    tipos de datos y así asegura un nivel de seguridad cuando se usan
    esos tipos de datos.
  </para>

<!--
 When it comes to safety, however, there\u2019s a lot more the compiler
 can do for us than C provides. In this and future chapters, you\u2019ll
 see additional features that have been engineered into C++ that make the
 bugs in your program almost leap out and grab you, sometimes before you
 even compile the program, but usually in the form of compiler warnings
 and errors. For this reason, you will soon get used to the
 unlikely-sounding scenario that a C++ program that compiles often runs
 right the first time.
-->
  <para>
    A parte de la seguridad, el compilador puede hacer mucho más por
    nosotros de los que ofrece C. En este y en próximos capítulos verá
    posibilidades adicionales que se han incluido en C++ y que hacen que
    los errores en sus programas casi salten del programa y le agarren,
    a veces antes incluso de compilar el programa, pero normalemente en
    forma de advertencias y errores en el proceso de compilación. Por
    este motivo, pronto se acostubrará a la extraña situación en que un
    programa C++ que compila, funciona a la primera.
  </para>

<!--
 Two of these safety issues are initialization and cleanup. A large
 segment of C bugs occur when the programmer forgets to initialize or
 clean up a variable. This is especially true with C libraries, when
 client programmers don\u2019t know how to initialize a struct, or
 even that they must. (Libraries often do not include an
 initialization function, so the client programmer is forced to
 initialize the struct by hand.) Cleanup is a special problem because
 C programmers are comfortable with forgetting about variables once
 they are finished, so any cleaning up that may be necessary for a
 library\u2019s struct is often missed.
-->
  <para>
    Dos de esas cuestiones de seguridad son la inicialización y la
    limpiza. Gran parte de los errores de C se deben a que el
    programador olvida inicializar o liberar una variable. Esto sucede
    especialmente con las librerías C, cuando el programador cliente no
    sabe como inicializar una estructura, o incluso si debe
    hacerlo. (A menudo las librerías no incluyen una función de
    inicialización, de modo que el programador cliente se ve forzado a
    inicializar la estructura a mano). La limpieza es un problema
    especial porque los programadores C se olvidan de las varibles una
    vez que han terminado, de modo que omiten cualquier limpieza que pudiera
    ser necesaría en alguna estructura de la librería.
  </para>

<!--   
 In C++, the concept of initialization and cleanup is essential for
 easy library use and to eliminate the many subtle bugs that occur when
 the client programmer forgets to perform these activities. This chapter
 examines the features in C++ that help guarantee proper initialization
 and cleanup
-->

  <para>
    En C++. el concepto de inicialización y limpieza es esencial para
    facilitar el uno de las librerías y eliminar muchos de los errores
    sutiles que ocurren cuando el programador cliente olvida cumplir con
    sus actividades. Este capítulo examina las posibilidades de C++ que
    ayudan a garantizar una inicialización y limpieza apropiadas.
  </para>



  <sect1>
    <title>Inicialización garantizada por el constructor</title> 

<!-- 
 Both the Stash and Stack classes defined previously have a function
 called initialize( ), which hints by its name that it should be called
 before using the object in any other way. Unfortunately, this means the
 client programmer must ensure proper initialization. Client programmers
 are prone to miss details like initialization in their headlong rush to
 make your amazing library solve their problem. In C++, initialization
 is too important to leave to the client programmer. The class designer
 can guarantee initialization of every object by providing a special
 function called the constructor. If a class has a constructor, the
 compiler automatically calls that constructor at the point an object is
 created, before client programmers can get their hands on the
 object. The constructor call isn't even an option for the client
 programmer; it is performed by the compiler at the point the object is
 defined.
-->

    <para>
      Tanto la clase Stash como la Stack definidas previamente tienen
      una función llamada <function>initialize()</function>. que como
      indica su nombre se debería llamar antes de usar el
      objeto. Desafortunadamente, esto significa que el programador
      cliente debe asegurar una inicialización apropiada. Los
      programadores cliente son propensos a olvidar detalles como la
      inicialización cuando tienen prisa por hacer que la librería
      resuelva sus problemas. En C++, la inicialización en demasiado
      importante como para dejarsela al programador cliente. El
      diseñador de la clase puede garantizar la inicialización de cada
      objeto facilitando una función especial llamada <quote>el
      constructor</quote>. Si una clase tiene un constructor, el
      compilador hará que se llame automáticamente al constructor en el
      momento de la creación del objeto, antes de que el programador
      cliente pueda llegar a tocar el objeto. La invocación del
      constructor no es una opción para el programador cliente; es
      realizada por el compilador en el punto en el que se define el
      objeto.
    </para>

<!--
 The next challenge is what to name this function. There are two
 issues. The first is that any name you use is something that can
 potentially clash with a name you might like to use as a member in the
 class. The second is that because the compiler is responsible for
 calling the constructor, it must always know which function to
 call. The solution Stroustrup chose seems the easiest and most logical:
 the name of the constructor is the same as the name of the class. It
 makes sense that such a function will be called automatically on
 initialization.
-->

    <para>
      El siguiente reto es cómo llamar a esta función. Hay dos
      cuestiones. La primera es que no debería ser ningún nombre que
      pueda querer usar para un miembro de la clase. La segunda es que
      dado que el compilador es el responsable de la invocación del
      constructor, siempre debe saber qué función llamar. La solución
      eligida por Stroustrup parece ser la más sencilla y lógica: el
      nombre del constructor es el mismo que el de la clase. Eso hace
      que tenga sentido que esa función sea invocada automáticamente en
      la inicialización.
    </para>
      

<!--
Here's a simple class with a constructor:

class X {
  int i;
public:
  X();  // Constructor
}; 
-->
    <para>
      Aquí se muesta un clase sencilla con un contructor:
    </para>
    
<programlisting>
class X {
  int i;
public:
  X();  // Constructor
};
</programlisting>

    
<!--
Now, when an object is defined,

void f() {
  X a;
  // ...
} 
-->

    <para>
      Ahora, cuando se define un objeto,
    </para>

<programlisting>
void f() {
  X a;
  // ...
} 
</programlisting>

<!--
 the same thing happens as if a were an int: storage is allocated for
 the object. But when the program reaches the sequence point (point of
 execution) where a is defined, the constructor is called
 automatically. That is, the compiler quietly inserts the call to X::X(
 ) for the object a at the point of definition. Like any member
 function, the first (secret) argument to the constructor is the this
 pointer \u2013 the address of the object for which it is being
 called. In the case of the constructor, however, this is pointing to an
 un-initialized block of memory, and it\u2019s the job of the
 constructor to initialize this memory properly.
-->

<!-- 
 Like any function, the constructor can have arguments to allow you
 to specify how an object is created, give it initialization values, and
 so on. Constructor arguments provide you with a way to guarantee that
 all parts of your object are initialized to appropriate values. For
 example, if a class Tree has a constructor that takes a single integer
 argument denoting the height of the tree, then you must create a tree
 object like this:

Tree t(12);  // 12-foot tree
-->

<!--
 If Tree(int) is your only constructor, the compiler won\u2019t let you
 create an object any other way. (We\u2019ll look at multiple
 constructors and different ways to call constructors in the next
 chapter.)
-->

<!--
 That\u2019s really all there is to a constructor; it\u2019s a specially
 named function that is called automatically by the compiler for every
 object at the point of that object\u2019s creation. Despite it\u2019s
 simplicity, it is exceptionally valuable because it eliminates a large
 class of problems and makes the code easier to write and read. In the
 preceding code fragment, for example, you don\u2019t see an explicit
 function call to some initialize( ) function that is conceptually
 separate from definition. In C++, definition and initialization are
 unified concepts \u2013 you can\u2019t have one without the other.
-->

<!-- 
 Both the constructor and destructor are very unusual types of
 functions: they have no return value. This is distinctly different from
 a void return value, in which the function returns nothing but you
 still have the option to make it something else. Constructors and
 destructors return nothing and you don\u2019t have an option. The acts
 of bringing an object into and out of the program are special, like
 birth and death, and the compiler always makes the function calls
 itself, to make sure they happen. If there were a return value, and if
 you could select your own, the compiler would somehow have to know what
 to do with the return value, or the client programmer would have to
 explicitly call constructors and destructors, which would eliminate
 their safety.
-->

    <para>
    </para>
  </sect1>

  <sect1>
    <title>Limpieza garantizada por el destructor</title>
    <para>
    </para>
  </sect1>

  <sect1>
    <title>Eliminación del bloque de definiciones</title>
    <para>
    </para>

    <sect2>
      <title>para bucles</title>
      <para>
      </para>
    </sect2>

    <sect2>
      <title>Alojamiento de memoria</title>
      <para>
      </para>
    </sect2>

  </sect1>

  <sect1>
    <title>Stash con constructores y destructores</title>
    <para>
    </para>
  </sect1>

  <sect1>
    <title>Stack con constructores y destructores</title>
    <para>
    </para>
  </sect1>

  <sect1>
    <title>Inicialización de tipos agregados</title>
    <para>
    </para>
  </sect1>

  <sect1>
    <title>Constructores por defecto</title>
    <para>
    </para>
  </sect1>

  <sect1>
    <title>Resumen</title>
    <para>
    </para>
  </sect1>

  <sect1>
    <title>Ejercicios</title>
    <para>
    </para>
  </sect1>

</chapter>

<!-- Local Variables: -->
<!-- sgml-parent-document:"PensarEnC++.sgml" -->
<!-- End: -->
