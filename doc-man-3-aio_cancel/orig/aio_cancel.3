.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.TH AIO_CANCEL 3 2003-11-14  "" "Linux Programmer's Manual"
.SH NAME
aio_cancel \- cancel an outstanding asynchronous I/O request
.SH SYNOPSIS
.sp
.B "#include <aio.h>"
.sp
.BI "int aio_cancel(int " fd ", struct aiocb *" aiocbp );
.sp
.SH DESCRIPTION
The
.B aio_cancel
function attempts to cancel outstanding asynchronous I/O requests
for the file descriptor
.IR fd .
If
.I aiocbp
is NULL, all such requests are cancelled. Otherwise, only the request
described by the control block pointed to by
.I aiocbp
is cancelled.
.LP
Normal asynchronous notification occurs for cancelled requests.
The request return status is set to \-1, and the request error status
is set to ECANCELED.
The control block of requests that cannot be cancelled is not changed.
.LP
If
.I aiocbp
is not NULL, and
.I fd
differs from the file descriptor with which the asynchronous operation
was initiated, unspecified results occur.
.LP
Which operations are cancelable is implementation-defined.
.\" FreeBSD: not those on raw disk devices.
.SH "RETURN VALUE"
This function returns AIO_CANCELED if all requests were successfully
cancelled. It returns AIO_NOTCANCELED when at least one of the
requests specified was not cancelled because it was in progress.
In this case one may check the status of individual requests using
.BR aio_error (3).
This function returns AIO_ALLDONE when all requests had
been completed already before this call.
When some error occurs, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBADF
.I fd
is not a valid file descriptor.
.SH "CONFORMING TO"
POSIX 1003.1-2003
.SH "SEE ALSO"
.BR aio_error (3),
.BR aio_fsync (3),
.BR aio_read (3),
.BR aio_return (3),
.BR aio_suspend (3),
.BR aio_write (3)
