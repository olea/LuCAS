<?xml version="1.0" encoding="ISO-8859-1" ?><!-- -*- xml -*- -->
 
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
       "file:///usr/share/sgml/docbook/dtd/xml/4.1.2/docbookx.dtd">
 
<!--
\porcion{El comando while}
\autor{\NC}
\colaborador{\RR}
\revisor{\}
\traductor{}
-->
 
<section>
  <title>El comando <command>while</command></title>

  <para>El comando <command>test</command> se utiliza cuando se itera con
el comando <command>while</command>. En este comando es muy útil la
comparación de valores.</para>

  <para><command>test</command> puede comparar números al igual que cadenas de caracteres.</para>

  <screen>
while [ ${CANT_USUARIOS} -le 1 ]
do
  echo Todavia no hay suficientes jugadores
  sleep 1
done
echo Ahora hay más de 1 usuario
  </screen>

  <para>Este ejemplo comprueba si la variable CANT_USUARIOS es menor o
igual (<option>-le</option> significa <emphasis>less or equal</emphasis> en
inglés) a uno; de ser así, repite cada 1 segundo, «<emphasis>Todavía no hay
suficientes jugadores</emphasis>». En cuanto la cantidad de usuarios sea mayor a 1 sale del ciclo.</para>

  <para>También es posible hacer un ciclo infinito utilizando
<command>test</command> (o bien llamado <command>[</command>) para que devuelva
siempre verdadero (con <command>[ 1 ]</command>). Se recomienda usar el comando
<command>true</command> que
devuelve un código de salida exitoso (cero) y el <command>while</command> no termina
a menos que se le envíe una señal con
<keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo>.</para>

  <screen>
while true
do
  clear
  mailq
  sleep 2
done
  </screen>

  <para>Este simple algoritmo muestra el contenido de la «bandeja de salida» de
<command>sendmail</command> cada 2 segundos. Vemos que con pocos conocimientos
en <command>bash</command> se pueden lograr infinidad de cosas.</para>
</section>
