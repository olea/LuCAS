<?xml version="1.0" encoding="ISO-8859-1" ?><!-- -*- xml -*- -->
 
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
       "file:///usr/share/sgml/docbook/dtd/xml/4.1.2/docbookx.dtd">
 
<!--
\porcion{Tuberías (pipes)}
\autor{\NC}
\colaborador{\RR}
\revisor{\}
\traductor{}
-->
 
<section>
  <title id="subsection:tuberias" xreflabel="Tuberías (pipes)">Tuberías (pipes)</title>

  <para>Podríamos representar cada programa como una «caja negra» que
tiene una entrada y una salida que se pueden unir entre ellos.</para>

  <para>El ejemplo que utilizamos se encuentra esquematizado en la figura <xref
      linkend="fig:redireccion-sort"/> siendo la entrada estándar
el teclado y la salida estándar «el terminal» o por simplicidad la
pantalla.</para>

  <figure id="fig:redireccion-sort">
    <title>Esquema de entrada y salida estándar del ejemplo</title>
    <graphic fileref="imagenes/Shell/RedireccionIO-Diagrama-Sort.png"
      scale="50"/>
  </figure>

  <para>Vamos a suponer un caso ficticio donde necesitamos todas las
definiciones de cada palabra en un texto. Primero las ordenamos
alfabéticamente, luego utilizamos un comando ficticio llamado <command>diccionario</command> que toma palabras de la entrada estándar y
las reescribe junto a su significado en la salida estándar.</para>

  <para>Su esquema se ve en la figura <xref linkend="fig:redireccion-dict"/>.
En este caso nombramos por separado las entradas y salidas estándares de los
dos programas, pero la «unión» entre ambos programas se puede considerar
como un sólo «tubo».</para>

  <figure id="fig:redireccion-dict">
    <title>Esquema de entrada y salida estándar del ejemplo 2</title>
    <graphic fileref="imagenes/Shell/RedireccionIO-Diagrama-Diccionario.png"
      scale="60"/>
  </figure>

  <para>En ese tubo, el flujo está en un estado intermedio, donde está ordenado,
pero no tiene las definiciones de diccionario.</para>

  <para>En la línea de comandos esto se escribe de la siguiente manera:</para>

  <screen>
<prompt>$</prompt> <userinput>sort | dicccionario</userinput>
  </screen>

  <para>Donde el caracter <command>|</command> representa la conexión entre la
salida estándar de un programa y la entrada estándar de otro.</para>

  <para>Con este fuerte y simple concepto se pueden concatenar gran cantidad
de programas como si fuera una línea de producción en serie para
generar resultados complejos.</para>

  <para>Para mejorar nuestro ejemplo sacaremos las palabras repetidas, antes
de mostrarlas con definiciones. Suponiendo que exista un programa
llamado <command>sacar-repetidas</command>, la línea de comando sería:</para>

  <screen>
<prompt>$</prompt> <userinput>sort | sacar-repetidas | diccionario</userinput>
  </screen>

  <para>Simple, utilizando herramientas sencillas logramos algo un poco más
complicado. El inconveniente que tenemos en este ejemplo es que hay
que escribir aquello a procesar. Normalmente queremos utilizar archivos
como entrada de nuestros datos. Es necesario un comando que envíe a
salida estándar un archivo, así se procesa como la entrada estándar
del <command>sort</command> y continúa el proceso normalmente. Este comando
es <command>cat</command>. La sintaxis es simple <command>cat</command>
<emphasis>nombre-de-archivo</emphasis>.</para>

  <para>Quedando nuestro ejemplo:</para>

  <screen>
<prompt>$</prompt> <userinput>cat archivo.txt | sort | sacar-repetidas | diccionario</userinput>
  </screen>

  <para>... crea un glosario de las palabras que se encuentren en
<filename>archivo.txt</filename></para>

  <para>La combinación de comandos es incalculable y brinda posibilidades
enormes. Veamos algunos ejemplos.</para>

  <example>
    <title>Uso de Tuberías</title>
    <para>En el caso que se quieran buscar procesos con el string
<emphasis>http</emphasis>:</para>

    <screen>
<prompt>$</prompt> <userinput>ps ax | grep http</userinput>
<computeroutput>
3343 ?        S      0:00 httpd -DPERLPROXIED -DHAV
3344 ?        S      0:00 httpd -DPERLPROXIED -DHAV
3975 ?        S      0:00 httpd -DPERLPROXIED -DHAV
12342 pts/6   S      0:00 grep http
</computeroutput>
    </screen>

    <para>Si queremos eliminar la ultima linea podemos volver a usar
<command>grep</command> con la opcion <command>-v</command></para>

    <screen>
<prompt>$</prompt> <userinput>ps ax | grep http | grep -v grep</userinput>
<computeroutput>
3343 ?        S      0:00 httpd -DPERLPROXIED -DHAV
3344 ?        S      0:00 httpd -DPERLPROXIED -DHAV
3975 ?        S      0:00 httpd -DPERLPROXIED -DHAV</computeroutput>
    </screen>

    <para>Se pueden filtrar las líneas que contengan la palabra
<emphasis>linux</emphasis> del archivo <filename>arch1.txt</filename> y luego
mostrarlas en un paginador como <command>less</command></para>

    <screen>
<prompt>$</prompt> <userinput>cat arch1.txt | grep linux | less</userinput>
    </screen>

    <para>Podemos enviar los resultados  por correo a un amigo,</para>

    <screen>
<prompt>$</prompt> <userinput>cat arch1.txt | grep linux | mail amigo@email.com</userinput>
    </screen>
  </example>

</section>
