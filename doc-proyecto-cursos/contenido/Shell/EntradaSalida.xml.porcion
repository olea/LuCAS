<?xml version="1.0" encoding="ISO-8859-1" ?><!-- -*- xml -*- -->
 
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
       "file:///usr/share/sgml/docbook/dtd/xml/4.1.2/docbookx.dtd">
 
<!--
\porcion{Entrada, salida y error estándar}
\autor{\NC}
\colaborador{\RR}
\revisor{\}
\traductor{}
-->
 
<section>
  <title id="sec:redireccion" xreflabel="Entrada, salida y error estándar">Entrada, salida y error estándar</title>
  
  <para>Haremos una breve introducción a los conceptos que definen los
    componentes de un programa en línea de comandos. Tal vez muchos
    piensen que se necesitan herramientas de funciones complejas para
    administrar un sistema GNU/Linux. Como contracara nos encontramos
    con 20 o más comandos de funciones básicas y relativamente
    simples. Vamos a detallar un ejemplo para ver cual a proximación
    es más útil.</para>

  <para>Un ejemplo de la vida cotidiana para entender la filosofía de
    las herramientas en línea de comandos se puede encontrar en las
    paginas info de "<foreignphrase lang="en">Text
    utilities</foreignphrase>" - "<foreignphrase lang="en">Opening the
    software toolbox</foreignphrase>" - "<foreignphrase
    lang="en">Toolbox introduction</foreignphrase>". Una traducción no
    oficial sería algo como:</para>

  <para><emphasis>«Mucha gente lleva una navaja de la Armada Suiza en
      los bolsillos de sus pantalones (o cartera). Una navaja de la
      Armada Suiza es una herramienta útil de tener: tiene varias
      hojas de cuchillo, un destornillador, pinzas, palillo para
      dientes, sacacorchos y probablemente unas cuantas cosas
      más. Para trabajos pequeños misceláneos de todos los días donde
      se necesita una herramienta de propósito general, es la
      herramienta indicada.  Por otro lado, un carpintero
      experimentado no construye una casa utilizando una navaja de la
      Armada Suiza. En cambio, posee una caja de herramientas llena de
      herramientas especializadas -una sierra, un martillo, un
      destornillador, etc. Y conoce exactamente dónde y cuando
      utilizar cada herramienta; no va a martillar clavos con el mango
      del destornillador.»</emphasis></para>

  <para>La filosofía de Unix (en línea de comandos) cree que un único
    programa <emphasis>especializado</emphasis> para hacer todas las
    tareas no es bueno, al menos no para usuarios avanzados o
    administradores.</para>

  <para>Los usuarios finales sin conocimientos en áreas informáticas
    pueden preferir tener un sólo programa para todo, pero este único
    programa tiene dificultades para el mantenimiento y
    modificación. Se vuelve monstruoso y complicado.</para>

  <para>En reemplazo se prefiere la <emphasis>navaja de la Armada
    Suiza</emphasis> para tareas cotidianas, o sea, un conjunto de
    programas pequeños de gran simplicidad que en conjunto se
    potencian.</para>

  <para>Para que los programas trabajen en conjunto se utiliza el
    concepto de <emphasis>flujo</emphasis> como una corriente de
    bytes.</para>

  <para>Al igual que con las tuberías reales (digamos caños, los
    grifos o canillas, duchas, etc.) de una casa, se conectan unos a
    otros donde cada uno tiene una <emphasis>entrada</emphasis>, una
    <emphasis>función</emphasis> y una <emphasis>salida</emphasis>. El
    concepto de «tuberías» lo veremos en la sección <olink
    targetdoc="contenido/Shell/Tuberias"
    targetptr="subsection:tuberias"/> por ahora vamos a distinguir los
    otros tres aspectos con un ejemplo.</para>

  <para>El comando <command>sort</command> puede ordenar por orden
    alfabético. Ésta sería la <emphasis>función</emphasis> del
    programa. Pero ¿qué ordena? bueno aquí es donde interviene la
    <emphasis>entrada</emphasis>. Que sin utilizar la magia de las
    tuberías, será el <emphasis>teclado</emphasis> la entrada.</para>

  <para>Haremos una prueba:</para>

  <screen>
<prompt>$</prompt> <userinput>sort</userinput>
    <computeroutput>
El
comando
sort
puede
ordenar
por
orden
alfabético
    </computeroutput>
  </screen>

  <para>... luego presionamos
    <keycombo><keycap>Ctrl</keycap><keycap>D</keycap></keycombo> que
    significa <emphasis>"fin de archivo"</emphasis> en la mayoría de
    los casos, apareciendo en pantalla:</para>

  <screen>
alfabético
comando
El
orden
ordenar
por
puede
sort
  </screen>

  <para>Con este ejemplo nos damos cuenta que la
    <emphasis>salida</emphasis> es la
    <emphasis>pantalla</emphasis>.</para>

  <para>A estas alturas uno podría preguntarse "Pero no es la única
    entrada que posee mi programa"; es verdad que un programa puede
    tener muchas entradas y muchas salidas. Por ejemplo cuando lee un
    archivo, éste es una entrada más. Pero los conceptos que venimos
    estudiando son entradas y salidas especiales, llamadas
    <emphasis>entrada estándar</emphasis> y <emphasis>salida
    estándar</emphasis>.</para>

  <para>También existe un tipo de salida adicional que es el
    <emphasis>error estándar</emphasis>.  Por este flujo se canalizan
    todos los mensajes de error o avisos del programa.  Facilitando
    varias tareas. Una muy común es reunir todos los errores en un
    archivo separado en caso de problemas, para su posterior
    análisis.</para>

  <para>En nuestro ejemplo si <command>sort</command> intentaba abrir
    un archivo y no existía, es preferible que escriba:</para>

  <screen>
Fichero o directorio no existe
  </screen>

  <para>Antes de que lo canalice como salida estándar y diga</para>

  <screen>
directorio
existe
Fichero
no
o
  </screen>

  <para>Teniendo claro los conceptos vamos a ver cómo utilizamos las
    tuberías para «unir» los programas entre sí.</para>
</section>
