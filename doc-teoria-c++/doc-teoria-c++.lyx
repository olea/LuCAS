#This file was created by <manuel> Sun May 16 05:21:12 1999
#LyX 0.12 (C) 1995-1998 Matthias Ettrich and the LyX Team
\lyxformat 2.15
\textclass book
\language spanish
\inputencoding default
\fontscheme default
\graphics default
\paperfontsize 10
\spacing single 
\papersize a4paper
\paperpackage a4
\use_geometry 1
\use_amsmath 0
\paperorientation portrait
\leftmargin 20mm
\topmargin 20mm
\rightmargin 20mm
\bottommargin 20mm
\secnumdepth 5
\tocdepth 5
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle headings

\layout Title

Teoría del Lenguaje C++
\layout Standard


\begin_inset LatexCommand \tableofcontents

\end_inset 


\layout Chapter

Introducción al Curso de C++
\layout Standard

El objetivo de este curso es enseñar el lenguaje C++, o dicho de otro modo,
 enseñar a programar en lenguaje C++.
 En esta lección se va a estudiar los siguientes puntos:
\layout Itemize

Idea general y origen del lenguaje C++.
\layout Itemize

Programación orientada a objetos (OOP).
\layout Itemize

Características principales de la OOP:
\layout Quotation

Encapsulación.
\layout Quotation

Herencia.
\layout Quotation

Polimorfismo
\layout Itemize

Forma de implementar las clases en C++.
\layout Section

Idea general del Lenguaje C++ 
\layout Standard

Aunque C es uno de los mejores lenguajes de programación de propósito general,
 a medida que un sistema software se va haciendo más grande se va acentuando
 más algunas deficiencias del C, como es la casi ilimitada libertad que
 tiene el programador sobre las rutinas que se implementan.
 El C++ soluciona este problema facilitando la creación de unidades funcionales
 de caja negra que tienen acceso estrictamente controlado; a estas unidades
 se les llama objetos, por este motivo se dice que el C++ es un lenguaje
 orientado a objetos.
\layout Section

Origen 
\layout Standard

El C++ se llamó originalmente C con clases y fue desarrollado por Bjarne
 Stroustrup de los laboratorios Bell en Murray Hill, New Jersey, en 1983.
 El C++ se puede considerar como una ampliación del C estándar, por lo que
 la mayor parte de lo que conocemos del C es aplicable al C++.
\layout Standard

Es necesario dejar claro en este momento que este tutor enseña el lenguaje
 C++, no la programación orientada a objetos (OOP), aunque la mayoría de
 los programas de C++ implementados en este tutor son programas orientados
 a objetos.
 Como el lenguaje C se estudió en el tutor de C, en este tutor estudiaremos
 todas las características específicas del C++, es decir, aquellas característic
as que posee el C++ y no las posee el C.
 Profundizaremos bastante en todas ellas de manera que no dejemos nada sin
 comentar.
 Como ya se dijo en el tutor de C, leyendo simplemente este tutor y libros
 de C++ no se aprende este lenguaje, sino que es imprescindible e ineludible
 programar en C++, y cuanto más se programe, mejor se captarán los conceptos
 y más rápido se aprenderá.
\layout Section

Programación Orientada a Objetos
\layout Standard

Aunque acabamos de decir que el objetivo de este tutor es enseñar el lenguaje
 C++ y no la programación orientada a objetos, lo cual podría ocupar otro
 tutor completo ya que es otra forma de programar y de pensar en términos
 programáticos, sí es pertinente mostrar cuáles son las principales característi
cas de esta nueva metodología de la programación.
 Estos rasgos principales los podemos resumir en tres: encapsulación, herencia
 y polimorfismo.
\layout Subsection

Encapsulación
\layout Standard

La programación orientada a objetos (OOP) está basada en la manipulación
 de objetos.
 Un objeto es un concepto que alberga datos y funciones que operan con esos
 datos.
 Una vez que se ha implementado un objeto, lo único que necesita saber un
 programador es la interface con la cual comunicarse con él.
\layout Standard

Para entender mejor la idea de objeto, supongamos que un reloj digital es
 un objeto.
 Los datos serían: la hora, la fecha, etc.
 La interface estaría formada por las funciones que manipulan esos datos:
 mostrar la hora, mostrar la fecha, cambiar la hora, cambiar la fecha, etc.
 Observad que el usuario no necesita saber cómo están implementadas tales
 funciones para manipular los datos; incluso se podría cambiar la implementación
 de estas funciones y la interface seguiría siendo la misma.
\layout Standard

Un ejemplo de objeto en programación podría ser una pila.
 La interface estaría formada por dos funciones: apilar y desapilar.
 Al usuario del objeto no le importa cuáles son los datos del objeto ni
 cómo están implementadas estas dos funciones.
 El programador del objeto podría diseñar la pila como un array estático
 y cambiar posteriormente la implementación para que la pila esté diseñada
 como una lista dinámica enlazada.
 Al usuario de la pila no le afectaría en nada el cambio de diseño en la
 pila, puesto que la interface seguiría siendo la misma, esto es, formada
 por las funciones: apilar y desapilar.
\layout Standard

Los objetos también reciben el nombre de tipo abstracto de datos (TAD, DAT
 en inglés).
 Y la encapsulación recibe también el nombre de abstracción de datos.
\layout Subsection

Herencia
\layout Standard

Una de las características fundamentales en los lenguajes orientados a objetos
 es la herencia.
 Gracias a esto un determinado objeto puede 
\emph on 
heredar
\emph default 
 propiedades de otros objetos.
 Estos vínculos nos permiten, en primer lugar, evitar informaciones duplicadas.
 Pero su importancia va mucho más allá, ya que el concepto de herencia implica
 una clasificación y una interdependencia entre los objetos.
 Veamoslo con un ejemplo.
\layout Standard

Supongamos que definimos el objeto animal.
 Este objeto abstracto tiene una serie de características: es un ser vivo,
 necesita alimentarse, se reproduce, etc.
 Acto seguido definimos el objeto mamífero indicándole que es un animal.
 Este objeto posee todas las características de los animales y además le
 añade nuevas características: es vertebrado, tiene mamas, etc.
 A continuación definimos el objeto persona indicándole que es un mamífero
 por lo que herederá todas las características de los mamíferos y de los
 animales.
 Además les añadimos otras que son propias a las personas: habla, es racional,
 etc.
 Por último, definimos el objeto alumno indicándole que es una persona.
 El objeto alumno tendrá todas las características de persona y tendrá también
 las suyas propias: matrícula, asignaturas que tiene, etc.
 Finalmente, definimos Antonio como una instanciación del objeto alumno,
 es decir, concretamos el objeto abstracto alumno sobre un elemento real,
 Antonio; no necesitamos definir nada.
 El lenguaje ya "sabe" que Antonio es un ser vivo, es vertebrado, etc.
\layout Subsection

Polimorfismo
\layout Standard

Vamos a explicar este concepto a través de dos ejemplos.
 Imaginemos que tenemos dos pilas, una almacena números enteros y la otra
 almacena números en coma flotante.
 Las dos funciones básicas que podemos realizar con una pila son meter y
 sacar.
 Como tenemos dos pilas, podríamos implementar cuatro funciones diferentes
 con cuatro nombres diferentes: apilaint, desapilaint, apilafloat y desapilafloa
t.
 Aunque esto funcione, estamos complicando el programa a nivel conceptual.
 Utilizando la idea de polimorfismo podemos simplificar conceptualmente
 el programa implementando cuatro funciones con dos nombres diferentes:
 apila y desapila.
 Cuando invoquemos, por ejemplo, a la función apila, el compilador deberá
 determinar si llamamos a la función apila de la pila de números enteros
 o a la función apila de la pila de números en coma flotante.
 Las funciones apila y desapila se dice que están sobrecargadas.
\layout Standard

Los operadores también se pueden sobrecargar en C++.
 De hecho ya están sobrecargados en casi todos los lenguajes de programación.
 Por ejemplo, el operador + lo utilizamos en C y C++ para sumar operandos
 que pueden ser del tipo carácter, entero, coma flotante, etc.
\layout Standard

Veamos otro ejemplo interasente de polimorfismo que hace uso de la herencia.
 Supongamos que tenemos definido el objeto punto con la función dibujar,
 la cual pinta un punto.
 A continuación definimos el objeto línea que hereda las características
 del objeto punto.
 En el objeto lína, utilizando la idea de polimorfismo, volvemos a definir
 la función dibujar, pero en este caso esta función traza una línea; la
 función dibujar del objeto línea puede utilizar, si lo desea, la función
 dibujar, heredada del objeto punto, para dibujar cada uno de los puntos
 de los que está constituida la línea.
\layout Section

Forma de Implementar las Clases
\layout Standard

Para terminar con esta introducción al lenguaje C++ vamos a hacer una recomendac
ión.
 Todos los programas ejemplos de esta lección están en un sólo fichero.
 La mayoría de los ejemplos están constituidos por la definición de un tipo
 abstracto de datos (llamados clase en C++ así como a la instanciación de
 una clase se le llama objeto) y la función main para probar la clase definida.
 Los programas ejemplos se han realizado en un sólo fichero para facilitar
 su exposición y explicación en el tutor.
 No obstante, en la práctica es recomendable dividir el diseño de una clase
 en dos ficheros: un fichero sería de cabecera (con extensión .H) y en él
 estarían todas las declaraciones de la clase, y el otro fichero sería de
 código ejecutable (con extensión .CPP) y en él estarían todas las definiciones
 relativas a la clase declarada.
 Al principio del fichero que tiene las definiciones hacemos un 
\family typewriter 
#include
\family default 
 del fichero que contiene las declaraciones.
\layout Standard

Cuando queramos utilizar esa clase en un programa de C++ tenemos dos posibilidad
es:
\layout Enumerate

Si el programa no lo hacemos como proyecto, simplemente hacemos un 
\family typewriter 
#include
\family default 
 del fichero que contiene las definiciones de la clase al principio del
 fichero del programa.
\layout Enumerate

Si el programa lo hacemos como proyecto, añadimos a la lista de ficheros
 del proyecto, el fichero de las definiciones de la clase, bien con extensión
 .CPP o bien con extensión .OBJ.
 Además hay que tener en cuenta que debemos hacer un #include del fichero
 con las declaraciones de la clase, en cada fichero del proyecto que utilice
 dicha clase.
\layout Chapter

C++ Como una Mejora del C
\layout Standard

Esta lección explica las nuevas características de C++ no orientadas a objetos.
 Se trata de un importante número de pequeñas adiciones que hace el C++
 sobre el C.
 En esta lección se va a estudiar los siguientes puntos:
\layout Itemize

Nuevo estilo de comentario (con 
\backslash 

\backslash 
).
\layout Itemize

Declaraciones (en cualquier sitio).
\layout Itemize

Los nombres de struct y enum son tipos.
\layout Itemize

Operador de resolución de ámbito (::).
\layout Itemize

Declaraciones por referencia (con el operador &).
\layout Itemize

Uniones anónimas (uniones sin nombre).
\layout Itemize

Conversión de tipo explícita (notación funcional de los moldes).
\layout Itemize

Funciones en línea (inline).
\layout Itemize

Argumentos por defecto.
\layout Itemize

Funciones sobrecargadas (antiguamente se especificaba con overload).
\protected_separator 
 
\layout Itemize

Operadores de almacenamiento libre (
\family typewriter 
new
\family default 
 y 
\family typewriter 
delete
\family default 
).
\layout Itemize

Entrada/Salida estándar (con los flujos 
\family typewriter 
cout
\family default 
 y 
\family typewriter 
cin
\family default 
, y con los operadores sobrecargados 
\family typewriter 
<<
\family default 
 y 
\family typewriter 
>>
\family default 
, que se encuentran declarados en los ficheros de cabecera 
\family typewriter 
stream.h
\family default 
 y 
\family typewriter 
iostream.h
\family default 
).
\layout Section

Comentarios
\layout Standard

C++ introduce un nuevo estilo de comentario con el símbolo 
\family typewriter 
//
\family default 
.
 Este símbolo indica comentario hasta final de línea.
 Ejemplos:
\layout Quotation


\family typewriter 
int x; // a es una variable de tipo int
\layout Quotation


\family typewriter 
int y; /* y es una variable de tipo int */
\layout Section

Declaraciones
\layout Standard

En C, las declaraciones locales han de ir inmediatamente después de las
 llaves de comienzo de bloque.
 En C++ se puede declarar una variable en cualquier sitio, existiendo desde
 el punto de declaración hasta el final del bloque en la que se ha declarado.
 Ejemplo:
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 x = 10;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 int y; // esta línea no es correcta en C, pero sí en C++
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 y = 20;
\layout Quotation


\family typewriter 
}
\layout Standard

Una declaración muy frecuente en C++ es la siguiente:
\layout Quotation


\family typewriter 
for(int i = iinic; i <= ifin; i++)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 sentencias
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 }
\layout Standard

La variable i sólo tiene existencia en el bloque en el que está declarada.
 Ejemplo:
\layout Quotation


\family typewriter 
for(register int i = 0; i < IMAX; i++)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int t = v[i-1];
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 v[i-1] = v[i];
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 v[i] = t;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 }
\layout Standard

En C++, los nombres de enum y de struct son tipos.
 Esto nos permite hacer los siguiente:
\layout Quotation


\family typewriter 
enum ecolores { rojo, verde, azul };
\layout Quotation


\family typewriter 
struct scolores { ecolores color; char nombre_color[20]; };
\layout Quotation


\family typewriter 
scolores color; // color es de tipo scolores
\layout Standard

En C, las anteriores sentencias habría que hacerlas del siguiente modo:
 
\layout Quotation


\family typewriter 
enum ecolores{ rojo, verde, azul };
\layout Quotation


\family typewriter 
struct scolores { enum ecolores color; char nombre_color[20]; };
\layout Quotation


\family typewriter 
struct scolores color; // color es de tipo struct scolores
\layout Section

Operador de Resolución de Ámbito 
\family typewriter 
(::)
\layout Standard

C es un lenguaje est ucturado en bloque.
 C++ hereda los mismos conceptos de bloque y ámbito.
 El operador 
\family typewriter 
::
\family default 
 se usa del siguiente modo:
\layout Quotation


\family typewriter 
::variable
\layout Standard

y tiene el significado de permitir el acceso a variable, que debe estar
 declarada externamente.
\layout Quotation


\family typewriter 
// Ejemplo del operador ::
\layout Quotation


\family typewriter 
// Este programa imprime 
\layout Quotation


\family typewriter 
#include <stdio.h>
\layout Quotation


\family typewriter 
int i = 1; // i externa
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 int i = 2; // i local a función main()
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int i = 3; // i local al bloque en la que está declarada
\protected_separator 
 
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 printf("%d %d ", i, ::i); // imprime 
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 printf("%d %d ", i, ::i); // imprime 
\layout Quotation


\family typewriter 
}
\layout Section

Declaraciones por Referencia y LLamadas por Referencia
\layout Standard

El operador 
\family typewriter 
&
\family default 
 tiene en C++ un significado adicional a los que ya tiene en C: declarar
 una variable o un parámetro de una función como referencia de otra variable.
 La forma general de declara una variable como referencia de otra es:
\layout Quotation


\family typewriter 
tipo & identificador = objeto
\layout Standard

Ejemplo:
\layout Quotation


\family typewriter 
#include <stdio.h>
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 int i;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 int& i1 = i;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 int& i2 = i1;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 int& i3 = i2;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 i = 1;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 printf("%d ", i1); // imprime 
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 i2 = 2;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 printf("%d ", i3); // imprime 
\layout Quotation


\family typewriter 
}
\layout Standard

Otros ejemplos:
\layout Quotation


\family typewriter 
double a[10];
\layout Quotation


\family typewriter 
double& ultimo = a[9]; // ultimo es un alias para a[9]
\layout Quotation


\family typewriter 
char& nueva_linea = '
\backslash 
n';
\layout Standard

El nombre ultimo es una alternativa para el elemento del array a[9].
 Estos nombres, una vez que son inicializados, no pueden ser cambiados.
 También es posible inicializar una referencia a un literal, lo cual crea
 una referencia a una localización desconocida donde se almacena el literal.
\layout Standard

El uso principal del operador 
\family typewriter 
&
\family default 
 con el significado que acabamos de describir se da en los argumentos pasados
 por referencia.
 Observar estas dos versiones de la misma función:
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
7 2 0 0 -1 -1 -1 -1
1 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 1 0 0
2 1 0 "" ""
2 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""


\family typewriter 
// estilo C
\newline 
// estilo C++
\newline 
void intercambiar(int *px, int *py)
\newline 
void intercambiar(int&x, int&y)
\newline 
{
\newline 
{
\newline 

\protected_separator 
 int aux = *px;
\newline 

\protected_separator 
 int aux = x;
\newline 

\protected_separator 
 *px = *py;
\newline 

\protected_separator 
 x = y;
\newline 

\protected_separator 
 *py = aux;
\newline 

\protected_separator 
 y = x;
\newline 
}
\newline 
}
\layout Standard

Es obvio que la segunda versión de la función 
\family typewriter 
intercambiar()
\family default 
 es mucho más clara que la primera.
\layout Standard

También los valores devueltos por las funciones pueden ser por referencia.
 Como es de suponer, el valor devuelto ha de ser una referencia a una variable
 no local a la función que devuelve el valor.
 Ejemplo:
\layout Quotation


\family typewriter 
#include <stdio.h>
\layout Quotation


\family typewriter 
int& f(int &x)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 return x;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 int y;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 f(y) = 20; // en realidad el 20 se asigna a y
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 printf("%d", y); // imprime 
\layout Quotation


\family typewriter 
}
\layout Standard

Estas dos funciones son incorrectas:
\layout Quotation


\family typewriter 
int& f1(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 int x = 10;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 return x;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
int& f2(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 return 10;
\layout Quotation


\family typewriter 
}
\layout Standard

El compilador debe informar de error de compilación en ambos return.
\layout Section

Uniones Anónimas
\layout Standard

Las uniones anónimas son las uniones que no tienen nombre.
 El C no dispone de ellas.
 Ejemplo:
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
8 2 0 0 -1 -1 -1 -1
1 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 1 0 0
2 1 0 "" ""
2 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""


\family typewriter 
// C++
\newline 
// C
\newline 
union
\newline 
union
\newline 
{
\newline 
{
\newline 

\protected_separator 
 int d;
\newline 

\protected_separator 
 int d;
\newline 

\protected_separator 
 float f;
\newline 

\protected_separator 
 float f;
\newline 
};
\newline 
} u;
\newline 
f = 1.1;
\newline 
u.f = 1.1;
\newline 
printf("%d", d);
\newline 
printf("%d", u.d);
\layout Section

Conversión de Tipo Explícita
\layout Standard

En C++, el nombre de un tipo puede ser usado como una función para realizar
 una conversión de tipo.
 Esto supone una alternativa a los moldes.
 Ejemplo:
\layout Quotation


\family typewriter 
#include <stdio.h>
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 int i = 10;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 float f1 = i;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // conversión de tipo implícita
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 float f2 = (float) i; // conversión de tipo explícita: notación molde
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 float f3 = float(i); // conversión de tipo explícita: notación funcional
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 printf("%g %g %g", f1, f2, f3); // imprime 
\layout Quotation


\family typewriter 
}
\layout Standard

Otro ejemplo de conversión explícita mediante notación funcional:
\layout Quotation


\family typewriter 
struct st{ int d; float f; };
\layout Quotation


\family typewriter 
typedef st *pst;
\layout Quotation


\family typewriter 
char *str = "abcdef";
\layout Quotation


\family typewriter 
pst p = pst(str);
\layout Section

Funciones INLINE 
\layout Standard

En el curso de C vimos que las macros pueden dar problemas como éste:
\layout Standard

Dado
\layout Quotation


\family typewriter 
#define CUAD(x) x*x
\layout Standard

la sentencia
\layout Quotation


\family typewriter 
CUAD(a+b)
\layout Standard

expande a:
\layout Quotation


\family typewriter 
a+b*a+b
\layout Standard

que no es evidentemente la expresión esperada.
 El problema puede ser evitado parentizando la definición de la macro.
 Sin embargo, la solución no protege contra tipos impropios.
\layout Standard

El C++ ofrece una alternativa elegante y eficiente usando funciones inline:
\layout Quotation


\family typewriter 
inline int cuad(int x)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 return x*x;
\layout Quotation


\family typewriter 
}
\layout Standard

La palabra clave inline le dice al compilador que la función sea compilada
 como una macro, es decir, el especificador inline fuerza al compilador
 de C++ a sustituir el cuerpo de código de 
\family typewriter 
cuad()
\family default 
 en el lugar en que esta función es invocada.
 Aunque el uso de inline incrementa la velocidad de ejecución porque se
 elimina la llamada a la función, produce un incremento del tamaño del código,
 especialmente si la función inline contiene muchas líneas de código y es
 incovada muchas veces en el programa.
 Otro ejemplo de función inline:
\layout Quotation


\family typewriter 
inline void imprimir(int a, int b)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 printf("
\backslash 
n%d", a);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 printf("
\backslash 
n%d", b);
\layout Quotation


\family typewriter 
}
\layout Section

Argumentos por Defecto
\layout Standard

Uno o más argumentos en una función de C++ pueden ser especificado teniendo
 valores por defecto.
 Ejemplo:
\layout Quotation


\family typewriter 
#include <stdio.h>
\layout Quotation


\family typewriter 
int mult(int x, int y = 1)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 return(x * y);
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 printf("%d %d", mult (5, 6), mult (7)); // imprime 
\layout Quotation


\family typewriter 
}
\layout Standard

Sólo los parámetros finales de una función pueden tener valores por defecto.
 Ejemplo:
\layout Quotation


\family typewriter 
void f1(int i, int j = 2);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // legal
\layout Quotation


\family typewriter 
void f2(int i = 3, int j);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // ilegal
\layout Quotation


\family typewriter 
void f3(int i, int j = 4, int k = 5);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // legal
\layout Quotation


\family typewriter 
void f4(int i = 6, int j = 7, int k = 8); // legal
\layout Quotation


\family typewriter 
void f5(int i, int j = 9, int k);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // ilegal
\layout Section

Funciones Sobrecargadas
\layout Standard

El término sobrecarga se refiere al uso del mismo nombre para varios significado
s de un operador o una función.
 El significado seleccionado depende de los tipos de los argumentos usados
 por el operador o la función.
 El primer estándar C++ introducía la palabra clave 
\family typewriter 
overload
\family default 
 para indicar que un nombre particular será sobrecargado.
 En el nuevo estándar de C++ se considera obsoleto el uso de esta instrucción.
 En este momento restringiremos nuestra discusión a la sobrecarga de funciones
 y dejaremos la sobrecarga de operadores para lecciones posteriores.
\layout Quotation


\family typewriter 
// Ejemplo de sobrecarga de funciones
\layout Quotation


\family typewriter 
overload media_array; // opcional en el nuevo estándar de C++
\layout Quotation


\family typewriter 
double media_array(double a[], int tam);
\layout Quotation


\family typewriter 
double media_array(int a[], int tam);
\layout Quotation


\family typewriter 
double media_array(int a[], int tam)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 int sum = 0;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 for(int i = 0; i < tam; ++i)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 sum += a[i]; // ejecuta aritmética de enteros
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 return((double) sum / tam);
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
double media_array(double a[], int tam)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 double sum = 0.0;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 for(int i = 0; i < tam; ++i)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 sum += a[i]; // ejecuta aritmética de double
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 return(sum / tam);
\layout Quotation


\family typewriter 
}
\layout Standard

El compilador elige automáticamente la función que coincide con los tipos
 de los argumentos.
\layout Description

Atención: No se puede sobrecargar dos funciones que tengan iguales tipos
 de argumentos y distintos tipos de valores devueltos.
 Es ilegal, por lo tanto, lo siguiente:
\layout Quotation


\family typewriter 
overload f;
\layout Quotation


\family typewriter 
int f(void);
\layout Quotation


\family typewriter 
double f(void);
\layout Section

Operadores de Almacenamiento Libre (new y delete)
\layout Standard

Los operadores unarios 
\family typewriter 
new
\family default 
 y 
\family typewriter 
delete
\family default 
 están disponibles para manipular el almacenamiento libre.
 Estos operadores reemplazan a las funciones de la biblioteca estándar 
\family typewriter 
malloc()
\family default 
, 
\family typewriter 
calloc()
\family default 
 y 
\family typewriter 
free()
\family default 
.
 En C++ se recomienda usar estos operadores a tales funciones.
 El almacenamento libre se refiere al sistema por el cual el programador
 gestiona directamente el tiempo de vida de los objetos.
 El programador crea el objeto usando 
\family typewriter 
new
\family default 
 y lo destruye usando 
\family typewriter 
delete
\family default 
.
 Esto es importante para estructuras de datos dinámicas como las listas
 y los árboles.
 El operador 
\family typewriter 
new
\family default 
 se puede usar de las siguientes formas:
\layout Quotation


\family typewriter 
new nombre_tipo
\layout Quotation


\family typewriter 
new nombre_tipo inicializador
\layout Quotation


\family typewriter 
new(nombre_tipo)
\layout Standard

En cada caso se producen dos efectos.
 Primero, es asignada la cantidad apropiada de almacenamiento para contener
 al nuevo tipo.
 Segundo, la dirección base del objeto es devuelta como el valor de la expresión
 
\family typewriter 
new
\family default 
.
 La expresión es de tipo 
\family typewriter 
void *
\family default 
 y puede ser asignada a cualquier tipo puntero.
 Si no hay suficiente memoria, este operador devuelve nulo.
 El uso del operador con inicializador se aplica a las clases por lo que
 se explica en posteriores lecciones.
 Después del tipo puede ir entre corchetes el número de elementos de ese
 tipo a reservar.
 Ejemplos:
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
3 3 0 0 -1 -1 -1 -1
1 0 0 0
0 0 0 0
0 1 0 0
2 1 0 "" ""
2 1 0 "" ""
2 1 1 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""


\family typewriter 
int *pi;
\newline 
char *pc;
\newline 
float *pf; int n = 2;
\newline 
pi = new int;
\newline 
pc = new char[10];
\newline 
pf = new float[n];
\newline 
*pi = 5;
\newline 
strcpy (pc, "hola");
\newline 
pf[0] = 1.1; pf[1] = 2.2;
\layout Standard

El operador delete destruye un objeto creado por new dejando libre el espacio
 ocupado por este objeto para poder ser reusado.
 El operador 
\family typewriter 
delete
\family default 
 se puede usar de las siguientes formas:
\layout Quotation


\family typewriter 
delete expresion
\layout Quotation


\family typewriter 
delete [expresion] expresion
\layout Standard

La primera forma es la más común.
 La expresión es normalmente una variable puntero usada en una expresión
 
\family typewriter 
new
\family default 
 previa.
 La segunda forma es utilizada menos frecuentemente y se usa cuando se asignó
 un array con 
\family typewriter 
new
\family default 
.
 La expresión entre corchetes especifica el número de elementos del array
 a liberar.
 Dicho tamaño del vector proporcionado por el usuario es ignorado excepto
 para algunos tipos definidos por el usuario (referencia: apartado Vectores
 de objetos de clases en lección 4 del tutor de C++).
 El operador delete no devuelve ningún valor (o también se puede decir que
 su tipo devuelto es 
\family typewriter 
void
\family default 
).
 El operador delete sólo puede ser aplicado a punteros devueltos por 
\family typewriter 
new
\family default 
 o a cero; aplicar 
\family typewriter 
delete
\family default 
 a cero no tiene ningún efecto.
\layout Section

E/S Estándar en C++
\layout Standard

La E/S estándar en C++ se va a estudiar en detalle en lecciones posteriores.
 Aquí sólo se va a comentar los conocimientos mínimos para poder utilizarla
 en los ejemplos.
 En el primer estándar de C++, la utilización de las facilidades de E/S
 necesitaba la inclusión del fichero de cabecera 
\family typewriter 
<stream.h>
\family default 
.
 En el nuevo estándar es preferible utilizar el fichero de cabecera 
\family typewriter 
<iostream.h>
\family default 
 que mejora y añade nuevas características a 
\family typewriter 
<stream.h>
\family default 
.
 Lo que se va a comentar en este momento requiere uno de los dos ficheros
 de cabecera anteriores; si el compilador que usas no contiene el fichero
 
\family typewriter 
iostream.h
\family default 
, seguro que tiene el 
\family typewriter 
stream.h
\family default 
.
\layout Standard

A partir de este momento, la salida estándar la realizaremos con el identificado
r 
\family typewriter 
cout
\family default 
 y el operador sobrecargado 
\family typewriter 
<<
\family default 
, y la entrada estándar la realizaremos con el identificador 
\family typewriter 
cin
\family default 
 y el operador sobrecargado 
\family typewriter 
>>
\family default 
.
 Para poder utilizar en un programa los identificadores 
\family typewriter 
cout
\family default 
, 
\family typewriter 
cin
\family default 
 y sus correspondientes operadores sobrecargados, tenemos que hacer al principio
 de esto:
\layout Quotation


\family typewriter 
#include <iostream.h> // para los compiladores que no dispongan de
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // este fichero: #include <stream.h>
\layout Standard

Ejemplo de cómo utilizar la E/S de C++.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 // equivalente a printf("C++ es un C mejorado.
\backslash 
n");
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 cout << "C++ es un C mejorado.
\backslash 
n";
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 // equivalente a printf("2 + 2 = %d
\backslash 
n", 2 + 2);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 cout << "2 + 2 = " << 2 + 2 << '
\backslash 
n';
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 int n;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 cin >> n; // equivalente a scanf("%d", &n);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 float f1, f2;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 cin >> f1 >> f2; // equivalente a scanf("%f%f", &f1, &f2);
\protected_separator 
 
\layout Quotation


\family typewriter 
}
\layout Standard

Los identificadores 
\family typewriter 
cout
\family default 
 y 
\family typewriter 
cin
\family default 
 son los nombres de los flujos de salida y entrada estándar, respectivamente.
 Los operadores 
\family typewriter 
<<
\family default 
 y 
\family typewriter 
>>
\family default 
 indican la dirección del flujo de información.
\layout Section

Problemas
\layout Itemize


\series bold 
Ejercicio 2-1
\series default 
.
 Convierte este programa C (o estilo C en C++) en un programa C++.
 Para ello realiza los siguientes cambios:
\begin_deeper 
\layout Itemize

Convierte los comentarios que abarcan una línea con el estilo de
\layout Quotation


\family typewriter 
comentario //.
\layout Itemize

Haz inline la función desplazar().
\layout Itemize

Convierte los parámetros de 
\family typewriter 
desplazar()
\family default 
 en llamadas por referencia utilizando el operador de referencia & en vez
 de la notación puntero que es más engorrosa.
\layout Itemize

Cambia la inclusión del fichero 
\family typewriter 
stdio.h
\family default 
 por el 
\family typewriter 
iostream.h
\family default 
 (si no dispones de este fichero, utiliza 
\family typewriter 
stream.h
\family default 
) para utilizar el flujo de salida cout en vez de la función 
\family typewriter 
printf()
\family default 
.
\layout Quotation


\family typewriter 
#include <stdio.h>
\layout Quotation


\family typewriter 
/* desplazamiento circular de pc1 hacia pc4 */
\layout Quotation


\family typewriter 
void desplazar (char *pc1, char *pc2, char *pc3, char *pc4)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 char temp;
\layout Quotation


\family typewriter 

\protected_separator 
 temp = *pc1, *pc1 = *pc2, *pc2 = *pc3, *pc3 = *pc4, *pc4 = temp;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 

\protected_separator 

\layout Quotation


\family typewriter 
/* función principal */
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 char c1, c2, c3, c4;
\layout Quotation


\family typewriter 

\protected_separator 
 c1 = 'A', c2 = c1 + 1, c3 = c2 + 1, c4 = c3 + 1;
\layout Quotation


\family typewriter 

\protected_separator 
 printf ("
\backslash 
nValores iniciales: %c %c %c %c", c1, c2, c3, c4);
\layout Quotation


\family typewriter 

\protected_separator 
 desplazar (&c1, &c2, &c3, &c4);
\layout Quotation


\family typewriter 

\protected_separator 
 printf ("
\backslash 
nValores finales: %c %c %c %c", c1, c2, c3, c4);
\layout Quotation


\family typewriter 
}
\end_deeper 
\layout Itemize


\series bold 
Ejercicio 2-2
\series default 
.
 Intenta convertir los programas de ejemplos que se encuentran en el tutor
 de C a programas C++.
\layout Chapter

Clases
\layout Standard

Esta lección describe las facilidades de C++ para definir nuevos tipos en
 los cuales el acceso a los datos está restringido a un conjunto específico
 de funciones.
 A estos nuevos tipos se les denomina tipos abstractos de datos (TAD en
 castellano y ADT en inglés).
 Una clase (
\family typewriter 
class
\family default 
) es una extensión de la idea de estructura (
\family typewriter 
struct
\family default 
) en C.
 El nombre original dado por Stroustrup a este lenguaje fue 
\emph on 
C con clases
\emph default 
.
 Una estructura en C está compuesta por un conjunto de datos.
 Una clase o una estructura en C++ está compuesta de un conjunto de datos
 junto con un conjunto de funciones y operadores para manipular esos datos.
 En esta lección se va a estudiar los siguientes puntos:
\layout Itemize

El tipo compuesto 
\family typewriter 
struct
\family default 
.
\layout Itemize

Visibilidad de los miembros de un objeto (
\family typewriter 
private
\family default 
 y 
\family typewriter 
public
\family default 
).
\layout Itemize

Tipos compuestos 
\family typewriter 
struct
\family default 
 y 
\family typewriter 
class
\family default 
.
\layout Itemize

Declaración de funciones miembros.
\layout Itemize

Operador de resolución de ámbito 
\family typewriter 
(::)
\family default 
.
\layout Itemize

Miembro 
\family typewriter 
static
\family default 
.
\layout Itemize

Clases anidadas.
\layout Itemize

Estructuras y uniones (
\family typewriter 
struct
\family default 
 y 
\family typewriter 
union
\family default 
).
\layout Itemize

Punteros a miembros (
\family typewriter 
::*
\family default 
, 
\family typewriter 
.*
\family default 
 y 
\family typewriter 
->*
\family default 
).
\layout Itemize

Precedencia de operadores.
\layout Section

El Tipo Compuesto struct
\layout Standard

En C++, a los elementos de una estructura se les llama miembros.
 Además, extiende el concepto de estructura.
 Para explicar estas mejoras vamos a hacer dos versiones de un mismo programa:
 la primera versión utilizando el concepto de 
\family typewriter 
struct
\family default 
 del C y la segunda utilizando el concepto de 
\family typewriter 
struct
\family default 
 del C++.
\layout Subsection

Dos Versiones de un Mismo Programa
\layout Standard

VERSION 1.
 UTILIZA CONCEPTO DE STRUCT DEL C
\layout Quotation


\family typewriter 
#include <iostream.h> // cout, << sobrecargado; también vale <stream.h>
\layout Quotation


\family typewriter 
const int longit_max = 1000;
\layout Quotation


\family typewriter 
enum boolean{ false, true };
\layout Quotation


\family typewriter 
struct pila
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 char s[longit_max]; // no permitido en el ANSI C, sí en el ANSI C++
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int cima;
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void inicializar(pila *pil)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 pil->cima = 0;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void meter(char c, pila *pil)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 pil->s[++pil->cima] = c;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
char sacar(pila *pil)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 return(pil->s[pil->cima--]);
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
char elem_cima(pila *pil)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 return(pil->s[pil->cima]);
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
boolean vacia(pila *pil)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 return boolean(pil->cima == 0);
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
boolean llena(pila *pil)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 return boolean(pil->cima == longit_max - 1);
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 pila p;
\layout Quotation


\family typewriter 

\protected_separator 
 char *cad;
\layout Quotation


\family typewriter 

\protected_separator 
 inicializar (&p);
\layout Quotation


\family typewriter 

\protected_separator 
 cad = "Ejemplo de struct del C.";
\layout Quotation


\family typewriter 

\protected_separator 
 for(register int i = 0; cad[i]; i++)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 if(! llena (&p))
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 meter(cad[i], &p);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "Cadena original: " << cad << "
\backslash 
n";
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "Cadena invertida: ";
\layout Quotation


\family typewriter 

\protected_separator 
 while(! vacia (&p))
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 cout << sacar (&p);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
n";
\layout Quotation


\family typewriter 
}
\layout Standard

VERSION 2.
 UTILIZA CONCEPTO DE STRUCT DEL C++
\layout Quotation


\family typewriter 
#include <iostream.h> // cout, << sobrecargado; también vale <stream.h>
\layout Quotation


\family typewriter 
const int longit_max = 1000;
\layout Quotation


\family typewriter 
enum boolean{ false, true };
\layout Quotation


\family typewriter 
struct pila
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 char s[longit_max]; // const no permitida en inicializac.
 en ANSI C
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int cima;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void inicializar(void)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 cima = 0;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void meter(char c)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 s[++cima] = c;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 char sacar(void)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 return(s[cima--]);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 char elem_cima(void)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 return(s[cima]);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 boolean vacia(void)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 return boolean(cima == 0);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 boolean llena(void)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 return boolean(cima == longit_max - 1);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 pila p;
\layout Quotation


\family typewriter 

\protected_separator 
 char *cad;
\layout Quotation


\family typewriter 

\protected_separator 
 p.inicializar();
\layout Quotation


\family typewriter 

\protected_separator 
 cad = "Ejemplo de struct del C++.";
\layout Quotation


\family typewriter 

\protected_separator 
 for(register int i = 0; cad[i]; i++)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 if(! p.llena ())
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 p.meter (cad[i]);
\layout Quotation


\protected_separator 

\layout Quotation


\family typewriter 

\protected_separator 
 cout << "Cadena original: " << cad << "
\backslash 
n";
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "Cadena invertida: ";
\layout Quotation


\family typewriter 

\protected_separator 
 while(! p.vacia ())
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 cout << p.sacar();
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
n";
\layout Quotation


\family typewriter 
}
\layout Description

Salida
\protected_separator 
de
\protected_separator 
los
\protected_separator 
programas:
\layout Standard

La salida del primer programa es:
\layout Quotation


\family typewriter 
Cadena original: Ejemplo de struct del C.
\layout Quotation


\family typewriter 
Cadena invertida: .C led tcurts ed olpmejE
\layout Standard

y la del segundo:
\layout Quotation


\family typewriter 
Cadena original: Ejemplo de struct del C++.
\layout Quotation


\family typewriter 
Cadena invertida: .++C led tcurts ed olpmejE
\layout Standard

Los dos son iguales excepto en el mensaje que invierten.
\newline 

\layout Title

Análisis de los ejemplos
\layout Standard

En nuestro primer programa no aparece ningún concepto nuevo y el usuario
 debe entenderlo todo.
 En el segundo programa sí aparecen unos cuantos conceptos nuevos del C++.
 La primera novedad que se aprecia es que hay definida funciones dentro
 de la estructura.
 En C, las estructuras sólo pueden tener datos miembros, en C++, las estructuras
 también pueden contener funciones miembros.
 Algunos libros se refieren a las funciones miembros como métodos.
 Las variables de tipo estructura reciben el nombre de objetos.
 Como se aprecia en la función 
\family typewriter 
main()
\family default 
, a las funciones de una variable estructura se accede igual que a los datos
 de esa estructura, es decir, con el operador punto (
\family typewriter 
.
\family default 
).
 La segunda novedad que vemos en la estructura del ejemplo son las palabras
 claves 
\family typewriter 
private
\family default 
 y 
\family typewriter 
public
\family default 
, las cuales hacen que los miembros de la estructura sean privados o públicos,
 respectivamente.
 A los miembros privados sólo pueden acceder las funciones miembros.
 A los miembros públicos puede acceder cualquier función del programa.
 La última novedad que aparece en el programa es la definición implícita
 de funciones inline: todas aquellas funciones que se definen (no que se
 declaran) dentro de una estructura son inline, aunque no vayan precedidas
 por la palabra clave inline.
 Estas tres novedades de las estructuras de C++ con respecto al C se van
 a discutir más ampliamente en los apartados siguientes.
 Intenta entender el segundo programa antes de pasar a las siguientes ventanas
 e intenta apreciar la diferencia que existe con respecto a la primera versión
 del mismo programa.
\layout Section

Visibilidad de los Miembros de un Objeto
\layout Standard

Desde el punto de vista de la visibilidad o el acceso a los miembros de
 un objeto, los miembros pueden ser públicos, privados o protegidos.
 Los miembros protegidos se estudian en lecciones posteriores.
 Los miembros privados son aquéllos que están bajo el ámbito de la palabra
 clave 
\family typewriter 
private
\family default 
 seguida por dos puntos (
\family typewriter 
private:
\family default 
).
 Del mismo modo, los miembros públicos son aquéllos que están bajo el ámbito
 de la palabra clave public seguida por dos puntos (
\family typewriter 
public:
\family default 
).
\layout Standard

Los miembros privados sólo pueden ser accedidos por las funciones miembros.
 Los miembros públicos constituyen la interface con los elementos de la
 clase.
 Si todos los miembros de una clase, datos y funciones, son privados, no
 hay ninguna forma de que el programa se pueda comunicar con los elementos
 de ese objeto.
 Ejemplo sobre el acceso a los miembros de una clase
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 struct
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void f1 (void) { x = 10; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void f2 (void) { y = 10; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int y;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void f3 (void) { x = 20; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void f4 (void) { y = 20; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void f5 (void) { f1 (); f2 (); f3 (); }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 } s;
\layout Quotation


\family typewriter 

\protected_separator 
 s.x = 1; // ilegal: error de compilación.
 Miembro x no accesible.
\layout Quotation


\family typewriter 

\protected_separator 
 s.f1(); // ilegal: error de compilación.
 Miembro f1() no accesible.
\layout Quotation


\family typewriter 

\protected_separator 
 s.f2(); // ilegal: error de compilación.
 Miembro f2() no accesible.
\layout Quotation


\family typewriter 

\protected_separator 
 s.y = 2; // legal
\layout Quotation


\family typewriter 

\protected_separator 
 s.f3 (); // legal
\layout Quotation


\family typewriter 

\protected_separator 
 s.f4 (); // legal
\layout Quotation


\family typewriter 

\protected_separator 
 s.f5 (); // legal
\layout Quotation


\family typewriter 
}
\layout Section

Tipos Compuestos struct y class 
\layout Standard

Los tipos 
\family typewriter 
struct
\family default 
 y 
\family typewriter 
class
\family default 
 son similares.
 Sólo hay una diferencia entre ellos: los miembros de una estructura son
 por defecto públicos, y los miembros de una clase son por defecto privados.
 Esto supone que las palabras claves 
\family typewriter 
private
\family default 
 y 
\family typewriter 
public
\family default 
 son opcionales.
\layout Standard

En este tutor, por convención, los objetos que sólo contengan datos se declarará
n como 
\family typewriter 
struct
\family default 
, y aquéllos que contengan datos y funciones se declararán como 
\family typewriter 
class
\family default 
.
 Ejemplos: 
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
23 2 0 0 -1 -1 -1 -1
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 1 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 1 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 1 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 1 0 0
2 1 0 "" ""
2 1 1 "" ""
0 2 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""


\family typewriter 
struct s
\newline 
struct s
\newline 
{
\newline 
{
\newline 

\protected_separator 
 int i;
\newline 

\protected_separator 
 public:
\newline 

\protected_separator 
 void f(void);
\newline 

\protected_separator 
 int i;
\newline 
};
\newline 
};
\newline 
class c
\newline 
class c
\newline 
{
\newline 
{
\newline 

\protected_separator 
 int i;
\newline 

\protected_separator 
 private:
\newline 

\protected_separator 
 void f(void);
\newline 

\protected_separator 
 int i;
\newline 
};
\newline 

\protected_separator 
 void f(void);
\newline 

\newline 
};
\newline 
struct s
\newline 
class c
\newline 
{
\newline 
{
\newline 

\protected_separator 
 int i;
\newline 

\protected_separator 
 public:
\newline 

\protected_separator 
 void f(void);
\newline 

\protected_separator 
 int i;
\newline 
};
\newline 

\protected_separator 
 void f(void);
\newline 

\newline 
};
\newline 
struct s
\newline 
class c
\newline 
{
\newline 
{
\newline 

\protected_separator 
 int i;
\newline 

\protected_separator 
 void f(void);
\newline 

\protected_separator 
 private:
\newline 

\protected_separator 
 public:
\newline 

\protected_separator 
 void f(void);
\newline 

\protected_separator 
 int i;
\newline 
}
\newline 
};
\layout Section

Declaración de Funciones Miembros
\layout Standard

Antes de que se pueda utilizar una clase, todos sus miembros deben estar
 definidos.
 Dos formas de definir una función miembro 
\layout Enumerate

Definir la función miembro dentro de la clase.
 En este caso, aunque la definición de la función no vaya precedida por
 la palabra inline, la función es inline y será tratada como una macro.
 Naturalmente, se puede utilizar la palabra clave inline si se desea, aunque
 no sea necesario con las funciones miembros.
\layout Enumerate

Declarar la función dentro de la clase, es decir, escribir su prototipo
 dentro de la clase, y definirla fuera, es decir, en el ámbito externo.
 En este caso, el nombre de la función miembro en la definición debe ir
 precedido con el nombre de la clase seguido por el operador de resolución
 de ámbito (
\family typewriter 
::
\family default 
).
 El nombre de la clase es necesario porque puede haber otras clases que
 utilicen el mismo nombre de función.
\layout Standard

Las funciones miembros, al igual, que las demás funciones, también se pueden
 sobrecargar y sus argumentos pueden tener valores por defecto.
 Ejemplo:
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class clase
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 inline void inicializar(void); // declaración de función inline
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void asignar(int y) { x = y; } // definición de función inline
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int devolver(void);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // declaración de función no inline
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void clase::inicializar(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 x = 0;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
int clase::devolver(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 return x;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase c;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << (c.inicializar(), c.devolver())
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << ' '
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << (c.asignar(100), c.devolver())
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << '
\backslash 
n'; // imprime: 
\layout Quotation


\family typewriter 
}
\layout Section

Operador de Resolución de Ámbito (
\family typewriter 
::
\family default 
)
\layout Standard

En la lección anterior dijimos que podíamos referirnos explicítamente a
 un miembro externo de la siguiente forma:
\layout Quotation


\family typewriter 
::identificador
\layout Standard

Otra forma de utilizar este operador es:
\layout Quotation


\family typewriter 
clase::identificador
\layout Standard

lo cual es útil para distinguir explicítamente entre los nombres de miembros
 de clase y otros nombres.
 En las dos expresiones anteriores identificador puede ser tanto el nombre
 de una variable como el nombre de una función.
\layout Standard

El operador unario 
\family typewriter 
::
\family default 
 tiene la misma prioridad que los operadores monarios 
\family typewriter 
()
\family default 
, 
\family typewriter 
[]
\family default 
, 
\family typewriter 
->
\family default 
 y 
\family typewriter 
.
\family default 
, esto es, tiene la prioriodad más alta.
 Ejemplo:
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
int x;
\layout Quotation


\family typewriter 
class clase
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void asigx(void) { x = 2; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int devexpr(void) { return (x + clase::x + ::x); }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase c;
\layout Quotation


\family typewriter 

\protected_separator 
 x = 1;
\layout Quotation


\family typewriter 

\protected_separator 
 c.asigx();
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c.devexpr() << " " << x + ::x; // imprime 
\layout Quotation


\family typewriter 
}
\layout Section

Miembro static 
\layout Standard

Los datos miembros pueden ser declarados con el modificador de clase de
 almacenamiento 
\family typewriter 
static
\family default 
.
 No pueden ser declarados 
\family typewriter 
auto
\family default 
, 
\family typewriter 
register
\family default 
 o 
\family typewriter 
extern
\family default 
.
 Un dato miembro que es declarado 
\family typewriter 
static
\family default 
 es compartido por todas las variables de esa clase y es almacenado en un
 lugar únicamente.
 A causa de esto, se accede a este miembro, desde fuera de la clase, en
 la forma 
\family typewriter 
nombre_de_clase::identificador
\family default 
 si tiene visibilidad pública.
 Ejemplo:
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
struct estructura
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 static int y;
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
int estructura::y = 0;
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 estructura c1, c2, c3;
\layout Quotation


\family typewriter 

\protected_separator 
 estructura::y++;
\layout Quotation


\family typewriter 

\protected_separator 
 c1.y++;
\layout Quotation


\family typewriter 

\protected_separator 
 c2.y++;
\layout Quotation


\family typewriter 

\protected_separator 
 c3.y++;
\layout Quotation


\family typewriter 

\protected_separator 
 c1.x = c2.x = c3.x = 0;
\layout Quotation


\family typewriter 

\protected_separator 
 c1.x++;
\layout Quotation


\family typewriter 

\protected_separator 
 c2.x++;
\layout Quotation


\family typewriter 

\protected_separator 
 c3.x++;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << estructura::y << c1.y << c2.y << c3.y; // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c1.x << c2.x << c3.x; // imprime 
\layout Quotation


\family typewriter 
}
\layout Section

Clases Anidadas
\layout Standard

Las clases se pueden anidar.
 La clase interna no está dentro del ámbito de la clase externa, sino que
 está en el mismo ámbito que la clase externa.
 Puesto que esto puede conducir a confusión, es preferible no utilizar clases
 anidadas.
 Ejemplo:
\layout Quotation


\family typewriter 
char c; // ámbito exterior
\layout Quotation


\family typewriter 
class x // declaración de clase exterior
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 char c;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 class y // declaración de clase interior
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 char d;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void f(char e) { c = e; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 };
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 charg (x* q) { return q->d; } // error de sintaxis 
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Standard


\series bold 
Comentario sobre el ejemplo anterior:
\series default 
 La función miembro 
\family typewriter 
f
\family default 
 de 
\family typewriter 
class
\family default 
 y, cuando usa 
\family typewriter 
c
\family default 
, está usando la c de ámbito externo.
 Es como si 
\family typewriter 
class
\family default 
 y estuviese declarada en el mismo nivel y el mismo bloque interior o ámbito
 de fichero que 
\family typewriter 
class x
\family default 
.
 La función miembro 
\family typewriter 
g
\family default 
 de 
\family typewriter 
class x
\family default 
, cuando usa 
\family typewriter 
d
\family default 
, está intentando acceder al miembro privado de 
\family typewriter 
class x
\family default 
, lo cual produce un error de compilación.
\layout Section

Estructuras y Uniones
\layout Standard

Hemos dicho que una estructa es simplemente una clase con todos sus miembros
 públicos, esto es 
\layout Quotation


\family typewriter 
struct s { ...
\layout Standard

es una forma corta de escribir
\layout Quotation


\family typewriter 
class s { public: ...
\layout Standard

Las estructuras se usan cuando no se quiere ocultar los datos.
\layout Standard

Una unión (
\family typewriter 
union
\family default 
) se define como una estructura (
\family typewriter 
struct
\family default 
) donde todos sus miembros tienen la misma dirección.
 Los especificadores de acceso de C++ (
\family typewriter 
public
\family default 
, 
\family typewriter 
private
\family default 
 y 
\family typewriter 
protected
\family default 
) no pueden ser usados en las uniones.
\layout Standard

Ejemplo de union 
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
union un
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 float y;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void asigx(int xx) { x = xx; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void asigy(float yy) { y = yy; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int devx(void) { return x; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 float devy(void) { return y; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 un u;
\layout Quotation


\family typewriter 

\protected_separator 
 u.x = 15;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << u.devx() << '
\backslash 
n'; // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 u.y = 5.5;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << u.devy() << '
\backslash 
n'; // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 u.x = 15;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << u.devy() << '
\backslash 
n'; // imprime valor indefinido
\layout Quotation


\family typewriter 

\protected_separator 
 u.y = 5.5;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << u.devx() << '
\backslash 
n'; // imprime valor indefinido
\layout Quotation


\family typewriter 
}
\layout Section

Punteros a Miembros
\layout Standard

Es posible tomar la dirección de un miembro de una clase.
 Con los operadores de resolución de ámbito (
\family typewriter 
::
\family default 
) y de contenido (
\family typewriter 
*
\family default 
) podemos declarar un puntero a un miembro de una clase.
 Ejemplo:
\layout Quotation


\family typewriter 
int cl::*pcl; // pcl es un puntero a un miembro entero de la clase cl
\layout Standard

Los operadores 
\family typewriter 
.

\family default 
 y 
\family typewriter 
*
\family default 
 forman un nuevo operador en C++, 
\family typewriter 
.*
\family default 
, con el cual referenciamos un miembro de una clase a través de un puntero
 al miembro de esa clase.
 En la siguiente ventana se muestra un ejemplo del uso de este operador:
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class cl
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int suma;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void cl::sumatorio(int x);
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void cl::sumatorio(int x)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 suma = 0;
\layout Quotation


\family typewriter 

\protected_separator 
 for(register int i = x; i; i--)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 suma += i;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 int cl::*pi;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // puntero a un miembro de cl que es de tipo int
\layout Quotation


\family typewriter 

\protected_separator 
 void(cl::*pf) (int x); // puntero a una función miembro de cl que
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // devuelve void y acepta un int como parámetro
\layout Quotation


\family typewriter 

\protected_separator 
 cl clase;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // clase es un objeto de tipo cl
\layout Quotation


\family typewriter 

\protected_separator 
 pi = &cl::suma;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // obtiene dirección del dato miembro suma
\layout Quotation


\family typewriter 

\protected_separator 
 pf = &cl::sumatorio;
\protected_separator 

\protected_separator 

\protected_separator 
 // obtiene dirección de la función miembro
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // sumatorio
\layout Quotation


\family typewriter 

\protected_separator 
 (clase.*pf) (5);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // calcula el sumatorio de 5
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "El sumatorio de 5 es " << clase.*pi << "
\backslash 
n";
\layout Quotation


\family typewriter 
}
\layout Standard

Los operadores 
\family typewriter 
->
\family default 
 y 
\family typewriter 
*
\family default 
 forman un nuevo operador en C++, 
\family typewriter 
->*
\family default 
, con el cual referenciamos un miembro de una clase referenciando un puntero
 a un miembro de esa clase a través de un puntero a la clase.
 En la siguiente ventana se muestra un ejemplo del uso de este operador.
 Ejemplo:
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class cl
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int suma;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void cl::sumatorio(int x);
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void cl::sumatorio(int x)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 suma = 0;
\layout Quotation


\family typewriter 

\protected_separator 
 for(register int i = x; i; i--)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 suma += i;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 int cl::*pi;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // puntero a un miembro de cl que es de tipo int
\layout Quotation


\family typewriter 

\protected_separator 
 void(cl::*pf) (int x); // puntero a una función miembro de cl que
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // devuelve void y acepta un int como parámetro
\layout Quotation


\family typewriter 

\protected_separator 
 cl clase;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // clase es un objeto de tipo cl
\layout Quotation


\family typewriter 

\protected_separator 
 cl *pcl;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // pcl es un puntero a un objeto del tipo cl
\layout Quotation


\family typewriter 

\protected_separator 
 pcl = &clase;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // asigna a pcl la dirección del objeto clase
\layout Quotation


\family typewriter 

\protected_separator 
 pi = &cl::suma;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // obtiene dirección del dato miembro suma
\layout Quotation


\family typewriter 

\protected_separator 
 pf = &cl::sumatorio;
\protected_separator 

\protected_separator 

\protected_separator 
 // obtiene dirección de la función miembro
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // sumatorio
\layout Quotation


\family typewriter 

\protected_separator 
 (pcl->*pf) (5);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // calcula el sumatorio de 5 usando -> para llamar
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // a la función
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "El sumatorio de 5 es " << pcl->*pi << "
\backslash 
n"; // usa -> para acceder
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // a un dato miembro
\layout Quotation


\family typewriter 
}
\layout Section

Precedencia de Operadores
\layout Standard

Una vez vistos todos los operadores que añade el C++ al lenguaje C (
\family typewriter 
new
\family default 
, 
\family typewriter 
delete
\family default 
, 
\family typewriter 
::
\family default 
, 
\family typewriter 
.*
\family default 
, 
\family typewriter 
->*
\family default 
) vamos a mostrar la tabla de precedencia completa de los operadores de
 C++.
 En la siguiente tabla de precedencia de operadores, los operadores son
 divididos en 16 categorías.
 La categoría #1 tiene la precedencia más alta; la categoría #2 (operadores
 unarios) toma la segunda precedencia, y así hasta el operador coma, el
 cual tiene la precedencia más baja.
 Los operadores que están dentro de una misma categoría tienen igual precedencia.
 Los operadores unarios (categoría #2), condicional (categoría #14), y de
 asignación (categoría #15) se asocian de derecha a izquierda; todos los
 demás operadores se asocian de izquierda a derecha.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
50 3 0 0 -1 -1 -1 -1
1 1 0 0
1 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
1 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
1 0 0 0
0 0 0 0
0 0 0 0
1 0 0 0
0 0 0 0
1 0 0 0
0 0 0 0
1 0 0 0
0 0 0 0
1 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
1 0 0 0
0 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
1 1 0 0
2 1 0 "" ""
8 1 0 "" ""
2 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

Categoría
\newline 
Operador
\newline 
Qué es (o hace)
\newline 
1.
 Más alto
\newline 

\family typewriter 
()
\family default 

\newline 
Llamada a función
\newline 

\newline 

\family typewriter 
[]
\family default 

\newline 
Indexamiento de array
\newline 

\newline 

\family typewriter 
->
\family default 

\newline 
Selector de componente indirecta de C++
\newline 

\newline 

\family typewriter 
::
\family default 

\newline 
Resolución/acceso de ámbito de C++
\newline 

\newline 

\family typewriter 
.
\family default 

\newline 
Selector de componente directa de C++
\newline 
2.
 Unario
\newline 
!
\newline 
Negación Lógica (NO)
\newline 

\newline 
~
\newline 
Complemento a 1
\newline 

\newline 
+
\newline 
Más unario
\newline 

\newline 
-
\newline 
Menos unario
\newline 

\newline 
++
\newline 
Preincremento o postincremento
\newline 

\newline 
--
\newline 
Predecremento o postdecremento
\newline 

\newline 
&
\newline 
Dirección
\newline 

\newline 
*
\newline 
Contenido (indirección)
\newline 

\newline 
sizeof
\newline 
devuelve tamaño de operando, en bytes
\newline 

\newline 
new
\newline 
asignador de memoria dinámica en C++
\newline 

\newline 
delete
\newline 
desasignador de memoria dinámica en C++
\newline 
3.
 Multiplicativo
\newline 
*
\newline 
Multiplica
\newline 

\newline 
/
\newline 
Divide
\newline 

\newline 
%
\newline 
Resto (módulo)
\newline 
4.
 Acceso a
\newline 
.*
\newline 
Operador de referencia de una dirección en C++
\newline 
los miembros
\newline 
->*
\newline 
Operador de referencia de una dirección en C++
\newline 
5.
 Aditivo
\newline 
+
\newline 
Más binario
\newline 

\newline 
-
\newline 
Menos binario
\newline 
6.
 Desplazamiento
\newline 
<<
\newline 
Desplazamiento a la izquierda
\newline 

\newline 
>>
\newline 
Desplazamiento a la derecha
\newline 
7.
 Relacional
\newline 
<
\newline 
Menor que
\newline 

\newline 
<=
\newline 
Menor o igual que
\newline 

\newline 
>
\newline 
Mayor que
\newline 

\newline 
>=
\newline 
Mayor o igual que
\newline 
8.
 Igualdad
\newline 
==
\newline 
Igual a
\newline 

\newline 

\newline 

\newline 
9.
\newline 
&
\newline 
AND entre bits
\newline 
10.
\newline 
^
\newline 
XOR entre bits
\newline 
11.
\newline 

\family typewriter 
|
\family default 

\newline 
OR entre bits
\newline 
12.
\newline 
&&
\newline 
AND lógico
\newline 
13.
\newline 

\family typewriter 
||
\family default 

\newline 
OR lógico
\newline 
14.
 Condicional
\newline 

\family typewriter 
?:
\family default 

\newline 
a ? x : y significa "si a entonces x, si no y"
\newline 
15.
 Asignación
\newline 
=
\newline 
Asignación simple
\newline 

\newline 
*=
\newline 
Asignar producto
\newline 

\newline 
/=
\newline 
Asignar cociente
\newline 

\newline 
%=
\newline 
Asignar resto (módulo)
\newline 

\newline 
+=
\newline 
Asignar suma
\newline 

\newline 
-=
\newline 
Asignar diferencia
\newline 

\newline 
&=
\newline 
Asignar AND entre bits
\newline 

\newline 
^=
\newline 
Asignar XOR entre bits
\newline 

\newline 
|=
\newline 
Asignar OR entre bits
\newline 

\newline 
<<=
\newline 
Asignar desplazamiento hacia la izquierda
\newline 

\newline 
>>=
\newline 
Asignar desplazamiento hacia la derecha
\newline 
16.
 Coma
\newline 

\family typewriter 
,
\family default 

\newline 
Evaluar
\layout Standard

Todos los operadores de la tabla se pueden sobrecargar (referencia de sobrecarga
 de operadores en lección 5 del tutor de C++) excepto los siguientes:
\layout List
\labelwidthstring 00.00.0000


\family typewriter 
.

\family default 
 Selector de componente directa de C++
\layout List
\labelwidthstring 00.00.0000


\family typewriter 
.*
\family default 
 Referencia en C++
\layout List
\labelwidthstring 00.00.0000


\family typewriter 
::
\family default 
 Resolución/acceso de ámbito en C++
\layout List
\labelwidthstring 00.00.0000


\family typewriter 
?:
\family default 
 Condicional
\layout Section

Problemas
\layout Itemize


\series bold 
Ejercicio 4-1
\series default 
.
 Modifica el programa del primer ejemplo de esta lección, en el cual está
 implementado la clase ent, para cambiar esta clase por la clase 
\family typewriter 
uent
\family default 
.
 La clase 
\family typewriter 
uent
\family default 
 tiene el mismo propósito que la clase 
\family typewriter 
ent
\family default 
 pero en vez de trabajar con el tipo 
\family typewriter 
int
\family default 
, trabaja con el tipo 
\family typewriter 
unsigned int
\family default 
.
\layout Chapter

Constructores y Destructores
\layout Standard

Esta lección gira en torno a los constructores y destructores.
\layout Standard

Un 
\emph on 
constructor
\emph default 
 es una función miembro de un objeto que es llamada automáticamente cuando
 se crea el objeto.
 Tiene el mismo nombre de la clase.
\layout Standard

Un 
\emph on 
destructor
\emph default 
 es una función miembro de un objeto que es llamada automáticamente cuando
 se destruye el objeto.
 Tiene el mismo nombre de la clase precedido por .
\layout Standard

En esta lección se va a estudiar los siguientes puntos:
\layout Itemize

Concepto de constructor y destructor.
\layout Itemize

Constructores y destructores de objetos estáticos.
\layout Itemize

Almacenamiento libre.
\layout Itemize

Vectores de objetos de clase.
\layout Itemize

Objetos como miembros.
\layout Itemize

Autorreferencia: el puntero this.
\layout Itemize

Funciones miembros constantes.
\layout Itemize

Funciones miembros volátiles.
\layout Section

Concepto de Constructor y Destructor
\layout Standard

Un constructor es una función miembro que tiene el mismo nombre que la clase.
 Los constructores se utilizan normalmente para inicializar datos miembros
 y asignar memoria usando 
\family typewriter 
new
\family default 
.
 Un destructor es una función miembro que tiene el mismo nombre que la clase
 precedido por el carácter .
 Los destructores se utilizan normalmente para liberar, usando 
\family typewriter 
delete
\family default 
, la memoria asignada por el constructor.
 Los constructores pueden sobrecargarse y pueden tomar argumentos; en los
 destructores no se permite ninguna de estas dos cosas.
 Los constructores y los destructores no devuelven nada.
\layout Standard

Los constructores son invocados automáticamente cuando se crea el objeto.
 Los destructores son invocados automáticamente cuando se destruye el objeto.
 Ejemplo:
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class clase
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase(int i) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int devx(void) { return x; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase c1; // error de compilación
\layout Quotation


\family typewriter 

\protected_separator 
 clase c2 (2);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c2.devx(); // imprime 
\layout Quotation


\family typewriter 
}
\layout Standard

Ejemplo de constructor con argumentos por defecto:
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class clase
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase(int i = 0) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int devx(void) { return x; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase c1, c2 (1);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c1.devx(); // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c2.devx(); // imprime 
\layout Quotation


\family typewriter 
}
\layout Standard

Ejemplo de constructor sobrecargado:
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class clase
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase(void) { x = 0; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase(int i) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int devx(void) { return x; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase c1;
\layout Quotation


\family typewriter 

\protected_separator 
 clase c2(5);
\layout Quotation


\family typewriter 

\protected_separator 
 clase c3(); // atención: esto es el prototipo de una función
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c1.devx(); // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c2.devx(); // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c3.devx(); // error de compilación: c3 no es objeto sino func.
\layout Quotation


\family typewriter 
}
\layout Standard

Ejemplo de constructor y destructor
\layout Quotation


\family typewriter 
#include <iostream.h> // para utilizar: cout, << sobrecargado
\layout Quotation


\family typewriter 
enum boolean{ false, true };
\layout Quotation


\family typewriter 
class pila
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\protected_separator 

\protected_separator 

\protected_separator 
 // representación oculta para el TAD pila
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 char *s;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int longit_max;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int cima;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\protected_separator 

\protected_separator 

\protected_separator 
 // interface pública para el TAD pila
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 pila(void) { s = new char[100]; longit_max = 100; cima = 0; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 pila(int tam) { s = new char[tam]; longit_max = tam; cima = 0; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 pila(int tam, char str[]);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 pila(void) { delete s; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void inicializar(void) { cima = 0; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void meter(char c) { s[++cima] = c; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 char sacar(void) { return (s[cima--]); }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 char elem_cima(void) { return (s[cima]); }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 boolean vacia(void) { return boolean (cima == 0); }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 boolean llena(void) { return boolean (cima == longit_max - 1); }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
pila::pila(int tam, char str[])
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 s = new char[tam];
\layout Quotation


\family typewriter 

\protected_separator 
 longit_max = tam;
\layout Quotation


\family typewriter 

\protected_separator 
 for(register int i = 0; i < longit_max && str[i] != 0; i++)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 s[i+1] = str[i];
\layout Quotation


\family typewriter 

\protected_separator 
 cima = i;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 char *cad = "Ejemplo";
\layout Quotation


\family typewriter 

\protected_separator 
 pila p(20, cad);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "Cadena original: " << cad << "
\backslash 
n"; // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "Cadena invertida: ";
\layout Quotation


\family typewriter 

\protected_separator 
 while(! p.vacia())
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 cout << p.sacar();
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
n";
\layout Quotation


\family typewriter 
}
\layout Section

Constructores y Destructores de Objetos Estáticos
\layout Standard

En algunas implementaciones está indefinido si el constructor para un objeto
 estático local es llamado o no en la función que es declarado.
 Esto quiere decir que los argumentos de los constructores para objetos
 estáticos deben ser expresiones contantes en tales implementaciones.
 Por ejemplo:
\layout Quotation


\family typewriter 
void f(int a)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 static clase c(a); // error en algunos sistemas
\layout Quotation


\family typewriter 
}
\layout Standard

Ejemplo de funcionamiento de objetos estáticos locales en Turbo C++.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class clase
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase(int i) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void f(int a)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 static clase c(a); // el constructor es invocado en primera llamada a f()
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c.x;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 f(10); // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 f(20); // imprime 
\layout Quotation


\family typewriter 
}
\layout Standard

Si un programa termina usando la función 
\family typewriter 
exit()
\family default 
, se llamará a los destructores para los objetos estáticos, pero si el programa
 termina usando la función 
\family typewriter 
abort()
\family default 
, no se llamará a tales destructores.
 Notad que esto implica que 
\family typewriter 
exit()
\family default 
 no termina un programa inmediatamente.
 Llamar a 
\family typewriter 
exit()
\family default 
 en un destructor puede causar una recursión infinita.
\layout Section

Almacenamiento Libre
\layout Standard

Consideremos el ejemplo:
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class clase
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 char *s;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase(int n) { s = new char[n]; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase(void) { delete s; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 clase *p = new clase(10);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 clase *q = new clase(20);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 delete p;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 delete p; // posiblemente un error en tiempo de ejecución
\layout Quotation


\family typewriter 
}
\layout Standard

El constructor 
\family typewriter 
clase::clase()
\family default 
 será llamado dos veces, así como también el destructor 
\family typewriter 
clase::clase()
\family default 
.
 El C++ no ofrece ninguna garantía de que el destructor será llamado para
 un objeto creado con 
\family typewriter 
new
\family default 
, a no ser que se utilice 
\family typewriter 
delete
\family default 
.
 El programa anterior no libera nunca q, pero libera dos veces p.
 Dependiendo del tipo de p y de q, el programador puede o no considerar
 esto un error.
 No liberar un objeto no es normalmente un error, sino que se considera
 malgastar memoria.
 Liberar dos veces p es normalmente un error serio.
 El resultado típico de aplicar delete al mismo puntero dos veces es un
 bucle infinito en la rutina de gestión de almacenamiento libre, pero el
 comportamiento en este caso no está especificado por la definición del
 lenguaje y depende de la implementación.
\layout Section

Vectores de Objetos de Clase
\layout Standard

Para declarar un vector de objetos de una clase con un constructor, esa
 clase debe tener un constructor que pueda ser llamado sin una lista de
 argumentos.
 Ni siquiera pueden ser usados los argumentos por defecto.
 Ejemplo:
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class cl1
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 cl1(int i) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int devx(void) { return x; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class cl2
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 cl2(int i = 0) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int devx(void) { return x; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class cl3
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 cl3(void) { x = 0; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 cl3(int i) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int devx(void) { return x; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class cl4
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void asigx(int i) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int devx(void) { return x; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
cl1 vcl1[10]; // ilegal: error en compilación
\layout Quotation


\family typewriter 
cl2 vcl2[10]; // ilegal: error en compilación
\layout Quotation


\family typewriter 
cl3 vcl3[10];
\layout Quotation


\family typewriter 
cl4 vcl4[10];
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 vcl4[6].asigx(1);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << vcl3[5].devx() << " " << vcl4[6].devx(); // imprime 
\layout Quotation


\family typewriter 
}
\layout Standard

Para vectores que no son asignados usando 
\family typewriter 
new
\family default 
, el destructor es llamado implícitamente para cada elemento del vector
 cuando ese vector es destruido.
 Sin embargo, esto no se puede hacer implícitamente para vectores creados
 con 
\family typewriter 
new
\family default 
, ya que el compilador no puede distinguir el puntero a un simple objeto
 del puntero al primer elemento de un vector de objetos.
 Ejemplo:
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
const int n = 3;
\layout Quotation


\family typewriter 
class clase
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 static int contc, contd;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase(void) { cout << 'c' << ++contc << ' '; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase(void) { cout << 'd' << ++contd << ' '; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
int clase::contc, clase::contd;
\layout Quotation


\family typewriter 
void f(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase *p = new clase;
\layout Quotation


\family typewriter 

\protected_separator 
 clase *q = new clase[n];
\layout Quotation


\family typewriter 

\protected_separator 
 delete p; // una clase
\layout Quotation


\family typewriter 

\protected_separator 
 delete q; // problema: n clases
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void g(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase *p = new clase;
\layout Quotation


\family typewriter 

\protected_separator 
 clase *q = new clase[n];
\layout Quotation


\family typewriter 

\protected_separator 
 delete p;
\layout Quotation


\family typewriter 

\protected_separator 
 delete [n] q;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void h(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase c1;
\layout Quotation


\family typewriter 

\protected_separator 
 clase vc2[n];
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase::contc = clase::contd = 0;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << '
\backslash 
n';
\layout Quotation


\family typewriter 

\protected_separator 
 f (); // imprime 1
\layout Quotation


\family typewriter 

\protected_separator 
 clase::contc = clase::contd = 0;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << '
\backslash 
n';
\layout Quotation


\family typewriter 

\protected_separator 
 g (); // imprime 2
\layout Quotation


\family typewriter 

\protected_separator 
 clase::contc = clase::contd = 0;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << '
\backslash 
n';
\layout Quotation


\family typewriter 

\protected_separator 
 h (); // imprime 3
\layout Quotation


\family typewriter 
}
\layout Section

Objetos como Miembros
\layout Standard

Los objetos (ya sean clases, estructuras o uniones), al igual que cualquier
 variable, pueden ser miembros de otros objetos.
 Los constructores de los objetos miembros pueden ser invocados entre el
 nombre de la definición (no declaración) del constructor del objeto y la
 llave de apertura de la definición de la función constructora.
 Si se van a invocar varios constructores de objetos miembros, estas llamadas
 se separan por comas.
 Ejemplo:
\layout Quotation


\family typewriter 
/* Este programa imprime:
\layout Quotation


\family typewriter 
c1_1
\protected_separator 
 c1_2
\protected_separator 
 c1_3
\protected_separator 
 c2_1
\protected_separator 
 x2_10
\protected_separator 
 x1_10
\protected_separator 
 x1_10
\protected_separator 
 x1_10
\protected_separator 
 d2_1
\protected_separator 
 d1_1
\protected_separator 
 d1_2
\protected_separator 
 d1_32 */
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class cl1
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 static int contc1, contd1;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x1;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 cl1(int i) { x1 = i; cout << "c1_" << ++contc1 << "
\protected_separator 
 "; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 cl1(void) { cout << "d1_" << ++contd1 << "
\protected_separator 
 "; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void impr(void) { cout << "x1_" << x1 << "
\protected_separator 
 "; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
int cl1::contc1 = 0, cl1::contd1 = 0;
\layout Quotation


\family typewriter 
class cl2
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 static int contc2, contd2;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x2;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 cl1 a, b, c;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 cl2(int i): a (i), b (i), c (i)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 { x2 = i; cout << "c2_" << ++contc2 << "
\protected_separator 
 "; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 cl2 (void){ cout << "d2_" << ++contd2 << "
\protected_separator 
 "; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void impr(void) { cout << "x2_" << x2 << "
\protected_separator 
 "; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void impra(void) { a.impr (); }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void imprb(void) { b.impr (); }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void imprc(void) { c.impr (); }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
int cl2::contc2 = 0, cl2::contd2 = 0;
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 cl2 c (10);
\layout Quotation


\family typewriter 

\protected_separator 
 c.impr();
\layout Quotation


\family typewriter 

\protected_separator 
 c.impra();
\layout Quotation


\family typewriter 

\protected_separator 
 c.imprb();
\layout Quotation


\family typewriter 

\protected_separator 
 c.imprc();
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
/* Si no queremos que el constructor cl2 sea inline, haríamos:
\layout Quotation


\family typewriter 

\protected_separator 
 class cl2
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 ...
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 public
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 cl2(int i);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 ...
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 };
\layout Quotation


\family typewriter 

\protected_separator 
 cl2::cl2(int i): a (i), b (i), c (i)
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 x2 = i;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 cout << "c2_" << ++contc2 << "
\protected_separator 
 ";
\layout Quotation


\family typewriter 

\protected_separator 
 }
\layout Quotation


\family typewriter 
*/
\layout Section

Autorreferencia: El Puntero this
\layout Standard

La palabra clave 
\family typewriter 
this
\family default 
 denota un puntero autorreferencial declarado implícitamente.
 Puede ser usado en cualquier función miembro.
 A todas las funciones miembros de un objeto se les pasa un argumento oculto:
 
\family typewriter 
this
\family default 
.
 Este argumento implícito siempre apunta al objeto para el cual se ha invocado
 la función miembro.
 Ejemplo:
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class x
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int a, b;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 x(int aa, int bb) { a = aa; b = bb; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int leera(void) { return a; } // devuelve el valor de x::a
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int leerb(void) { return this->b; } // devuelve el valor de x::b
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 x x (1, 2);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << x.leera() << x.leerb (); // imprime 
\layout Quotation


\family typewriter 
}
\layout Section

Funciones Miembros Constantes
\layout Standard

Una función miembro constante no modifica los datos miembros de un objeto.
 Una función miembro constante es el único tipo de función miembro que puede
 ser llamada por un objeto constante.
 Una función miembro constante puede ser llamada también por objetos no
 constantes.
 No se puede calificar una definición de función con 
\family typewriter 
const
\family default 
 y entonces intentar modificar los datos miembros (esto generará un error).
 Para crear una función miembro constante hay que colocar el calificador
 
\family typewriter 
const
\family default 
 después de la lista de argumentos y antes de abrir la llave de definición
 de la función.
 Las funciones miembros constantes sólo pueden llamar a otras funciones
 miembros constantes.
 Los constructores y los destructores no necesitan ser declarados funciones
 miembros constantes para que sean invocados por objeto constantes.
\layout Standard

Ejemplo de uso correcto e incorrecto de funciones miembros constantes.
\layout Quotation


\family typewriter 
// Ejemplo de funciones miembros constantes y objetos constantes
\layout Quotation


\family typewriter 
class clase
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase(void) { x = 0; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase() { }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int dev(void) const { return x; }
\protected_separator 

\protected_separator 
 // CORRECTO: función constante no
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // modifica ningún miembro
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void incr(void) { x++; }
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // CORRECTO: función miembro
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // ordinaria(no constante)
\layout Quotation


\family typewriter 
/*
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase(int i) const { x = i; }
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // ERROR: función constante
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // modificando miembro
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void incr2(void) const { x++; }
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // ERROR: función constante
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // modificando miembro
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void incr3(void) const { incr (); } // ERROR: función constante
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // llama a función no constante
\layout Quotation


\family typewriter 
*/
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 const clase cl1; // cl1 es un objeto constante
\layout Quotation


\family typewriter 

\protected_separator 
 cl1.dev();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // CORRECTO: función constante llamada por objeto
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // constante
\layout Quotation


\family typewriter 
/*
\layout Quotation


\family typewriter 

\protected_separator 
 cl1.incr();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // ERROR: función no constante llamada por objeto
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // constante
\layout Quotation


\family typewriter 
*/
\layout Quotation


\family typewriter 

\protected_separator 
 clase cl2;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // cl2 es un objeto ordinario (no constante)
\layout Quotation


\family typewriter 

\protected_separator 
 cl2.dev();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // CORRECTO: función constante llamada por objeto no
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // constante
\layout Quotation


\family typewriter 

\protected_separator 
 cl2.incr();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // CORRECTO: función no constante llamada por objeto no
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // constante
\layout Quotation


\family typewriter 
}
\layout Section

Funciones Miembros Volátiles
\layout Standard

Las funciones miembros volátiles son análogas a las funciones miembros constante
s, y son creadas de la misma forma, colocando el calificador 
\family typewriter 
volatile
\family default 
 después de la lista de argumentos y antes del cuerpo de la función.
 Sólo funciones miembros volátiles pueden ser llamadas por objetos volátiles,
 y las funciones miembros volátiles pueden sólo llamar a otras funciones
 miembros volátiles.
 Al contrario que las funciones miembros constantes, las funciones miembros
 volátiles pueden modificar los datos miembros de un objeto.
 Los constructores y los destructores no necesitan ser declarados funciones
 miembros volátiles para ser invocados por objetos volátiles.
 Una función miembro puede ser constante y volátil.
\layout Standard

Ejemplo de uso correcto e incorrecto de funciones miembros volátiles.
\layout Quotation


\family typewriter 
// Ejemplo de funciones miembros volátiles y objetos volátiles
\layout Quotation


\family typewriter 
class clase
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase(void) { x = 0; }
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // constructor no volátil
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase(int i) volatile { x = i; }
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // constructor volátil
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase() { }
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // destructor no volátil
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int dev(void) volatile { return x; }
\protected_separator 

\protected_separator 
 // función miembro volátil
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void incr(void) { x++; }
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // función miembro no volátil
\layout Quotation


\family typewriter 
/*
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void incr2(void) volatile { incr (); } // ERROR: función volátil
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // llama a función no volátil
\layout Quotation


\family typewriter 
*/
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 volatile clase cl1; // cl1 es un objeto volátil
\layout Quotation


\family typewriter 

\protected_separator 
 cl1.dev();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // CORRECTO: función volátil llamada por objeto
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // volátil
\layout Quotation


\family typewriter 
/*
\layout Quotation


\family typewriter 

\protected_separator 
 cl1.incr();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // ERROR: función no volátil llamada por objeto
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // volátil
\layout Quotation


\family typewriter 
*/
\layout Quotation


\family typewriter 

\protected_separator 
 clase cl2;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // cl2 es un objeto ordinario (no volátil)
\layout Quotation


\family typewriter 

\protected_separator 
 cl2.dev();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // CORRECTO: función volátil llamada por objeto no
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // volátil
\layout Quotation


\family typewriter 

\protected_separator 
 cl2.incr();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // CORRECTO: función no volátil llamada por objeto no
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // volátil
\layout Quotation


\family typewriter 
}
\layout Section

Algunas Declaraciones de Clases Curiosas
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class clase1
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int i;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 float f;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int devi(void) { return i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 float devf(void) { return f; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void f(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase1 c = { 10, 20.35 };
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c.devi() << ' ' << c.devf () << '
\backslash 
n'; // imprime 
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
class clase2
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 int a, b;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase2 (int i, int j): a (i), b (i + j) { }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int deva(void) { return a; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int devb(void) { return b; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void g(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase2 c (1, 2);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c.deva() << ' ' << c.devb () << '
\backslash 
n'; // imprime 
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
class clase3
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int a, b;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase3(int i, int j): a (i) { b = j; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int deva(void) { return a; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int devb(void) { return b; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void h(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase3 c(2, 3);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c.deva() << ' ' << c.devb () << '
\backslash 
n'; // imprime 
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
class clase4
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int d;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 float f;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int devd(void) const volatile { return d; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 float devf(void) volatile const { return f; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void i(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase4 c = { 2, 3.4 };
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c.devd() << ' ' << c.devf() << '
\backslash 
n'; // imprime 
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 f();
\layout Quotation


\family typewriter 

\protected_separator 
 g();
\layout Quotation


\family typewriter 

\protected_separator 
 h();
\layout Quotation


\family typewriter 

\protected_separator 
 i();
\layout Quotation


\family typewriter 
}
\layout Section

Problemas
\layout Itemize


\series bold 
Ejercicio 4-1
\series default 
.
 Modifica el programa del primer ejemplo de esta lección, en el cual está
 implementado la clase 
\family typewriter 
conj_int
\family default 
, para cambiar esta clase por la clase 
\family typewriter 
conj_cad
\family default 
.
 La clase 
\family typewriter 
conj_cad
\family default 
 tiene el mismo propósito que la clase 
\family typewriter 
conj_int
\family default 
 pero en vez de trabajar con enteros, trabaja con cadenas de caracteres.
\layout Itemize


\series bold 
Ejercicio 4-2
\series default 
.
 Añade las siguientes funciones miembros a la clase lista implementada en
 el segundo ejemplo de esta lección.
 Modifica la función 
\family typewriter 
main()
\family default 
 para probar las nuevas funciones miembros implementadas.
\layout Quotation


\family typewriter 
// lista es un construtor cuyo inicializador es un array de caracteres
\layout Quotation


\family typewriter 
lista::lista (char *s);
\layout Quotation


\family typewriter 

\protected_separator 

\layout Quotation


\family typewriter 
// longitud devuelve la longitud de la lista, esto es, el número de nodos
 que tiene
\layout Quotation


\family typewriter 
int lista::longitud (void);
\layout Quotation


\family typewriter 

\protected_separator 

\layout Quotation


\family typewriter 
// devuelve el número de nodos de la lista que contienen como dato el
\layout Quotation


\family typewriter 
// valor c
\layout Quotation


\family typewriter 
int lista::cont_c (char c);
\layout Quotation


\family typewriter 

\protected_separator 

\layout Quotation


\family typewriter 
// suprime todos lo nodos de la lista que tengan como dato el valor c
\layout Quotation


\family typewriter 
void lista::quitar_c (char c);
\layout Chapter

Conversiones y Sobrecarga de Operadores
\layout Standard

En esta lección se estudia todo lo referente a las conversiones de tipos
 (tanto explícitas como implícitas) y la sobrecarga de operadores (los operadore
s sobrecargados son una forma corta de invocar a las funciones de operadores).
 En esta lección se va a estudiar los siguientes puntos:
\layout Itemize

Conversiones tradicionales: notación molde y conversiones implícitas.
 
\layout Itemize

Conversiones de TAD's: notación funcional y conversiones implícitas.
\layout Itemize

Algoritmo de selección de función sobrecargada: tres reglas.
\layout Itemize

Especificador 
\family typewriter 
friend
\family default 
: hace funciones y clases amigas de una clase.
\layout Itemize

Sobrecarga de operadores: palabra clave 
\family typewriter 
operator
\family default 
.
\layout Itemize

Objetos grandes: pasarlos por referencia en los argumentos.
\layout Itemize

Asignación e inicialización: dos conceptos diferentes.
\layout Itemize

Ejemplo de sobrecarga de algunos operadores: 
\family typewriter 
()
\family default 
, 
\family typewriter 
[]
\family default 
, 
\family typewriter 
,
\family default 
, 
\family typewriter 
new
\family default 
 y 
\family typewriter 
delete
\family default 
.
\layout Section

Cònversiones Tradicionales
\layout Standard

Las conversiones tradicionales del C++ son las conversiones de tipo que
 realiza el C, y que por lo tanto, también las realiza el C++.
 Las reglas generales de conversión son las siguientes:
\layout Standard

Conversión automática en una expresión aritmética
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 
\family typewriter 
x op y
\layout List
\labelwidthstring 00.00.0000

Primero: Todo 
\family typewriter 
char
\family default 
 y 
\family typewriter 
short
\family default 
 son convertidos a 
\family typewriter 
int
\family default 
.
 Todo 
\family typewriter 
unsigned char
\family default 
 y 
\family typewriter 
unsigned short
\family default 
 son convertidos a 
\family typewriter 
unsigned
\family default 
.
\layout List
\labelwidthstring 00.00.0000

Segundo: Si después del primer paso, los dos operandos de la expresión son
 de tipo diferente, entonces de acuerdo a la jerarquía de tipos
\layout Quote


\family typewriter 
int < unsigned < long < unsigned long < float < double
\layout List
\labelwidthstring 00.00.0000


\protected_separator 
 el operando de tipo más bajo es convertido al tipo del operando de tipo
 más alto y el valor de la expresión es de ese tipo.
\layout Standard

Ejemplo de conversiones:
\layout Standard


\family typewriter 
char c; short s; unsigned u; int i; long l; float f; double d;
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
5 4 0 0 -1 -1 -1 -1
1 1 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 1 0 0
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

Expresión
\newline 
Tipo
\newline 
Expresión
\newline 
Tipo
\newline 

\family typewriter 
c - s / i
\family default 

\newline 

\family typewriter 
int
\family default 

\newline 

\family typewriter 
u * 3 - i
\family default 

\newline 

\family typewriter 
unsigned
\family default 

\newline 

\family typewriter 
su * 3.0 - i
\family default 

\newline 

\family typewriter 
double
\family default 

\newline 

\family typewriter 
f * 3 - i
\family default 

\newline 

\family typewriter 
float
\family default 

\newline 

\family typewriter 
c + 1
\family default 

\newline 

\family typewriter 
int
\family default 

\newline 

\family typewriter 
3 * s * l
\family default 

\newline 

\family typewriter 
long
\family default 

\newline 

\family typewriter 
c + 1.0
\family default 

\newline 

\family typewriter 
double
\family default 

\newline 

\family typewriter 
d + s
\family default 

\newline 

\family typewriter 
double
\layout Section

Conversiones de TAD 
\layout Standard

El C++ introduce la notación funcional para hacer conversiones explícitas
 de tipo.
 Una notación funcional de la forma 
\family typewriter 
nombre_tipo (expresion)
\family default 
 es equivalente a la notación molde 
\family typewriter 
(nombre_tipo) (expresion)
\family default 
.
 Así, estas dos expresiones son equivalentes:
\layout Quotation


\family typewriter 
x = float (i);
\layout Quotation


\family typewriter 
x = (float) i;
\layout Standard

En C++ es preferible utilizar la notación funcional.
 Un constructor con un argumento es de hecho una conversión de tipo del
 tipo del argumento al tipo de la clase del constructor.
 Ejemplo:
\layout Quotation


\family typewriter 
// Ejemplo de conversión de un tipo ya definido a un tipo definido
\layout Quotation


\family typewriter 
// por el usuario.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class clase
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase(void) { x = 0; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase(int i) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int devx(void) { return x; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void imprx(void) { cout << devx () << '
\backslash 
n'; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase c1;
\layout Quotation


\family typewriter 

\protected_separator 
 clase c2(1);
\layout Quotation


\family typewriter 

\protected_separator 
 clase c3 = clase(2); // conversión de tipo explícita
\layout Quotation


\family typewriter 

\protected_separator 
 clase c4 = 3; // conversión de tipo implícita: clase c4 = clase (3);
\layout Quotation


\family typewriter 

\protected_separator 
 clase c5 = c4; // no hay conversión de tipo
\layout Quotation


\family typewriter 

\protected_separator 
 c1.imprx(); // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 c2.imprx(); // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 c3.imprx(); // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 c4.imprx(); // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 c5.imprx(); // imprime 
\layout Quotation


\family typewriter 
}
\layout Standard

También es posible hacer conversiones de un tipo definido por el usuario
 a un tipo definido ya.
 La forma de hacer esto es incluir funciones miembros de la forma:
\layout Quotation


\family typewriter 
operator tipo () { ...
 }
\layout Standard

Ejemplo:
\layout Quotation


\family typewriter 
// Ejemplo de conversión de un tipo definido por el usuario a un
\layout Quotation


\family typewriter 
// tipo definido ya
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class clase
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase(int i) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 operator int() { return x; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
inline void impr(int ent) { cout << ent << '
\backslash 
n'; }
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase c1 = clase(2); // conversión de tipo explícita
\layout Quotation


\family typewriter 

\protected_separator 
 clase c2 = 3; // conversión de tipo implícita: clase c4 = clase (3);
\layout Quotation


\family typewriter 

\protected_separator 
 clase c3 = c1; // no hay conversión de tipo
\layout Quotation


\family typewriter 

\protected_separator 
 int a = 1;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // no hay conversión de tipo
\layout Quotation


\family typewriter 

\protected_separator 
 int b = int('a'); // conversión de tipo explícita
\layout Quotation


\family typewriter 

\protected_separator 
 int c = 'A';
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // conversión de tipo implícita: int c = int ('A');
\layout Quotation


\family typewriter 

\protected_separator 
 int d = int(c2);
\protected_separator 
 // conversión de tipo explícita
\layout Quotation


\family typewriter 

\protected_separator 
 int e = c3;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // conversión de tipo implícita: int e = int (c3)
\layout Quotation


\family typewriter 

\protected_separator 
 int f = int (clase (4)); // dos conversiones de tipo explícita
\layout Quotation


\family typewriter 

\protected_separator 
 impr(a); // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 impr(b); // imprime .
 Nota: el valor ASCII de 'a' es 97.
\layout Quotation


\family typewriter 

\protected_separator 
 impr(c); // imprime .
 Nota: el valor ASCII de 'A' es 65.
\layout Quotation


\family typewriter 

\protected_separator 
 impr(d); // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 impr(e); // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 impr(f); // imprime 
\layout Quotation


\family typewriter 
}
\layout Section

Algoritmo de Selección de Función Sobrecargada
\layout Enumerate

Usa un ajuste exacto si se encuentra.
 Un 
\family typewriter 
short
\family default 
, un 
\family typewriter 
char
\family default 
, o una constante 0 es un ajuste exacto para 
\family typewriter 
int
\family default 
.
 Un 
\family typewriter 
float
\family default 
 es un ajuste exacto para 
\family typewriter 
double
\family default 
.
\layout Enumerate

Intenta conversiones implícitas de tipos estándares y usa cualquier ajuste.
 Estas conversiones no deben perder información.
 Dichas conversiones incluyen conversiones de puntero y las siguientes extension
es: 
\family typewriter 
int
\family default 
 a 
\family typewriter 
long
\family default 
 y 
\family typewriter 
int
\family default 
 a 
\family typewriter 
double
\family default 
.
\layout Enumerate

Intenta conversiones definidas por el usuario y usa un ajuste para el cual
 hay un único conjunto de conversiones.
\layout Standard

Ejemplo:
\layout Quotation


\family typewriter 
// Ejemplo de conversiones de tipos y de selección de funciones
\layout Quotation


\family typewriter 
// sobrecargadas
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class clase
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase(int i = 0) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 operator int() { return x; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
inline void impr(int ent) { cout << ent << '
\backslash 
n'; }
\layout Quotation


\family typewriter 
inline int max(int a, int b) { return a > b ? a : b; }
\layout Quotation


\family typewriter 
// conversión implícita: { return int (a) > int (b) ? a : b; }
\layout Quotation


\family typewriter 
inline clase max(clase a, clase b) { return a > b ? a : b; }
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase c1 = 2;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // conversión implícita: clase c1 = clase (2);
\layout Quotation


\family typewriter 

\protected_separator 
 clase c2 = clase(3); // conversión explícita
\layout Quotation


\family typewriter 

\protected_separator 
 impr(max (4, 3));
\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 // conversión explícita
\layout Quotation


\family typewriter 

\protected_separator 
 impr(int (max (c1, c2))); // imprime .
\layout Quotation


\family typewriter 

\protected_separator 
 // conversión implícita: impr(int (max (c1, c2)));
\layout Quotation


\family typewriter 

\protected_separator 
 impr(max (c1, c2)); // imprime .
\layout Quotation


\family typewriter 

\protected_separator 
 // conversión explícita en max
\layout Quotation


\family typewriter 

\protected_separator 
 impr(max (int (c1), 10)); // imprime .
\layout Quotation


\family typewriter 

\protected_separator 
 // conversión explícita en max
\layout Quotation


\family typewriter 

\protected_separator 
 impr(max(c1, clase (10))); // imprime .
\layout Quotation


\family typewriter 
/*
\layout Quotation


\family typewriter 

\protected_separator 
 impr(max (c1, 10));
\layout Quotation


\family typewriter 

\protected_separator 
 Esta sentencia provoca el error de compilación:
\layout Quotation


\family typewriter 

\protected_separator 
 "Ambigüedad entre max(clase,clase) y max(int,int)."
\layout Quotation


\family typewriter 

\protected_separator 
 Se viola la tercera regla de las tres que acabamos de mencionar ya
\layout Quotation


\family typewriter 

\protected_separator 
 que el compilador no sabe qué función escoger entre max(clase,clase)
\layout Quotation


\family typewriter 

\protected_separator 
 y max(int,int) para realizar la conversión de tipos.
\layout Quotation


\family typewriter 
*/
\layout Quotation


\family typewriter 

\protected_separator 
 // conversión implícita: impr(int(max(c1, c2)) + int(max(5, 6)));
\layout Quotation


\family typewriter 

\protected_separator 
 impr(max(c1, c2) + max(5, 6)); // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 // conversión implícita: int(c2).
\layout Quotation


\family typewriter 

\protected_separator 
 // La conversión explícita int(2) es redundante.
\layout Quotation


\family typewriter 

\protected_separator 
 impr(int (2) + 3 * c2); // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 // conversiones implícitas: impr(int(c1 = clase(int(c2) + 2)));
\layout Quotation


\family typewriter 

\protected_separator 
 impr(c1 = c2 + 2); // imprime 
\layout Quotation


\family typewriter 
}
\layout Section

Especificador friend
\layout Standard

La palabra clave 
\family typewriter 
friend
\family default 
 (amigo/a) es un especificador de función o de clase.
 El especificador 
\family typewriter 
friend
\family default 
 permite que una función no miembro de una clase X, u otra clase Y, puedan
 acceder a los miembros privados de la clase X.
\layout Subsection

Función friend
\layout Standard

La declaración de la función amiga debe aparecer en el interior de la definición
 de la clase.
 La declaración de la función amiga debe empezar con la palabra clave 
\family typewriter 
friend
\family default 
.
 Esta declaración puede aparecer en la parte pública o en la parte privada
 de la clase sin afectar a su significado.
 Ejemplo:
\layout Quotation


\family typewriter 
// Ejemplo de función friend
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class clase
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend void asig(clase& cl, int i);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend int dev(clase cl) { return cl.x; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase(int i = 0) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int devx(void) { return x; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
inline void asig(clase& cl, int i) { cl.x = i; }
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase c(5);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << dev(c) << '
\backslash 
n'; // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 asig(c, -2);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c.devx() << '
\backslash 
n'; // imprime 
\layout Quotation


\family typewriter 
}
\layout Subsection

Función Miembro friend
\layout Standard

Las funciones miembros de una clase Y pueden ser funciones amigas de otra
 clase X.
 En este caso es necesario utilizar el operador de resolución de ámbito
 en la declaración de la función amiga dentro de la clase X.
 Ejemplo:
\layout Quotation


\family typewriter 
// Ejemplo de función miembro friend
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class clase_B; // declarac.
 (no definic.) para que sea conocida en clase_A
\layout Quotation


\family typewriter 
class clase_A
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int dev(clase_B cl);
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class clase_B
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend int clase_A::dev(clase_B cl);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase_B(int i = 0) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int devx(void) { return x; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
inline int clase_A::dev(clase_B cl) { return cl.x; }
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase_B c1(5);
\layout Quotation


\family typewriter 

\protected_separator 
 clase_A c2;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c1.devx() << '
\backslash 
n'; // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c2.dev(c1) << '
\backslash 
n'; // imprime 
\layout Quotation


\family typewriter 
}
\layout Subsection

Clase friend 
\layout Standard

Si todas las funciones miembros de una clase son funciones amigas de otra
 clase, se dice que una clase es amiga (friend) de otra.
 La declaración es 
\family typewriter 
friend class nombre_de_clase
\family default 
 en lugar de 
\family typewriter 
friend declaracion_de_funcion
\family default 
.
 Ejemplo:
\layout Quotation


\family typewriter 
// Ejemplo de clase friend
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class clase_B; // declarac.
 (no definic.) para que sea conocida en clase_A
\layout Quotation


\family typewriter 
class clase_A
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend clase_B;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clase_A(int i = 0) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int devx(void) { return x; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class clase_B
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int dev(clase_A cl) { return cl.x; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void mains(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase_A c1 (5);
\layout Quotation


\family typewriter 

\protected_separator 
 clase_B c2;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c1.devx() << '
\backslash 
n'; // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c2.dev(c1) << '
\backslash 
n'; // imprime 
\layout Quotation


\family typewriter 
}
\layout Section

Sobrecarga de Operadores
\layout Standard

Los operadores se pueden sobrecargar al igual que las funciones.
 La utilización de operadores sobrecargados conduce a programas más cortos
 y más legibles.
 Hemos utilizado anteriormente la palabra clave 
\family typewriter 
operator
\family default 
 para definir una función miembro que realiza la conversión de tipos.
 También puede usarse esta palabra clave para sobrecargar operadores de
 C++.
\layout Standard

Aunque se sumen nuevos significados a los operadores, su asociatividad y
 precedencia se conserva.
 Tampoco se puede cambiar la sintaxis de operadores, por ejemplo, no es
 posible definir un operador unario 
\family typewriter 
%
\family default 
 o uno binario 
\family typewriter 
!
\family default 
.
 Los operadores que no pueden ser sobrecargados son:
\layout Itemize

operador de selector de componente (
\family typewriter 
.
\family default 
)
\layout Itemize

operador de referencia a través de un puntero a un miembro (
\family typewriter 
.*
\family default 
)
\layout Itemize

operador de resolución/acceso de ámbito (
\family typewriter 
::
\family default 
)
\layout Itemize

operador condicional (
\family typewriter 
?:
\family default 
)
\layout Standard

Los operadores de autoincremento y autodecremento, 
\family typewriter 
++
\family default 
 y 
\family typewriter 
--
\family default 
, se pueden sobrecargar pero sus significados en notación prefija y postfija
 es el mismo en la forma sobrecargada.
 Todos los demás operadores se pueden sobrecargar, éstos incluyen:
\layout Itemize

operadores aritméticos
\layout Itemize

operadores de bits
\layout Itemize

operadores lógicos
\layout Itemize

operador de indexado 
\family typewriter 
[]
\layout Itemize

operadores de comparación
\layout Itemize

llamada a función 
\family typewriter 
()
\layout Itemize

operadores de igualdad
\layout Itemize

operadores new y delete
\layout Itemize

operadores de asignación
\layout Standard

No es posible definir nuevos tokens de operadores, pero se puede usar la
 notación de llamada a función cuando este conjunto de operadores es inadecuado.
 Por ejemplo, usa 
\family typewriter 
pow()
\family default 
 en vez de 
\family typewriter 
**
\family default 
.
 El 
\family typewriter 
;
\family default 
 no se puede sobrecargar puesto que no es un operador.
\layout Section

Función Operador (operator)
\layout Standard

El nombre de una función operador es la palabra clave 
\family typewriter 
operator
\family default 
 seguida por el operador.
 Por ejemplo, 
\family typewriter 
operator<<
\family default 
.
 Una función operador es declarada como cualquier otra función y por lo
 tanto puede ser llamada como cualquier otra; el uso del operador es solamente
 una forma corta de escribir una llamada explícita de una función de operador.
 Por ejemplo, definida una clase 
\family typewriter 
complex
\family default 
 en la cual se ha definido un operador de suma, las dos inicializaciones
 siguientes son sinónimas.
\layout Quotation


\family typewriter 
void f(complex a, complex b)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 complex c = a + b;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // forma corta
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 complex d = operator+ (a, b), // llamada explícita
\layout Quotation


\family typewriter 
}
\layout Section

Operadores Binarios y Unarios
\layout Standard

Hay dos formas de sobrecargar los operadores: haciendo que sean funciones
 miembros o haciendo que sean funciones amigas.
 Un operador binario puede ser definido bien usando una función que toma
 un argumento o bien usando una función amiga que toma dos argumentos.
 Así, para cualquier operador binario 
\family typewriter 
@
\family default 
, 
\family typewriter 
a@b
\family default 
 puede ser interpretado bien como 
\family typewriter 
a.operator@(b)
\family default 
 o bien como 
\family typewriter 
operator@(a,b)
\family default 
.
 Si ambos están definidos, 
\family typewriter 
a@b
\family default 
 es un error.
 Un operador unario, ya sea prefijo o postfijo, puede ser definido bien
 usando una función miembro que no toma ningún argumento o bien usando una
 función amiga que toma un argumento.
 Así, para cualquier operador 
\family typewriter 
@
\family default 
, tanto 
\family typewriter 
a@
\family default 
 como 
\family typewriter 
@a
\family default 
 puede ser interpretado bien como 
\family typewriter 
a.operator@()
\family default 
 o bien como 
\family typewriter 
operator@(a)
\family default 
.
 Si ambos están definidos, 
\family typewriter 
a@
\family default 
 y 
\family typewriter 
@a
\family default 
 son errores.
 Considerar este ejemplo:
\layout Quotation


\family typewriter 
class X
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // funciones amigas:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend X operator- (X);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // menos unario
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend X operator- (X,X);
\protected_separator 

\protected_separator 
 // menos binario
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend X operator- ();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // error: no hay operando
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend X operator- (X,X,X); // error: ternario
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // funciones miembros (con primer argumento implícita: this):
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 X *operator& ();
\protected_separator 

\protected_separator 
 // unario & (dirección de)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 X operator& (X);
\protected_separator 

\protected_separator 
 // binario & (and a nivel de bits)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 X operator& (X,X); // error: ternario
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Standard

Ejemplo:
\layout Quotation


\family typewriter 
// Ejemplo de operadores sobrecargados.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class clase
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend clase operator- (clase c1, clase c2);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend clase operator- (clase cl) { return 0 - cl; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend clase operator/ (clase, clase);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x, y;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 clase (int xx = 0, int yy = 0) { x = xx; y = yy; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int getx(void) { return x; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int gety(void) { return y; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 clase operator+ (clase cl) { return *this - -cl; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 clase operator+ (void) { return *this; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 clase operator* (clase);
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
inline clase operator- (clase c1, clase c2)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 return clase(c1.getx () - c2.getx (), c1.gety () - c2.gety ());
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
inline clase operator/ (clase c1, clase c2)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 return clase(c1.getx () / c2.getx (), c1.gety () / c2.gety ());
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
inline clase clase::operator* (clase cl)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 return clase(this->getx () * cl.getx (), this->gety () * cl.gety ());
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
inline void escribir(clase c)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c.getx () << ' ' << c.gety () << '
\backslash 
n';
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase c1(5), c2 (2, 3);
\layout Quotation


\family typewriter 

\protected_separator 
 escribir(c1 - c2);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 escribir(c1 + c2);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 escribir(-c1 - +c2);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 escribir(c1 / c2 + c2 * c1); // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 clase c3 = c1 + c2 + c2;
\layout Quotation


\family typewriter 

\protected_separator 
 escribir(c3 * c3);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 
}
\layout Section

Significados Predefinidos para los Operadores
\layout Standard

No se hace ninguna asunción acerca del significado de un operador definido
 por el usuario.
 En particular, puesto que un = sobrecargado no se asume para implementar
 la asignación del segundo operando al primer operando, no se testea para
 asegurar que el primer operando es un 
\family typewriter 
lvalue
\family default 
 (un 
\family typewriter 
lvalue
\family default 
 es una dirección que aparece en el lado izquierdo de una sentencia de asignació
n y a la cual se le puede dar un valor).
 El significado de algunos operadores ya construidos están definidos para
 ser equivalentes a alguna combinación de otros operadores sobre los mismos
 argumentos.
 Por ejemplo, si a es un 
\family typewriter 
int
\family default 
, 
\family typewriter 
++a
\family default 
 significa 
\family typewriter 
a+=1
\family default 
, y esto significa a su vez 
\family typewriter 
a=a+1
\family default 
.
 En los operadores definidos por el usuario tales equivalencias no son ciertas
 (a no ser que el usuario defina estos operadores de esa forma).
 Los operadores = y & tienen significados predefinidos cuando se aplican
 a objetos de clases.
 No hay una forma elegante de indefinir estos dos operadores.
 Puede ser, sin embargo, inhabilitados para una clase X.
 Se puede declarar, por ejemplo, 
\family typewriter 
X::operator&
\family default 
 () sin proporcionar una definición para él.
 Si en algún lugar se toma la dirección de un objeto de la clase X, el enlazador
 detectará la ausencia de la definición.
 En algunos sistemas esta técnica no puede ser usada porque el enlazador
 es tan 
\emph on 
inteligente
\emph toggle 
 que detecta que hay una función declarada y no definida aun cuando tal
 función no se use.
 Por ello, una solución altelnativa es definir la función 
\family typewriter 
X::operator&()
\family default 
 para que provoque un error en tiempo de ejecución.
\layout Section

Una Clase de Números Complejos (clase complex)
\layout Standard

Las funciones de operadores, al igual que todas las funciones, se pueden
 sobrecargar.
 Por ejemplo:
\layout Quotation


\family typewriter 
class complex
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 double re, im;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 complex (double r, double i) { re = r; im = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex operator+ (complex, complex);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex operator+ (complex, double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex operator+ (double, complex);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex operator- (complex, complex);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex operator- (complex, double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex operator- (double, complex);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 complex operator- ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex operator* (complex, complex);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex operator* (complex, double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex operator* (double, complex);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void f (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 complex a (1, 1), b (2, 2), c (3, 3), d (4, 4), e (5, 5);
\layout Quotation


\family typewriter 

\protected_separator 
 a = -b - c;
\layout Quotation


\family typewriter 

\protected_separator 
 b = c * 2.0 * c;
\layout Quotation


\family typewriter 

\protected_separator 
 c = (d + e) * a;
\layout Quotation


\family typewriter 
}
\layout Standard

Para evitar escribir tres funciones sobrecargadas para cada operador binario,
 declaramos un constructor que, dado un 
\family typewriter 
double
\family default 
 cree un 
\family typewriter 
complex
\family default 
.
 Por ejemplo:
\layout Quotation


\family typewriter 
class complex
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 complex(double r) { re = r; im = 0; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Standard

Ahora podemos hacer:
\layout Quotation


\family typewriter 
complex z1 = complex (23);
\layout Quotation


\family typewriter 
complex z2 = 23;
\layout Standard

donde, tanto z1 como z2, serán inicializados llamando a 
\family typewriter 
complex(23,0)
\family default 
.
 La clase 
\family typewriter 
complex
\family default 
 la podemos declarar de esta nueva forma:
\layout Quotation


\family typewriter 
class complex
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 double re, im;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 complex (double r, double i = 0) { re = r; im = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 friend complex operator+ (complex, complex);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 friend complex operator* (complex, complex);
\layout Quotation


\family typewriter 
};
\layout Standard

y deberían ser legales las operaciones que involucren variables complex
 y constantes enteras.
 Una constante entera será interpretada como 
\family typewriter 
complex
\family default 
 con la parte imaginaria cero.
 Por ejemplo, 
\family typewriter 
a = b * 2
\family default 
 significa 
\family typewriter 
a = operator+ (b, complex (double (2), double (0)))
\family default 
.
 Una conversión definida por el usuario es aplicada implícitamente únicamente
 si es única.
 Un objeto construido por el uso explícito o implícito de un constructor
 es automático y será destruido en la primera oportunidad, normalmente inmediata
mente después de la sentencia en la cual fue creado.
\layout Section

OPERADORES # Y ## DEL PREPROCESADOR 
\layout Standard

No se pueden sobrecargar los operadores 
\family typewriter 
#
\family default 
 y 
\family typewriter 
##
\family default 
 porque son operadores del preprocesador de C++, no del lenguaje C++.
 Los operadores almohadilla (
\family typewriter 
#
\family default 
) y doble almohadilla (
\family typewriter 
##
\family default 
) ejecutan sustituciones y fusionado de tokens en la fase de exploración
 del preprocesador.
 El operador unario 
\family typewriter 
#
\family default 
 convierte (sustituye) el token de su operando en string.
 El operador binario 
\family typewriter 
##
\family default 
 fusiona dos tokens (operando izquierdo y operando derecho en un sólo token.
 El símbolo 
\family typewriter 
#
\family default 
 también se utiliza para indicar una directiva del preprocesador, pero en
 este caso no actúa como operador.
 El siguiente ejemplo muestra cómo se utilizan los operadores 
\family typewriter 
#
\family default 
 y 
\family typewriter 
##
\family default 
 del preprocesador.
 Ejemplo:
\layout Quotation


\family typewriter 
// Ejemplo de los operadores # y ## del preprocesador de C++.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#define impr_suma(x)
\protected_separator 
 cout << #x " + " #x " = " << x + x << "
\backslash 
n"
\layout Quotation


\family typewriter 
#define var(x,y) (x##y)
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 int x1;
\layout Quotation


\family typewriter 

\protected_separator 
 var (x, 1) = 5;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "Ejemplo" " de los " "operadores # y ## del 
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 "preprocesador:
\backslash 
n";
\layout Quotation


\family typewriter 

\protected_separator 
 impr_suma (x1);
\layout Quotation


\family typewriter 

\protected_separator 
 impr_suma (100);
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
/*
\layout Standard

Salida del programa:
\layout Quotation


\family typewriter 
Ejemplo de los operadores # y ## del preprocesador:
\layout Quotation


\family typewriter 
x1 + x1 = 10
\layout Quotation


\family typewriter 
100 + 100 = 200
\layout Quotation


\family typewriter 
*/
\layout Section

Objetos Grandes
\layout Standard

Cuando se pasa un objeto como argumento por valor a una función, se está
 pasando, en realidad, una copia de ese objeto.
 En objetos de cierto tamaño es deseable evitar tanto traspaso de información.
 Esto se consigue pasando los objetos como argumento por referencia a las
 funciones.
 Para ello utilizamos el operador de referencia 
\family typewriter 
&
\family default 
.
\layout Section

Asignación e Inicialización
\layout Standard

Consideremos una clase string muy simple:
\layout Quotation


\family typewriter 
struct string
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 char *p;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int size; // tamaño del vector apuntado por p
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 string(int sz) { p = new char[size = sz]; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 string() { delete p; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Standard

Un string es una estructura de datos compuesta de un puntero a un vector
 de caracteres y el tamaño de ese vector.
 El vector es creado por el constructor y borrado por el destructor.
 Sin embargo, tal y como está construida la clase string puede causar problemas.
 Por ejemplo:
\layout Quotation


\family typewriter 
void f(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 string s1(10);
\layout Quotation


\family typewriter 

\protected_separator 
 string s2(20);
\layout Quotation


\family typewriter 

\protected_separator 
 s1 = s2;
\layout Quotation


\family typewriter 
}
\layout Standard

asignará dos vectores de caracteres, pero la asignación 
\family typewriter 
s1 = s2
\family default 
 hará que el puntero 
\family typewriter 
p
\family default 
 de 
\family typewriter 
s1
\family default 
 apunte al mismo sitio que el puntero 
\family typewriter 
p
\family default 
 de 
\family typewriter 
s2
\family default 
.
 Cuando sean invocados los destructores 
\family typewriter 
s1
\family default 
 y 
\family typewriter 
s2
\family default 
, se destruirá dos veces el mismo vector con resultados desastrosos impredecible
s.
 La solución a este problema es definir apropiadamente la asignación de
 los objetos string.
 La asignación por defecto entre objetos es la copia de elementos de uno
 a otro.
 Definamos un nuevo operador de asignación a nuestra clase string para resolver
 el problema planteado:
\layout Quotation


\family typewriter 
struct string
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 char *p;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int size; // tamaño del vector apuntado por p
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 string(int sz) { p = new char[size = sz]; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 string() { delete p; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void operator= (string&);
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void string::operator= (string& a)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 if(this == &a) return; // previene s = s
\layout Quotation


\family typewriter 

\protected_separator 
 delete p;
\layout Quotation


\family typewriter 

\protected_separator 
 p = new char[size = a.size];
\layout Quotation


\family typewriter 

\protected_separator 
 strcpy(p, a.p);
\layout Quotation


\family typewriter 
}
\layout Standard

Con la nueva definición de string aseguramos que el ejemplo anterior (función
 
\family typewriter 
f()
\family default 
) trabajará correctamente.
 Sin embargo, todavía hay un problema latente que lo podemos observar si
 hacemos una pequeña modificación en 
\family typewriter 
f()
\family default 
:
\layout Quotation


\family typewriter 
void f(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 string s1(10);
\layout Quotation


\family typewriter 

\protected_separator 
 string s2 = s1;
\layout Quotation


\family typewriter 
}
\layout Standard

Ahora sólo un string es construido pero dos son destruidos.
 Los operadores de asignación definidos por el usuario no son aplicados
 a objetos no inicializados.
 Un rápido vistazo a 
\family typewriter 
string::operator=()
\family default 
 muestra porqué esto es así: el puntero 
\family typewriter 
p
\family default 
 contendría un valor indefinido (aleatorio).
 Consecuentemente, debemos definir otra función miembro adicional para hacer
 frente a la inicialización.
 La nueva definición de string para tener en cuenta la inicialización es:
\layout Quotation


\family typewriter 
struct string
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 char *p;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int size; // tamaño del vector apuntado por p
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 string (int sz) { p = new char[size = sz]; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 string () { delete p; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void operator= (string&);
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void string::string (string& a)
\layout Quotation


\family typewriter 

\protected_separator 
{
\layout Quotation


\family typewriter 

\protected_separator 
 p = new char[size = a.size];
\layout Quotation


\family typewriter 

\protected_separator 
 strcpy (p, a.p);
\layout Quotation


\family typewriter 
}
\layout Standard

Para un tipo X, el constructor X(
\family typewriter 
X&
\family default 
) proporciona la inicialización para un objeto del mismo tipo X.
 Las operaciones de asignación y de inicialización son diferentes; pero
 sólo tiene especial importancia tal diferencia cuando una clase X tiene
 un destructor que realiza tareas no triviales, tales como desasignación
 de memoria, en cuyo caso es deseable evitar la copia elemento a elemento
 de objetos:
\layout Quotation


\family typewriter 
class X
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 X(algo);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // constructor: crea objetos
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 X(X&);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // constructor: copia en inicialización
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 operator= (X&); // asignación: borrado y copia
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 X();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // destructor: borrado
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Standard

Hay dos casos más en los que un objeto es copiado: como un argumento de
 función y como un valor devuelto por una función.
 En ambos casos se crea una variable que es inicializada con el objeto del
 argumento o con el objeto a devolver; en ambos casos se llamará, por tanto,
 a la función X(
\family typewriter 
&X
\family default 
) si ésta está definida:
\layout Quotation


\family typewriter 
string g(string arg)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 return arg;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 string s = "asdf";
\layout Quotation


\family typewriter 

\protected_separator 
 s = g(s);
\layout Quotation


\family typewriter 
}
\layout Standard

Claramente, el valor de 
\family typewriter 
s
\family default 
 debería ser 
\family typewriter 
"asdf"
\family default 
 después de la llamada a 
\family typewriter 
g()
\family default 
.
 El argumento arg se convierte en una copia del valor de s llamando a 
\family typewriter 
string::string(string&)
\family default 
.
 El valor devuelto por 
\family typewriter 
g()
\family default 
 es una copia del valor de 
\family typewriter 
arg
\family default 
 creada llamando a 
\family typewriter 
string::string(string&)
\family default 
; esta vez, la variable inicializada es una variable temporal, la cual es
 asignada a 
\family typewriter 
s
\family default 
.
 Tales variables temporales son destruidas, usando 
\family typewriter 
string::string()
\family default 
, tan pronto como es posible.
\layout Standard

Ejemplo de sobrecarga de algunos operadores:
\layout Quotation


\family typewriter 
#include <iostream.h> // cout
\layout Quotation


\family typewriter 
#include <stddef.h>
\protected_separator 

\protected_separator 
 // size_t
\layout Quotation


\family typewriter 
class clase
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x, y, sum, dif, prod;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 clase (int i, int j): x (i), y (j), sum (i + j),
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 dif (i -j), prod (x * y) {}
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void escr (const char *s)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 cout << "
\backslash 
n" << s << ": x = " << x << " y = " << y << " sum = " << sum
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << " dif = " << dif << " prod = " << prod;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 operator int () { return dif; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int operator () (void) { return prod; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int operator [] (int ind)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 { return ind == 0 ? sum : ind == 1 ? prod : 0; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // cambia prioridad de operador , para la clase
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 clase operator, (clase) { return *this; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void *operator new (size_t)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 cout << "
\backslash 
nERROR: no se puede aplicar el operador new a un objeto "
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 "de clase.";
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 return 0;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void operator delete (void *) { }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clase cl1 (1, 2), cl2 (2, 3), cl3 (3, 4);
\layout Quotation


\family typewriter 

\protected_separator 
 int a = cl1, b = cl2 (), c = cl3 [1];
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
n** Inicializando: clase cl1 (1, 2), cl2 (2, 3), cl3 (3, 4);"
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 "
\backslash 
n
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int a = cl1, b = cl2 (), c = cl3 [1];";
\layout Quotation


\family typewriter 

\protected_separator 
 cl1.escr ("cl1");
\layout Quotation


\family typewriter 

\protected_separator 
 cl2.escr ("cl2");
\layout Quotation


\family typewriter 

\protected_separator 
 cl3.escr ("cl3");
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
na = " << a << " b = " << b << " c = " << c;
\layout Quotation


\family typewriter 

\protected_separator 
 a = (b, c, 5);
\layout Quotation


\family typewriter 

\protected_separator 
 cl1 = (cl2, cl3, clase (5, 5));
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
n** Ejecutando: a = (b, c, 5); cl1 = (cl2, cl3, clase (5, 5));";
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
na = " << a;
\layout Quotation


\family typewriter 

\protected_separator 
 cl1.escr ("cl1");
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
n** Ejecutando: clase *pclase = new clase;";
\layout Quotation


\family typewriter 

\protected_separator 
 clase *pclase = new clase (0, 0);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
n** Ejecutando: delete *pclase;";
\layout Quotation


\family typewriter 

\protected_separator 
 delete pclase;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << 
\backslash 
n;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
/*
\layout Quotation


\family typewriter 
SALIDA DE ESTE PROGRAMA:
\layout Quotation


\family typewriter 
** Inicializando: clase cl1 (1, 2), cl2 (2, 3), cl3 (3, 4);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int a = cl1, b = cl2 (), c = cl3 [1];
\layout Quotation


\family typewriter 
cl1: x = 1 y = 2 sum = 3 dif = -1 prod = 2
\layout Quotation


\family typewriter 
cl2: x = 2 y = 3 sum = 5 dif = -1 prod = 6
\layout Quotation


\family typewriter 
cl3: x = 3 y = 4 sum = 7 dif = -1 prod = 12
\layout Quotation


\family typewriter 
a = -1 b = 6 c = 12
\layout Quotation


\family typewriter 
** Ejecutando: a = (b, c, 5); cl1 = (cl2, cl3, clase (5, 5));
\layout Quotation


\family typewriter 
a = 5
\layout Quotation


\family typewriter 
cl1: x = 2 y = 3 sum = 5 dif = -1 prod = 6
\layout Quotation


\family typewriter 
** Ejecutando: clase *pclase = new clase;
\layout Quotation


\family typewriter 
ERROR: no se puede aplicar el operador new a un objeto de clase.
\layout Quotation


\family typewriter 
** Ejecutando: delete *pclase;
\layout Quotation


\family typewriter 
*/
\layout Chapter

Herencia Simple
\layout Standard

Esta lección describe los conceptos de herencia y clases derivadas en C++.
 Herencia es el mecanismo de derivar una nueva clase de otra vieja clase.
 Esto es, una clase puede adquirir todas las características de otra clase.
 A la nueva clase se le llama clase derivada y a la vieja
\protected_separator 
 clase se le llama clase base.
 Las clases derivadas proporcionan un mecanismo simple, flexible y eficiente
 para especificar una interface alternativa para una clase y para definir
 una clase añadiendo facilidades a una clase que ya existe sin reprogramación
 ni recompilación.
 La herencia es una característica importante de la programación orientada
 a objeto.
 En los primeros estándares de C++, una clase derivada sólo podía heredar
 la descripción de una clase base (herencia simple).
 En los nuevos estándares, una clase derivada puede tener varias clases
 bases (herencia múltiple).
 En esta lección estudiaremos la herencia simple y en la siguiente veremos
 la herencia múltiple.
 En esta lección se va a estudiar los siguientes puntos:
\layout Itemize

Clases derivadas: son clases que derivan de otras clases llamadas bases.
\layout Itemize

Modificadores de acceso public, private y protected: estudio completo.
\layout Itemize

Punteros a clases derivadas: clase derivada es un subtipo de clase base.
\layout Itemize

Funciones virtuales: funciones declaradas con el especificador virtual.
\layout Itemize

Funciones puras: son clases virtuales sin definición en clases bases.
\layout Itemize

Clases abstractas: son las clases que tienen al menos una función pura.
\layout Itemize

Jerarquía de clases: una clase derivada puede ser también una clase base.
\layout Section

Clases Derivadas
\layout Standard

Una clase puede ser derivada de una clase existente usando la foma:
\layout Quotation


\family typewriter 
(class | struct) nombre_clase_derivada: [public | private] nombre_clase_base
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 declaracion_de_los_miembros
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Standard

donde (
\family typewriter 
class | struct
\family default 
) quiere decir que en ese lugar debe ir obligatoriamente la palabra clave
 class o la palabra clave 
\family typewriter 
struct
\family default 
; y 
\family typewriter 
[public
\family default 
 
\family typewriter 
| private]
\family default 
 quiere decir que en ese lugar puede ir opcionalmente los modificadores
 de acceso 
\family typewriter 
public
\family default 
 o 
\family typewriter 
private
\family default 
.
 Si no aparece ninguno de los dos modificadores de acceso, se considerará,
 por defecto, 
\family typewriter 
public
\family default 
 para 
\family typewriter 
struct
\family default 
 y 
\family typewriter 
private
\family default 
 para 
\family typewriter 
class
\family default 
.
 Por ejemplo, 
\family typewriter 
struct d : b { ...

\family default 
 significa 
\family typewriter 
class d : public b { public: ...

\family default 
 y viceversa, 
\family typewriter 
class b : b { ...

\family default 
 significa 
\family typewriter 
struct b: private b { private: ...

\family default 
 .
 Ejemplo de clase derivada:
\layout Quotation


\family typewriter 
class empleado
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 char *nombre;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 short edad;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 short departamento;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int salario;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void imprimir (void);
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class director: public empleado
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int num_empleados;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 short tipo_director;
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Standard

La clase director es una clase derivada de la clase empleado, y por consiguiente
, la clase empleado es una clase base para la clase director.
 La clase director tiene todos los miembros públicos de la clase empleado
 (nombre, edad, etc.) que son añadidos a los dos que ya posee la clase director.
 Por lo tanto, la clase empleado tiene cinco miembros y la clase director
 tiene siete.
 Si no utilizáramos la herencia, haríamos:
\layout Quotation


\family typewriter 
class director
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 empleado empl;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int num_empleados;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 short tipo_director;
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Standard

Esta segunda versión de la clase director no es equivalente a la primera.
 En la primera versión, la clase director tiene siete miembros, en la segunda
 tiene tres, donde el miembro 
\family typewriter 
empl
\family default 
 tiene a su vez cinco miembros.
 Desde el punto de vista lógico, en esta segunda versión no podemos decir
 que un director es un empleado, sino más bien que empleado es una parte
 de director.
 Hay otras diferencias como las conversiones de punteros a las clases empleado
 y director que se explicarán más adelante.
 En el ejemplo de los directores y empleados, la forma natural de implementarlo
 en C++ es utilizando la herencia puesto que un director es un empleado
 y posee todas las características de los empleados.
\layout Section

Modificadores de Acceso public, private y protected
\layout Standard

Los miembros de una clase pueden adquirir atributos de acceso de dos formas:
 por defecto, o a través del uso de los especificadores de acceso 
\family typewriter 
public
\family default 
, 
\family typewriter 
private
\family default 
 y 
\family typewriter 
protected
\family default 
.
 La forma de utililizar estos especificadores es:
\layout Quotation


\family typewriter 
public:
\protected_separator 

\protected_separator 

\protected_separator 
 <declaraciones>
\layout Quotation


\family typewriter 
private:
\protected_separator 

\protected_separator 
 <declaraciones>
\layout Quotation


\family typewriter 
protected: <declaraciones>
\layout Standard

Los especificadores de acceso (también llamados modificadores de visibilidad)
 pueden ser usados, dentro de una declaración de clase, en cualquier orden
 y en cualquier frecuencia.
 El estilo usual es:
\layout Quotation


\family typewriter 
class clase
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private: // opcional
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ...
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 protected
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ...
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Standard

Si un miembro es 
\family typewriter 
public
\family default 
, puede ser usado por cualquier función.
 En C++, los miembros de un 
\family typewriter 
struct
\family default 
 o 
\family typewriter 
union
\family default 
 son 
\family typewriter 
public
\family default 
 por defecto.
 Se puede cambiar el acceso de 
\family typewriter 
struct
\family default 
 por defecto con 
\family typewriter 
private
\family default 
 y 
\family typewriter 
protected
\family default 
; no se puede cambiar el acceso de 
\family typewriter 
union
\family default 
 por defecto.
 Si un miembro es 
\family typewriter 
private
\family default 
, sólo puede ser usado por funciones miembros y amigas de la clase en la
 que está declarada.
 Los miembros de una clase son private por defecto.
 Si un miembro es 
\family typewriter 
protected
\family default 
, su acceso es el mismo que para 
\family typewriter 
private
\family default 
.
 Pero además el miembro puede ser usado por funciones miembros y amigas
 de las clases derivadas de la clase declarada, pero sólo en objetos del
 tipo derivado.
 Las declaraciones de friend no son modificadas por estos especificadores
 de acceso.
\layout Standard

Una clase base puede ser 
\family typewriter 
public
\family default 
 o 
\family typewriter 
private
\family default 
 con respecto a una clase derivada.
 Si la clase base es 
\family typewriter 
public
\family default 
, los miembros 
\family typewriter 
public
\family default 
 y 
\family typewriter 
protected
\family default 
 de la clase base conservan la misma visibilidad en la clase derivada.
 Si la clase base es 
\family typewriter 
private
\family default 
, los miembros 
\family typewriter 
public
\family default 
 y 
\family typewriter 
protected
\family default 
 de la clase base son miembros 
\family typewriter 
private
\family default 
 en la clase derivada.
 Una clase base en C++ puede ser 
\family typewriter 
public
\family default 
 o 
\family typewriter 
private
\family default 
, pero no 
\family typewriter 
protected
\family default 
.
 El siguiente esquema resume todo lo dicho en este párrafo:
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
7 3 0 0 -1 -1 -1 -1
1 1 0 0
1 1 0 0
0 1 0 0
0 1 0 0
1 1 0 0
0 1 0 0
0 1 0 0
8 1 0 "" ""
8 1 0 "" ""
8 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""

Acceso en clase base
\newline 
Modificador de acceso
\newline 
Acceso heredado de base
\newline 
public
\newline 
public
\newline 
public
\newline 
private
\newline 
public
\newline 
no accesible
\newline 
protected
\newline 
public
\newline 
protected
\newline 
private
\newline 
private
\newline 
private
\newline 
private
\newline 
private
\newline 
no accesible
\newline 
protected
\newline 
private
\newline 
private
\layout Standard

Ejemplo sobre los especificadores de acceso en la herencia de C++.
\layout Quotation


\family typewriter 
class base
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int base_priv;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 protected:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int base_prot;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int base_publ;
\layout Quotation


\family typewriter 
};
\layout Quotation


\family typewriter 
class derpubl : public base
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int derpubl_priv;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 protected:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int derpubl_prot;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int derpubl_publ;
\layout Quotation


\family typewriter 
};
\layout Quotation


\family typewriter 
class derpriv : private base
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int derpriv_priv;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 protected:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int derpriv_prot;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int derpriv_publ;
\layout Quotation


\family typewriter 
};
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 base cbase;
\layout Quotation


\family typewriter 

\protected_separator 
 derpubl cderpubl;
\layout Quotation


\family typewriter 

\protected_separator 
 derpriv cderpriv;
\layout Quotation


\family typewriter 

\protected_separator 
 cbase.base_priv = 0;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // error
\layout Quotation


\family typewriter 

\protected_separator 
 cbase.base_prot = 0;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // error
\layout Quotation


\family typewriter 

\protected_separator 
 cbase.base_publ = 0;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // correcto
\layout Quotation


\family typewriter 

\protected_separator 

\layout Quotation


\family typewriter 

\protected_separator 
 cderpubl.base_priv = 0;
\protected_separator 

\protected_separator 

\protected_separator 
 // error
\layout Quotation


\family typewriter 

\protected_separator 
 cderpubl.base_prot = 0;
\protected_separator 

\protected_separator 

\protected_separator 
 // error
\layout Quotation


\family typewriter 

\protected_separator 
 cderpubl.base_publ = 0;
\protected_separator 

\protected_separator 

\protected_separator 
 // correcto
\layout Quotation


\family typewriter 

\protected_separator 
 cderpubl.derpubl_priv = 0; // error
\layout Quotation


\family typewriter 

\protected_separator 
 cderpubl.derpubl_prot = 0; // error
\layout Quotation


\family typewriter 

\protected_separator 
 cderpubl.derpubl_publ = 0; // correcto
\layout Quotation


\family typewriter 

\protected_separator 

\layout Quotation


\family typewriter 

\protected_separator 
 cderpriv.base_priv = 0;
\protected_separator 

\protected_separator 

\protected_separator 
 // error
\layout Quotation


\family typewriter 

\protected_separator 
 cderpriv.base_prot = 0;
\protected_separator 

\protected_separator 

\protected_separator 
 // error
\layout Quotation


\family typewriter 

\protected_separator 
 cderpriv.base_publ = 0;
\protected_separator 

\protected_separator 

\protected_separator 
 // error
\layout Quotation


\family typewriter 

\protected_separator 
 cderpriv.derpriv_priv = 0; // error
\layout Quotation


\family typewriter 

\protected_separator 
 cderpriv.derpriv_prot = 0; // error
\layout Quotation


\family typewriter 

\protected_separator 
 cderpriv.derpriv_publ = 0; // correcto
\layout Quotation


\family typewriter 
}
\layout Standard

La clase derivada tiene sus propios constructores, los cuales invocarán
 a los constructores de la clase base.
 Hay una sintaxis especial para pasar argumentos desde el constructor de
 la clase derivada al constructor de la clase base:
\layout Quotation


\family typewriter 
cabecera_funcion: nombre_clase_base (lista_de_argumentos)
\layout Standard

En esta sintaxis 
\family typewriter 
nombre_clase_base
\family default 
 es opcional pero es aconsejable ponerlo siempre.
\layout Standard

Ejemplo de clase derivada y clase base con constructores.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class base
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int b;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 base (int i = 0) { b = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int devb (void) { return b; }
\layout Quotation


\family typewriter 
};
\layout Quotation


\family typewriter 
class derivada : public base
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int d;
\layout Quotation


\family typewriter 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 derivada (int i = 0): base (i) { d = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 derivada (int i, int j);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int devd (void) { return d; }
\layout Quotation


\family typewriter 
};
\layout Quotation


\family typewriter 
derivada::derivada (int i, int j): base (j) { d = i; }
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 base cb (2);
\layout Quotation


\family typewriter 

\protected_separator 
 derivada cd (3, 4);
\layout Quotation


\family typewriter 

\protected_separator 
 cout<<cb.devb()<<' '<<cd.devd()<<' '<<cd.devb(); // imprime 
\layout Quotation


\family typewriter 
}
\layout Standard

Los miembros de una clase derivada pueden tener los mismos nombres de su
 clase base, pero serán miembros diferentes aunque tengan los mismos nombres.
 En este caso se puede distinguir entre los miembros de una clase y otra
 utilizando el operador de resolución de ámbito (
\family typewriter 
::
\family default 
).
 
\layout Standard

Ejemplo de miembros con el mismo nombre en clases base y derivada.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class base
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 protected:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 base (int i = 0) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int dev (void) { return x; }
\layout Quotation


\family typewriter 
};
\layout Quotation


\family typewriter 
class derivada : public base
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 protected:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 derivada (int i = 0): base (3 * i) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int dev (void) { return x; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int f (void) { return x + derivada::x + base::x; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int g (void) { return dev() + derivada::dev() + base::dev(); }
\layout Quotation


\family typewriter 
};
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 derivada clase (2);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << clase.dev() << ' ' << clase.derivada::dev() << ' '
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << clase.base::dev() << ' ' << clase.f () << ' ' << clase.g ();
\layout Quotation


\family typewriter 

\protected_separator 
 // imprime: 
\layout Quotation


\family typewriter 
}
\layout Standard

El orden de las llamadas de los constructores es: constructor de la clase
 base, constructores de los miembros, y constructor de la propia clase derivada.
 Los destructores son invocados en el orden contrario: destructor de la
 propia clase derivada, destructor de los miembros, y destructor de la clase
 base.
\layout Standard

Ejemplo sobre el orden de llamada de los constructores y los destructores.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class a
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 a () { cout << "
\backslash 
nConstructor de la clase a"; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 a () { cout << "
\backslash 
nDestructor de la clase a"; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class b
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 b () { cout << "
\backslash 
nConstructor de la clase b"; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 b () { cout << "
\backslash 
nDestructor de la clase b"; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class c : public a
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 b claseb;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 c () { cout << "
\backslash 
nConstructor de la clase c"; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 c () { cout << "
\backslash 
nDestructor de la clase c"; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 c clasec;
\layout Quotation


\family typewriter 
}
\layout Standard

SALIDA DEL PROGRAMA:
\layout Quotation


\family typewriter 

\protected_separator 
 Constructor de la clase a
\layout Quotation


\family typewriter 

\protected_separator 
 Constructor de la clase b
\layout Quotation


\family typewriter 

\protected_separator 
 Constructor de la clase c
\layout Quotation


\family typewriter 

\protected_separator 
 Destructor de la clase c
\layout Quotation


\family typewriter 

\protected_separator 
 Destructor de la clase b
\layout Quotation


\family typewriter 

\protected_separator 
 Destructor de la clase a
\layout Standard

Hemos dicho que cuando una clase derivada tiene una clase base privada,
 todos los miembros protegidos y públicos de la clase base son privados
 en la clase derivada.
 A veces es deseable que algunos de estos miembros sean públicos o protegidos
 en la clase derivada pero manteniendo la clase base privada.
 La forma de hacerlo se ilustra en el siguiente ejemplo.
\layout Standard

Ejemplo sobre la conversión de la visibilidad de los miembros de la clase
 base dentro de la clase derivada.
\layout Quotation


\family typewriter 
class b
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public: int x, y, z, f(), g(), h();
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class d : private b
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\protected_separator 

\protected_separator 
 int b::x, b::f; // opcional: esta línea es redundante
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 protected: int b::y, b::g; // y y g son convertidos a protected
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\protected_separator 

\protected_separator 

\protected_separator 
 int b::z, b::h; // z y y son convertidos a public
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 b cb;
\layout Quotation


\family typewriter 

\protected_separator 
 d cd;
\layout Quotation


\family typewriter 

\protected_separator 
 cb.x = cb.y = cb.z = 0; // correcto
\layout Quotation


\family typewriter 

\protected_separator 
 cd.x = 0;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // error: d::x no es accesible
\layout Quotation


\family typewriter 

\protected_separator 
 cd.y = 0;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // error: d::y no es accesible
\layout Quotation


\family typewriter 

\protected_separator 
 cd.z = 0;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // correcto
\layout Quotation


\family typewriter 
}
\layout Standard

De la misma forma, un miembro transmitido públicamente puede ser convertido
 explícitamente a 
\family typewriter 
private
\family default 
 o 
\family typewriter 
protected
\family default 
.
 
\layout Standard

Ejemplo sobre la conversión de la visibilidad de miembros transmitidos públicame
nte de la clase base a la clase derivada.
\layout Quotation


\family typewriter 
class b
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\protected_separator 

\protected_separator 
 int x, f();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 protected: int y, g();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\protected_separator 

\protected_separator 

\protected_separator 
 int z, h();
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class d : public b
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\protected_separator 

\protected_separator 

\protected_separator 
 int b::x, b::f;// x y f convertidos de private a public
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\protected_separator 

\protected_separator 
 int b::y, b::g;// y y g convertidos de protected a private
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 protected: int b::z, b::h;// z y h convertidos de public a protected
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 b cb;
\layout Quotation


\family typewriter 

\protected_separator 
 d cd;
\layout Quotation


\family typewriter 

\protected_separator 
 cb.x = 0; // error: b::x no es accesible
\layout Quotation


\family typewriter 

\protected_separator 
 cd.x = 0; // correcto
\layout Quotation


\family typewriter 

\protected_separator 
 cb.z = 0; // correcto
\layout Quotation


\family typewriter 

\protected_separator 
 cd.z = 0; // error: d::z no es accesible
\layout Quotation


\family typewriter 
}
\layout Section

Punteros
\layout Standard

Una clase derivada públicamente es un subtipo de su clase base.
 Si una clase derivada tiene una clase base pública, entonces un puntero
 a la clase derivada puede ser asignado a una variable de tipo puntero a
 la clase base sin hacer uso de la conversión de tipo explícita.
 Por ejemplo:
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 class base { /* ...
 */ };
\layout Quotation


\family typewriter 

\protected_separator 
 class derivada: public base { /* ...
 */ };
\layout Quotation


\family typewriter 

\protected_separator 
 derivada d;
\layout Quotation


\family typewriter 

\protected_separator 
 base *pb = &d;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // conversión implícita
\layout Quotation


\family typewriter 

\protected_separator 
 derivada *pd = pb;
\protected_separator 

\protected_separator 

\protected_separator 
 // error: un base* no es un derivada*
\layout Quotation


\family typewriter 

\protected_separator 
 pd = (derivada *) pb; // conversión explícita
\layout Quotation


\family typewriter 
}
\layout Standard

En otras palabras, un objeto de una clase derivada puede ser tratado como
 un objeto de su clase base cuando se manipula a través de punteros.
 Lo contrario no es cierto.
\layout Standard

Cuando la clase base es privada para la clase derivada, se hace conversión
 implícita de 
\family typewriter 
derivada*
\family default 
 a 
\family typewriter 
base*
\family default 
.
 Una conversión implícita no puede ser ejecutada en este caso porque un
 miembro público de la clase base puede ser accedido a través de un puntero
 a la clase base pero no a través de un puntero a la clase derivada.
\layout Standard

Ejemplo de puntero a clases base y derivada.
\layout Quotation


\family typewriter 
class base
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int b1;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public: int b2; // b2 es un miembro público de base
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class derivada: base
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // b2 NO es un miembro público de derivada
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 derivada d;
\layout Quotation


\family typewriter 
// Para probar error, escribir en esta línea: #define PROBAR_ERROR
\layout Quotation


\family typewriter 
#ifdef PROBAR_ERROR
\layout Quotation


\family typewriter 

\protected_separator 
 d.b2 = 2;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // error: b2 de clase base privada
\layout Quotation


\family typewriter 

\protected_separator 
 base *pb = &d;
\protected_separator 

\protected_separator 

\protected_separator 
 // error (base privada)
\layout Quotation


\family typewriter 
#else
\layout Quotation


\family typewriter 

\protected_separator 
 base *pb;
\layout Quotation


\family typewriter 
#endif
\layout Quotation


\family typewriter 

\protected_separator 
 pb->b2 = 2;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // correcto
\layout Quotation


\family typewriter 

\protected_separator 
 pb = (base *) &d; // correcto: conversión explícita
\layout Quotation


\family typewriter 

\protected_separator 
 pb->b2 = 2;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // correcto
\layout Quotation


\family typewriter 
}
\layout Standard

Entre otras cosas, el ejemplo visto muestra que usando conversión de tipo
 explícita se pueden romper las reglas de protección.
 Está claro que no se recomienda hacer tal cosa en un programa a menos que
 se tenga la intención de hacerlo ilegible.
\layout Section

Funciones Virtuales
\layout Standard

Hemos explicado que cuando se invoca a una función miembro sobrecargada,
 el compilador selecciona la función de acuerdo a un algoritmo de ajuste
 de tipos.
 Por ejemplo:
\layout Quotation


\family typewriter 
class c
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private: int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\protected_separator 
 void asig(int i) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void asig(void) { x = 0; } 
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Standard

También hemos dicho que una función derivada puede tener miembros con los
 mismos nombres que los miembros de la clase derivada.
 En este caso, utilizamos el operador 
\family typewriter 
::
\family default 
 para seleccionar el miembro.
 Por ejemplo: 
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
5 2 0 0 -1 -1 -1 -1
1 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 1 0 0
2 1 0 "" ""
2 1 1 "" ""
0 2 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
class b
\newline 
class d: public b
\newline 
{
\newline 
{
\newline 

\protected_separator 
 private: int x;
\newline 

\protected_separator 
 private: int x;
\newline 

\protected_separator 
 public:
\protected_separator 
 void asig (int i=0) {x=i;}
\newline 

\protected_separator 
 public:
\protected_separator 
 void asig (int i=0)
\newline 
};
\newline 
{ x=i; b::asig (i); } };
\layout Standard

En los dos casos mencionados la función miembro seleccionada para ser invocada
 es elegida en tiempo de compilación.
\layout Standard

endv
\layout Standard

En algunos casos interesa seleccionar dinámicamente (en tiempo de ejecución)
 la función miembro apropiada entre funciones de la clase base y funciones
 de la clase derivada.
 La palabra clave virtual es un especificador de función que proporciona
 este mecanismo, pero sólo puede ser usada para modificar declaraciones
 de funciones miembros.
 Una función virtual debe estar definida (no sólo declarada).
 Se invoca igual que las demás funciones.
 El prototipo de la función virtual en la clase derivada debe ser igual
 que su prototipo en la clase base.
 Es ilegal redinir una función virtual de tal manera que difiera sólo en
 el tipo devuelto.
 Si dos funciones con el mismo nombre tienen diferentes argumentos, C++
 las considera diferentes, y el mecanimo de función virtual es ignorado.
 El especificador virtual sólo es necesario ponerlo en la declaración de
 la función de la clase base, no en la declaración de la función en la clase
 derivada.
\layout Standard

Las funciones virtuales deben ser miembros de alguna clase, pero no pueden
 ser miembros estáticos (
\family typewriter 
static
\family default 
).
 Una función virtual puede ser amiga (
\family typewriter 
friend
\family default 
) de otra clase.
 Una última restricción: los constructores no pueden ser virtuales, pero
 los destructores sí pueden serlo.
\layout Title

Primer ejemplo de funciones virtuales.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class b
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual void vf1 (void) { cout << "b::vf1 "; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual void vf2 (void) { cout << "b::vf2 "; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual void vf3 (void) { cout << "b::vf3 "; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void f (void)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 { cout << "b::f ";
\protected_separator 

\protected_separator 
 }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class d: public b
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual void vf1 (void) // especificador virtual es legal pero
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 { cout << "d::vf1 "; }
\protected_separator 
 // redundante
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void vf2 (int)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // no virtual, puesto que usa una lista de
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 { cout << "d::vf2 "; }
\protected_separator 
 // argumentos diferente
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 /*
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 char vf3 (void) { }
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // ilegal: sólo cambia el tipo devuelto
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 */
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void f (void) { cout << "d::f "; }
\protected_separator 
 // no virtual
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 d cd;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // declara un objeto d
\layout Quotation


\family typewriter 

\protected_separator 
 b *pcb = &cd;
\protected_separator 
 // conversión estándar de d* a b*
\layout Quotation


\family typewriter 

\protected_separator 
 pcb->vf1();
\protected_separator 

\protected_separator 

\protected_separator 
 // llama a d::vf1()
\layout Quotation


\family typewriter 

\protected_separator 
 pcb->vf2();
\protected_separator 

\protected_separator 

\protected_separator 
 // llama a b::vf2() ya que d::vf2 tiene args.
 diferentes
\layout Quotation


\family typewriter 

\protected_separator 
 pcb->vf3();
\protected_separator 

\protected_separator 

\protected_separator 
 // llama a b::vf3()
\layout Quotation


\family typewriter 

\protected_separator 
 pcb->f();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // llama a b::f() (no virtual)
\layout Quotation


\family typewriter 

\protected_separator 
 pcb->b::vf1(); // llama a b::vf1()
\layout Quotation


\family typewriter 
}
\layout Standard

SALIDA DE ESTE PROGRAMA:
\layout Quotation


\family typewriter 
d::vf1 b::vf2 b::vf3 b::f b::vf1
\layout Title

Segundo ejemplo de funciones virtuales.
 
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class b
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int i;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 b (void) { i = 1; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual void imprimir_i (void) { cout << "
\backslash 
ni de clase b: " << i; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class d1: public b
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 d1 (void) { i = 2; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void imprimir_i (void) { cout << "
\backslash 
ni de clase d1: " << i; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class d2: public b
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int i;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 d2 (void) { i = 3; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void imprimir_i (void)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 { cout << "
\backslash 
ni de clase d2: " << i << "; b::i de clase d2: " << b::i; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 b cb;
\layout Quotation


\family typewriter 

\protected_separator 
 b *pcb = &cb;
\layout Quotation


\family typewriter 

\protected_separator 
 d1 cd1;
\layout Quotation


\family typewriter 

\protected_separator 
 d2 cd2;
\layout Quotation


\family typewriter 

\protected_separator 
 pcb->imprimir_i (); // imprime: 
\layout Quotation


\family typewriter 

\protected_separator 
 pcb = &cd1;
\layout Quotation


\family typewriter 

\protected_separator 
 pcb->imprimir_i (); // imprime: 
\layout Quotation


\family typewriter 

\protected_separator 
 pcb = &cd2;
\layout Quotation


\family typewriter 

\protected_separator 
 pcb->imprimir_i (); // imprime: 
\layout Quotation


\family typewriter 
}
\layout Section

Funciones Puras
\layout Standard

En la sección anterior hemos dicho que las funciones virtuales permiten
 a las clases derivadas proporcionar diferentes versiones de una función
 de la clase base; y también habíamos dicho que las funciones virtuales
 deben estar definidas en la clase base al igual que todas las funciones
 miembros.
 Pues bien, hay una forma de no definir una función virtual en la clase
 base: declarándola pura.
 La forma de declarar una función pura es añadiendo = 0 al final de la declaraci
ón virtual.
 Ejemplo:
\layout Quotation


\family typewriter 
class b
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual void vf(int) = 0; // = 0 significa pura
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Standard

En una clase derivada de una clase base con funciones puras, cada función
 pura debe ser definida o redeclarada como pura.
 Si una función virtual es definida en la base, no necesita ser redefinida
 en las clases derivadas.
 Las llamadas simplemente llamarían a la función de la clase base.
 Ejemplo: 
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class b
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void f1 (void)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 { cout << "
\backslash 
nb::f1()"; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual void f2 (void)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 { cout << "
\backslash 
nb::f2()"; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual void f3 (void)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 { cout << "
\backslash 
nb::f3()"; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual void f4 (void) = 0;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 /*
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual void f5 (void) = 0; // ERROR: no definida en ninguna clase
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // derivada
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 */
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class d: public b
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void f1 (void)
\protected_separator 
 { cout << "
\backslash 
nd::f1()"; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void f2 (int)
\protected_separator 

\protected_separator 
 { cout << "
\backslash 
nd::f2()"; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void f3 (void)
\protected_separator 
 { cout << "
\backslash 
nd::f3()"; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void f4 (void)
\protected_separator 
 { cout << "
\backslash 
nd::f4()"; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 d cd;
\layout Quotation


\family typewriter 

\protected_separator 
 b *pcb = &cd;
\layout Quotation


\family typewriter 

\protected_separator 
 pcb->f1();
\protected_separator 

\protected_separator 

\protected_separator 
 // imprime: 
\layout Quotation


\family typewriter 

\protected_separator 
 pcb->f2();
\protected_separator 

\protected_separator 

\protected_separator 
 // imprime: 
\layout Quotation


\family typewriter 

\protected_separator 
 pcb->f3();
\protected_separator 

\protected_separator 

\protected_separator 
 // imprime: 
\layout Quotation


\family typewriter 

\protected_separator 
 pcb->f4();
\protected_separator 

\protected_separator 

\protected_separator 
 // imprime: 
\layout Quotation


\family typewriter 

\protected_separator 
 /*
\layout Quotation


\family typewriter 

\protected_separator 
 pcb->d::f1(); // error: d no es una clase base de b
\layout Quotation


\family typewriter 

\protected_separator 
 */
\layout Quotation


\family typewriter 

\protected_separator 
 pcb->b::f3(); // imprime: 
\layout Quotation


\family typewriter 
}
\layout Section

Clases Abstractas
\layout Standard

Una clase abstracta es una clase que tiene al menos una función virtual
 pura.
 Una clase abstracta sólo puede ser usada como una clase base para otras
 clases.
 No se puede crear ningún objeto de una clase abstracta.
 Una clase abstracta no puede ser usada como el tipo de un argumento ni
 como el tipo devuelto por una función.
 Las referencias a una clase abstracta sí están permitidas, esto permite
 que no sea necesario un objeto temporal en la inicialización.
 Ejemplo: 
\layout Quotation


\family typewriter 
class ca // clase abstracta
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void asigx (int i) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int devx (void) { return x; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual void imprx (void) = 0; // función virtual pura
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
ca c;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // ERROR: intento de crear un objeto de una clase abstracta
\layout Quotation


\family typewriter 
ca *p;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // CORRECTO: puntero a una clase abstracta
\layout Quotation


\family typewriter 
ca f (void); // ERROR: el tipo devuelto no puede ser una clase abstracta
\layout Quotation


\family typewriter 
void g (ca); // ERROR: el tipo del argumento de una función no puede ser
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // una clase abstracta
\layout Quotation


\family typewriter 
ca& h (ca&); // CORRECTO: el tipo del valor devuelto y el tipo del
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // argumento de una función pueden ser una referencia
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // a una clase abstracta
\layout Quotation


\family typewriter 
ca* l (ca*); // CORRECTO:
\protected_separator 
 el tipo del valor devuelto y el tipo del
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // argumento de una función pueden ser un puntero a una
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // clase abstracta
\layout Standard

Supongamos que 
\family typewriter 
d
\family default 
 es una clase derivada con la clase abstracta 
\family typewriter 
b
\family default 
 como clase base inmediata.
 Entonces, para cada función virtual 
\family typewriter 
fv
\family default 
 en 
\family typewriter 
b
\family default 
, la clase 
\family typewriter 
d
\family default 
 debe, o bien proporcionar una definición para 
\family typewriter 
fv
\family default 
, o bien redeclarar 
\family typewriter 
fv
\family default 
 como pura.
\layout Standard

Ejemplo de definición y redeclaración de funciones puras:
\layout Quotation


\family typewriter 
class b
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual void f(void) = 0;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual void g(void) = 0;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual void h(void) = 0;
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class d: public b // clase d derivada de clase abstracta b
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void f(void) { } // función f definida: no realiza ninguna acción
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void g(void);
\protected_separator 

\protected_separator 

\protected_separator 
 // función g debe estar definida en algún sitio
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void h(void);
\protected_separator 

\protected_separator 

\protected_separator 
 // función h redeclarada como pura
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Standard

Las funciones miembros pueden ser llamadas desde un constructor de una clase
 abstracta, pero llamar a una función virtual pura, directa o indirectamente,
 desde tal constructor, provoca un error en tiempo de ejecución; lo cual,
 por otra parte, es lógico.
\layout Standard

Ejemplo de llamada a una función pura no definida (aunque sí declarada).
\layout Quotation


\family typewriter 
class b
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 b (int i = 0) { asig (i); }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual void asig (int i) = 0;
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class d: public b
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void asig (int i) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 d cd;
\layout Quotation


\family typewriter 
}
\layout Standard

SALIDA DE ESTE PROGRAMA:
\layout Quotation


\family typewriter 
Pure virtual function called
\layout Description

NOTA: El mensaje de error anterior puede variar entre distintas implementaciones
 de C++; este programa ha sido compilado con Borland C++ 2.0.
 Recalcar que el error se produce en tiempo de ejecución, no en tiempo de
 compilación.
\layout Standard

Las funciones virtuales pagan un precio por su versatilidad: cada objeto
 en la clase derivada necesita llevar un puntero a una tabla de funciones,
 necesario para seleccionar la función correcta en tiempo de ejecución.
 Por lo tanto, cuando no sea estrictamente necesario el uso de funciones
 virtuales, es preferible utilizar el operador de resolución de ámbito 
\family typewriter 
nombre_de_clase::nombre_de_funcion_miembro
\family default 
 para seleccionar la función miembro a invocar.
\layout Section

Jerarquía de Clases
\layout Standard

Una clase derivada puede ser a su vez clase base de otra clase derivada.
 Ejemplo: 
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class c1 // clase base inmediata de c1 y no inmediata de c3
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 c1(int i = 0) { x = i; }
\layout Quotation


\family typewriter 
};
\layout Quotation


\family typewriter 
class c2: public c1 // clase derivada de c1 y base de c3
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 c2(int i = 0): c1 (2 * i) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class c3: public c2 // clase derivada inmediata de c2 y no inmediata de
 c1
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 c3(int i = 0): c2 (3 * i) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 c3 c(4);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c.c1::x << ' '; // imprime: 24
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c.c2::x << ' '; // imprime: 12
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c.c3::x << ' '; // imprime: 4
\layout Quotation


\family typewriter 

\protected_separator 
 cout << c.x << ' ';
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime: 4
\layout Quotation


\family typewriter 
}
\layout Section

Problemas
\layout Itemize


\series bold 
Ejercicio 6-1
\series default 
.
 Implementa una clase ventana que haga diversas operaciones sobre una ventana
 de texto en la pantalla: visualizarla, borrarla, moverla; la ventana a
 visualizar podrá tener diversas formas de bordes, colores, cabeceras, sombras,
 etc.
 Una vez implementada la clase ventana podemos diseñar diversas clases que
 se sirvan de la clase ventana haciéndola base.
 Estas clases derivadas pueden ser, por ejemplo, una clase para hacer menús,
 una clase para visualizar un fichero en pantalla, etc.
\layout Chapter

Herencia Múltiple
\layout Standard

En la lección anterior estudiamos la herencia simple (una clase derivada
 puede tener únicamente una clase base).
 En esta lección estudiaremos la herencia múltiple (una clase derivada puede
 tener más de una clase base).
 En esta lección se va a estudiar los siguientes puntos:
\layout Itemize

Forma general de declarar una clase.
\layout Itemize

Jerarquía circular.
\layout Itemize

Ambigüedad en los miembros.
\layout Itemize

Herencia virtual: clases virtuales.
\layout Itemize

Orden de llamada a los constructores y los destructores.
\layout Itemize

Destructores virtuales.
\layout Itemize

Orden de ejecución de un programa en Turbo C++.
\layout Itemize

Algunos ejemplos curiosos.
\layout Section

Forma General de Declarar una Clase
\layout Standard

Cuando una clase derivada tiene más de una clase base se habla de herencia
 múltiple.
 La forma general de declarar una clase derivada es:
\layout Quotation


\family typewriter 
<palabra_clave_de_clase> <nombre_de_clase>: <lista_de_clases_bases>
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 <lista_de_miembros>
\layout Quotation


\family typewriter 
}
\layout Standard

donde:
\layout Quotation


\family typewriter 
<palabra_clave_de_clase>
\family default 
 es la palabra clave class, struct o union.
\layout Quotation


\family typewriter 
<nombre_de_clase>
\family default 
 debe ser un nombre único dentro de su ámbito.
\layout Quotation


\family typewriter 
<lista_de_clases_bases>
\family default 
 es la lista de clases bases separadas por comas,
\layout Standard

cada clase base en esta lista puede ir precedida por la palabra clave 
\family typewriter 
public
\family default 
 o 
\family typewriter 
private
\family default 
.
\layout Quotation


\family typewriter 
<lista_de_miembros>
\family default 
 consiste en la declaración de los datos miembros y las funciones miembros.
\layout Standard

Ejemplo de herencia múltiple.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class b1
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 b1 (int i = 0) { x = i; }
\layout Quotation


\family typewriter 
};
\layout Quotation


\family typewriter 
class b2
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 b2 (int i = 0) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class b3
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 b3 (int i = 0) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class d: public b1, public b2, private b3
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 d (int i = 0): b1 (2 * i), b2 (3 * i), b3 (-2 * i) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 d cd (4);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << cd.b1::x << ' '; // imprime: 8
\layout Quotation


\family typewriter 

\protected_separator 
 cout << cd.b2::x << ' '; // imprime: 12
\layout Quotation


\family typewriter 

\protected_separator 
 cout << cd.d::x << ' ';
\protected_separator 
 // imprime: 4
\layout Quotation


\family typewriter 

\protected_separator 
 cout << cd.x << ' ';
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime: 4
\layout Quotation


\family typewriter 
}
\layout Section

Jerarquía Circular
\layout Standard

La jerarquía circular se da cuando una clase A es base de una clase B (no
 necesariamente base inmediata) y la clase B es base de la clase A (no necesaria
mente base inmediata).
 Lógicamente, este tipo de jerarquía es ilegal.
 Ejemplo:
\layout Quotation


\family typewriter 
class x: z { /* ...
 */ };
\layout Quotation


\family typewriter 
class y: x { /* ...
 */ };
\layout Quotation


\family typewriter 
class z: y { /* ...
 */ };
\layout Standard

Estas declaraciones son incorrectas
\layout Section

Ambigüedad en los Miembros
\layout Standard

La ambigüedad en los miembros se da cuando una clase deriva miembros con
 idéntico nombre de diferentes clases y no hay ningún miembro con ese nombre
 en la clase derivada.
 Ilustremos esto con un ejemplo:
\layout Quotation


\family typewriter 
class x { public: int f (void); };
\layout Quotation


\family typewriter 
class y { public: int f (void); };
\layout Quotation


\family typewriter 
class z: public x, public y { public: void g (void) { x::f() + y::f(); }
 };
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 z clase;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 clase.f(); // ERROR: ¿clase.x::f() o clase.y::f()?
\layout Quotation


\family typewriter 
}
\layout Standard

Hay dos formas de solucionar este problema:
\layout Enumerate

Usando el operador de resolución de ámbito 
\family typewriter 
::
\family default 
 para invocar a la función 
\family typewriter 
f()
\family default 
 que deseamos.
 De hecho, esto se ha hecho en 
\family typewriter 
g()
\family default 
.
\layout Enumerate

Añadir la función miembro 
\family typewriter 
f()
\family default 
 a la clase derivada 
\family typewriter 
z
\family default 
.
 Por ejemplo:
\layout Quotation


\family typewriter 
class z: ...
 { ...
 void f (void) { ...
 } ...
 };
\layout Section

Herencia Virtual
\layout Standard

Las clases virtuales se utilizan cuando una clase base se pasa más de una
 vez a una misma clase derivada, lo cual puede ocurrir en la herencia múltiple.
 Una clase base no puede ser especificada más de una vez en una clase derivada:
\layout Quotation


\family typewriter 
class B { ...};
\layout Quotation


\family typewriter 
class D : B, B { ...
 };
\protected_separator 
 // Ilegal
\layout Standard

Sin embargo, una clase base se puede pasar indirectamente a una clase derivada
 más de una vez:
\layout Quotation


\family typewriter 
class X : public B { ...
 }
\layout Quotation


\family typewriter 
class Y : public B { ...
 }
\layout Quotation


\family typewriter 
class Z : public X, public Y { ...
 }
\protected_separator 
 // CORRECTO
\layout Standard

En este caso, cada objeto de clase Z tendrá dos sub-objetos de clase B.
 Si esto causa probemas, se puede añadir la palabra clave virtual al especificad
or de clase base.
 Por ejemplo,
\layout Quotation


\family typewriter 
class X : virtual public B { ...
 }
\layout Quotation


\family typewriter 
class Y : virtual public B { ...
 }
\layout Quotation


\family typewriter 
class Z : public X, public Y { ...
 } 
\layout Standard

B es ahora una clase base virtual, y la clase Z tiene solamente un subobjeto
 de clase B.
\layout Section

Orden de Llamadas a los Constructores y los Destructores
\layout Standard

Los constructores de la clase base son llamados en el orden que fueron declarado
s:
\layout Quotation


\family typewriter 
class Y { ...
 };
\layout Quotation


\family typewriter 
class X: public Y { ...
 };
\layout Quotation


\family typewriter 
X clase;
\layout Standard

Orden de llamadas:
\layout Quotation


\family typewriter 
Y (); // constructor de clase base
\layout Quotation


\family typewriter 
X (); // constructor de clase derivada
\layout Standard

Para el caso de clases bases múltiples:
\layout Quotation


\family typewriter 
class X: public Y, public Z { ...
 };
\layout Quotation


\family typewriter 
X clase;
\layout Standard

los constructores son llamados en el orden de declaración:
\layout Quotation


\family typewriter 
Y (); // primero de la lista
\layout Quotation


\family typewriter 
Z ();
\layout Quotation


\family typewriter 
X ();
\layout Standard

Los constructores para las clases bases vituales son invocados antes que
 los de cualquier otra clase base no virtual.
 Si la jerarquía contiene múltiples clases bases virtuales, los constructores
 de las clases bases virtuales son invocados en el orden en el cual fueron
 declarados.
 Los constructores de las clases bases no virtuales son invocados antes
 que el constructor de la clase derivada.
 Si una clase virtual es derivada de una base no virtual, esa base no virtual
 será llamada primero, para que la clase base virtual sea construida apropiadame
nte.
 Por ejemplo, el código
\layout Quotation


\family typewriter 
class X: public Y, virtual public Z { ...
 };
\layout Quotation


\family typewriter 
X clase;
\layout Standard

produce el orden:
\layout Quotation


\family typewriter 
Z (); // inicialización de la clase base virtual
\layout Quotation


\family typewriter 
Y (); // clase base no virtual
\layout Quotation


\family typewriter 
X (); // clase derivada
\layout Standard

En el caso que una jerarquía de clases contiene múltiples instancias de
 una clase base virtual, esa clase base es sólo construida una vez.
 Si, sin embargo, existen las instacias virtual y no virtual de la clase
 base, el constructor de la clase es invocado una sola vez para todas las
 instancias virtuales y una vez para cada ocurrencia no virtual de la clase
 base.
 Un ejemplo más complejo:
\layout Quotation


\family typewriter 
class base;
\layout Quotation


\family typewriter 
class base2;
\layout Quotation


\family typewriter 
class nivel1: public base2, virtual public base;
\layout Quotation


\family typewriter 
class nivel2: public base2, virtual public base;
\layout Quotation


\family typewriter 
class nivelalto: public nivel1, virtual public nivel2;
\layout Quotation


\family typewriter 
nivelalto clase;
\layout Standard

El orden de los constructores es:
\layout Quotation


\family typewriter 
base();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // clase base virtual más alta en la jerarquía
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // base es construida una sóla vez
\layout Quotation


\family typewriter 
base2();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // base no virtual de nivel2 virtual
\layout Quotation


\family typewriter 
nivel2();
\protected_separator 

\protected_separator 

\protected_separator 
 // clase base virtual
\layout Quotation


\family typewriter 
base2();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // base no virtual de nivel1
\layout Quotation


\family typewriter 
nivel1();
\protected_separator 

\protected_separator 

\protected_separator 
 // base no virtual de nivel1
\layout Quotation


\family typewriter 
nivelalto(); // clase derivada
\layout Standard

Antes se dijo que las clases bases son inicializadas en el orden de declaración.
 Con los miembros ocurre lo mismo, son inicializados también en orden de
 declaración, independientemente de la lista de inicialización.
\layout Quotation


\family typewriter 
class X
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int a, b;
\layout Quotation


\family typewriter 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 X (int i, int j): a (i), b (a + j) { }
\layout Quotation


\family typewriter 
};
\layout Standard

Con esta clase, una declaración de X x (1, 1) resulta en un asignamiento
 de 1 a 
\family typewriter 
x::a
\family default 
 y de 2 a 
\family typewriter 
x::b
\family default 
.
\layout Quotation


\family typewriter 
class base
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 base (int i): x (i) { }
\layout Quotation


\family typewriter 
};
\layout Quotation


\family typewriter 
class derivada: base
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int a;
\layout Quotation


\family typewriter 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 derivada (int i): a (i * 10), base (a) { } //¡Ojo! Argumento pasado a
\layout Quotation


\family typewriter 
};
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 //base no está inicializado
\layout Standard

Con esta clase, una llamada a d (1) no resultará en un valor de 10 para
 el miembro x de la clase base.
 El valor pasado al constructor de la clase base será indefinido.
 Cuando se quiera una lista de inicializadores en un constructor no inline,
 no colocar la lista en la declaración de la clase.
 En lugar de ello, ponerlo en el punto en el cual la función es definida.
\layout Quotation


\family typewriter 
derivada::derivada (int i): a (i)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 ...
\layout Quotation


\family typewriter 
}
\layout Standard

Ejemplo sobre el orden de llamadas a los constructores y los destructores.
 Sería interesante para el usuario que intentara averiguar cuál es la salida
 antes de mirarla al final de esta ventana.
 Por ejemplo, observando el código fuente, podría escribir la salida del
 programa en un papel, y una vez hecho esto, comprobarla con la salida real
 que está escrita al final de esta ventana.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#include <conio.h>
\layout Quotation


\family typewriter 
#define declarar_clase(NOMBRE_CLASE)
\layout Quotation


\family typewriter 

\protected_separator 
 class NOMBRE_CLASE
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 NOMBRE_CLASE ()
\protected_separator 
 { cout << "
\backslash 
nC "#NOMBRE_CLASE; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 NOMBRE_CLASE () { cout << "
\backslash 
nD "#NOMBRE_CLASE; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 }
\layout Quotation


\family typewriter 
declarar_clase (base1);
\layout Quotation


\family typewriter 
declarar_clase (base2);
\layout Quotation


\family typewriter 
declarar_clase (miembro1);
\layout Quotation


\family typewriter 
declarar_clase (miembro2);
\layout Quotation


\family typewriter 
class derivada1: public base2, public base1
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 miembro1 m1_1, m1_2;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 miembro2 m2;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 derivada1 ()
\protected_separator 
 { cout << "
\backslash 
nC derivada1"; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 derivada1 () { cout << "
\backslash 
nD derivada1"; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class derivada2: public base1, virtual public base2
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 derivada2 ()
\protected_separator 
 { cout << "
\backslash 
nC derivada2"; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 derivada2 () { cout << "
\backslash 
nD derivada2"; }
\layout Quotation


\family typewriter 
};
\layout Quotation


\family typewriter 
class derivada3: virtual public derivada2, virtual public base2
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 miembro1 m1;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 derivada3 ()
\protected_separator 
 { cout << "
\backslash 
nC derivada3"; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 derivada3 () { cout << "
\backslash 
nD derivada3"; }
\layout Quotation


\family typewriter 
};
\layout Quotation


\family typewriter 
class derivada4: virtual base2, derivada3
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 miembro1 m1_1;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 derivada3 d3;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 miembro1 m1_2;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 derivada4 ()
\protected_separator 
 { cout << "
\backslash 
nC derivada4"; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 derivada4 () { cout << "
\backslash 
nD derivada4"; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 cout << "
\backslash 
n*** Declaración de una clase derivada1";
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 derivada1 d1;
\layout Quotation


\family typewriter 

\protected_separator 
 }
\layout Quotation


\family typewriter 

\protected_separator 
 getch ();
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 cout << "
\backslash 
n*** Declaración de una clase derivada2";
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 derivada2 d2;
\layout Quotation


\family typewriter 

\protected_separator 
 }
\layout Quotation


\family typewriter 

\protected_separator 
 getch ();
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 cout << "
\backslash 
n*** Declaración de una clase derivada3";
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 derivada3 d3;
\layout Quotation


\family typewriter 

\protected_separator 
 }
\layout Quotation


\family typewriter 

\protected_separator 
 getch ();
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 cout << "
\backslash 
n*** Declaración de una clase derivada4";
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 derivada4 d4;
\layout Quotation


\family typewriter 

\protected_separator 
 }
\layout Quotation


\family typewriter 

\protected_separator 
 getch ();
\layout Quotation


\family typewriter 
}
\layout Standard

SALIDA DEL PROGRAMA:
\layout Quotation


\family typewriter 
*** Declaración de una clase derivada1
\layout Quotation


\family typewriter 
C base2
\layout Quotation


\family typewriter 
C base1
\layout Quotation


\family typewriter 
C miembro1
\layout Quotation


\family typewriter 
C miembro1
\layout Quotation


\family typewriter 
C miembro2
\layout Quotation


\family typewriter 
C derivada1
\layout Quotation


\family typewriter 
D derivada1
\layout Quotation


\family typewriter 
D miembro2
\layout Quotation


\family typewriter 
D miembro1
\layout Quotation


\family typewriter 
D miembro1
\layout Quotation


\family typewriter 
D base1
\layout Quotation


\family typewriter 
D base2
\layout Quotation


\family typewriter 
*** Declaración de una clase derivada2
\layout Quotation


\family typewriter 
C base2
\layout Quotation


\family typewriter 
C base1
\layout Quotation


\family typewriter 
C derivada2
\layout Quotation


\family typewriter 
D derivada2
\layout Quotation


\family typewriter 
D base1
\layout Quotation


\family typewriter 
D base2
\layout Quotation


\family typewriter 
*** Declaración de una clase derivada3
\layout Quotation


\family typewriter 
C base2
\layout Quotation


\family typewriter 
C base1
\layout Quotation


\family typewriter 
C derivada2
\layout Quotation


\family typewriter 
C miembro1
\layout Quotation


\family typewriter 
C derivada3
\layout Quotation


\family typewriter 
D derivada3
\layout Quotation


\family typewriter 
D miembro1
\layout Quotation


\family typewriter 
D derivada2
\layout Quotation


\family typewriter 
D base1
\layout Quotation


\family typewriter 
D base2
\layout Quotation


\family typewriter 
*** Declaración de una clase derivada4
\layout Quotation


\family typewriter 
C base2
\layout Quotation


\family typewriter 
C base1
\layout Quotation


\family typewriter 
C derivada2
\layout Quotation


\family typewriter 
C miembro1
\layout Quotation


\family typewriter 
C derivada3
\layout Quotation


\family typewriter 
C miembro1
\layout Quotation


\family typewriter 
C base2
\layout Quotation


\family typewriter 
C base1
\layout Quotation


\family typewriter 
C derivada2
\layout Quotation


\family typewriter 
C miembro1
\layout Quotation


\family typewriter 
C derivada3
\layout Quotation


\family typewriter 
C miembro1
\layout Quotation


\family typewriter 
C derivada4
\layout Quotation


\family typewriter 
D derivada4
\layout Quotation


\family typewriter 
D miembro1
\layout Quotation


\family typewriter 
D derivada3
\layout Quotation


\family typewriter 
D miembro1
\layout Quotation


\family typewriter 
D derivada2
\layout Quotation


\family typewriter 
D base1
\layout Quotation


\family typewriter 
D base2
\layout Quotation


\family typewriter 
D miembro1
\layout Quotation


\family typewriter 
D derivada3
\layout Quotation


\family typewriter 
D miembro1
\layout Quotation


\family typewriter 
D derivada2
\layout Quotation


\family typewriter 
D base1
\layout Quotation


\family typewriter 
D base2
\layout Section

Destructores Virtuales
\layout Standard

Un destructor puede ser declarado como virtual.
 Esto permite a un puntero que apunta al objeto de una clase base llamar
 al destructor correcto en el caso de que el puntero haga referencia actualmente
 a un objeto de una clase derivada.
 El destructor de una clase derivada de una clase con un destructor virtual
 es asi mismo 
\family typewriter 
virtual
\family default 
.
 Ejemplo:
\layout Quotation


\family typewriter 
class color
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual color (); // destructor virtual para color
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class rojo: public color
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 rojo (); // destructor para rojo es virtual también
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class rojointenso: public rojo
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 rojointenso (); // destructor de rojointenso es también virtual
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
color *paleta[3];
\layout Quotation


\family typewriter 
paleta[0] = new rojo;
\layout Quotation


\family typewriter 
paleta[1] = new rojointenso;
\layout Quotation


\family typewriter 
paleta[2] = new color;
\layout Standard

Esto produce:
\layout Quotation


\family typewriter 
delete paleta[0]; // El destructor para rojo es llamado,
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // seguido por el destructor para color.
\layout Quotation


\family typewriter 
delete paleta[1]; // El destructor para rojointenso es llamado,
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // seguido por rojo y color.
\layout Quotation


\family typewriter 
delete paleta[2]; // El destructor para color es invocado.
\layout Standard

Sin embargo, en el caso que ningún constructor fuera declarado 
\family typewriter 
virtual
\family default 
, 
\family typewriter 
delete paleta[0]
\family default 
, 
\family typewriter 
delete paleta[1]
\family default 
, y 
\family typewriter 
delete paleta[2]
\family default 
 sólo llamarían al destructor para clase color.
 Esto destruiría incorrectamente los dos primeros elementos, los cuales
 eran actualmente de tipo rojo y rojointenso.
 Los constructores no pueden ser virtuales.
\layout Section

Orden de Ejecución de un Programa en Turbo C++
\layout Standard

El orden de ejecución del final de un programa en Turbo C++ (o Borland C++)
 es el que sigue:
\layout Itemize

Las funciones 
\family typewriter 
atexit
\family default 
 son ejecutadas en el orden que fueron insertadas.
\layout Itemize

Las funciones 
\family typewriter 
#pragma exit
\family default 
 son ejecutadas en el orden de sus códigos de prioridad.
\layout Itemize

Los destructores para las variables globales son llamados.
\layout Standard

El orden de ejecución al comienzo de un programa en Turbo C++ (o Borland
 C++) es justo el contrario que el orden de terminación, es decir, invirtiendo
 los tres puntos anteriores.
 Cuando se llama a exit dentro de un programa, los destructores no son llamados
 para las variables locales en el ámbito actual.
 Las variables globales son destruidas en su orden normal.
 Si se llama a 
\family typewriter 
abort
\family default 
 en cualquier lugar de un programa, ningún destructor es llamado, ni incluso
 para las variables con un ámbito global.
 La función 
\family typewriter 
atexit()
\family default 
, cuyo prototipo se encuentra en el fichero 
\family typewriter 
stdlib.h
\family default 
, fue discutida en el tutor de C.
 Sin embargo, las directivas 
\family typewriter 
#pragma startup
\family default 
 y 
\family typewriter 
#pragma exit
\family default 
 no se explicaron, por este motivo se estudian a continuación:
\newline 

\layout Standard


\size huge 
#pragma startup <nombre_de_función> [priordidad]
\layout Standard


\size huge 
#pragma exit <nombre_de_función> [prioridad]
\layout Standard

La directiva 
\family typewriter 
#pragma startup
\family default 
 permite al programa especificar funciones que deben ser ejecutadas al principio
 del programa (antes que se llame a la función 
\family typewriter 
main
\family default 
).
 La directiva 
\family typewriter 
#pragma exit
\family default 
 permite al programa especificar funciones que deben ser ejecutadas al final
 del programa (justo después de que el programa termina con 
\family typewriter 
_exit
\family default 
).
 
\layout Standard


\family typewriter 
<nombre_funcion>
\family default 
 debe ser una función previamente declarada que no toma ningún argumento
 y devuelve 
\family typewriter 
void
\family default 
.
 Debe estar declarada como
\layout Quotation


\family typewriter 
void func (void);
\layout Standard

El nombre de la función debe ser definido (o declarado) antes de la línea
 en la que se encuentra el 
\family typewriter 
pragma
\family default 
.
\layout Standard


\family typewriter 
[prioridad]
\family default 
 El parámetro opcional prioridad es un entero en el rango de 64 a 255.
 
\newline 

\layout Standard

0 = prioridad más alta
\layout Standard

100 = prioridad por defecto
\newline 

\layout Standard

No usar las prioridades de 0 to 63.
 Ellas son usadas por las librerías de C.
 Las funciones con prioridades más altas son las primeras que se llaman
 al comienzo y las últimas que se llaman al final.
 Ejemplo sobre el orden de ejecución de un programa.
\layout Quotation


\family typewriter 
#include <stdlib.h>
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#define definir_funcion(nombre_funcion) 
\backslash 

\layout Quotation


\family typewriter 

\protected_separator 
 void nombre_funcion (void) { cout << "
\backslash 
nFunción "#nombre_funcion"()."; }
\layout Quotation


\family typewriter 
definir_funcion (f1);
\layout Quotation


\family typewriter 
definir_funcion (f2);
\layout Quotation


\family typewriter 
definir_funcion (f3);
\layout Quotation


\family typewriter 
definir_funcion (f4);
\layout Quotation


\family typewriter 
definir_funcion (f5);
\layout Quotation


\family typewriter 
definir_funcion (f6);
\layout Quotation


\family typewriter 
#pragma startup f1 80
\layout Quotation


\family typewriter 
#pragma startup f2 70
\layout Quotation


\family typewriter 
#pragma exit f5 90
\layout Quotation


\family typewriter 
#pragma exit f6
\layout Quotation


\family typewriter 
#define declarar_clase(nombre_clase)
\layout Quotation


\family typewriter 
class nombre_clase
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 nombre_clase() { cout << "
\backslash 
nConstructor de clase "#nombre_clase"."; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 nombre_clase() { cout << "
\backslash 
nDestructor de clase "#nombre_clase"."; }
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
declarar_clase(x);
\layout Quotation


\family typewriter 
x x;
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 declarar_clase(y);
\layout Quotation


\family typewriter 

\protected_separator 
 y y;
\layout Quotation


\family typewriter 

\protected_separator 
 atexit(f3);
\layout Quotation


\family typewriter 

\protected_separator 
 atexit(f4);
\layout Quotation


\family typewriter 
}
\layout Description

SALIDA
\protected_separator 
DEL
\protected_separator 
PROGRAMA:
\layout Quotation


\family typewriter 
Constructor de clase x.
\layout Quotation


\family typewriter 
Función f2().
\layout Quotation


\family typewriter 
Función f1().
\layout Quotation


\family typewriter 
Constructor de clase y.
\layout Quotation


\family typewriter 
Destructor de clase y.
\layout Quotation


\family typewriter 
Función f4().
\layout Quotation


\family typewriter 
Función f3().
\layout Quotation


\family typewriter 
Función f6().
\layout Quotation


\family typewriter 
Función f5().
\layout Quotation


\family typewriter 
Destructor de clase x.
\layout Section

Algunos Ejemplos Curiosos
\layout Title


\series bold 
Miscélanea de ejemplos.
\layout Quotation


\family typewriter 
#ifdef __TCPLUSPLUS__ || __BCPLUSPLUS
\layout Quotation


\family typewriter 
#
\protected_separator 
 pragma warn -aus
\protected_separator 
 // evita aviso de valor asignado y nunca usado
\layout Quotation


\family typewriter 
#
\protected_separator 
 pragma warn -par
\protected_separator 
 // evita aviso de parámetro no usado nunca
\layout Quotation


\family typewriter 
#endif
\layout Quotation


\family typewriter 
class x
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int i;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 x (void)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 { /* ...
 */ }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 x (int x)
\protected_separator 

\protected_separator 

\protected_separator 
 { /* ...
 */ }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 x (const x&) { /* ...
 */ }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void f1 (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 x uno;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // invoca constructor por defecto
\layout Quotation


\family typewriter 

\protected_separator 
 x dos (1);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // usa constructor x::x (int)
\layout Quotation


\family typewriter 

\protected_separator 
 x tres = 1;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // llama a x::x (int)
\layout Quotation


\family typewriter 

\protected_separator 
 x cuatro = uno; // invoca a x::x (const x&) para la copia
\layout Quotation


\family typewriter 

\protected_separator 
 x cinco (dos);
\protected_separator 
 // llama a x::x (const x&)
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
class base1
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 base1 (int i) { x = i; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class base2
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 base2 (int i): x (i) { }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class derivada: public base1, public base2
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int a, b;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 derivada (int i, int j): base1 (i * 2), base2 (i + j), a (i) { b = j; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void f2 (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 derivada derivada (-2, 3); // inicializa base1 con -4 y base 2 con 1
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
class y
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int a, b;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 y (int i, int j): b (a + j), a (i) { } // a es inicializado antes que b
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void f3 (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 y y (1, 2); // a es inicializado con 1 y b es inicializado con 3
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
class z: virtual y
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual y cy;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 z (int i, int j): cy (a, b), y (j, i) {} // y() llamado antes que cy()
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void f4 (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 z z (1, 1); // a es inicializado con 1 y b es inicializado con 2
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 f1();
\layout Quotation


\family typewriter 

\protected_separator 
 f2();
\layout Quotation


\family typewriter 

\protected_separator 
 f3();
\layout Quotation


\family typewriter 

\protected_separator 
 f4();
\layout Quotation


\family typewriter 
}
\layout Section

Problemas
\layout Itemize


\series bold 
Ejercicio 7-1
\series default 
.
 Desarrolla una clase llamada posición que contenga los datos x e y junto
 con los métodos correspondientes.
\layout Itemize


\series bold 
Ejercicio 7-2
\series default 
.
 A continuación desarrolla una clase derivada de posición llamada punto
 que tenga como dato una variable booleana llamada visible, junto con los
 correspondientes métodos.
\layout Itemize


\series bold 
Ejercicio 7-3
\series default 
.
 La clase punto sirve de clase base a las clases línea y arco.
 La clase línea es base a su vez de la clase triángulo.
 Del mismo modo la clase arco es clase base de la clase círculo.
\layout Itemize


\series bold 
Ejercicio 7-4
\series default 
.
 Por último, podemos crear la clase circulo_con_triangulo, que tendría como
 clases bases las clases círculo y triángulo.
 Esta clase dibuja un círculo con un triángulo inscrito.
\layout Itemize


\series bold 
Ejercicio 7-5
\series default 
.
 Otras clases: clase mensaje que tenga como clase base la clase posición,
 y que escribe una cadena de caracteres a partir de las coordenadas x e
 y de posición; y la clase circulo_con_mensaje, que tendría como clases
 bases las clases círculo y mensaje, y escribirá un círculo que tenga en
 su interior (centrado) el mensaje de su clase base.
\layout Chapter

Entrada/Salida en C++
\layout Standard

Esta lección describe la entrada y la salida en C++.
 La biblioteca de entrada/salida para el C, descrita por el fichero de cabecera
 
\family typewriter 
stdio.h,
\family default 
 está todavía disponible en C++.
 Sin embargo, es preferible utilizar las bibliotecas específicas para C++.
 En los primeros estándares de C++, el conjunto de clases para los flujos
 de E/S estaba descrita en el fichero de cabecera stream.h.
 La utilización de este fichero se considera hoy día obsoleta.
 Para terminar la lección detallaremos dos ficheros de cabecera (
\family typewriter 
bcd.h
\family default 
 y 
\family typewriter 
complex.h
\family default 
) que no tienen nada que ver con la E/S pero que se incluyen en esta lección
 por ser ésta la única en que se describen los distintos ficheros de cabecera
 de C++.
 En esta lección se van a estudiar los siguientes puntos:
\layout Itemize

Jerarquía de clases de E/S.
\layout Itemize

Ficheros de cabecera: 
\family typewriter 
iostream.h
\family default 
, 
\family typewriter 
fstream.h
\family default 
 y 
\family typewriter 
strstream.h
\family default 
.
\layout Itemize

Clases definidas en 
\family typewriter 
iostream.h
\family default 
: 
\family typewriter 
streambuf
\family default 
, 
\family typewriter 
ios
\family default 
, 
\family typewriter 
istream
\family default 
, 
\family typewriter 
ostream
\family default 
, 
\family typewriter 
iostream
\family default 
, 
\family typewriter 
istream_withassign
\family default 
 y 
\family typewriter 
ostream_withassign
\family default 
.
\layout Itemize

Clases definidas en 
\family typewriter 
fstream.h
\family default 
: 
\family typewriter 
filebuf
\family default 
, 
\family typewriter 
fstreambase
\family default 
, 
\family typewriter 
ifstream
\family default 
, 
\family typewriter 
ofstream
\family default 
 y 
\family typewriter 
fstream
\family default 
.
\layout Itemize

Clases definidas en 
\family typewriter 
strstream.h
\family default 
: 
\family typewriter 
strstreambuf
\family default 
, 
\family typewriter 
strstreambase
\family default 
, 
\family typewriter 
istrstream
\family default 
, 
\family typewriter 
ostrstream
\family default 
 y 
\family typewriter 
strstream
\family default 
.
\layout Itemize

Clases 
\family typewriter 
bcd
\family default 
 y 
\family typewriter 
complex
\family default 
.
\layout Description

ATENCION: Toda la información proporcionada en esta lección pertenece al
 Borland C++ 2.0.
 La presentación de los listados (resumidos) de los ficheros de cabecera
 es necesario tomarlos de algún compilador.
 En este caso se ha tomado de dicha versión que es con la que se ha desarrollado
 todo el tutor.
 La inclusión (resumida) de los ficheros de cabecera se ha presentado en
 esta lección para facilitar al usurio la comprensión de las clases declaradas
 en C++.
 Obviamente, el usuario no tiene la necesidad de examinar tales listados
 aunque sí es muy recomendable que lo haga para ver cómo están implementadas
 las clases explicadas.
 Las demás versiones de Borland C++ y de Turbo C++ así como de otros compiladore
s que no sean Borland International deberán tener descripciones similares
 de las clases y ficheros de cabeceras comentados.
 Si se comprende la jerarquía de clases de E/S explicada en esta lección
 sobre el compilador citado de Borland, no se debe tener mucha dificultad
 para comprender otra jerarquía de clases de E/S de otros compiladores.
\layout Section

Jerarquía de Clases de E/S 
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center 

\begin_inset Figure size 357 505
file 2.eps
width 3 60
height 3 60
flags 10

\end_inset 


\layout Section

Ficheros de Cabecera
\layout Standard

Hay tres ficheros de cabecera en la que están declaradas las clases anteriores:
\layout Quotation


\family typewriter 
iostream.h
\protected_separator 

\protected_separator 

\family default 
 declara los flujos básicos.
\layout Quotation


\family typewriter 
fstream.h
\protected_separator 

\protected_separator 

\protected_separator 

\family default 
 declara las clases de flujos de C++ que soportan entrada y salida de ficheros.
\layout Quotation


\family typewriter 
strstream.h
\protected_separator 

\family default 
 declara las clases de flujos de C++ para usarlas con arrays de bytes en
 memoria
\layout Subsection

Clases Definidas en iostream.h
\layout Standard

Clases definidas en el fichero iostream.h, desde las más primitivas hasta
 las más especializadas:
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
7 2 0 0 -1 -1 -1 -1
1 0 0 0
1 1 0 0
0 1 0 0
0 1 0 0
0 1 0 0
0 1 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""

streambuf
\newline 
Proporciona métodos para los buffers de memoria
\newline 
ios
\newline 
Manipula errores y variables de estado de los flujos
\newline 
istream
\newline 
Manipula conversiones de caracteres formateadas y no formateadas de un streambuf
\newline 
ostream
\newline 
Manipula conversiones de caracteres formateadas y no formateadas de un streambuf
\newline 
iostream
\newline 
Combina istream y ostream para manipular operaciones bidireccionales en
 un solo flujo
\newline 
istream_withassign
\newline 
Proporciona constructores y operadores de asignación para el flujo cin
\newline 
ostream_withassign
\newline 
Proporciona constructores y operadores de asignación para cout, cerr y clog
\layout Standard

C++ proporciona estos objetos de flujos predefinidos:
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
4 2 0 0 -1 -1 -1 -1
1 0 0 0
1 1 0 0
0 1 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""

cin
\newline 
Entrada estándar, normalmente el teclado, se corresponde con stdin en C
\newline 
cout
\newline 
Salida estándar, normalmente el teclado, se corresponde con stdout en C
\newline 
cerr
\newline 
Salida de error estándar, normalmente la pantalla, se corresponde con stderr
 en C
\newline 
clog
\newline 
Una versión completamente buffereada de cerr (no tiene equivalente en C
\layout Standard

Se pueden redireccionar los flujos 
\family typewriter 
cin
\family default 
, 
\family typewriter 
cout
\family default 
, 
\family typewriter 
cerr
\family default 
 y 
\family typewriter 
clog
\family default 
.
\layout Subsection

Clases Definidas en fstream.h
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
5 2 0 0 -1 -1 -1 -1
1 0 0 0
1 1 0 0
0 1 0 0
0 1 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""

filebuf
\newline 
Especializa la clase streambuf para manipular ficheros
\newline 
fstreambase
\newline 
Proporciona operaciones comunes a los flujos de ficheros
\newline 
ifstream
\newline 
Proporciona operaciones de entrada sobre un filebuf
\newline 
ofstream
\newline 
Proporciona operaciones de salida sobre un filebuf
\newline 
fstream
\newline 
Proporciona operaciones simultáneas de entrada y salida sobre un filebuf
\layout Subsection

Clases Definidas en strstream.h
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
5 2 0 0 -1 -1 -1 -1
1 0 0 0
1 1 0 0
0 1 0 0
0 1 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""

strstreambuf
\newline 
Especializa la clase streambuf para formatos en memoria
\newline 
strstreambase
\newline 
Especializa la clase ios para los flujos de string
\newline 
istrstream
\newline 
Proporciona operaciones de entrada sobre un strstreambuf
\newline 
ostrstream
\newline 
Proporciona operaciones de salida sobre un strstreambuf
\newline 
strstream
\newline 
Proporciona operaciones simultáneas de entrada y salida sobre un strstreambuf
\layout Description

Nota: en realidad, el fichero tiene el nombre de strstrea.h, ya que un nombre
 de fichero no puede tener más de 8 caracteres en el DOS.
\layout Subsection

Clase ios 
\layout Description


\size largest 
ios
\layout Standard

Proporciona operaciones comunes a la entrada y la salida
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center 

\begin_inset Figure size 148 210
file 3.eps
width 3 25
height 3 25
flags 11

\end_inset 


\layout Standard

Declarada en: 
\family typewriter 
iostream.h
\layout Standard

Las clases derivadas de ios especializan la E/S con operaciones de formato
 de alto nivel.
\layout Description


\size largest 
Constructores
\layout Standard

Asocia un streambuf dado con el flujo:
\layout Quotation


\family typewriter 
ios (streambuf *);
\layout Standard

Funciones miembros
\layout Quotation


\family typewriter 
bad
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clear
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 eof
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 fail
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 fill
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 flags
\layout Quotation


\family typewriter 
good
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 precision
\protected_separator 

\protected_separator 
 rdbuf
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 rdstate
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 setf
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 tie
\layout Quotation


\family typewriter 
unsetf
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 width
\layout Description

Definición
\layout Quotation


\family typewriter 
class ios
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // bits de estado de flujo
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 enum io_state
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 goodbit
\protected_separator 
 = 0x00,
\protected_separator 

\protected_separator 

\protected_separator 
 // si está a 1, todo está correcto
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 eofbit
\protected_separator 

\protected_separator 
 = 0x01,
\protected_separator 

\protected_separator 

\protected_separator 
 // 1 en fin de fichero
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 failbit
\protected_separator 
 = 0x02,
\protected_separator 

\protected_separator 

\protected_separator 
 // falló la última operación de E/S
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 badbit
\protected_separator 

\protected_separator 
 = 0x04,
\protected_separator 

\protected_separator 

\protected_separator 
 // se intentó una operación incorrecta
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 hardfail = 0x80
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // error irrecuperable
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 };
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // modo de operación del flujo
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 enum open_mode
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 in
\protected_separator 

\protected_separator 
 = 0x01,
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // abre para lectura
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 out
\protected_separator 
 = 0x02,
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // abre para escritura
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 ate
\protected_separator 
 = 0x04,
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // busca fin de fichero en la apertura original
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 app
\protected_separator 
 = 0x08,
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // modo añadir: todas las adiciones se hacen al
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // final del fichero
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 trunc
\protected_separator 

\protected_separator 

\protected_separator 
 = 0x10,
\protected_separator 

\protected_separator 

\protected_separator 
 // trunca fichero si ya existe
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 nocreate = 0x20,
\protected_separator 

\protected_separator 

\protected_separator 
 // la apertura falla si el fichero no existe
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 noreplace= 0x40,
\protected_separator 

\protected_separator 

\protected_separator 
 // la apertura falla si el fichero ya existe
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 binary
\protected_separator 

\protected_separator 
 = 0x80
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // fichero binario (no de texto)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 };
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // dirección de búsqueda en flujo
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 enum seek_dir { beg=0, cur=1, end=2 };
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // indicadores de formato
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 enum
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 skipws
\protected_separator 

\protected_separator 

\protected_separator 
 = 0x0001, // salta espacios en blanco en la entrada
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 left
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 = 0x0002, // salida ajustada a la izquierda
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 right
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 = 0x0004, // salida ajustada a la derecha
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 internal
\protected_separator 
 = 0x0008, // relleno después de signo o indicador de base
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 dec
\protected_separator 

\protected_separator 
 = 0x0010,
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // conversión decimal
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 oct
\protected_separator 

\protected_separator 
 = 0x0020,
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // conversión octal
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 hex
\protected_separator 

\protected_separator 
 = 0x0040,
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // conversión hexadecimal
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 showbase
\protected_separator 
 = 0x0080, // usa indicador de base en la salida
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 showpoint = 0x0100, // fuerza coma decimal (salida flotante)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 uppercase = 0x0200, // salida hexadecimal en mayúsculas
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 showpos
\protected_separator 

\protected_separator 
 = 0x0400, // añade '+' a los enteros positivos
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 scientific= 0x0800, // usa notación flotante 1.2345E2
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 fixed
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 = 0x1000, // usa notación flotante 123.45
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 unitbuf
\protected_separator 

\protected_separator 
 = 0x2000, // vuelca todos los flujos después de la inserc.
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 stdio
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 = 0x4000
\protected_separator 
 // vuelca stdio y stderr después de la inserción
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 };
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // constantes para el segundo parámetro de seft()
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 static const long basefield;
\protected_separator 

\protected_separator 

\protected_separator 
 // dec | oct | hex
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 static const long adjustfield;
\protected_separator 
 // left | right | internal
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 static const long floatfield;
\protected_separator 

\protected_separator 
 // scientific | fixed
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // constructor, destructor
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ios (streambuf *);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual ios ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // para leer/poner/borrar indicadores de formato
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 long flags ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 long flags (long);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 long setf (long _setbits, long _field);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 long setf (long);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 long unsetf (long);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // lee/pone anchura de campo
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int width ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int width (int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // lee/pone carácter de relleno
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 char fill ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 char fill (char);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // lee/pone dígitos de precisión flotante
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int precision (int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int precision ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // lee/pone ostream atado a este flujo
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream * tie (ostream *);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream * tie ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // obtiene estado actual del flujo
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int
\protected_separator 
 rdstate ();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // devuelve el estado del flujo
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int
\protected_separator 
 eof ();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // distinto de cero en fin de fichero
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int
\protected_separator 
 fail ();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // distinto de cero si falló una operación
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int
\protected_separator 
 bad ();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // distinto de cero si ocurrió un error
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int
\protected_separator 
 good ();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // distinto de cero si no hay ningún bit de
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // estado a 1
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void clear (int = 0);
\protected_separator 

\protected_separator 

\protected_separator 
 // pone el estado del flujo
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 operator void * (); // cero si estado con fallo
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int
\protected_separator 
 operator! ();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // distinto de cero si estado con fallo
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 streambuf * rdbuf ();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // obtiene el streambuf asignado
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // estas declaraciones previenen la copia automática de un ios
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ios (ios&);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // declarado pero no definido
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void operator= (ios&);
\protected_separator 
 // declarado pero no definido
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Description


\size largest 
Descripción de los métodos
\layout Description


\size largest 
bad
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""


\family typewriter 
ios
\family default 

\newline 
No cero si ocurrió un error
\newline 

\newline 

\family typewriter 

\protected_separator 

\protected_separator 
int bad()
\layout Description


\size largest 
clear
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""


\family typewriter 
ios
\family default 

\newline 
Pone el estado del flujo al valor dado:
\newline 

\newline 

\family typewriter 

\protected_separator 

\protected_separator 
void clear(int = 0)
\layout Description


\size largest 
eof
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""


\family typewriter 
ios
\family default 

\newline 
No cero en fin de fichero
\newline 

\newline 

\family typewriter 

\protected_separator 
 int eof ()
\layout Description


\size largest 
fail
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""


\family typewriter 
ios
\family default 

\newline 
No cero si falló una operación
\newline 

\newline 

\family typewriter 

\protected_separator 
 int fail ()
\layout Description


\size largest 
fill
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
4 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
0 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 8 0 0 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 8 0 0 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
ios
\family default 

\newline 
Devuelve el carácter actual de relleno:
\newline 

\newline 

\family typewriter 

\protected_separator 
 char fill ()
\family default 

\newline 

\newline 
Pone carácter de relleno; devuelve el que hay previamente:
\newline 

\newline 

\family typewriter 

\protected_separator 
 char fill (char)
\layout Description


\size largest 
flags
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
4 2 0 0 -1 -1 -1 -1
1 1 0 0
0 0 0 0
0 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
1 8 1 0 0 0 0 "" ""
1 2 1 0 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 2 0 1 0 0 0 "" ""
1 8 0 0 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
ios
\family default 

\newline 
Devuelve los indicadores del formato actual:
\newline 

\newline 

\family typewriter 

\protected_separator 
 long flags ()
\family default 

\newline 

\newline 
Pone los indicadores de formato para que sean idénticosal long dado; devuelve
 los indicadores previos:
\newline 

\newline 

\family typewriter 

\protected_separator 
 long flags (long)
\layout Description


\size largest 
good
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
ios
\family default 

\newline 
No cero si no hay ningún bit de estado a 1 (no aparecieron errores)
\newline 

\newline 

\family typewriter 

\protected_separator 
 int good ()
\layout Description


\size largest 
precision
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
4 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
0 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 8 0 0 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 8 0 0 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
ios
\family default 

\newline 
Pone la precisión de coma flotante; devuelve la precisión previa:
\newline 

\newline 

\family typewriter 

\protected_separator 
 int precision (int)
\family default 

\newline 

\newline 
Devuelve la precisión actual de coma flotante:
\newline 

\newline 

\family typewriter 

\protected_separator 
 int precision ()
\layout Description


\size largest 
rdbuf
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
6 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 8 0 0 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""


\family typewriter 
ios
\family default 

\newline 
Devuelve un puntero al streambuf asignado a este flujo:
\newline 

\newline 

\family typewriter 

\protected_separator 
 streambuf* rdbuf ()
\family default 

\newline 

\family typewriter 
fstream
\family default 

\newline 
Devuelve el buffer usado:
\newline 

\family typewriter 
fstreambase
\family default 

\newline 

\family typewriter 

\protected_separator 
 filebuf* rdbuf ()
\family default 

\newline 

\family typewriter 
ifstream
\family default 

\newline 

\newline 

\family typewriter 
ofstream
\family default 

\newline 

\layout Description


\size largest 
rdstate
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
ios
\family default 

\newline 
Devuelve el estado del flujo:
\newline 

\newline 

\family typewriter 

\protected_separator 
 int rdstate ()
\layout Description


\size largest 
setf
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
4 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
0 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 8 0 0 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 8 0 0 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
ios
\family default 

\newline 
Pone a 1 los bits de 
\family typewriter 
_field
\family default 
 correspondientes a los bits de 
\family typewriter 
_setbits
\family default 
:
\newline 

\newline 

\family typewriter 

\protected_separator 
 long setf (long _setbits, long _field)
\family default 

\newline 

\newline 
Pone a 1 los indicadores correspondientes al long dado; devuelve los indicadores
 previos:
\newline 

\newline 

\family typewriter 

\protected_separator 
 long setf (long)
\layout Description


\size largest 
tie
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
4 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
0 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 8 0 0 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 0 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
ios
\family default 

\newline 
Devuelve el flujo antado, o 0 si no hay ninguno:
\newline 

\newline 

\family typewriter 

\protected_separator 
 ostream* tie ()
\family default 

\newline 

\newline 
Ata otro flujo a éste y devuelve el flujo atado anterior, si lo hay:
\newline 

\newline 

\family typewriter 

\protected_separator 
 ostream* tie (ostream*)
\layout Standard

Los flujos atados son aquéllos que son conectados de tal forma que cuando
 uno es usado, el otro es afectado de la misma forma.
 Por ejemplo, 
\family typewriter 
cin
\family default 
 y 
\family typewriter 
cout
\family default 
 están atados; cuando se usa 
\family typewriter 
cin
\family default 
, se vuelca 
\family typewriter 
cout
\family default 
 primero.
 Cuando un flujo de entrada tiene caracteres para ser consumidos, o si un
 flujo de salida necesita más caracteres, el flujo atado es volcado en primer
 lugar automáticamente.
 Por defecto, 
\family typewriter 
cin
\family default 
, 
\family typewriter 
cerr
\family default 
 y 
\family typewriter 
clog
\family default 
 están atados a 
\family typewriter 
cout
\family default 
.
\layout Description


\size largest 
unsetf
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""


\family typewriter 
ios
\family default 

\newline 
Pone a 0 los bits correspondientes al long dado; devuelve el long previo:
\newline 

\newline 

\family typewriter 

\protected_separator 
 long unsetf (long)
\layout Description


\size largest 
width
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
4 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
0 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
1 8 1 0 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 8 0 0 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
ios
\family default 

\newline 
Devuelve la anchura atual:
\newline 

\newline 

\family typewriter 

\protected_separator 
 int width ()
\family default 

\newline 

\newline 
Pone la anchura dada; devuelve la anchura previa:
\newline 

\newline 

\family typewriter 

\protected_separator 
 int width (int)
\layout Standard

Ejemplo de algunas funciones de la clase 
\family typewriter 
ios
\family default 
.
\layout Standard

Los ejemplos se realizarán sobre el flujo 
\family typewriter 
cout
\family default 
 que está predefinido en 
\family typewriter 
iostream.h
\family default 
.
 El objeto 
\family typewriter 
cout
\family default 
 no es del tipo ios sino de un tipo derivado de la clase 
\family typewriter 
ios
\family default 
 y por este motivo puede hacer uso de los miembros públicos y protegidos
 de la clase 
\family typewriter 
ios
\family default 
.
 Normalmente la clase 
\family typewriter 
ios
\family default 
 se suele utilizar como clase base de otras clases derivadas y no directamente,
 por este motivo, vamos a probar las funciones de 
\family typewriter 
ios
\family default 
 con el flujo 
\family typewriter 
cout
\family default 
.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#include <conio.h>
\layout Quotation


\family typewriter 
inline void nl (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 cout << '
\backslash 
n';
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 clrscr();
\layout Quotation


\family typewriter 

\protected_separator 
 cout << 1;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 int anchura_ant = cout.width (5);
\layout Quotation


\family typewriter 

\protected_separator 
 int ch_de_relleno_ant = cout.fill ('*');
\layout Quotation


\family typewriter 

\protected_separator 
 cout << 2;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout.width(anchura_ant);
\layout Quotation


\family typewriter 

\protected_separator 
 cout.fill(ch_de_relleno_ant);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << 3;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 nl ();
\layout Quotation


\family typewriter 

\protected_separator 
 // la función width() sólo afecta a la siguiente salida
\layout Quotation


\family typewriter 

\protected_separator 
 const numhex = 0x0F;
\layout Quotation


\family typewriter 

\protected_separator 
 long indicadores = cout.flags ();
\layout Quotation


\family typewriter 

\protected_separator 
 cout.width (4);
\layout Quotation


\family typewriter 

\protected_separator 
 cout.fill ('#');
\layout Quotation


\family typewriter 

\protected_separator 
 cout << numhex << numhex;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout.width (4);
\layout Quotation


\family typewriter 

\protected_separator 
 cout.flags (ios::hex);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << numhex;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout.width (4);
\layout Quotation


\family typewriter 

\protected_separator 
 cout.setf (ios::uppercase | ios::showbase);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << numhex;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout.width (4);
\layout Quotation


\family typewriter 

\protected_separator 
 cout.setf (ios::left, ios::adjustfield);
\layout Quotation


\family typewriter 

\protected_separator 
 cout.width (4);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << numhex;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout.unsetf (ios::uppercase);
\layout Quotation


\family typewriter 

\protected_separator 
 cout.width (4);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << numhex;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout.flags (ios::dec | ios::showpos);
\layout Quotation


\family typewriter 

\protected_separator 
 cout.width (4);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << numhex;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout.flags (ios::left);
\layout Quotation


\family typewriter 

\protected_separator 
 cout.width (4);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << numhex; // imprime
\protected_separator 
 con flags y
\protected_separator 
 si se hubiese hecho
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // hecho cout.setf (ios::left) en vez de cout.flags (ios::left)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // Esa es la diferencia principal entre flags() y setf()
\layout Quotation


\family typewriter 

\protected_separator 
 cout.flags (indicadores);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << numhex;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 nl ();
\layout Quotation


\family typewriter 

\protected_separator 
 const float numfloat = 2.3456;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << numfloat;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout.precision (2);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << ' ' << numfloat;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout.setf (ios::scientific);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << ' ' << numfloat;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout.setf (ios::fixed | ios::showpoint);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << ' ' << float (int (numfloat));
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 nl ();
\layout Quotation


\family typewriter 

\protected_separator 
 // la siguiente línea imprime: <valor_no_cero> <valor_no_cero> 0
\layout Quotation


\family typewriter 

\protected_separator 
 // donde <valor_no_cero> es un valor distinto de 0.
 En la sentencia
\layout Quotation


\family typewriter 

\protected_separator 
 // cout << cout; se realiza la conversión implícita:
\layout Quotation


\family typewriter 

\protected_separator 
 // cout << (void *) cout; Esto es práctico para utilizarlo en expresiones
\layout Quotation


\family typewriter 

\protected_separator 
 // de condiciones como las del while: while (cout) ...
 Aunque con el cout
\layout Quotation


\family typewriter 

\protected_separator 
 // puede no ser muy útil sí lo es con los objetos de tipo fstream que
\layout Quotation


\family typewriter 

\protected_separator 
 // veremos más adelante
\layout Quotation


\family typewriter 

\protected_separator 
 cout << cout << ' ' << (void *) cout << ' ' << ! cout;
\layout Quotation


\family typewriter 

\protected_separator 
 // los modos de operación de y los bits y funciones de estado de los
\layout Quotation


\family typewriter 

\protected_separator 
 // flujos se probarán cuando se estudien las clases ifstream, ofstream
\layout Quotation


\family typewriter 

\protected_separator 
 // y fstream, que son derivadas de la clase ios y por lo tanto utilizan
\layout Quotation


\family typewriter 

\protected_separator 
 // todas estas características de la clase base ios
\layout Quotation


\family typewriter 

\protected_separator 
 getch ();
\layout Quotation


\family typewriter 
}
\layout Subsection

Clase streambuf 
\layout Description


\size largest 
streambuf
\layout Standard

Clase para manipular buffers.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center 

\begin_inset Figure size 148 101
file 4.eps
width 3 25
height 3 12
flags 10

\end_inset 


\layout Standard

Declarada en: 
\family typewriter 
iostream.h
\family default 
 .
 Normalmente, deberíamos usar las clases derivadas en nuestras aplicaciones,
 en vez de streambuf.
\layout Description


\size largest 
Constructores
\layout Standard

Crea un objeto buffer vacío:
\layout Quotation


\family typewriter 
streambuf()
\layout Standard

Usa el array y el tamaño dados como el buffer:
\layout Quotation


\family typewriter 
streambuf (char *, int)
\layout Description

Funciones
\protected_separator 
miembros
\layout Quotation


\family typewriter 
in_avail
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 out_waiting
\protected_separator 

\protected_separator 
 sbumpc
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 seekoff
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 seekpos
\layout Quotation


\family typewriter 
sgetc
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 sgetn
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 setbuf
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 snextc
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 sputbackc
\layout Quotation


\family typewriter 
sputc
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 sputn
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 stossc
\layout Description

Definición
\layout Quotation


\family typewriter 
class _CLASSTYPE streambuf
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // constructores and destructores
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 streambuf();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // hace un streambuf vacío
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 streambuf(char *, int); // hace un streambuf con un array de
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // caracteres dado
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual streambuf();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // usa el array de caracteres proporcionado para el buffer si es posible
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual streambuf * setbuf (signed char *, int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // AVISO: esta función no es virtual; no la vuelvas a definir igual
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 streambuf * setbuf(unsigned char *, int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // obtener(extraer) caracteres
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int sgetc();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // obtiene próximo carácter
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int snextc();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // avanza y devuelve próximo carácter
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int sbumpc();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // devuelve carácter actual y avanza
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void stossc();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // avanza a próximo carácter
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int sgetn(char *, int);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // obtiene los próximos n caracteres
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual int do_sgetn(char *, int); // implementación de sgetn
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual int underflow();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // llena buffer vacío
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int sputbackc(char);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // devuelve carácter a la entrada
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual int pbackfail(int);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // implementación de sputbackc
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int in_avail();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // número de caracteres disponibles en buffer
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // poner (insertar) caracteres
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int sputc(int);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // pone un carácter
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int sputn(const char *, int);
\protected_separator 

\protected_separator 

\protected_separator 
 // pone n caracteres de string
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual int do_sputn(const char * s, int n); // implementación de sputn
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual int overflow(int = EOF); // vuelca buffer y hace más sitio
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int out_waiting();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // número de caracteres no volcados
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // mueve puntero en flujo
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual streampos seekoff(streamoff, seek_dir,
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int = (ios::in | ios::out));
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual streampos seekpos(streampos, int = (ios::in | ios::out));
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual int sync();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Description


\size largest 
Descripción de los métodos
\layout Description


\size largest 
in_avail
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
streambuf
\family default 

\newline 
Devuelve el número de caracteres restantes en el buffer de entrada:
\newline 

\newline 

\family typewriter 

\protected_separator 
 int in_avail ()
\layout Description


\size largest 
out_waiting
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
streambuf
\family default 
 
\newline 
Devuelve el número de caracteres restantes en el buffer de salida:
\newline 

\newline 

\family typewriter 

\protected_separator 
 int out_waiting ()
\layout Description


\size largest 
sbumpc
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""


\family typewriter 
streambuf
\family default 
 
\newline 
Devuelve el carácter actual del buffer de entrada, entonces avanza:
\newline 

\newline 

\family typewriter 

\protected_separator 
 int sbumpc ()
\layout Description


\size largest 
seekoff
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
7 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
0 0 0 0
0 0 0 0
0 1 0 0
0 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""


\family typewriter 
filebuf
\family default 

\newline 
Mueve el puntero de fichero relativo a la posición actual
\newline 

\newline 

\family typewriter 

\protected_separator 
 virtual long seekoff(long, seek_dir, int)
\family default 

\newline 

\family typewriter 
streambuf
\family default 

\newline 
Mueve el puntero de lectura y/o escritura (el tercer argumento determina
 cuál de los dos o
\newline 

\newline 
ambos) relativo a la posición actual:
\newline 

\newline 

\family typewriter 

\protected_separator 
 virtual long seekoff(long, seek_dir,
\family default 
 
\family typewriter 
int = (ios::in | ios::out))
\family default 

\newline 

\family typewriter 
strstreambuf
\family default 

\newline 
Mueve el puntero relativo a la posición actual:
\newline 

\newline 

\family typewriter 

\protected_separator 
 virtual long seekoff(long, seek_dir, int)
\layout Description


\size largest 
seekpos
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
streambuf
\family default 

\newline 
Mueve el puntero de lectura y/o escritura a una posición absoluta:
\newline 

\newline 

\family typewriter 

\protected_separator 
 virtual long seekpos(long, int = (ios::in | ios::out))
\layout Description


\size largest 
sgetc
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""


\family typewriter 
streambuf
\family default 

\newline 
Devuelve el próximo carácter en el buffer de entrada:
\newline 

\newline 

\family typewriter 

\protected_separator 
 int sgetc10 ()
\layout Description


\size largest 
sgetn
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""


\family typewriter 
streambuf
\family default 

\newline 
Obtiene los próximos n caracteres del buffer de entrada:
\newline 

\newline 

\family typewriter 

\protected_separator 
 int sgetn (char*, int n)
\layout Description


\size largest 
setbuf
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
6 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
0 0 0 0
0 1 0 0
0 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
filebuf
\family default 

\newline 
Especifica el buffer a usar:
\newline 

\family typewriter 
strstreambuf
\family default 

\newline 

\family typewriter 

\protected_separator 
 virtual streambuf* setbuf (char*, int)
\family default 

\newline 

\family typewriter 
fstreambase
\family default 

\newline 
Usa un buffer especificado:
\newline 

\newline 

\family typewriter 

\protected_separator 
 void setbuf (char*, int)
\family default 

\newline 

\family typewriter 
streambuf
\family default 

\newline 
Conecta a un buffer dado:
\newline 

\newline 

\family typewriter 

\protected_separator 
 virtual streambuf* setbuf (signed char*, int)
\layout Description


\size largest 
snextc
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""


\family typewriter 
streambuf
\family default 

\newline 
Avanza a (y devuelve el próximo carácter de) el buffer de entrada:
\newline 

\newline 

\family typewriter 

\protected_separator 
 int snextc()
\layout Description


\size largest 
sputbackc
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
streambuf
\family default 

\newline 
Devuelve un carácter a la entrada:
\newline 

\newline 

\family typewriter 

\protected_separator 
 int sputbackc (char)
\layout Description


\size largest 
sputc
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
streambuf
\family default 

\newline 
Pone un carácter en el buffer de salida:
\newline 

\newline 

\family typewriter 

\protected_separator 
 int sputc(int)
\layout Description


\size largest 
sputn
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
streambuf
\family default 

\newline 
Pone n caracteres en el buffer de salida:
\newline 

\newline 

\family typewriter 

\protected_separator 
 int sputn(const char*, int n)
\layout Standard


\size largest 
stossc
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
streambuf
\family default 

\newline 
Avanza al próximo carácter en el buffer de entrada:
\newline 

\newline 

\family typewriter 

\protected_separator 
 void stossc()
\layout Description

Programa
\protected_separator 
ejemplo
\layout Quotation


\family typewriter 
// Este ejemplo prueba algunos métodos (funciones miembros) de la clase
\layout Quotation


\family typewriter 
// streambuf.
\layout Quotation


\family typewriter 
/* Los ejemplos se realizarán accediendo al streambuf de los flujos cout
 y
\layout Quotation


\family typewriter 

\protected_separator 
 cin a través de la función miembro rdbuf() de la clase ios.
 Los objetos
\layout Quotation


\family typewriter 

\protected_separator 
 cout y cin no son del tipo ios sino de un tipo derivado de la clase ios
\layout Quotation


\family typewriter 

\protected_separator 
 y por este motivo pueden hacer uso de los miembros públicos y protegidos
\layout Quotation


\family typewriter 

\protected_separator 
 de la clase ios.
 */
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#define nl << "
\backslash 
n"
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 cout << char ((cin.rdbuf())->sputbackc ('X'))
\protected_separator 
 nl; // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout << (cin.rdbuf())->in_avail ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 nl; // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout << char ((cin.rdbuf())->sgetc())
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 nl; // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout << char ((cout.rdbuf())->sputbackc ('X')) nl; // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout << (cout.rdbuf())->out_waiting ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 nl; // imprime 
\layout Quotation


\family typewriter 

\protected_separator 
 cout << char ((cout.rdbuf())->sputc('X'))
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 nl; // imprime 
\layout Quotation


\family typewriter 
}
\layout Subsection

Clase istream 
\layout Description


\size largest 
istream
\layout Standard

Proporciona entrada formateada y no formateada de un 
\family typewriter 
streambuf
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center 

\begin_inset Figure size 148 210
file 5.eps
width 3 25
height 3 25
flags 10

\end_inset 


\layout Standard

Declarada en: 
\family typewriter 
iostream.h
\layout Description


\size largest 
Constructores
\layout Standard

Asocia un streambuf dado con el flujo:
\layout Quotation


\family typewriter 
istream (streambuf *)
\layout Description

Funciones
\protected_separator 
miembros
\layout Quotation


\family typewriter 
gcount
\protected_separator 

\protected_separator 

\protected_separator 
 get
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 getline
\protected_separator 

\protected_separator 
 ignore
\protected_separator 

\protected_separator 

\protected_separator 
 peek
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 putback
\protected_separator 

\protected_separator 
 read
\layout Quotation


\family typewriter 
seekg
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 tellg
\layout Description

Definición
\layout Quotation


\family typewriter 
class istream : virtual public ios
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // constructor y destructor
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream (streambuf *);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual istream ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // pone/lee la posición del puntero de lectura
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& seekg (streampos);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& seekg (streamoff, seek_dir);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 streampos tellg ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int sync ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 /*
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 * Operaciones de extracción no formateadas
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 */
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // extrae caracteres colocándolos en un array
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& get (signed char *, int, char = '
\backslash 
n');
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& get (unsigned char *, int, char = '
\backslash 
n');
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& read (signed char *, int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& read (unsigned char *, int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // extrae caracteres colocándolos en un array hasta encontrar el
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // carácter de terminación dado como máximo
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& getline (signed char *, int, char = '
\backslash 
n');
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& getline (unsigned char *, int, char = '
\backslash 
n');
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // extrae caracteres colocándolos en un streambuf hasta encontrar el
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // carácter de terminación dado como máximo
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& get (streambuf&, char = '
\backslash 
n');
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // extrae un solo carácter
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& get (unsigned char&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& get (signed char&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 get ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 peek ();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // devuelve próximo carácter sin extracción
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 gcount ();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // número de caracteres no formateados en la
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // última extracción
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& putback (char); // devuelve un carácter a la entrada
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // extrae y desecha caracteres pero para al encontrar el delimitador
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& ignore (int = 1, int = EOF);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 /*
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 * Operaciones de extracción formateadas
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 */
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& operator>> (istream& (*_f) (istream&));
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& operator>> (ios& (*_f) (ios&));
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& operator>> (signed char *);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& operator>> (unsigned char *);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& operator>> (unsigned char&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& operator>> (signed char&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& operator>> (short&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& operator>> (int&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& operator>> (long&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& operator>> (unsigned short&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& operator>> (unsigned int&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& operator>> (unsigned long&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& operator>> (float&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& operator>> (double&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& operator>> (long double&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // extrae de este istream, insertando en streambuf
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream& operator>> (streambuf *);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 protected:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void eatwhite ();
\protected_separator 
 // extrae espacios blancos consecutivos
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Description


\size largest 
Descripción de los métodos
\layout Description


\size largest 
gcount
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
istream
\family default 

\newline 
Devuelve el número de caracteres extraídos en la última operación:
\newline 

\newline 

\family typewriter 

\protected_separator 
 int gcount()
\layout Description


\size largest 
get
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
13 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 1 0 0
0 0 0 0
0 1 0 0
0 0 0 0
0 0 0 0
0 1 0 0
0 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 8 0 0 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 8 0 0 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 8 0 0 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 8 0 0 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""


\family typewriter 
istream
\family default 

\newline 
Extrae el próximo carácter o EOF:
\newline 

\newline 

\family typewriter 

\protected_separator 
 int get ()
\family default 

\newline 

\newline 
Extra caracteres colocándolos en el char * dado hasta que el delimitador
 (tercer parámetro) o el 
\newline 

\newline 
fin-de-fichero es encontrado, o hasta que (len - 1) bytes han sido leídos:
\newline 

\newline 

\family typewriter 

\protected_separator 
 istream& get (signed char*, int len, char = '
\backslash 
n')
\family default 

\newline 

\newline 

\family typewriter 

\protected_separator 
 istream& get (unsigned char*, int len, char = '
\backslash 
n')
\family default 

\newline 

\newline 
Un nulo de terminación es siempre colocado en el string de salida; el delimitado
r nunca es colocado.
\newline 

\newline 
Falla sólamente si no es extraído ningún carácter.
\newline 

\newline 
Extra un solo carácter colocándolo en la referencia a carácter dada:
\newline 

\newline 

\family typewriter 

\protected_separator 
 istream& get (unsigned char&)
\family default 

\newline 

\newline 

\family typewriter 

\protected_separator 
 istream& get (signed char&)
\family default 

\newline 

\newline 
Extrae caracteres colocándolos en el streambuf dado hasta que se encuentra
 el delimitador:
\newline 

\newline 

\family typewriter 

\protected_separator 
 istream& get (streambuf&, char = '
\backslash 
n')
\layout Description


\size largest 
getline
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
3 2 0 0 -1 -1 -1 -1
1 0 0 0
0 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
istream
\family default 

\newline 
Igual que get, excepto que también se extrae el delimitador:
\newline 

\newline 

\family typewriter 

\protected_separator 
 istream& getline (signed char*, int, char = '
\backslash 
n')
\family default 

\newline 

\newline 

\family typewriter 

\protected_separator 
 istream& getline (unsigned char*, int, char = '
\backslash 
n')
\layout Description


\size largest 
ignore
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
istream
\family default 

\newline 
Salta un máximo de n caracteres en el flujo de entrada; para cuando encuentra
 el delimitador:
\newline 

\newline 

\family typewriter 

\protected_separator 
 istream& ignore (int n = 1, int delim = EOF)
\layout Description


\size largest 
peek
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
istream
\family default 

\newline 
Devuelve próximo carácter sin extracción:
\newline 

\newline 

\family typewriter 

\protected_separator 
 int peek ()
\layout Description


\size largest 
putback
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""


\family typewriter 
istream
\family default 

\newline 
Devuelve un carácter al flujo:
\newline 

\newline 

\family typewriter 

\protected_separator 
 istream& putback (char)
\layout Description


\size largest 
read
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
4 2 0 0 -1 -1 -1 -1
1 0 0 0
0 0 0 0
0 1 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 8 0 0 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""


\family typewriter 
istream
\family default 

\newline 

\family typewriter 
Extrae un número dado de caracteres colocándolos en un array:
\family default 

\newline 

\newline 

\family typewriter 

\protected_separator 
 istream& read (signed char*, int)
\family default 

\newline 

\newline 

\family typewriter 

\protected_separator 
 istream& read (unsigned char*, int)
\family default 

\newline 

\newline 
Usa 
\family typewriter 
gcount()
\family default 
 para determinar el número de caracteres leídos realmente si ocurre un error.
\layout Description


\size largest 
seekg
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
6 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
0 0 0 0
0 1 0 0
0 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 8 0 0 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 8 0 0 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""


\family typewriter 
istream
\family default 

\newline 
Mueve a una posición absoluta (normalmente el argumento es el valor devuelto
 por 
\family typewriter 
tellg
\family default 
):
\newline 

\newline 

\family typewriter 

\protected_separator 
 istream& seekg (long
\family default 

\newline 

\newline 
Mueve a una posición relativa a la posición actual:
\newline 

\newline 

\family typewriter 

\protected_separator 
 istream& seekg (long, seek_dir)
\family default 

\newline 

\newline 
Usa esta definición para seek_dir:
\newline 

\newline 

\family typewriter 

\protected_separator 
 enum seek_dir { beg, cur, end };
\layout Description


\size largest 
tellg
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
istream
\family default 

\newline 
Devuelve la posición actual del flujo:
\newline 

\newline 

\family typewriter 

\protected_separator 
 long tellg()
\layout Description

Programa
\protected_separator 
ejemplo
\layout Quotation


\family typewriter 
// Este ejemplo prueba todos los métodos (funciones miembros) de la clase
\layout Quotation


\family typewriter 
// istream.
\layout Quotation


\family typewriter 
/* Los ejemplos se realizarán sobre el flujo cin que está predefinido en
\layout Quotation


\family typewriter 

\protected_separator 
 iostream.h.
 El objeto cin no es del tipo istream sino de un tipo derivado
\layout Quotation


\family typewriter 

\protected_separator 
 de la clase istream y por este motivo puede hacer uso de los miembros
\layout Quotation


\family typewriter 

\protected_separator 
 públicos y protegidos de la clase istream.
 */
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#include <conio.h>
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 const tam = 100;
\layout Quotation


\family typewriter 

\protected_separator 
 char cad1[tam], cad2[tam];
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "Introduce dos líneas:
\backslash 
n";
\layout Quotation


\family typewriter 

\protected_separator 
 cin.getline (cad1, tam).getline (cad2, tam);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "Primera línea: " << cad1 << "
\backslash 
nSegunda línea: " << cad2;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
n
\backslash 
nIntroduce una serie de caracteres terminados con * que "
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 "serán ignorados: ";
\layout Quotation


\family typewriter 

\protected_separator 
 cin.ignore (tam, '*');
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
nIntroduce 5 caracteres: ";
\layout Quotation


\family typewriter 

\protected_separator 
 cin.read (cad1, 5);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "Cadena leída: " << (cad1[cin.gcount()] = 0, cad1);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
nIntroduce un carácter:
\backslash 
n";
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "Carácter leído sin extracción: " << char (cin.peek ());
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
nCarácter leído con extracción, devuelto y leído de nuevo: "
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << char (cin.putback(cin.get()).get());
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
n
\backslash 
nPosición actual en flujo cin leída, puesta y leída de nuevo: "
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << cin.seekg (cin.tellg ()).tellg ();
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
n
\backslash 
nPulsa una tecla para finalizar.";
\layout Quotation


\family typewriter 

\protected_separator 
 getch ();
\layout Quotation


\family typewriter 
}
\layout Description

SALIDA.
 OBSERVACIONES SOBRE LA SALIDA DEL PROGRAMA:
\layout Enumerate

Observando el programa nos damos cuenta de que parte de la salida mostrada
 corresponde a caracteres introducidos por teclado y visualizados en la
 pantalla.
\layout Enumerate

En la función read, al leer 5 caracteres, lee primero el carácter nueva
 línea que se encuentra en el buffer pues se pulsó la tecla ENTER después
 del *.
\layout Enumerate

La función read no lee el carácter t pues le hemos dicho que lea solamente
 5 caracteres.
 Por lo tanto, el carácter t queda en el buffer de entrada y la función
 get, que sigue a la read, lee el carácter que se encuentra en el buffer
 en vez de pedir un carácter por teclado.
\layout Enumerate

El número 11974 es distinto en cada ejecución del programa.
 Las funciones 
\family typewriter 
seekg()
\family default 
 y 
\family typewriter 
tellg()
\family default 
 son realmente útiles al leer ficheros de discos.
\layout Subsection

Clase ostream
\layout Description


\size largest 
ostream
\layout Standard

Proporciona salida formateada y no formateada a un streambuf.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center 

\begin_inset Figure size 148 210
file 6.eps
width 3 25
height 3 25
flags 10

\end_inset 


\layout Standard

Declarada en: 
\family typewriter 
iostream.h
\layout Description


\size largest 
Constructores
\layout Standard

Asocia un streambuf dado con el flujo:
\layout Quotation


\family typewriter 
ostream (streambuf *)
\layout Standard

Funciones miembros
\layout Quotation


\family typewriter 
flush
\protected_separator 

\protected_separator 
 seekp
\protected_separator 

\protected_separator 
 put
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 tellp
\protected_separator 

\protected_separator 
 write
\layout Description

Definición
\layout Quotation


\family typewriter 
class ostream : virtual public ios
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // constructores y destructores
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream (streambuf *);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual ostream ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& flush ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // pone/lee la posición del puntero de escritura
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream&
\protected_separator 
 seekp (streampos);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream&
\protected_separator 
 seekp (streamoff, seek_dir);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 streampos tellp ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 /*
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 * Operaciones de inserción no formateadas
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 */
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& put (char);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // inserta el carácter
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& write (const signed char
\protected_separator 
 *, int);
\protected_separator 

\protected_separator 
 // inserta el string
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& write (const unsigned char
\protected_separator 
 *, int); // inserta el string
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 /*
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 * Operaciones de inserción formateadas
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 */
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // inserta el carácter
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& operator<< (signed char);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& operator<< (unsigned char);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // para lo siguiente, inserta representación del valor númerico
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& operator<< (short);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& operator<< (unsigned short);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& operator<< (int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& operator<< (unsigned int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& operator<< (long);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& operator<< (unsigned long);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& operator<< (float);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& operator<< (double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& operator<< (long double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // inserta string terminado en nulo
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& operator<< (const signed char *);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& operator<< (const unsigned char *);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // inserta representación del valor del puntero
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& operator<< (void *);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // extrae de streambuf, insertando en este otream
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& operator<< (streambuf *);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // manipuladores
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& operator<< (ostream& (*_f) (ostream&));
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream& operator<< (ios& (*_f) (ios&));
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 protected:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Description


\size largest 
Descripción
\protected_separator 
de
\protected_separator 
los
\protected_separator 
métodos
\layout Description


\size largest 
flush
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""


\family typewriter 
ostream
\family default 

\newline 
Vuelca el flujo:
\newline 

\newline 

\family typewriter 

\protected_separator 
 ostream& flush()
\layout Description


\size largest 
seekp
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
6 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
0 0 0 0
0 1 0 0
0 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 8 0 0 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
1 8 0 0 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""


\family typewriter 
ostream
\family default 

\newline 
Mueve a una posición absoluta (normalmente el argumento es un valor devuelto
 por tellp):
\newline 

\newline 

\family typewriter 

\protected_separator 
 ostream& seekp(long)
\family default 

\newline 

\newline 
Mueve a una posición relativa a la posición actual:
\newline 

\newline 

\family typewriter 

\protected_separator 
 ostream& seekp(long, seek_dir)
\family default 

\newline 

\newline 
Usa esta definición para seek_dir:
\newline 

\newline 

\family typewriter 

\protected_separator 
 enum seek_dir{ beg, cur, end };
\layout Description


\size largest 
put
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
ostream
\family default 

\newline 
Inserta el carácter:
\newline 

\newline 

\family typewriter 

\protected_separator 
 ostream& put(char)
\layout Description


\size largest 
tellp
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
ostream
\family default 

\newline 
Devuelve la posición actual del flujo:
\newline 

\newline 

\family typewriter 

\protected_separator 
 long tellp()
\layout Description


\size largest 
write
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
3 2 0 0 -1 -1 -1 -1
1 0 0 0
0 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
ostream
\family default 

\newline 
Inserta n caracteres (incluido nulos):
\newline 

\newline 

\family typewriter 

\protected_separator 
 ostream& write (const signed char*, int n)
\family default 

\newline 

\newline 

\family typewriter 

\protected_separator 
 ostream& write (const unsigned char*, int n)
\layout Description

Programa
\protected_separator 
ejemplo
\layout Quotation


\family typewriter 
// Este ejemplo prueba todos los métodos (funciones miembros) de la clase
 ostream.
\layout Quotation


\family typewriter 
/* Los ejemplos se realizarán sobre el flujo cout que está predefinido en
\layout Quotation


\family typewriter 

\protected_separator 
 iostream.h.
 El objeto cout no es del tipo ostream sino de un tipo derivado
\layout Quotation


\family typewriter 

\protected_separator 
 de la clase ostream y por este motivo puede hacer uso de los miembros
\layout Quotation


\family typewriter 

\protected_separator 
 públicos y protegidos de la clase ostream.
 */
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#include <conio.h>
\layout Quotation


\family typewriter 
#include <string.h>
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 cout.flush () << "Volcando flujo.";
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
nPosición actual en flujo cout leída, puesta y leída de nuevo: "
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << cout.seekp (cout.tellp ()).tellp ();
\layout Quotation


\family typewriter 

\protected_separator 
 const char *p = "
\backslash 
nInsertando esta cadena y el carácter X.";
\layout Quotation


\family typewriter 

\protected_separator 
 const char lp = strlen (p);
\layout Quotation


\family typewriter 

\protected_separator 
 cout.write (p, lp - 1).put (p[lp - 1]) << "
\backslash 
n";
\layout Quotation


\family typewriter 

\protected_separator 
 getch ();
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
/*
\layout Description

SALIDA: OBSERVACIONES SOBRE LA SALIDA DEL PROGRAMA:
\layout Enumerate

El número 2090 es distinto en cada ejecución del programa.
 Las funciones 
\family typewriter 
seekp()
\family default 
 y 
\family typewriter 
tellp()
\family default 
 son realmente útiles al leer ficheros de discos.
\layout Subsection

Clase iostream
\layout Description


\size largest 
iostream
\layout Standard

Permite entrada y salida sobre un flujo.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center 

\begin_inset Figure size 148 101
file 7.eps
width 3 25
height 3 12
flags 10

\end_inset 


\layout Standard

Declarada en: 
\family typewriter 
iostream.h
\family default 
.
 La clase 
\family typewriter 
iostream
\family default 
 es simplemente una mezcla de sus clases bases, permitiendo entrada y salida
 sobre un flujo.
\layout Description


\size largest 
Constructores
\layout Standard

Asocia un 
\family typewriter 
streambuf
\family default 
 dado con el flujo:
\layout Quotation


\family typewriter 
iostream (streambuf *)
\layout Description

Funciones
\protected_separator 
miembros
\layout Standard

Ninguna
\layout Description

Definición
\layout Quotation


\family typewriter 
class iostream : public istream, public ostream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 iostream (streambuf *);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual iostream ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 protected:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 iostream ();
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Description

Programa
\protected_separator 
ejemplo
\layout Quotation


\family typewriter 
// Este ejemplo prueba algunos métodos (funciones miembros) de la clase
 iostream.
\layout Quotation


\family typewriter 
/* Los ejemplos se realizarán accediendo al streambuf de los flujos cout
 y
\layout Quotation


\family typewriter 

\protected_separator 
 cin a través de la función miembro rdbuf() de la clase ios.
 Esta función
\layout Quotation


\family typewriter 

\protected_separator 
 devuelve streambuf * y uno de los constructores de la clase iostream es
\layout Quotation


\family typewriter 

\protected_separator 
 precisamente de ese tipo.
 El objeto cout no es del tipo ios sino de un
\layout Quotation


\family typewriter 

\protected_separator 
 tipo derivado de la clase ios y por este motivo puede hacer uso de los
\layout Quotation


\family typewriter 

\protected_separator 
 miembros públicos y protegidos de la clase ios.
 */
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 
 iostream ((iostream ((iostream (cout.rdbuf ()) << "Introduce x: ")
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 .rdbuf ()) >> x).rdbuf ()) << "x es ";
\layout Quotation


\family typewriter 

\protected_separator 
 iostream ((iostream (cout.rdbuf ()) << x).rdbuf ()).flush ();
\layout Quotation


\family typewriter 
}
\layout Description

SALIDA: 
\layout Enumerate

El primer 5 de la salida mostrada es el número tecleado desde teclado y
 visualizado en pantalla.
\layout Enumerate

Los pasos que se realizan en la sentencia 
\layout Quotation


\family typewriter 
iostream ((iostream ((iostream (cout.rdbuf ()) << "Introduce x: ")
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 .rdbuf ()) >> x).rdbuf ()) << "x es ";
\layout Quote

son lo siguientes:
\layout Quotation


\family typewriter 
Paso Expresión
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 Tipo de la expr
\layout Quotation


\family typewriter 
---- -------------------------------------------------------- ---------------
\layout Quotation


\family typewriter 
1)
\protected_separator 

\protected_separator 
 cout.rdbuf ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 streambuf *
\layout Quotation


\family typewriter 
2)
\protected_separator 

\protected_separator 
 iostream (cout.rdbuf ())
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 iostream
\layout Quotation


\family typewriter 
3)
\protected_separator 

\protected_separator 
 iostream (cout.rdbuf ()) << "Introduce x: "
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream
\layout Quotation


\family typewriter 
4)
\protected_separator 

\protected_separator 
 (iostream (cout.rdbuf ()) << "Introduce x: ").rdbuf ()
\protected_separator 

\protected_separator 
 streambuf *
\layout Quotation


\family typewriter 
5)
\protected_separator 

\protected_separator 
 iostream ((iostream (cout.rdbuf ()) << "Introduce x: ")
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 .rdbuf ())
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 iostream
\layout Quotation


\family typewriter 
6)
\protected_separator 

\protected_separator 
 iostream ((iostream (cout.rdbuf ()) << "Introduce x: ")
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 .rdbuf ()) >> x
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 istream
\layout Quotation


\family typewriter 
6)
\protected_separator 

\protected_separator 
 (iostream ((iostream (cout.rdbuf ()) << "Introduce x: ")
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 .rdbuf ()) >> x).rdbuf ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 streambuf *
\layout Quotation


\family typewriter 
7)
\protected_separator 

\protected_separator 
 iostream ((iostream ((iostream (cout.rdbuf ())
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << "Introduce x: ").rdbuf ()) >> x).rdbuf ())
\protected_separator 

\protected_separator 
 iostream
\layout Quotation


\family typewriter 
8)
\protected_separator 

\protected_separator 
 iostream ((iostream ((iostream (cout.rdbuf ())
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << "Introduce x: ").rdbuf ()) >> x).rdbuf ())
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << "x es "
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream
\layout Subsection

Clase istream_withassign
\layout Description


\size largest 
istream_withassign
\layout Standard


\family typewriter 
istream
\family default 
 con un operador de asignación añadido
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center 

\begin_inset Figure size 148 101
file 8.eps
width 3 25
height 3 12
flags 10

\end_inset 


\layout Standard

Declarada en: 
\family typewriter 
iostream.h
\layout Description


\size largest 
Constructores
\layout Standard

Constructor nulo (llama a constructor de istream):
\layout Quotation


\family typewriter 
istream_withassign()
\layout Description

Funciones
\protected_separator 
miembros
\layout Standard

Ninguna (Aunque el operador = está sobrecargado)
\layout Description

Definición
\layout Quotation


\family typewriter 
class istream_withassign : public istream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // no inicialización
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream_withassign ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual istream_withassign ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // obtiene buffer de ostream y hace inicialización completa
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream_withassign& operator= (istream&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // asocia streambuf con flujo y hace inicialización completa
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istream_withassign& operator= (streambuf *);
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Description

Programa
\protected_separator 
ejemplo
\layout Quotation


\family typewriter 
// Este ejemplo prueba la clase istream_withassign
\layout Quotation


\family typewriter 
/* El flujo cin es de tipo istream_withassign.
 */
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 const int longs = 256;
\layout Quotation


\family typewriter 

\protected_separator 
 char s[longs];
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
nIntroduce cadena: ";
\layout Quotation


\family typewriter 

\protected_separator 
 cin >> s;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
nCadena introducida: " << s;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
nIntroduce línea: ";
\layout Quotation


\family typewriter 

\protected_separator 
 cin.getline (s, longs);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
nLínea introducida: " << s;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
nIntroduce cadena saltando espacios blancos: ";
\layout Quotation


\family typewriter 

\protected_separator 
 cin.setf (ios::skipws);
\layout Quotation


\family typewriter 

\protected_separator 
 cin >> s;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
nCadena introducida: " << s;
\layout Quotation


\family typewriter 

\protected_separator 
 while ((cin.rdbuf())->in_avail ()) // desecha caracteres que hay en buffer
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 cin.get ();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // para que próximo cin lea de teclado
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
nIntroduce cadena sin saltar espacios blancos: ";
\layout Quotation


\family typewriter 

\protected_separator 
 cin.unsetf (ios::skipws);
\layout Quotation


\family typewriter 

\protected_separator 
 cin >> s;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
nCadena introducida: " << s;
\layout Quotation


\family typewriter 
}
\layout Description

SALIDA:
\layout Enumerate

Parte del texto mostrado en la salida anterior corresponde a texto introducido
 por teclado y visualizado en pantalla.
 Esto se ve claramente observando el código fuente.
 Por supuesto, tanto la salida como la entrada se pueden redirigir puesto
 que cout y cin trabajan con la salida y la entrada estándar.
\layout Enumerate

La diferencia de usar 
\family typewriter 
cin >> s
\family default 
 y de usar 
\family typewriter 
cin.getline ()
\family default 
 o 
\family typewriter 
cin.get ()
\family default 
 es que la primera versión para de leer cuando se encuentra un carácter
 espacio (correspondiente a la macro 
\family typewriter 
isspace()
\family default 
 definida en 
\family typewriter 
ctype.h
\family default 
), un carácter de nueva línea o el carácter de fin de fichero, mientras
 que las dos versiones anteriores paran de leer cuando nosotros queremos.
 También se puede observar que la función 
\family typewriter 
getline()
\family default 
 lee los caracteres del buffer y no del teclado pues se encuentra el texto
 Lebrón Bocanegra seguido de un carácter de nueva línea en el buffer.
\layout Enumerate

En la segunda parte de la función 
\family typewriter 
main()
\family default 
 hay algunos conceptos interesantes.
 El primero de ellos es que por defecto, el indicador 
\family typewriter 
ios::skipws
\family default 
 está puesto a 1, por lo tanto, la sentencia 
\family typewriter 
cin.setf (ios::skipws)
\family default 
 del programa es innecesaria.
 Cuando este indicador está a 1, todos los primeros caracteres de espacios
 blancos en la entrada son saltados.
 Por ejemplo, en la salida se ve que se introduce 
\family typewriter 
" x"
\family default 
 mientras que se almacena 
\family typewriter 
"x"
\family default 
 en la cadena de caracteres s.
 Sin embargo, en la segunda lectura, con el indicador 
\family typewriter 
ios::skipws
\family default 
 puesto a 0, los caracteres iniciales blancos no son saltados, y por lo
 tanto, al encontrarse en primer lugar con un espacio blanco (ASCII 32)
 para de leer y la cadena s queda vacía.
 También es importante significar que en la primera lectura, no sólo se
 introduce en el buffer de entrada los caracteres espacio blanco y x (
\family typewriter 
" x"
\family default 
) sino también un carácter de nueva línea; por ello, se utilizar el bucle
 
\family typewriter 
while
\family default 
, para desechar este caracter; el bucle 
\family typewriter 
while
\family default 
 también nos previene, por ejemplo, de la entrada 
\family typewriter 
" x y"
\family default 
 desechando la 
\family typewriter 
'y'
\family default 
 y el carácter de nueva línea, ya que si no, la segunda lectura empezaría
 leyendo el espacio blanco que hay entre la x y la y.
\layout Subsection

Clase ostream_withassign
\layout Description


\size largest 
ostream_withassign
\layout Standard


\family typewriter 
ostream
\family default 
 con un operador de asignación añadido
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center 

\begin_inset Figure size 148 101
file 9.eps
width 3 25
height 3 12
flags 9

\end_inset 


\layout Standard

Declarada en: 
\family typewriter 
iostream.h
\layout Description


\size largest 
Constructores
\layout Standard

Constructor nulo (llama a constructor de ostream):
\layout Quotation


\family typewriter 
ostream_withassign()
\layout Description

Funciones
\protected_separator 
miembros
\layout Standard

Ninguna (Aunque el operador = está sobrecargado)
\layout Description

Definición
\layout Quotation


\family typewriter 
class ostream_withassign : public ostream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // no inicialización
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream_withassign ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual ostream_withassign ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // obtiene buffer de istream y hace inicialización completa
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream_withassign& operator= (ostream&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // asocia streambuf con flujo y hace inicialización completa
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostream_withassign& operator= (streambuf *);
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Description

Programa
\protected_separator 
ejemplo
\layout Quotation


\family typewriter 
// Este ejemplo prueba la clase ostream_withassign.
\layout Quotation


\family typewriter 
// EN REALIDAD, ESTE EJEMPLO MUESTRA COMO SOBRECARGAR LOS OPERDORES >> Y
 <<
\layout Quotation


\family typewriter 
// EN UNA CLASE DEFINIDA POR EL USUARIO
\layout Quotation


\family typewriter 
/* El flujo cout es de tipo istream_withassign.
 */
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
class vect
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int x, y;
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 vect (int i = 0, int j = 0) { asig (i, j); }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 void asig (int i, int j) { x = i; y = j; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 vect operator+ (void) { return *this; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 vect operator- (void) { return vect (-x, -y); }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 friend vect operator+ (vect v1, vect v2)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 { return vect (v1.x + v2.x, v1.y + v2.y); }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 friend vect operator- (vect v1, vect v2)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 { return v1 + -v2; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 friend ostream& operator<< (ostream& out, vect v)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 { return out << '[' << v.x << ',' << v.y << ']'; }
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 friend istream& operator>> (istream& in, vect& v)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 { return in >> '[' >> v.x >> ',' >> v.y >> ']'; }
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 vect vec, vec1 (1, 2), vec2 (-3);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
nvec1 = " << vec1 << "
\protected_separator 
 vec2 = " << vec2;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
n+vec1 - vec2 = " << vec1 - vec2;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "
\backslash 
nIntroduce vec en la forma [x,y]: ";
\layout Quotation


\family typewriter 

\protected_separator 
 cin >> vec;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "vec: " << vec;
\layout Quotation


\family typewriter 
}
\layout Description

SALIDA:
\layout Enumerate

El primer [4,5] es introducido desde teclado y visualizado en pantalla.
\layout Enumerate

La línea
\layout Quotation


\family typewriter 
cout << "vec: " << vec;
\layout Quote

es equivalente a la línea:
\layout Quotation


\family typewriter 
cout.operator<< ("vec: "); operator<< (cout, vec);
\layout Quote

La direrencia de las dos llamadas anteriores a 
\family typewriter 
operator<<
\family default 
 viene dada porque la primera es una función miembro (ver definición de
 clase 
\family typewriter 
ostream.h
\family default 
) y la segunda es una función amiga (ver definición de la clase 
\family typewriter 
vect
\family default 
 más arriba).
 Los operadores 
\family typewriter 
<<
\family default 
 y 
\family typewriter 
>>
\family default 
 son dos operadores binarios que se pueden sobrecargar al igual que los
 demás operadores sobrecargables.
 De hecho, los operadores 
\family typewriter 
<<
\family default 
 y 
\family typewriter 
>>
\family default 
 ya están sobrecargados en las clases 
\family typewriter 
istream
\family default 
 y 
\family typewriter 
ostream
\family default 
 para los tipos definidos por el sistema.
 Cuando se hace:
\layout Quotation


\family typewriter 
cout << "a" << 'b';
\layout Quote

se está haciendo en realidad:
\layout Quotation


\family typewriter 
(cout.operator<<("a")).operator<<('b');
\layout Subsection

Clase iostream_withassign
\layout Description


\size largest 
iostream_withassign
\layout Standard


\family typewriter 
iostream
\family default 
 con un operador de asignación añadido
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center 

\begin_inset Figure size 148 101
file 10.eps
width 3 25
height 3 12
flags 10

\end_inset 


\layout Standard

Declarada en: 
\family typewriter 
iostream.h
\layout Description


\size largest 
Constructores
\layout Standard

Constructor nulo (llama a constructor de iostream):
\layout Quotation


\family typewriter 
iostream_withassign()
\layout Description

Funciones
\protected_separator 
miembros
\layout Standard

Ninguna (Aunque el operador = está sobrecargado)
\layout Description

Definición
\layout Quotation


\family typewriter 
class iostream_withassign : public iostream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // no inicialización
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 iostream_withassign ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual iostream_withassign ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // obtiene buffer de stream y hace inicialización completa
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 iostream_withassign& operator= (ios&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // asocia streambuf con flujo y hace inicialización completa
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 iostream_withassign& operator= (streambuf *);
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Subsection

Fichero iostream.h
\layout Description


\size largest 
iostream.h
\size default 
 
\layout Standard

Declara los flujos básicos.
 Reemplaza al viejo fichero de cabecera 
\family typewriter 
stream.h
\family default 
.
 Incluye 
\family typewriter 
mem.h
\family default 
.
\layout Description

Clases:
\layout Quotation


\family typewriter 
ios
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 iostream
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 iostream_withassign
\layout Quotation


\family typewriter 
istream
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 istream_withassign
\protected_separator 

\protected_separator 

\protected_separator 
 ostream
\layout Quotation


\family typewriter 
ostream_withassign
\protected_separator 

\protected_separator 

\protected_separator 
 streambuf
\layout Description

Funciones:
\layout Quotation


\family typewriter 
allocate
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 bad
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 base
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 blen
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 cerr
\layout Quotation


\family typewriter 
cin
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 clear
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 cout
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 dbp
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 dec
\layout Quotation


\family typewriter 
do_sgetn
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 do_snextc
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 do_sputn
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 doallocate
\protected_separator 

\protected_separator 

\protected_separator 
 eback
\layout Quotation


\family typewriter 
ebuf
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 egptr
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 endl
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 ends
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 eof
\layout Quotation


\family typewriter 
epptr
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 fail
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 fill
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 flags
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 flush
\layout Quotation


\family typewriter 
gbump
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 gcount
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 get
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 getline
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 good
\layout Quotation


\family typewriter 
gptr
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 hex
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 ignore
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 in_avail
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 oct
\layout Quotation


\family typewriter 
out_waiting
\protected_separator 

\protected_separator 
 overflow
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 pbackfail
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 pbase
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 pbump
\layout Quotation


\family typewriter 
peek
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 precision
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 put
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 putback
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 read
\layout Quotation


\family typewriter 
sbumpc
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 seekg
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 seekoff
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 seekp
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 seekpos
\layout Quotation


\family typewriter 
setb
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 setbuf
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 setf
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 setg
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 setp
\layout Quotation


\family typewriter 
setstate
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 sgetc
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 sgetn
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 skip
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 snextc
\layout Quotation


\family typewriter 
sputbackc
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 sputc
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 sputn
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 stossc
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 sync
\layout Quotation


\family typewriter 
tellg
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 tellp
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 tie
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 unbuffered
\protected_separator 

\protected_separator 

\protected_separator 
 underflow
\layout Quotation


\family typewriter 
unsetf
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 width
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 write
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 ws
\layout Description

Constantes,
\protected_separator 

\series bold 
tipos
\series default 

\protected_separator 

\series bold 
de
\series default 

\protected_separator 

\series bold 
datos,
\series default 

\protected_separator 

\series bold 
y
\series default 

\protected_separator 

\series bold 
variables
\series default 

\protected_separator 

\series bold 
globales
\series default 
:
\layout Quotation


\family typewriter 
adjustfield (const)
\protected_separator 

\protected_separator 
 basefield (const)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 floatfield (const)
\layout Quotation


\family typewriter 
io_state (enum)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 open_mode (enum)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 seek_dir (enum)
\layout Quotation


\family typewriter 
streamoff (typedef)
\protected_separator 

\protected_separator 
 streampos (typedef)
\layout Description

Operadores
\protected_separator 
sobrecargados:
\layout Quotation


\family typewriter 
=
\protected_separator 

\protected_separator 

\protected_separator 
 >>
\protected_separator 

\protected_separator 

\protected_separator 
 <<
\layout Description

Contenido (abreviado):
\layout Quotation


\family typewriter 
// ...
\layout Quotation


\family typewriter 
#ifndef __IOSTREAM_H
\layout Quotation


\family typewriter 
#define __IOSTREAM_H
\layout Quotation


\family typewriter 
#if !defined( __MEM_H )
\layout Quotation


\family typewriter 
#include <mem.h>
\protected_separator 

\protected_separator 

\protected_separator 
 // obtiene memcpy y NULL
\layout Quotation


\family typewriter 
#endif
\layout Quotation


\family typewriter 
// ...
\layout Quotation


\family typewriter 
// Definición de EOF que debe coincidir con la que se hace en <stdio.h>
\layout Quotation


\family typewriter 
#define EOF (-1)
\layout Quotation


\family typewriter 
// extrae un carácter de int i, asegurando que zapeof(EOF) != EOF
\layout Quotation


\family typewriter 
#define zapeof(i) ((unsigned char)(i))
\layout Quotation


\family typewriter 
typedef long streampos;
\layout Quotation


\family typewriter 
typedef long streamoff;
\layout Quotation


\family typewriter 
class streambuf;
\layout Quotation


\family typewriter 
class ostream;
\layout Quotation


\family typewriter 
class ios
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class streambuf
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class istream : virtual public ios
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class ostream : virtual public ios
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class iostream : public istream, public ostream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class istream_withassign : public istream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class ostream_withassign : public ostream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class iostream_withassign : public iostream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
/*
\layout Quotation


\family typewriter 
* Los flujos predefinidos
\layout Quotation


\family typewriter 
*/
\layout Quotation


\family typewriter 
extern istream_withassign cin;
\layout Quotation


\family typewriter 
extern ostream_withassign cout;
\layout Quotation


\family typewriter 
extern ostream_withassign cerr;
\layout Quotation


\family typewriter 
extern ostream_withassign clog;
\layout Quotation


\family typewriter 
/*
\layout Quotation


\family typewriter 
* Manipuladores
\layout Quotation


\family typewriter 
*/
\layout Quotation


\family typewriter 
ostream& endl (ostream&);
\protected_separator 
 // inserta nueva línea y vuelca
\layout Quotation


\family typewriter 
ostream& ends (ostream&);
\protected_separator 
 // inserta nulo para terminar string
\layout Quotation


\family typewriter 
ostream& flush (ostream&); // vuelca el flujo
\layout Quotation


\family typewriter 
ios&
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 dec (ios&);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // pone base de conversión a decimal
\layout Quotation


\family typewriter 
ios&
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 hex (ios&);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // pone base de conversión a hexadecimal
\layout Quotation


\family typewriter 
ios&
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 oct (ios&);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // pone base de conversión a octal
\layout Quotation


\family typewriter 
istream& ws (istream&);
\protected_separator 

\protected_separator 

\protected_separator 
 // extrae caracteres de espacios blancos
\layout Quotation


\family typewriter 
#endif
\layout Description

Programa
\protected_separator 
ejemplo
\layout Quotation


\family typewriter 
// Ejemplo sobre manipuladores.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
inline ostream& may (ostream& out)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 return out.setf (ios::uppercase), out;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
inline ostream& dosendl (ostream& out)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 return out << endl << endl;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 const int num = 10;
\layout Quotation


\family typewriter 

\protected_separator 
 const char sp = ' ';
\layout Quotation


\family typewriter 

\protected_separator 
 cout << dec << 10 << sp << hex << num << sp << may << num << sp
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << oct << num << dosendl << flush;
\layout Quotation


\family typewriter 

\protected_separator 
 int x;
\layout Quotation


\family typewriter 

\protected_separator 
 const char *msj = "Introduce valor de x: ";
\layout Quotation


\family typewriter 

\protected_separator 
 cout << msj;
\layout Quotation


\family typewriter 

\protected_separator 
 cin >> ws >> x;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "El valor de x es: " << x << ends;
\layout Quotation


\family typewriter 
}
\layout Description

SALIDA:
\layout Enumerate

El primer 3 es introducido desde teclado y visualizado en pantalla.
\layout Enumerate

Los manipuladores 
\family typewriter 
endl
\family default 
, 
\family typewriter 
ends
\family default 
, 
\family typewriter 
flush
\family default 
, 
\family typewriter 
dec
\family default 
, 
\family typewriter 
hex
\family default 
, 
\family typewriter 
oct
\family default 
 y 
\family typewriter 
ws
\family default 
 están declarados en el fichero 
\family typewriter 
iostream.h
\family default 
.
 Los manipuladores 
\family typewriter 
may
\family default 
 y 
\family typewriter 
dosendl
\family default 
 son manipuladores definidos por el usuario.
 El manipulador ends es útil cuando la salida se dirige hacia un string
 en vez de a pantalla o a fichero.
\layout Subsection

Clase filebuf
\layout Description


\size largest 
filebuf
\layout Standard

Especializa 
\family typewriter 
streambuf
\family default 
 para manipular ficheros.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center 

\begin_inset Figure size 148 101
file 11.eps
width 3 25
height 3 12
flags 9

\end_inset 


\layout Standard

Declarada en: 
\family typewriter 
fstream.h
\layout Description


\size largest 
Constructores
\layout Standard

Crea un 
\family typewriter 
filebuf
\family default 
 que no es añadido a un fichero:
\layout Quotation


\family typewriter 
filebuf()
\layout Standard

Crea un filebuf añadido a un fichero vía un descriptor de fichero:
\layout Quotation


\family typewriter 
filebuf(int fd)
\layout Standard

Crea un 
\family typewriter 
filebuf
\family default 
 añadido a un fichero y usa el buffer de n caracteres especificado:
\layout Quotation


\family typewriter 
filebuf(int fd, char *, int n)
\layout Description

Funciones
\protected_separator 
miembros
\layout Quotation


\family typewriter 
attach
\protected_separator 

\protected_separator 

\protected_separator 
 close
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 fd
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 is_open
\protected_separator 

\protected_separator 
 open
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 seekoff
\protected_separator 

\protected_separator 
 setbuf
\layout Description

Definición
\layout Quotation


\family typewriter 
class filebuf : public streambuf
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 static const int openprot;
\protected_separator 
 // protección del fichero por defecto
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // constructores, destructor
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 filebuf ();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // crea un filebuf cerrado
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 filebuf (int);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // crea un filebuf añadido a fd
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 filebuf (int _f, char *, int); // igual, con buffer especificado
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 filebuf ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int is_open ();
\protected_separator 

\protected_separator 
 // está el fichero abierto
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int fd ();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // cuál es el descriptor del fichero
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // abre fichero nombrado con modo y protección, lo añade a este filebuf
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 filebuf * open (const char *, int, int = filebuf::openprot );
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 filebuf * close ();
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // vuelca y cierra fichero
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 filebuf * attach (int);
\protected_separator 
 // añade este filbuf al descriptor de fichero
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // abierto
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 /*
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 * Ejecutan las funciones de streambuf sobre un filebuf
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 * Los punteros de lectura y escritura son guardados juntos
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 */
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual int overflow (int = EOF);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual int underflow ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual int sync ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual streampos seekoff (streamoff, seek_dir, int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual streambuf * setbuf (char *, int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 protected:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Description


\size largest 
Descripción de los métodos
\layout Description


\size largest 
attach
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
4 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
0 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
filebuf
\family default 

\newline 
Añade este filebuf cerrado al descriptor de fichero abierto:
\newline 

\newline 

\family typewriter 

\protected_separator 
 filebuf* attach (int)
\family default 

\newline 

\family typewriter 
fstreambase
\family default 

\newline 
Conecta a un descriptor de fichero abierto:
\newline 

\newline 

\family typewriter 

\protected_separator 
 void attach (int)
\layout Description


\size largest 
close
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
4 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
0 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
filebuf
\family default 

\newline 
Vuelca y cierra el fichero.
 Devuelve 0 en caso de error:
\newline 

\newline 

\family typewriter 

\protected_separator 
 filebuf* close ()
\family default 

\newline 

\family typewriter 
fstreambase
\family default 

\newline 
Cierra el filebuf y fichero asociado:
\newline 

\newline 

\family typewriter 

\protected_separator 
 void close ()
\layout Description


\size largest 
fd
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
filebuf
\family default 

\newline 
Devuelve el descriptor de fichero o EOF:
\newline 

\newline 

\family typewriter 

\protected_separator 
 int fd ()
\layout Description


\size largest 
is_open
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
filebuf
\family default 

\newline 
Devuelve un valor distinto de cero si el fichero está abierto:
\newline 

\newline 

\family typewriter 

\protected_separator 
 int is_open()
\layout Description


\size largest 
open
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
7 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
filebuf
\family default 

\newline 
Abre el fichero dado y se conecta a él:
\newline 

\newline 

\family typewriter 

\protected_separator 
 filebuf* open(const char*, int mode,
\family default 
 
\family typewriter 
int prot = filebuf::openprot)
\family default 

\newline 

\family typewriter 
fstream
\family default 

\newline 
Abre un fichero para un fstream:
\newline 

\family typewriter 
fstreambase
\family default 

\newline 
Abre un fichero para un fstreambase:
\newline 

\family typewriter 
ifstream
\family default 

\newline 
Abre un fichero para un ifstream:
\newline 

\family typewriter 
ofstream
\family default 

\newline 
Abre un fichero para un ofstream:
\newline 

\newline 

\family typewriter 

\protected_separator 
 void open(const char*, int, int = filebuf::openprot)
\layout Description


\size largest 
seekoff
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
7 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
0 0 0 0
0 0 0 0
0 1 0 0
0 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""


\family typewriter 
filebuf 
\family default 

\newline 
Mueve el puntero de fichero relativo a la posición actual:
\newline 

\newline 

\family typewriter 

\protected_separator 
 virtual long seekoff (long, seek_dir, int)
\family default 

\newline 

\family typewriter 
streambuf
\family default 

\newline 
Mueve el puntero de lectura y/o escritura (el tercer argumento determina
 cuál o si son ambos)
\newline 

\newline 
relativo a la posición actual:
\newline 

\newline 

\family typewriter 

\protected_separator 
 virtual long seekoff (long, seek_dir,
\family default 
 
\family typewriter 
int = (ios::in | ios::out))
\family default 

\newline 

\family typewriter 
strstreambuf
\family default 

\newline 
Mueve el puntero relativo a la posición actual:
\newline 

\newline 

\family typewriter 

\protected_separator 
 virtual long seekoff (long, seek_dir, int)
\layout Description


\size largest 
setbuf
\layout Standard

Función miembro
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
6 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
0 0 0 0
0 1 0 0
0 0 0 0
0 1 0 0
8 1 0 "" ""
2 1 1 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 8 0 1 0 0 0 "" ""
0 2 0 1 0 0 0 "" ""


\family typewriter 
filebuf
\family default 

\newline 
Especifica el buffer a usar:
\newline 

\family typewriter 
strstreambuf
\family default 

\newline 

\family typewriter 

\protected_separator 
 virtual streambuf* setbuf (char*, int)
\family default 

\newline 

\family typewriter 
fstreambase
\family default 

\newline 
Usa un buffer especificado:
\newline 

\newline 

\family typewriter 

\protected_separator 
 void setbuf (char*, int)
\family default 

\newline 

\family typewriter 
streambuf
\family default 

\newline 
Conecta a un buffer dado:
\newline 

\newline 

\family typewriter 

\protected_separator 
 virtual streambuf* setbuf (signed char*, int)
\layout Description

Programa
\protected_separator 
ejemplo
\layout Quotation


\family typewriter 
// Ejemplo sobre la clase filebuf.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#include <fstream.h>
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 ofstream fich;
\layout Quotation


\family typewriter 

\protected_separator 
 fich.open ("PRUEBA.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "¿Está abierto?: " << (fich.rdbuf())->is_open() << endl
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << "Descriptor de fichero: " << (fich.rdbuf())->fd();
\layout Quotation


\family typewriter 

\protected_separator 
 fich.close ();
\layout Quotation


\family typewriter 
}
\layout Description

SALIDA:
\layout Enumerate

El número del descriptor de fichero es dependiente del sistema.
\layout Enumerate

La clase 
\family typewriter 
ofstream
\family default 
 la veremos un poco más adelante.
 En este ejemplo, el objeto 
\family typewriter 
fich
\family default 
 es un fichero de escritura.
 La clase 
\family typewriter 
filebuf
\family default 
 no se suele usar directamente sino a través de sus clases derivadas tal
 y como hemos hecho en este programa.
\layout Subsection

Clase fstreambase
\layout Description


\size largest 
fstreambase
\layout Standard

Proporciona operaciones comunes a los flujos de fichero.
\layout Standard


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 +----------+
\layout Standard


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 +-+ fstream
\protected_separator 
 |
\layout Standard


\family typewriter 
+-----+
\protected_separator 

\protected_separator 
 _______________--+ +==========+
\layout Standard


\family typewriter 
| ios +---_ fstreambase _----+ ifstream |
\layout Standard


\family typewriter 
+-----+
\protected_separator 

\protected_separator 
 _______________--+ +==========+
\layout Standard


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 +-+ ofstream |
\layout Standard


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 +----------+
\layout Standard

Declarada en: 
\family typewriter 
fstream.h
\layout Description


\size largest 
Constructores
\layout Standard

Crea un 
\family typewriter 
fstreambase
\family default 
 que no es añadido a un fichero:
\layout Quotation


\family typewriter 
fstreambase()
\layout Standard

Crea un 
\family typewriter 
fstreambase
\family default 
, abre un fichero, y lo conecta a él:
\layout Quotation


\family typewriter 
fstreambase(const char*, int, int = filebuf::openprot)
\layout Standard

Crea un 
\family typewriter 
fstreambase
\family default 
, lo conecta a un descriptor de fichero abierto:
\layout Quotation


\family typewriter 
fstreambase(int)
\layout Standard

Crea un fstreambase conectado a un fichero abierto, usa el buffer especializado:
\layout Quotation


\family typewriter 
fstreambase(int _f, char*, int)
\layout Description

Funciones
\protected_separator 
miembros
\layout Quotation


\family typewriter 
attach
\protected_separator 

\protected_separator 
 close
\protected_separator 

\protected_separator 

\protected_separator 
 open
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 rdbuf
\protected_separator 

\protected_separator 

\protected_separator 
 setbuf
\layout Description

Definición
\layout Quotation


\family typewriter 
class fstreambase : virtual public ios
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 fstreambase ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 fstreambase (const char *, int, int = filebuf::openprot);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 fstreambase (int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 fstreambase (int _f, char *, int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 fstreambase ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void open (const char *, int, int = filebuf::openprot);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void attach (int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void close ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void setbuf (char *, int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 filebuf * rdbuf ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 protected:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Description


\size largest 
Descripción de los métodos
\layout Description


\size largest 
attach
\layout Standard

Función miembro
\layout Standard


\family typewriter 
+-------------+-------------------------------------------------------------+
\layout Standard


\family typewriter 
| filebuf
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Añade este filebuf cerrado al descriptor de fichero abierto:|
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 filebuf* attach (int)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+-------------+-------------------------------------------------------------+
\layout Standard


\family typewriter 
| fstreambase | Conecta a un descriptor de fichero abierto:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 void attach (int)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+-------------+-------------------------------------------------------------+
\layout Description


\size largest 
close
\layout Standard

Función miembro
\layout Standard


\family typewriter 
+-------------+----------------------------------------------------------+
\layout Standard


\family typewriter 
| filebuf
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Vuelca y cierra el fichero.
 Devuelve 0 en caso de error: |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 filebuf* close ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+-------------+----------------------------------------------------------+
\layout Standard


\family typewriter 
| fstreambase | Cierra el filebuf y fichero asociado:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 void close ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+-------------+----------------------------------------------------------+
\layout Description


\size largest 
open
\layout Standard

Función miembro
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Standard


\family typewriter 
| filebuf
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Abre el fichero dado y se conecta a él:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 filebuf* open (const char*, int mode,
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int prot = filebuf::openprot)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Standard


\family typewriter 
| fstream
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Abre un fichero para un fstream:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| fstreambase | Abre un fichero para un fstreambase:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| ifstream
\protected_separator 

\protected_separator 

\protected_separator 
 | Abre un fichero para un ifstream:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| ofstream
\protected_separator 

\protected_separator 

\protected_separator 
 | Abre un fichero para un ofstream:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 void open (const char*, int, int = filebuf::openprot) |
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Description


\size largest 
rdbuf
\layout Standard

Función miembro
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Standard


\family typewriter 
| ios
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Devuelve un puntero al streambuf asignado a este flujo: |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 streambuf* rdbuf ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Standard


\family typewriter 
| fstream
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Devuelve el buffer usado:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| fstreambase |
\protected_separator 

\protected_separator 
 filebuf* rdbuf ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| ifstream
\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| ofstream
\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Description


\size largest 
setbuf
\layout Standard

Función miembro
\layout Standard


\family typewriter 
+--------------+-------------------------------------------------+
\layout Standard


\family typewriter 
| filebuf
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Especifica el buffer a usar:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| strstreambuf |
\protected_separator 

\protected_separator 
 virtual streambuf* setbuf (char*, int)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+--------------+-------------------------------------------------+
\layout Standard


\family typewriter 
| fstreambase
\protected_separator 
 | Usa un buffer especificado:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 void setbuf (char*, int)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+--------------+-------------------------------------------------+
\layout Standard


\family typewriter 
| streambuf
\protected_separator 

\protected_separator 

\protected_separator 
 | Conecta a un buffer dado:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 virtual streambuf* setbuf (signed char*, int) |
\layout Standard


\family typewriter 
+--------------+-------------------------------------------------+
\layout Description

Programa
\protected_separator 
ejemplo
\layout Quotation


\family typewriter 
// Ejemplo sobre la clase fstreambase.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#include <fstream.h>
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 ofstream fich;
\layout Quotation


\family typewriter 

\protected_separator 
 fich.open ("PRUEBA.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 cout << (fich.rdbuf () == fich.fstreambase::rdbuf ());
\layout Quotation


\family typewriter 

\protected_separator 
 fich.close ();
\layout Quotation


\family typewriter 
}
\layout Description

SALIDA:
\layout Enumerate

La clase 
\family typewriter 
fstreambase
\family default 
 es clase base de las clases 
\family typewriter 
ifstream
\family default 
, 
\family typewriter 
ofstream
\family default 
 y 
\family typewriter 
fstream
\family default 
.
 Esta clase base no se suele usar directamente sino que sirve simplemente
 como clase base de las tres clases mencionadas.
\layout Enumerate

La función 
\family typewriter 
ofstream::rdbuf()
\family default 
 está implementada como una función 
\family typewriter 
inline
\family default 
 que lo único que hace es realizar la llamada 
\family typewriter 
fstreambase::rdbuf()
\family default 
.
\layout Subsection

Clase ifstream
\layout Description


\size largest 
ifstream
\layout Standard

Proporciona operaciones de entrada sobre un 
\family typewriter 
filebuf
\family default 
.
\layout Standard


\family typewriter 
+-------------+
\layout Standard


\family typewriter 
| fstreambase +--+
\protected_separator 

\protected_separator 
 ____________
\protected_separator 

\protected_separator 

\protected_separator 
 +-----------+
\layout Standard


\family typewriter 
+=============+
\protected_separator 
 +---_ ifstream _----+ <ninguna> |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 
 istream
\protected_separator 

\protected_separator 
 +--+
\protected_separator 

\protected_separator 
 ____________
\protected_separator 

\protected_separator 

\protected_separator 
 +-----------+
\layout Standard


\family typewriter 
+-------------+
\layout Standard

Declarada en: 
\family typewriter 
fstream.h
\layout Description


\size largest 
Constructores
\layout Standard

Crea un 
\family typewriter 
ifstream
\family default 
 que no es añadido a un fichero:
\layout Quotation


\family typewriter 
ifstream()
\layout Standard

Crea un 
\family typewriter 
ifstream
\family default 
, abre un fichero, y lo conecta a él: 
\layout Quotation


\family typewriter 
ifstream(const char*, int, int = filebuf::openprot)
\layout Standard

Crea un ifstream, lo conecta a un descriptor de fichero abierto:
\layout Quotation


\family typewriter 
ifstream(int)
\layout Standard

Crea un ifstream, conectado a un fichero abierto y usa un buffer especificado:
\layout Quotation


\family typewriter 
ifstream(int fd, char*, int)
\layout Description

Funciones
\protected_separator 
miembros
\layout Quotation


\family typewriter 
open
\protected_separator 

\protected_separator 

\protected_separator 
 rdbuf
\layout Description

Definición
\layout Quotation


\family typewriter 
class ifstream : public fstreambase, public istream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ifstream();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ifstream(const char *, int = ios::in, int = filebuf::openprot);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ifstream(int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ifstream(int _f, char *, int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ifstream();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 filebuf * rdbuf();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void open(const char *, int = ios::in, int = filebuf::openprot);
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Description


\size largest 
Descripción de los métodos
\layout Description


\size largest 
open
\layout Standard

Función miembro
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Standard


\family typewriter 
| filebuf
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Abre el fichero dado y se conecta a él:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 filebuf* open (const char*, int mode,
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int prot = filebuf::openprot)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Standard


\family typewriter 
| fstream
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Abre un fichero para un fstream:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| fstreambase | Abre un fichero para un fstreambase:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| ifstream
\protected_separator 

\protected_separator 

\protected_separator 
 | Abre un fichero para un ifstream:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| ofstream
\protected_separator 

\protected_separator 

\protected_separator 
 | Abre un fichero para un ofstream:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 void open (const char*, int, int = filebuf::openprot) |
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Description


\size largest 
rdbuf
\layout Standard

Función miembro
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Standard


\family typewriter 
| ios
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Devuelve un puntero al streambuf asignado a este flujo: |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 streambuf* rdbuf ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Standard


\family typewriter 
| fstream
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Devuelve el buffer usado:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| fstreambase |
\protected_separator 

\protected_separator 
 filebuf* rdbuf ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| ifstream
\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| ofstream
\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Description

Programa
\protected_separator 
ejemplo
\layout Quotation


\family typewriter 
// Ejemplo sobre la clase ifstream.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#include <fstream.h>
\layout Quotation


\family typewriter 
inline void error_apertura (const char *nomfich)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "No se puede abrir el fichero " << nomfich << endl;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
inline void error_cierre (const char *nomfich)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "No se puede cerrar el fichero " << nomfich << endl;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 // APERTURAS DE FICHEROS DE TEXTO
\layout Quotation


\family typewriter 

\protected_separator 
 // Forma 1 de abrir fichero:
\layout Quotation


\family typewriter 

\protected_separator 
 ifstream f1;
\layout Quotation


\family typewriter 

\protected_separator 
 f1.open ("FICH1.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 // Forma 2 de abrir fichero:
\layout Quotation


\family typewriter 

\protected_separator 
 ifstream f2 ("FICH2.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 // Forma 1 de comprobar apertura:
\layout Quotation


\family typewriter 

\protected_separator 
 if (f1.fail ()) // o también se puede hacer: if (! f1.good ())
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error_apertura ("FICH1.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 // Forma 2 de comprobar apertura:
\layout Quotation


\family typewriter 

\protected_separator 
 if (! f2)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error_apertura ("FICH2.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 // APERTURA DE FICHERO BINARIO
\layout Quotation


\family typewriter 

\protected_separator 
 ifstream f3 ("FICH3.TXT", ios::binary);
\layout Quotation


\family typewriter 

\protected_separator 
 if (! f3)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error_apertura ("FICH3.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 // CIERRE DE LOS FICHEROS ABIERTOS
\layout Quotation


\family typewriter 

\protected_separator 
 f1.close ();
\layout Quotation


\family typewriter 

\protected_separator 
 if (! f1)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error_cierre ("FICH1.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 f2.close ();
\layout Quotation


\family typewriter 

\protected_separator 
 if (! f2)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error_cierre ("FICH2.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 f3.close ();
\layout Quotation


\family typewriter 

\protected_separator 
 if (! f3)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error_cierre ("FICH3.TXT");
\layout Quotation


\family typewriter 
}
\layout Description

SALIDA:
\layout Enumerate

Los errores se han producido al ejecutar este programa porque ninguno de
 los tres ficheros de lectura (
\family typewriter 
FICH1.TXT
\family default 
, 
\family typewriter 
FICH2.TXT
\family default 
 y 
\family typewriter 
FICH3.TXT
\family default 
) existen en disco.
\layout Enumerate

Después de cada operación que se haga sobre un fichero se puede hacer la
 comprobación de operación correcta.
 Ejemplo:
\layout Quotation


\family typewriter 
ch = f1.get ();
\layout Quotation


\family typewriter 
if (! f1)
\layout Quotation


\family typewriter 

\protected_separator 
 error ();
\layout Quote

Todas las funciones de la clase 
\family typewriter 
istream
\family default 
 (y de sus clases bases como 
\family typewriter 
ios
\family default 
) están a disposición de la clase 
\family typewriter 
ifstream
\family default 
.
 De esta forma, podemos leer del fichero utilizando las funciones como 
\family typewriter 
get()
\family default 
, 
\family typewriter 
getline()
\family default 
, 
\family typewriter 
read()
\family default 
 o el operador sobrecargado 
\family typewriter 
>>
\family default 
.
 Aunque el usuario no tiene porqué saber cómo están implementadas las funciones
 de una clase sino solamente su interface, diremos que el operador 
\family typewriter 
!
\family default 
 está sobrecargado en la clase ios de la siguiente forma:
\layout Quotation


\family typewriter 
inline int ios::operator! () { return fail (); }
\layout Quote

3.
 En la clase 
\family typewriter 
ifstream
\family default 
, si no se especifica el segundo parámetro de la función 
\family typewriter 
open()
\family default 
 o bien del constructor, éste es por defecto: 
\family typewriter 
ios::in
\family default 
.
\layout Quote

4.
 Todo lo dicho en estas observaciones también se puede aplicar a la clase
 
\family typewriter 
ofstream
\family default 
 que veremos a continuación, cambiando las funciones de lectura por funciones
 de escritura y cambiando el modo de operación por defecto 
\family typewriter 
ios::in
\family default 
 al modo 
\family typewriter 
ios::out
\family default 
.
\layout Subsection

Clase ofstream
\layout Description


\size largest 
ofstream
\layout Standard

Proporciona operaciones de salida sobre un 
\family typewriter 
filebuf
\family default 
.
\layout Standard


\family typewriter 
+-------------+
\layout Standard


\family typewriter 
| fstreambase +--+
\protected_separator 

\protected_separator 
 ____________
\protected_separator 

\protected_separator 
 +-----------+
\layout Standard


\family typewriter 
+=============+
\protected_separator 
 +---_ ofstream _---+ <ninguna> |
\layout Standard


\family typewriter 
| ostream
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 +--+
\protected_separator 

\protected_separator 
 ____________
\protected_separator 

\protected_separator 
 +-----------+
\layout Standard


\family typewriter 
+-------------+
\layout Standard

Declarada en: 
\family typewriter 
fstream.h
\layout Description


\size largest 
Constructores
\layout Standard

Crea un 
\family typewriter 
ofstream
\family default 
 que no es añadido a un fichero:
\layout Quotation


\family typewriter 
ofstream()
\layout Standard

Crea un 
\family typewriter 
ofstream
\family default 
, abre un fichero, y lo conecta a él:
\layout Quotation


\family typewriter 
ofstream(const char*, int, int = filebuf::openprot)
\layout Standard

Crea un 
\family typewriter 
ifstream
\family default 
, lo conecta a un descriptor de fichero abierto:
\layout Quotation


\family typewriter 
ofstream(int)
\layout Standard

Crea un ifstream, conectado a un fichero abierto y usa un buffer especificado:
\layout Quotation


\family typewriter 
ofstream(int fd, char*, int)
\layout Description

Funciones
\protected_separator 
miembros
\layout Quotation


\family typewriter 
open
\protected_separator 

\protected_separator 

\protected_separator 
 rdbuf
\layout Description

Definición
\layout Quotation


\family typewriter 
class ofstream : public fstreambase, public ostream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ofstream();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ofstream(const char *, int = ios::out, int = filebuf::openprot);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ofstream(int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ofstream(int _f, char *, int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ofstream();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 filebuf * rdbuf();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void open(const char *, int = ios::out, int = filebuf::openprot);
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Description


\size largest 
Descripción de los métodos
\layout Description


\size largest 
open
\layout Standard

Función miembro
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Standard


\family typewriter 
| filebuf
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Abre el fichero dado y se conecta a él:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 filebuf* open (const char*, int mode,
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int prot = filebuf::openprot)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Standard


\family typewriter 
| fstream
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Abre un fichero para un fstream:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| fstreambase | Abre un fichero para un fstreambase:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| ifstream
\protected_separator 

\protected_separator 

\protected_separator 
 | Abre un fichero para un ifstream:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| ofstream
\protected_separator 

\protected_separator 

\protected_separator 
 | Abre un fichero para un ofstream:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 void open (const char*, int, int = filebuf::openprot) |
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Description


\size largest 
rdbuf
\layout Standard

Función miembro
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Standard


\family typewriter 
| ios
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Devuelve un puntero al streambuf asignado a este flujo: |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 streambuf* rdbuf ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Standard


\family typewriter 
| fstream
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Devuelve el buffer usado:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| fstreambase |
\protected_separator 

\protected_separator 
 filebuf* rdbuf ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| ifstream
\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| ofstream
\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Description

Programa
\protected_separator 
ejemplo
\layout Quotation


\family typewriter 
// Ejemplo sobre la clase ofstream.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#include <fstream.h>
\layout Quotation


\family typewriter 
inline void error_apertura (const char *nomfich)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "No se puede abrir el fichero " << nomfich << endl;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 ofstream f1 ("FICH1.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 if (! f1)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error_apertura ("FICH1.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 ofstream f2 ("FICH2.TXT", ios::binary);
\layout Quotation


\family typewriter 

\protected_separator 
 if (! f2)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error_apertura ("FICH2.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 ofstream f3 ("FICH3.TXT", ios::app);
\layout Quotation


\family typewriter 

\protected_separator 
 if (! f3)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error_apertura ("FICH3.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 ofstream f4 ("FICH4.TXT", ios::app | ios::binary);
\layout Quotation


\family typewriter 

\protected_separator 
 if (! f4)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error_apertura ("FICH4.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 ofstream f5 ("FICH5.TXT", ios::nocreate);
\layout Quotation


\family typewriter 

\protected_separator 
 if (! f5)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error_apertura ("FICH5.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 ofstream f6 ("FICH6.TXT", ios::noreplace);
\layout Quotation


\family typewriter 

\protected_separator 
 if (! f6)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error_apertura ("FICH6.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 ofstream f7 ("FICH7.TXT", ios::nocreate | ios::noreplace);
\layout Quotation


\family typewriter 

\protected_separator 
 if (! f7)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error_apertura ("FICH7.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 ofstream f8 ("FICH8.TXT", ios::ate);
\layout Quotation


\family typewriter 

\protected_separator 
 if (! f8)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error_apertura ("FICH8.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 ofstream f9 ("FICH9.TXT", ios::trunc);
\layout Quotation


\family typewriter 

\protected_separator 
 if (! f9)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error_apertura ("FICH9.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 f1.close();
\layout Quotation


\family typewriter 

\protected_separator 
 f2.close();
\layout Quotation


\family typewriter 

\protected_separator 
 f3.close();
\layout Quotation


\family typewriter 

\protected_separator 
 f4.close();
\layout Quotation


\family typewriter 

\protected_separator 
 f5.close();
\layout Quotation


\family typewriter 

\protected_separator 
 f6.close();
\layout Quotation


\family typewriter 

\protected_separator 
 f7.close();
\layout Quotation


\family typewriter 

\protected_separator 
 f8.close();
\layout Quotation


\family typewriter 

\protected_separator 
 f9.close();
\layout Quotation


\family typewriter 
}
\layout Description

SALIDA:
\layout Enumerate

Se ha producido error de apertura en 
\family typewriter 
FICH5.TXT
\family default 
 porque éste no existe en el disco.
 Sin embargo, con el fichero 
\family typewriter 
FICH7.TXT
\family default 
 siempre se producirá un error de apertura: si existe el fichero, hay error
 debido a 
\family typewriter 
ios::noreplace
\family default 
, y si no existe el fichero, hay error debido a 
\family typewriter 
ios::nocreate
\family default 
.
 Por defecto, el fichero es abierto con modo de operación 
\family typewriter 
ios::out
\family default 
, esto quiere decir, que tanto exista como no exista el fichero, se crea
 uno nuevo; con los modos de operación se puede modificar esta situación.
 Lo mismo ocurre con el modo texto que es el que está por defecto; para
 trabajar con ficheros binarios, es necesario el indicador 
\family typewriter 
ios::binary
\family default 
.
 Con el modo 
\family typewriter 
ios::app
\family default 
 las escrituras en el fichero siempre se hacen al final de éste; con el
 modo ios::ate se pueden hacer en cualquier lugar usando el método 
\family typewriter 
seekp()
\family default 
.
 Si se abre el fichero con el modo 
\family typewriter 
ios::trunc
\family default 
 se descarta el contenido actual del fichero si éste existe, o se crea un
 fichero nuevo si no existe.
\layout Enumerate

Podemos escribir en los ficheros abiertos anteriormente haciendo, por ejemplo:
\layout Quotation


\family typewriter 
f1 << 'x';
\layout Quote

o utilizando los métodos de escritura tales como 
\family typewriter 
write()
\family default 
 o 
\family typewriter 
put()
\family default 
.
 En resumen, podemos utilizar todas las funciones públicas de la clase 
\family typewriter 
ostream
\family default 
, y por lo tanto, también de la clase ios.
 La otra clase base de 
\family typewriter 
ostream
\family default 
 es 
\family typewriter 
fstreambase
\family default 
.
\layout Subsection

Clase fstream
\layout Description


\size largest 
fstream
\layout Standard

Proporciona entrada y salida simultánea sobre un 
\family typewriter 
filebuf
\family default 
.
\layout Standard


\family typewriter 
+-------------+
\layout Standard


\family typewriter 
| fstreambase +--+
\protected_separator 

\protected_separator 
 ___________
\protected_separator 

\protected_separator 
 +-----------+
\layout Standard


\family typewriter 
+=============+
\protected_separator 
 +---_ fstream _---+ <ninguna> |
\layout Standard


\family typewriter 
|
\protected_separator 
 iostream
\protected_separator 

\protected_separator 
 +--+
\protected_separator 

\protected_separator 
 ___________
\protected_separator 

\protected_separator 
 +-----------+
\layout Standard


\family typewriter 
+-------------+
\layout Standard

Declarada en: 
\family typewriter 
fstream.h
\layout Description


\size largest 
Constructores
\layout Standard

Crea un 
\family typewriter 
fstream
\family default 
 que no es añadido a un fichero:
\layout Quotation


\family typewriter 
fstream()
\layout Standard

Crea un 
\family typewriter 
fstream
\family default 
, abre un fichero, y lo conecta a él:
\layout Quotation


\family typewriter 
fstream(const char*, int, int = filebuf::openprot)
\layout Standard

Crea un 
\family typewriter 
fstream
\family default 
, lo conecta a un descriptor de fichero abierto:
\layout Quotation


\family typewriter 
fstream(int)
\layout Standard

Crea un 
\family typewriter 
fstream
\family default 
, conectado a un fichero abierto y usa un buffer especificado:
\layout Quotation


\family typewriter 
fstream(int _f, char*, int)
\layout Description

Funciones
\protected_separator 
miembros
\layout Quotation


\family typewriter 
open
\protected_separator 

\protected_separator 

\protected_separator 
 rdbuf
\layout Description

Definición
\layout Quotation


\family typewriter 
class fstream : public fstreambase, public iostream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 fstream();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 fstream(const char *, int, int = filebuf::openprot);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 fstream(int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 fstream(int _f, char *, int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 fstream();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 filebuf * rdbuf();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void open(const char *, int, int = filebuf::openprot);
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Description


\size largest 
Descripción de los métodos
\layout Description


\size largest 
open
\layout Standard

Función miembro
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Standard


\family typewriter 
| filebuf
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Abre el fichero dado y se conecta a él:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 filebuf* open (const char*, int mode,
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int prot = filebuf::openprot)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Standard


\family typewriter 
| fstream
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Abre un fichero para un fstream:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| fstreambase | Abre un fichero para un fstreambase:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| ifstream
\protected_separator 

\protected_separator 

\protected_separator 
 | Abre un fichero para un ifstream:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| ofstream
\protected_separator 

\protected_separator 

\protected_separator 
 | Abre un fichero para un ofstream:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 void open (const char*, int, int = filebuf::openprot) |
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Description


\size largest 
rdbuf
\layout Standard

Función miembro
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Standard


\family typewriter 
| ios
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Devuelve un puntero al streambuf asignado a este flujo: |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 streambuf* rdbuf ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Standard


\family typewriter 
| fstream
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Devuelve el buffer usado:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| fstreambase |
\protected_separator 

\protected_separator 
 filebuf* rdbuf ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| ifstream
\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| ofstream
\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+-------------+---------------------------------------------------------+
\layout Description

Programa
\protected_separator 
ejemplo
\layout Quotation


\family typewriter 
// Ejemplo sobre la clase fstream.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#include <fstream.h>
\layout Quotation


\family typewriter 
inline void error_apertura (const char *nomfich)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "No se puede abrir el fichero " << nomfich << endl;
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 fstream f ("FICH.TXT", ios::in | ios::out);
\layout Quotation


\family typewriter 

\protected_separator 
 if (! f)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error_apertura ("FICH.TXT");
\layout Quotation


\family typewriter 

\protected_separator 
 f.close ();
\layout Quotation


\family typewriter 
}
\layout Description

SALIDA:
\layout Enumerate

Este programa no escribe nada porque no se produce error de apertura.
\layout Enumerate

La clase fstream se suele utilizar para trabajar con ficheros de lectura
 y escritura.
\layout Enumerate

Por supuesto, se pueden añadir todos los indicadores de modos de operación
 que se deseen, tales como 
\family typewriter 
ios::nocreate
\family default 
 para que la operación de apertura falle si el fichero no existe, o ios::binary
 para abrir un fichero binario puesto que por defecto se abre el fichero
 en modo texto, o 
\family typewriter 
ios::noreplace
\family default 
 para que la operación de apertura falle si el fichero ya existe, etc.
\layout Subsection

Fichero fstream.h
\layout Description


\size largest 
fstream.h
\layout Standard

Declara las clases de flujos de C++ que soportan entrada y salida de ficheros.
 Incluye 
\family typewriter 
iostream.h
\family default 
.
\layout Description

Clases
\layout Quotation


\family typewriter 
filebuf
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 fstream
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 fstreambase
\protected_separator 

\protected_separator 

\protected_separator 
 ifstream
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 ofstream
\layout Description


\size largest 
Constantes,
\protected_separator 
tipos
\protected_separator 
de
\protected_separator 
datos,
\protected_separator 
y
\protected_separator 
variables
\protected_separator 
globales
\layout Description


\size largest 
_FSTREAM_H_
\layout Description

Contenido (abreviado):
\layout Quotation


\family typewriter 
#ifndef __FSTREAM_H
\layout Quotation


\family typewriter 
#define __FSTREAM_H
\layout Quotation


\family typewriter 
#if !defined( __IOSTREAM_H )
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#endif
\layout Quotation


\family typewriter 
class filebuf : public streambuf
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class fstreambase : virtual public ios
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class ifstream : public fstreambase, public istream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class ofstream : public fstreambase, public ostream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class fstream : public fstreambase, public iostream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
#endif
\layout Description

Programa
\protected_separator 
ejemplo
\layout Standard

En el segundo ejemplo que se encuentra en la tarea de ejemplos de esta lección
 se encuentra un programa bastante instructivo que hace uso de las clases
 
\family typewriter 
ifstream
\family default 
 y 
\family typewriter 
ofstream
\family default 
: programa que copia un fichero en otro sitio del disco.
\layout Subsection

Clase strstreambuf
\layout Description


\size largest 
strstreambuf
\layout Standard

Especializa 
\family typewriter 
streambuf
\family default 
 para formatos en memoria.
\layout Standard


\family typewriter 
+-----------+
\protected_separator 

\protected_separator 
 ________________
\protected_separator 

\protected_separator 
 +-----------+
\layout Standard


\family typewriter 
| streambuf +---_ strstreambuf _---+ <ninguna> |
\layout Standard


\family typewriter 
+-----------+
\protected_separator 

\protected_separator 
 ________________
\protected_separator 

\protected_separator 
 +-----------+
\layout Standard

Declarada en: 
\family typewriter 
strstrea.h
\layout Description


\size largest 
Constructores
\layout Standard

Crea un 
\family typewriter 
strstreambuf
\family default 
 dinámico:
\layout Quotation


\family typewriter 
strstreambuf()
\layout Standard

Será asignada memoria dinámicamente conforme sea necesaria.
 Crea un buffer dinámico con funciones de asignación y liberación especificadas.
\layout Quotation


\family typewriter 
strstreambuf(void * (*)(long), void * (*)(void *))
\layout Standard

Crea un 
\family typewriter 
strstreambuf
\family default 
 dinámico, inicialmente se asigna un buffer de n bytes como mínimo:
\layout Quotation


\family typewriter 
strstreambuf(int n)
\layout Standard

Crea un strstreambuf estático con un buffer especificado:
\layout Quotation


\family typewriter 
strstreambuf(char *, int, char *end)
\layout Standard

Si en no es nulo, él delimita el buffer.
\layout Description

Funciones
\protected_separator 
miembros
\layout Quotation


\family typewriter 
freeze
\protected_separator 

\protected_separator 

\protected_separator 
 str
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 setbuf
\protected_separator 

\protected_separator 

\protected_separator 
 seekoff
\layout Description

Definición
\layout Quotation


\family typewriter 
class strstreambuf : public streambuf
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 strstreambuf ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 strstreambuf (int n);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 strstreambuf (void * (*a) (long), void (*f) (void *));
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 strstreambuf (signed char * _s, int, signed char * _strt = 0);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 strstreambuf (unsigned char * _s, int, unsigned char * _strt = 0);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 strstreambuf ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 void freeze (int = 1);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 char * str ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual int doallocate ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual int overflow (int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual int underflow ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual streambuf * setbuf (char *, int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 virtual streampos seekoff (streamoff, seek_dir, int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Description


\size largest 
Descripción de los métodos
\layout Description


\size largest 
freeze
\layout Standard

Función miembro
\layout Standard


\family typewriter 
+--------------+------------------------------------------------------------+
\layout Standard


\family typewriter 
| strstreambuf | Si el parámetro de entrada es distinto de cero, no permite
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | almacenar caracteres en el buffer; realiza la operación
\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | contraria pasando un cero:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 void freeze (int = 1)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+--------------+------------------------------------------------------------+
\layout Description


\size largest 
str
\layout Standard

Función miembro
\layout Standard


\family typewriter 
+--------------+------------------------------------------------------+
\layout Standard


\family typewriter 
| ostrstream
\protected_separator 

\protected_separator 
 | Devuelve y congela (freeze) el buffer:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| strstream
\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 char *str ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Debes liberar el buffer si es dinámico.
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+--------------+------------------------------------------------------+
\layout Standard


\family typewriter 
| strstreambuf | Devuelve un puntero al buffer y lo congela (freeze): |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 char *str ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+--------------+------------------------------------------------------+
\layout Description


\size largest 
setbuf
\layout Standard

Función miembro
\layout Standard


\family typewriter 
+--------------+-------------------------------------------------+
\layout Standard


\family typewriter 
| filebuf
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Especifica el buffer a usar:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| strstreambuf |
\protected_separator 

\protected_separator 
 virtual streambuf* setbuf (char*, int)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+--------------+-------------------------------------------------+
\layout Standard


\family typewriter 
| fstreambase
\protected_separator 
 | Usa un buffer especificado:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 void setbuf (char*, int)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+--------------+-------------------------------------------------+
\layout Standard


\family typewriter 
| streambuf
\protected_separator 

\protected_separator 

\protected_separator 
 | Conecta a un buffer dado:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 virtual streambuf* setbuf (signed char*, int) |
\layout Standard


\family typewriter 
+--------------+-------------------------------------------------+
\layout Description


\size largest 
seekoff
\layout Standard

Función miembro
\layout Standard


\family typewriter 
+--------------+------------------------------------------------------------+
\layout Standard


\family typewriter 
| filebuf
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Mueve el puntero de fichero relativo a la posición actual: |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 virtual long seekoff (long, seek_dir, int)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+--------------+------------------------------------------------------------+
\layout Standard


\family typewriter 
| streambuf
\protected_separator 

\protected_separator 

\protected_separator 
 | Mueve el puntero de lectura y/o escritura (el tercer
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | argumento determina cuál de los dos o ambos) relativo
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | a la posición actual:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 virtual long seekoff (long, seek_dir,
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 int = (ios::in | ios::out))
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+--------------+------------------------------------------------------------+
\layout Standard


\family typewriter 
| strstreambuf | Mueve el puntero relativo a la posición actual:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 virtual long seekoff(long, seek_dir, int)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+--------------+------------------------------------------------------------+
\layout Description

Programa
\protected_separator 
ejemplo
\layout Quotation


\family typewriter 
// Ejemplo sobre la clase strstreambuf.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#include <strstream.h>
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 const int tam = 100;
\layout Quotation


\family typewriter 

\protected_separator 
 char buf[tam];
\layout Quotation


\family typewriter 

\protected_separator 
 ostrstream s (buf, tam);
\layout Quotation


\family typewriter 

\protected_separator 
 s << "abc" << ends;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << buf << ' '<< (s.rdbuf())->str();
\layout Quotation


\family typewriter 
}
\layout Description

SALIDA:
\layout Enumerate

La clase 
\family typewriter 
ostrstream
\family default 
 se explicará un poco más adelante pero era necesario utilizarla aquí puesto
 que la clase 
\family typewriter 
strstreambuf
\family default 
 no se suele utilizar directamente.
\layout Enumerate

El método 
\family typewriter 
str()
\family default 
 que se ejecuta es el de la clase 
\family typewriter 
strstreambuf
\family default 
.
 Como se verá más adelante, este método lo posee la clase 
\family typewriter 
ostrstream
\family default 
, con lo cual se podía haber hecho directamente: 
\family typewriter 
s.str()
\family default 
.
 Aunque la forma más fácil de acceder al buffer es utilizando directamente
 el mismo buffer si se dispone de él como es éste el caso: 
\family typewriter 
buf
\family default 
.
\layout Enumerate

El manipulador ends es necesario, ya que si no se hace, no hay carácter
 nulo en 
\family typewriter 
buf
\family default 
 que delimite el final de la cadena de caracteres.
 
\layout Subsection

Clase strstreambase
\layout Description


\size largest 
strstreambase
\layout Standard

Especializa ios para flujos de strings.
\layout Standard


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 +------------+
\layout Standard


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 +-+ istrstream |
\layout Standard


\family typewriter 
+-----+
\protected_separator 

\protected_separator 
 _________________
\protected_separator 
 | +============+
\layout Standard


\family typewriter 
| ios +---_ strstreambase _--+-+ ostrstream |
\layout Standard


\family typewriter 
+-----+
\protected_separator 

\protected_separator 
 _________________
\protected_separator 
 | +============+
\layout Standard


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 +-+ strstream
\protected_separator 
 |
\layout Standard


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 +------------+
\layout Standard

Declarada en: 
\family typewriter 
strstrea.h
\layout Description


\size largest 
Constructores
\layout Standard

Crea un 
\family typewriter 
strstreambase
\family default 
 vacío:
\layout Quotation


\family typewriter 
strstreambase()
\layout Standard

Crea un 
\family typewriter 
strstreambase
\family default 
 con un buffer y posición de comienzo especificados:
\layout Quotation


\family typewriter 
strstreambase(const char*, int, char *start)
\layout Description

Funciones
\protected_separator 
miembros
\layout Standard

Ninguna (usa ios)
\layout Description

Definición
\layout Quotation


\family typewriter 
class strstreambase : public virtual ios
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 strstreambuf * rdbuf ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 protected:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 strstreambase (char *, int, char *);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 strstreambase ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 strstreambase ();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 strstreambuf buf;
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Description

Programa
\protected_separator 
ejemplo
\layout Quotation


\family typewriter 
// Ejemplo sobre la clase strstreambase.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#include <strstream.h>
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 const int tam = 100;
\layout Quotation


\family typewriter 

\protected_separator 
 char buf[tam];
\layout Quotation


\family typewriter 

\protected_separator 
 ostrstream s (buf, tam);
\layout Quotation


\family typewriter 

\protected_separator 
 s << "abc" << ends;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << buf << ' '<< (s.strstreambase::rdbuf())->str();
\layout Quotation


\family typewriter 
}
\layout Description

SALIDA:
\layout Enumerate

La clase ostrstream se explicará un poco más adelante pero era necesario
 utilizarla aquí puesto que la clase strstreambase no se suele utilizar
 directamente sino como clase base de las clases 
\family typewriter 
istrstream
\family default 
, 
\family typewriter 
ostrstream
\family default 
 y 
\family typewriter 
strstream
\family default 
.
\layout Enumerate

El método 
\family typewriter 
rdbuf()
\family default 
 que se ejecuta es el de la clase 
\family typewriter 
strstreambase
\family default 
.
 Como se verá más adelante, este método lo posee la clase 
\family typewriter 
ostrstream
\family default 
, con lo cual se podía haber hecho directamente: 
\family typewriter 
s.rdbuf()
\family default 
.
\layout Subsection

Clase istrstream
\layout Description


\size largest 
istrstream
\layout Standard

Proporciona operaciones de entrada sobre un 
\family typewriter 
strstreambuf
\family default 
.
\layout Standard


\family typewriter 
+---------------+
\layout Standard


\family typewriter 
| strstreambase +--+
\protected_separator 

\protected_separator 
 ______________
\protected_separator 

\protected_separator 
 +-----------+
\layout Standard


\family typewriter 
+===============+
\protected_separator 
 +---_ istrstream _---+ <ninguna> |
\layout Standard


\family typewriter 
| istream
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 +--+
\protected_separator 

\protected_separator 
 ______________
\protected_separator 

\protected_separator 
 +-----------+
\layout Standard


\family typewriter 
+---------------+
\layout Standard

Declarada en: 
\family typewriter 
strstrea.h
\layout Description


\size largest 
Constructores
\layout Standard

Crea un 
\family typewriter 
istrstream
\family default 
 con un string especificado (el carácter nulo nunca se extrae):
\layout Quotation


\family typewriter 
istrstream(const char *)
\layout Standard

Crea un 
\family typewriter 
istrstream
\family default 
 usando n bytes de un string especificado:
\layout Quotation


\family typewriter 
istrstream(const char *, int n)
\layout Description

Funciones
\protected_separator 
miembros
\layout Standard

Ninguna
\layout Description

Definición
\layout Quotation


\family typewriter 
class istrstream : public strstreambase, public istream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istrstream (char *);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istrstream (char *, int);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 istrstream ();
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Description

Programa
\protected_separator 
ejemplo
\layout Quotation


\family typewriter 
// Ejemplo sobre la clase istrstream.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#include <strstream.h>
\layout Quotation


\family typewriter 
#include <stdlib.h>
\layout Quotation


\family typewriter 
inline void error (const char *nomclase)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 cerr << "Error en clase " << nomclase;
\layout Quotation


\family typewriter 

\protected_separator 
 exit (1);
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 char *buf = "Ejemplo de la clase istrstream.";
\layout Quotation


\family typewriter 

\protected_separator 
 istrstream s1 (buf);
\layout Quotation


\family typewriter 

\protected_separator 
 if (! s1)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error ("s1");
\layout Quotation


\family typewriter 

\protected_separator 
 istrstream s2 (buf, 5);
\layout Quotation


\family typewriter 

\protected_separator 
 if (! s2)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error ("s2");
\layout Quotation


\family typewriter 

\protected_separator 
 char ch, str[20];
\layout Quotation


\family typewriter 

\protected_separator 
 s1 >> ch >> str;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << ch << str << endl;
\layout Quotation


\family typewriter 

\protected_separator 
 s2 >> ch >> str;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << ch << str << endl;
\layout Quotation


\family typewriter 
}
\layout Description

SALIDA:
\layout Enumerate

Con la clase 
\family typewriter 
istrstream
\family default 
 se trabaja de una forma similar que con la clase 
\family typewriter 
ifstream
\family default 
, con la diferencia de que en 
\family typewriter 
istrstream
\family default 
 se lee de un string y en 
\family typewriter 
ifstream
\family default 
 se lee de un fichero.
\layout Subsection

Clase ostrstream
\layout Description


\size largest 
ostrstream
\layout Standard

Proporciona operaciones de salida sobre un 
\family typewriter 
strstreambuf
\family default 
.
\layout Standard


\family typewriter 
+---------------+
\layout Standard


\family typewriter 
| strstreambase +--+
\protected_separator 

\protected_separator 
 ______________
\protected_separator 

\protected_separator 
 +-----------+
\layout Standard


\family typewriter 
+===============+
\protected_separator 
 +---_ istrstream _---+ <ninguna> |
\layout Standard


\family typewriter 
| istream
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 +--+
\protected_separator 

\protected_separator 
 ______________
\protected_separator 

\protected_separator 
 +-----------+
\layout Standard


\family typewriter 
+---------------+
\layout Standard

Declarada en: 
\family typewriter 
strstrea.h
\layout Description


\size largest 
Constructores
\layout Standard

Crea un ostrstream dinámico:
\layout Quotation


\family typewriter 
ostrstream()
\layout Standard

Crea un 
\family typewriter 
ostrstream
\family default 
 con un buffer de n bytes especificado:
\layout Quotation


\family typewriter 
ostrstream(char*, int, int)
\layout Standard

Si el modo es 
\family typewriter 
ios::app
\family default 
 o 
\family typewriter 
ios::ate
\family default 
, el puntero de lectura/escritura es posicionado en el carácter 
\family typewriter 
nul
\family default 
 del string.
\layout Description

Funciones
\protected_separator 
miembros
\layout Quotation


\family typewriter 
pcount
\protected_separator 

\protected_separator 
 str
\layout Description

Definición
\layout Quotation


\family typewriter 
class ostrstream : public strstreambase, public ostream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostrstream(char *, int, int = ios::out);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostrstream();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ostrstream();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 char * str();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 int pcount();
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Description


\size largest 
Descripción de los métodos
\layout Description


\size largest 
pcount
\layout Standard

Función miembro
\layout Standard


\family typewriter 
+------------+------------------------------------------------------------+
\layout Standard


\family typewriter 
| ostrstream | Devuelve el número de bytes almacenados actualmente en el
\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | buffer:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 char *pcount ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+------------+------------------------------------------------------------+
\layout Description


\size largest 
str
\layout Standard

Función miembro
\layout Standard


\family typewriter 
+--------------+------------------------------------------------------+
\layout Standard


\family typewriter 
| ostrstream
\protected_separator 

\protected_separator 
 | Devuelve y congela (freeze) el buffer:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| strstream
\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 char *str ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Debes liberar el buffer si es dinámico.
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+--------------+------------------------------------------------------+
\layout Standard


\family typewriter 
| strstreambuf | Devuelve un puntero al buffer y lo congela (freeze): |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 char *str ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+--------------+------------------------------------------------------+
\layout Description

Programa
\protected_separator 
ejemplo
\layout Quotation


\family typewriter 
// Ejemplo sobre la clase ostrstream.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#include <strstream.h>
\layout Quotation


\family typewriter 
#include <stdlib.h>
\layout Quotation


\family typewriter 
#include <string.h>
\layout Quotation


\family typewriter 
inline void error (const char *nomclase)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 cerr << "Error en clase " << nomclase;
\layout Quotation


\family typewriter 

\protected_separator 
 exit (1);
\layout Quotation


\family typewriter 
}
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 const short tam = 100;
\layout Quotation


\family typewriter 

\protected_separator 
 char buf1[tam], buf2[tam], buf3 [tam], buf4[tam];
\layout Quotation


\family typewriter 

\protected_separator 
 strcpy (buf1, "Ejemplo de la clase ostrstream.");
\layout Quotation


\family typewriter 

\protected_separator 
 strcpy (buf2, "Ejemplo de la clase ostrstream.");
\layout Quotation


\family typewriter 

\protected_separator 
 strcpy (buf3, "Ejemplo de la clase ostrstream.");
\layout Quotation


\family typewriter 

\protected_separator 
 strcpy (buf4, "Ejemplo de la clase ostrstream.");
\layout Quotation


\family typewriter 

\protected_separator 
 ostrstream s1 (buf1, tam);
\layout Quotation


\family typewriter 

\protected_separator 
 if (! s1)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error ("s1");
\layout Quotation


\family typewriter 

\protected_separator 
 ostrstream s2 (buf2, tam, ios::app);
\layout Quotation


\family typewriter 

\protected_separator 
 if (! s2)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error ("s2");
\layout Quotation


\family typewriter 

\protected_separator 
 ostrstream s3 (buf3, strlen (buf3) + 2, ios::app);
\layout Quotation


\family typewriter 

\protected_separator 
 if (! s3)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error ("s3");
\layout Quotation


\family typewriter 

\protected_separator 
 ostrstream s4 (buf4, tam);
\layout Quotation


\family typewriter 

\protected_separator 
 if (! s4)
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 error ("s4");
\layout Quotation


\family typewriter 

\protected_separator 
 s1 << 'a' << "bc" << ends;
\layout Quotation


\family typewriter 

\protected_separator 
 s2 << 'a' << "bc" << ends;
\layout Quotation


\family typewriter 

\protected_separator 
 // s3 << 'a' << "bc" << ends; // no se añade ni c (de "bc") ni 0 (de ends)
\layout Quotation


\family typewriter 

\protected_separator 
 s4 << 'a' << "bc";
\layout Quotation


\family typewriter 

\protected_separator 
 cout << buf1 << endl << buf2 << endl << buf4 << endl;
\layout Quotation


\family typewriter 
}
\layout Description

SALIDA:
\layout Enumerate

Con la clase 
\family typewriter 
ostrstream
\family default 
 se trabaja de una forma similar que con la clase 
\family typewriter 
ofstream
\family default 
, con la diferencia de que 
\family typewriter 
ostrstream
\family default 
 escribe en un string y 
\family typewriter 
ofstream
\family default 
 escribe en un fichero.
\layout Enumerate

El modo de operación (tercer parámetro de constructor 
\family typewriter 
ostrstream
\family default 
) por defecto es 
\family typewriter 
ios::out
\family default 
.
\layout Subsection

Clase strstream
\layout Description


\size largest 
strstream
\layout Standard

Proporciona entrada y salida simultánea sobre un 
\family typewriter 
strstreambuf
\family default 
.
\layout Standard


\family typewriter 
+---------------+
\layout Standard


\family typewriter 
| strstreambase +--+
\protected_separator 

\protected_separator 
 _____________
\protected_separator 

\protected_separator 
 +-----------+
\layout Standard


\family typewriter 
+===============+
\protected_separator 
 +---_ strstream _---+ <ninguna> |
\layout Standard


\family typewriter 
| iostream
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 +--+
\protected_separator 

\protected_separator 
 _____________
\protected_separator 

\protected_separator 
 +-----------+
\layout Standard


\family typewriter 
+---------------+
\layout Standard

Declarada en: 
\family typewriter 
strstrea.h
\layout Description


\size largest 
Constructores
\layout Standard

Crea un strstream dinámico:
\layout Quotation


\family typewriter 
strstream()
\layout Standard

Crea un 
\family typewriter 
strstream
\family default 
 con un buffer de n bytes especificado:
\layout Quotation


\family typewriter 
strstream(char*, int n, int mode)
\layout Standard

Si el modo es 
\family typewriter 
ios::app
\family default 
 o 
\family typewriter 
ios::ate
\family default 
, el puntero de lectura/escritura es posicionado en el carácter 
\family typewriter 
nul
\family default 
 del string.
\layout Description

Funciones
\protected_separator 
miembros
\layout Quotation


\family typewriter 
str
\layout Description

Definición
\layout Quotation


\family typewriter 
class strstream : public strstreambase, public iostream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 strstream();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 strstream(char *, int _sz, int _m);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 strstream();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 char * str();
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Description


\size largest 
Descripción de los métodos
\layout Description


\size largest 
str
\layout Standard

Función miembro
\layout Standard


\family typewriter 
+--------------+------------------------------------------------------+
\layout Standard


\family typewriter 
| ostrstream
\protected_separator 

\protected_separator 
 | Devuelve y congela (freeze) el buffer:
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
| strstream
\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 char *str ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 | Debes liberar el buffer si es dinámico.
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+--------------+------------------------------------------------------+
\layout Standard


\family typewriter 
| strstreambuf | Devuelve un puntero al buffer y lo congela (freeze): |
\layout Standard


\family typewriter 
|
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\protected_separator 

\protected_separator 
 char *str ()
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 |
\layout Standard


\family typewriter 
+--------------+------------------------------------------------------+
\layout Description

Programa
\protected_separator 
ejemplo
\layout Quotation


\family typewriter 
// Ejemplo sobre la clase strstream.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#include <strstream.h>
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 const short tam = 100;
\layout Quotation


\family typewriter 

\protected_separator 
 char buf[tam];
\layout Quotation


\family typewriter 

\protected_separator 
 strstream str (buf, tam, ios::in | ios::out);
\layout Quotation


\family typewriter 

\protected_separator 
 const char sp = ' ';
\layout Quotation


\family typewriter 

\protected_separator 
 str << 2 << sp << 3.3 << sp << 'x' << sp << "abc";
\layout Quotation


\family typewriter 

\protected_separator 
 int i;
\layout Quotation


\family typewriter 

\protected_separator 
 float f;
\layout Quotation


\family typewriter 

\protected_separator 
 char c;
\layout Quotation


\family typewriter 

\protected_separator 
 char s[10];
\layout Quotation


\family typewriter 

\protected_separator 
 str >> i >> f >> c >> s;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << i << sp << f << sp << c << sp << s << endl;
\layout Quotation


\family typewriter 
}
\layout Description

SALIDA:
\layout Enumerate

Con la clase 
\family typewriter 
strstream
\family default 
 se trabaja de una forma similar que con la clase 
\family typewriter 
fstream
\family default 
, con la diferencia de que en strstream trabaja con un string y 
\family typewriter 
fstream
\family default 
 trabaja con un fichero.
\layout Enumerate

Con el modelo de operación (
\family typewriter 
ios::in | ios::out
\family default 
) podemos escribir y leer simultáneamente sobre un mismo buffer.
\layout Subsection

Fichero strstream.h
\layout Description


\size largest 
strstrea.h
\layout Standard

Declara las clases de flujos de C++ para trabajar con arrays de bytes en
 memoria.
 Incluye 
\family typewriter 
iostream.h
\family default 
.
\layout Description

Clases
\layout Quotation


\family typewriter 
istrstream
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 ostrstream
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 strstream
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 strstreambase
\layout Quotation


\family typewriter 
strstreambuf
\layout Description


\size largest 
Constantes,
\protected_separator 
tipos
\protected_separator 
de
\protected_separator 
datos
\protected_separator 
y
\protected_separator 
variables
\protected_separator 
globales
\layout Description


\size largest 
_STRSTREAM_H_
\layout Description

Contenido (abreviado):
\layout Quotation


\family typewriter 
#ifndef __STRSTREAM_H
\layout Quotation


\family typewriter 
#define __STRSTREAM_H
\layout Quotation


\family typewriter 
#if !defined( __IOSTREAM_H )
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#endif
\layout Quotation


\family typewriter 
class strstreambuf : public streambuf
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class strstreambase : public virtual ios
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class istrstream : public strstreambase, public istream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class ostrstream : public strstreambase, public ostream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
class strstream : public strstreambase, public iostream
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
#endif
\layout Description

Programa
\protected_separator 
ejemplo
\layout Quotation


\family typewriter 
// Ejemplo sobre las clases declaradas en el fichero strstream.h.
\layout Quotation


\family typewriter 
#include <iostream.h>
\protected_separator 
 // para flujo cout
\layout Quotation


\family typewriter 
#include <strstream.h> // para clases istrstream y ostrstream
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 char *buffer_fuente = "Ejemplo de las clases istrstream y ostrstream.";
\layout Quotation


\family typewriter 

\protected_separator 
 const int tam = 100;
\layout Quotation


\family typewriter 

\protected_separator 
 char buffer_destino[tam];
\layout Quotation


\family typewriter 

\protected_separator 
 istrstream flujo_fuente (buffer_fuente);
\layout Quotation


\family typewriter 

\protected_separator 
 ostrstream flujo_destino (buffer_destino, tam);
\layout Quotation


\family typewriter 

\protected_separator 
 char ch;
\layout Quotation


\family typewriter 

\protected_separator 
 while (flujo_destino && flujo_fuente.get (ch))
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 flujo_destino.put (ch);
\layout Quotation


\family typewriter 

\protected_separator 
 flujo_destino << ends;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << buffer_destino;
\layout Quotation


\family typewriter 
}
\layout Description

SALIDA:
\layout Enumerate

Tal y como está el programa, el bucle 
\family typewriter 
while
\family default 
 termina por la segunda condición: 
\family typewriter 
flujo_fuente.get(ch)
\family default 
.
 Si tam fuera 10 en vez de 100, entonces el bucle 
\family typewriter 
while
\family default 
 se saldría por la primera condición: 
\family typewriter 
flujo_destino
\family default 
.
 En este segundo caso, sólo se copiarán 10 caracteres de 
\family typewriter 
buffer_fuente
\family default 
, pero hay que tener en cuenta que en este caso no se guarda el carácter
 0 (con 
\family typewriter 
ends
\family default 
) en 
\family typewriter 
buffer_destino
\family default 
 pues no cabría; esto significa que 
\family typewriter 
buffer_destino
\family default 
 no sería un string terminado con el carácter nulo.
\layout Subsection

Clase bcd y Clase complex
\layout Standard

Además de todos los ficheros de cabecera que acabamos de ver, el C++ actual
 posee dos más: 
\family typewriter 
bcd.h
\family default 
 y 
\family typewriter 
complex.h
\family default 
.
 En el primero está declarada la clase bcd para que podamos trabajar con
 números 
\family typewriter 
bcd
\family default 
 (binary-code decimal) y en el segundo está declarada la clase 
\family typewriter 
complex
\family default 
 para que podamos trabajar con números complejos.
 Aunque estas dos clases no tienen mucho que ver con la entrada y la salida,
 que es el objeto de esta lección, las vamos a incluir en este lugar puesto
 que en esta lección es el único lugar en el que hemos visto los ficheros
 de cabecera específicos al C++, es decir, que no los posee el C ni pueden
 utilizarse en un programa de C.
\layout Subsubsection

Fichero bcd.h
\layout Description


\size largest 
bcd.h
\size default 
 
\layout Standard

Declara la clase 
\family typewriter 
bcd
\family default 
 de C++, más los operadores sobrecargados para la clase 
\family typewriter 
bcd
\family default 
 y las funciones matemáticas 
\family typewriter 
bcd
\family default 
.
\layout Description

Funciones
\layout Quotation


\family typewriter 
abs
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 acos
\protected_separator 

\protected_separator 

\protected_separator 
 asin
\protected_separator 

\protected_separator 

\protected_separator 
 atan
\protected_separator 

\protected_separator 

\protected_separator 
 cos
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 cosh
\protected_separator 

\protected_separator 

\protected_separator 
 exp
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 log
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 log10
\layout Quotation


\family typewriter 
pow
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 pow10
\protected_separator 

\protected_separator 
 real
\protected_separator 

\protected_separator 

\protected_separator 
 sin
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 sinh
\protected_separator 

\protected_separator 

\protected_separator 
 sqrt
\protected_separator 

\protected_separator 

\protected_separator 
 tan
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 tanh
\layout Description


\size largest 
Constantes,
\protected_separator 
tipos
\protected_separator 
de
\protected_separator 
datos
\protected_separator 
y
\protected_separator 
variables
\protected_separator 
globales
\layout Quotation


\family typewriter 
_BCD_H
\layout Quotation


\family typewriter 
_BcdMaxDecimals
\layout Quotation


\family typewriter 
bcdexpo (enum)
\layout Description


\size largest 
Constructores
\layout Description


\size largest 
bcd
\layout Standard

Convierte número a decimal en código binario (
\family typewriter 
bcd
\family default 
).
\layout Description

Sintaxis
\layout Quotation


\family typewriter 
bcd bcd (int x);
\layout Quotation


\family typewriter 
bcd bcd (double x);
\layout Quotation


\family typewriter 
bcd bcd (double x, int decimales);
\layout Standard

Devuelve el equivalente BCD de un número dado.
\layout Description

Operadores
\protected_separator 
sobrecargados
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 +
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 -=
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 -
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 *=
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 *
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 /=
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 /
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 <=
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ==
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 >=
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 !=
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 <
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 +=
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 >
\layout Description

Definición (abreviada)
\layout Quotation


\family typewriter 
// ...
\layout Quotation


\family typewriter 
#ifndef __BCD_H
\layout Quotation


\family typewriter 
#define __BCD_H
\layout Quotation


\family typewriter 
#if !defined( __MATH_H )
\layout Quotation


\family typewriter 
#include <math.h>
\layout Quotation


\family typewriter 
#endif
\layout Quotation


\family typewriter 
#define _BcdMaxDecimals
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 5000
\layout Quotation


\family typewriter 
class bcd
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // Constructores
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 _Cdecl bcd();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 _Cdecl bcd(int x);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 _Cdecl bcd(unsigned int x);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 _Cdecl bcd(long x);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 _Cdecl bcd(unsigned long x);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 _Cdecl bcd(double x, int decimals = _BcdMaxDecimals);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 _Cdecl bcd(long double x, int decimals = _BcdMaxDecimals);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // Manipuladores bcd
\layout Quotation


\family typewriter 

\protected_separator 

\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend long double _Cdecl real(bcd&);
\protected_separator 

\protected_separator 
 // Devuelve la parte real
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // Funciones matemáticas del ANSI C sobrecargadas
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl abs(bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl acos(bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl asin(bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl atan(bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl cos(bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl cosh(bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl exp(bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl log(bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl log10(bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl pow(bcd& base, bcd& expon);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl sin(bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl sinh(bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl sqrt(bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl tan(bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl tanh(bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // Funciones de operadores binarios
\layout Quotation


\family typewriter 

\protected_separator 

\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl operator+(bcd&, bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl operator+(long double, bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl operator+(bcd&, long double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl operator-(bcd&, bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl operator-(long double, bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl operator-(bcd&, long double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl operator*(bcd&, bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl operator*(bcd&, long double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl operator*(long double, bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl operator/(bcd&, bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl operator/(bcd&, long double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend bcd _Cdecl operator/(long double, bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend int _Cdecl operator==(bcd&, bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend int _Cdecl operator!=(bcd&, bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend int _Cdecl operator>=(bcd&, bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend int _Cdecl operator<=(bcd&, bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend int _Cdecl operator>(bcd&, bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend int _Cdecl operator<(bcd&, bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 bcd& _Cdecl operator+=(bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 bcd& _Cdecl operator+=(long double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 bcd& _Cdecl operator-=(bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 bcd& _Cdecl operator-=(long double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 bcd& _Cdecl operator*=(bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 bcd& _Cdecl operator*=(long double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 bcd& _Cdecl operator/=(bcd&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 bcd& _Cdecl operator/=(long double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 bcd
\protected_separator 
 _Cdecl operator+();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 bcd
\protected_separator 
 _Cdecl operator-();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 // Implementación
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 
 // ...
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
// ...
\layout Quotation


\family typewriter 
enum bcdexpo
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ExpoZero,
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ExpoInf,
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ExpoNan,
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
// ...
\layout Quotation


\family typewriter 
#endif
\protected_separator 
 // __BCD_H
\layout Description


\size largest 
Descripción de los métodos
\layout Standard

La sintaxis de las funciones matemáticas del ANSI C aplicadas a objetos
 de la clase bcd es similar así que no se van a describir aquí pues ya se
 explicaron en el tutor de C; lo única diferencia está en que donde aparece
 el tipo 
\family typewriter 
double
\family default 
 en la función correspondiente al ANSI C, aparace el tipo bcd en la correspondie
nte función matemática sobrecargada; por ejemplo, el prototipo del ANSI
 C
\layout Quotation


\family typewriter 
double cos(double x);
\layout Standard

se convierte en la función 
\family typewriter 
cos
\family default 
 sobrecargada correspondiente a números complejos en
\layout Quotation


\family typewriter 
bcd cos (bcd z);
\layout Standard

Con los operadores sobrecargados para los objetos complejos ocurre lo mismo
 que las funciones matemáticas sobrecargadas para los objetos complejos.
 Hay una función (método) nueva en la clase 
\family typewriter 
bcd
\family default 
 que no tiene correspondencia con el tipo 
\family typewriter 
double
\family default 
:
\layout Description


\size largest 
real
\layout Standard

Devuelve la parte real del número 
\family typewriter 
bcd
\family default 
.
\layout Description

Sintaxis
\layout Quotation


\family typewriter 
bcd real(bcd x);
\layout Description

Programa
\protected_separator 
ejemplo
\layout Quotation


\family typewriter 
// Ejemplo de la clase bcd.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#include <bcd.h>
\layout Quotation


\family typewriter 
void main (void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 bcd b1 (2), b2 (3.3);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "b1: " << b1
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime: 
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << endl
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << "b2: " << b2
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime: 
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << endl
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << "b1 + b2: " << b1 + b2
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime: 
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << endl
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << "abs (b1 - b2): " << abs (b1 - b2) // imprime: 
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << endl
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << "(b1 = b2 - 1): " << (b1 = b2 - 1) // imprime: 
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << endl
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << "real (b2): " << real (b2)
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime: 
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 << endl;
\layout Quotation


\family typewriter 
}
\layout Subsubsection

Fichero complex.h
\layout Description


\size largest 
complex.h 
\layout Standard

Declara las funciones matemáticas complejas de C++.
 Incluye 
\layout Quotation


\family typewriter 
iostream.h
\protected_separator 

\protected_separator 
 math.h
\layout Description

Funciones
\layout Quotation


\family typewriter 
abs
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 acos
\protected_separator 

\protected_separator 

\protected_separator 
 arg
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 asin
\protected_separator 

\protected_separator 

\protected_separator 
 atan
\protected_separator 

\protected_separator 

\protected_separator 
 conj
\protected_separator 

\protected_separator 

\protected_separator 
 cos
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 cosh
\protected_separator 

\protected_separator 

\protected_separator 
 exp
\layout Quotation


\family typewriter 
imag
\protected_separator 

\protected_separator 

\protected_separator 
 log
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 log10
\protected_separator 

\protected_separator 
 norm
\protected_separator 

\protected_separator 

\protected_separator 
 polar
\protected_separator 

\protected_separator 
 pow
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 pow10
\protected_separator 

\protected_separator 
 real
\protected_separator 

\protected_separator 

\protected_separator 
 sin
\layout Quotation


\family typewriter 
sinh
\protected_separator 

\protected_separator 

\protected_separator 
 sqrt
\protected_separator 

\protected_separator 

\protected_separator 
 tan
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 tanh
\layout Description


\size largest 
Constantes,
\protected_separator 
tipos
\protected_separator 
de
\protected_separator 
datos
\protected_separator 
y
\protected_separator 
variables
\protected_separator 
globales
\layout Quote


\family typewriter 
_COMPLEX_H
\layout Description


\size largest 
Constructores
\layout Description


\size largest 
complex
\layout Standard

Crea números complejos.
\layout Description

Sintaxis
\layout Quotation


\family typewriter 
complex complex(double real, double imag = 0);
\layout Standard

Devuelve el número complejo con las partes real e imaginaria dadas.
\layout Description

Operadores
\protected_separator 
sobrecargados
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 +
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 +=
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 -
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 -=
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 *
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 *=
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 /
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 /=
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 ==
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 !=
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 <<
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 >>
\layout Description

Definición (abreviada)
\layout Quotation


\family typewriter 
// ...
\layout Quotation


\family typewriter 
#if !defined( __COMPLEX_H )
\layout Quotation


\family typewriter 
#define _COMPLEX_H
\layout Quotation


\family typewriter 
#if !defined( __MATH_H )
\layout Quotation


\family typewriter 
#include <math.h>
\layout Quotation


\family typewriter 
#endif
\layout Quotation


\family typewriter 
class complex
\layout Quotation


\family typewriter 

\protected_separator 
 {
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 public:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // Constructores
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 complex(double __re_val, double __im_val=0);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 complex();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // Manipuladores de complex
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend double _Cdecl real(complex&);
\protected_separator 

\protected_separator 
 // la parte real
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend double _Cdecl imag(complex&);
\protected_separator 

\protected_separator 
 // la parte imaginaria
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl conj(complex&);
\protected_separator 
 // el complejo conjugado
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend double _Cdecl norm(complex&);
\protected_separator 

\protected_separator 
 // el cuadrado de la magnitud
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend double _Cdecl arg(complex&);
\protected_separator 

\protected_separator 

\protected_separator 
 // el ángulo en el plano
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // Crea coordenadas polares de un objeto complex dado
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl polar(double __mag, double __angle=0);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // Funciones matemáticas del ANSI C sobrecargadas
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend double
\protected_separator 
 _Cdecl abs(complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl acos(complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl asin(complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl atan(complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl cos(complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl cosh(complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl exp(complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl log(complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl log10(complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl pow(complex& __base, double __expon);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl pow(double __base, complex& __expon);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl pow(complex& __base, complex& __expon);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl sin(complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl sinh(complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl sqrt(complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl tan(complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl tanh(complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // Funciones de operadores binarios
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl operator+(complex&, complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl operator+(double, complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl operator+(complex&, double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl operator-(complex&, complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl operator-(double, complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl operator-(complex&, double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl operator*(complex&, complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl operator*(complex&, double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl operator*(double, complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl operator/(complex&, complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl operator/(complex&, double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend complex _Cdecl operator/(double, complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend int _Cdecl operator==(complex&, complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 friend int _Cdecl operator!=(complex&, complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 complex& _Cdecl operator+=(complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 complex& _Cdecl operator+=(double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 complex& _Cdecl operator-=(complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 complex& _Cdecl operator-=(double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 complex& _Cdecl operator*=(complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 complex& _Cdecl operator*=(double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 complex& _Cdecl operator/=(complex&);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 complex& _Cdecl operator/=(double);
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 complex _Cdecl operator+();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 complex _Cdecl operator-();
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 // Implementación
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 private:
\layout Quotation


\family typewriter 

\protected_separator 

\protected_separator 

\protected_separator 
 double re, im;
\layout Quotation


\family typewriter 

\protected_separator 
 };
\layout Quotation


\family typewriter 
// Funciones inline de complex
\layout Quotation


\family typewriter 
// ...
\layout Quotation


\family typewriter 
#endif
\protected_separator 
 // __COMPLEX_H
\layout Description


\size largest 
Descripción de los métodos
\layout Standard

La sintaxis de las funciones matemáticas del ANSI C aplicadas a objetos
 de la clase compleja es similar así que no se van a describir aquí pues
 ya se explicaron en el tutor de C; lo única diferencia está en que donde
 aparece double en la función correspondiente al ANSI C, aparace el tipo
 complex en la correspondiente función matemática sobrecargada; por ejemplo,
 el prototipo del ANSI C
\layout Quotation


\family typewriter 
double cos (double x);
\layout Standard

se convierte en la función cos sobrecargada correspondiente a números complejos
 en
\layout Quotation


\family typewriter 
complex cos (complex z);
\layout Standard

Con los operadores sobrecargados para los objetos complejos ocurre lo mismo
 que las funciones matemáticas sobrecargadas para los objetos complejos.
 Sí merece la pena explicar las nuevas funciones (métodos) aportados por
 la clase complex: 
\family typewriter 
real()
\family default 
, 
\family typewriter 
imag()
\family default 
, 
\family typewriter 
conj()
\family default 
, 
\family typewriter 
norm()
\family default 
, 
\family typewriter 
arg()
\family default 
 y 
\family typewriter 
polar()
\family default 
:
\layout Description


\size largest 
real
\layout Standard

Devuelve la parte real de un número complejo.
\layout Description

Sintaxis
\layout Quotation


\family typewriter 
double real (complex x);
\layout Description


\size largest 
imag
\layout Standard

Devuelve la parte imaginaria de un número complejo.
\layout Description

Sintaxis
\layout Quotation


\family typewriter 
double imag (complex x);
\layout Standard

Los datos asociados a un número complejo están compuestos por dos números
 en coma flotante (double).
 La función imag() devuelve el que se considera parte imaginaria de los
 dos.
\layout Description


\size largest 
conj
\layout Standard

Devuelve el complejo conjugado de un número complejo.
\layout Description

Sintaxis
\layout Quotation


\family typewriter 
complex conj (complex z);
\layout Standard

Devuelve el complejo conjugado del número complejo z.
\layout Description


\size largest 
norm
\layout Standard

Devuelve el cuadrado del valor absoluto.
\layout Description

Sintaxis
\layout Quotation


\family typewriter 
double norm (complex x);
\layout Standard

La norma puede desbordarse por encima (overflow) si la parte real o la parte
 imaginaria son suficientemente grandes.
\layout Description


\size largest 
arg
\layout Standard

Da el ángulo de un número en el plano complejo.
\layout Description

Sintaxis
\layout Quotation


\family typewriter 
double arg (complex z);
\layout Standard

El eje real positivo tiene ángulo 0, y el eje imaginario positivo tiene
 ángulo pi/2.
 Si z es 0, devuelve 0.
\layout Description


\size largest 
polar
\layout Standard

Calcula el número complejo con la magnitud y el ángulo dados.
\layout Description

Sintaxis
\layout Quotation


\family typewriter 
complex polar (double mag, double angulo);
\layout Standard

El ángulo por defecto es 0.
 Estas dos declaraciones son iguales:
\layout Quotation


\family typewriter 
polar (mag, angulo);
\layout Quotation


\family typewriter 
complex (mag * cos (angulo), mag * sin (angulo));
\layout Standard

Programa ejemplo:
\layout Quotation


\family typewriter 
// Ejemplo de la clase complex.
\layout Quotation


\family typewriter 
#include <iostream.h>
\layout Quotation


\family typewriter 
#include <complex.h>
\layout Quotation


\family typewriter 
void main(void)
\layout Quotation


\family typewriter 
{
\layout Quotation


\family typewriter 

\protected_separator 
 complex z1(2.2), z2 (3, 4);
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "z1: " << z1;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime: 
\layout Quotation


\family typewriter 

\protected_separator 
 cout << endl;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "z2: " << z2;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime: 
\layout Quotation


\family typewriter 

\protected_separator 
 cout << endl;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "z1 + z2: " << z1 + z2;
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime: 
\layout Quotation


\family typewriter 

\protected_separator 
 cout << endl;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "abs(z1-z2): " << abs (z1-z2); // imprime: 
\layout Quotation


\family typewriter 

\protected_separator 
 cout << endl;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "(z1 = z2-1): " << (z1 = z2-1); // imprime: 
\layout Quotation


\family typewriter 

\protected_separator 
 cout << endl;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "real(z2): " << real (z2);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime: 
\layout Quotation


\family typewriter 

\protected_separator 
 cout << endl;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "imag(z2): " << imag (z2);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime: 
\layout Quotation


\family typewriter 

\protected_separator 
 cout << endl;
\layout Quotation


\family typewriter 

\protected_separator 
 cout << "conj(z1): " << conj (z1);
\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 // imprime: 
\layout Quotation


\family typewriter 
nj (z1): (2, -4)
\layout Quotation


\family typewriter 

\protected_separator 
 cout << endl;
\layout Quotation


\family typewriter 
}
\layout Section

Problemas
\layout Itemize


\series bold 
Ejercicio 8-1
\series default 
.
 Añade al programa del ejemplo de string de esta lección el operador de
 concatenación 
\family typewriter 
+
\family default 
 y el operador 
\family typewriter 
+=
\family default 
 con el significado de "añadir al final".
\layout Itemize


\series bold 
Ejercicio 8-2
\series default 
.
 Pasa los ejemplos de C de la lección 9 del tutor de C (lección dedicada
 a la E/S y a los ficheros) a programas C++, esto es, a notación C++.
\layout Itemize


\series bold 
Ejercicio 8-3
\series default 
.
 Transforma el programa compresor/descompresor, desarrollado en C en la
 tarea de ejemplos de la lección 10 del tutor de C, a un programa C++ mejorándol
o en el sentido de que pueda comprimir (y posteriormente descomprimir) varios
 ficheros en un sólo fichero comprimido.
\the_end
