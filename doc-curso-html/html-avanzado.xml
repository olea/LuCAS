<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- <!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
   "http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd">
   -->
<article lang="es" id="html-avanzado">
  <articleinfo>
    <title>HTML avanzado</title>
    <date>21 de Marzo de 2002</date>
    <author>
      <firstname>Jorge</firstname>
      <surname>Ferrer</surname>
    </author>
    <author>
      <firstname>Victor</firstname>
      <surname>García</surname>
    </author>
    <abstract>
      <para>
	Ya hemos terminado la primera fase en el aprendizaje de la
	programación de documentos HTML. Dominamos todas las etiquetas
	necesarias para crear páginas de gran calidad. Es hora de comenzar
	con una segunda fase dedicada al HTML avanzado. En esta fase
	aprenderemos etiquetas para crear efectos muy llamativos en las
	páginas Web e iremos conociendo mejor cómo funcionan los
	navegadores para crear páginas que se ven correctamente en
	todos. 
      </para>
    </abstract>

    <editor>
      <firstname>Jorge</firstname>
      <surname>Ferrer</surname>
    </editor>
    <releaseinfo>Versión 1.0</releaseinfo>
    <orgname>Conquista la web</orgname>
    <legalnotice>
      <para>
	Copyright Jorge Ferrer y Victor García. Se otorga permiso para copiar,
	distribuir y/o modificar este documento bajo los términos de la
	Licencia de Documentación Libre GNU, Versión 1.1 o cualquier otra
	versión posterior publicada por la Free Software Foundation. Puede
	consultar una copia de la licencia en:
	http://www.gnu.org/copyleft/fdl.html
      </para>
    </legalnotice>
  </articleinfo>

  <para>
    A estas alturas del curso ya conocemos una gran cantidad de
    etiquetas. Sabemos controlar el tamaño, color y formato del texto,
    incluir imágenes y todo tipo de contenido gráfico, crear listas,
    disponer datos en tablas e incluso, usando estas, tener un mayor
    control sobre la disposición de los elementos de una página. En
    definitiva, somos capaces de crear páginas Web como el mejor de los
    programadores del WWW. Con estos datos en la mano podríamos pensar
    que no queda nada por aprender, pero nada más lejos de la realidad,
    todavía nos queda lo mejor. Las etiquetas vistas hasta ahora son
    las más usadas desde hace ya tiempo en las páginas Web, pero con el
    tiempo y debido a las necesidades que acusaban los programadores
    han ido apareciendo nuevas etiquetas que nos permitirán crear
    efectos realmente atractivos. A estas etiquetas y a su correcto uso
    en las páginas Web es a lo que hemos llamado HTML avanzado y
    gracias a él aprenderemos a crear los llamados Webs de tercera
    generación como el que podemos ver en la figura 7.1:
  </para>

  <figure label="7.1" id="highfive" >
    <title>
      Usando adecuadamente las etiquetas del lenguaje HTML
      y con algunos conocimientos de diseño se pueden crear webs tan
      atractivos como este.
    </title>
    <graphic fileref="img/fig7-1.png"/>

  </figure>

  <para>
    Entre los temas que cubriremos de ahora en adelante destacan: mayor
    control en la creación de listas y en el alineamiento de los
    elementos de la página, inserción de scripts y hojas de estilo,
    inserción de applets de Java, formularios interactivos, páginas con
    varias ventanas (los marcos o frames), HTML dinámico, y más.
  </para>

  <para>
    En definitiva todas las novedades que han ido apareciendo en estos
    últimos años el mundo de la programación de páginas web.
  </para>

  <para>
    Pero todo lo nuevo tiene, además de grandes ventajas, algunos
    inconvenientes. Al hablar de HTML, los inconvenientes de usar
    algunas de las etiquetas avanzadas es que no son entendidas por
    los navegadores y por tanto debemos tener cuidado al usarlas. Esto
    no quiere decir que no las usemos, ya que si no lo hiciéramos
    estaríamos desperdiciando algunas de las posibilidades que nos
    ofrece el 
    lenguaje HTML. La solución es simplemente conocer las ventajas e
    inconvenientes y como subsanar estos últimos de la mejor manera
    posible. A esto es a lo que dedicaremos gran parte de este
    capítulo. Para empezar, es interesante (incluso necesario) conocer
    un poco la historia del lenguaje HTML a través de sus diferentes
    versiones.
  </para>

  <sect1>

    <title>Estándares y extensiones del lenguaje HTML</title>

    <para>
      El lenguaje HTML empezó a usarse a gran escala a partir de 1990
      cuando Tim Berners Lee, mientras trabajaba  en el laboratorio
      Europeo de Física de Partículas (CERN) en Suiza (ver figura 7.2)
      desarrolló un novedoso sistema de 
      distribución de información basado en páginas independientes,
      llamadas páginas web (<foreignphrase lang="en">web
      pages</foreignphrase>) o simplemente webs, con posibilidad 
      de hipertexto. Era el nacimiento del World Wide web (de ahora en
      adelante WWW), que podría traducirse como la <emphasis>telaraña
	mundial</emphasis>.
    </para>

    <figure label="7.2">
      <title>
	En el CERN (<ulink url="http://www.cern.ch">http://www.cern.ch
	</ulink>), un instituto de física con poca relación con Internet,
	se engendró la idea del World Wide Web.
      </title>
      <graphic fileref="img/fig7-2.png" />
    </figure>

    <para>
      A partir de entonces el WWW no ha parado de crecer y lo que empezó
      como un pequeño proyecto se convirtió en un sistema usado en todo el
      mundo a través de la red Internet. En 1995 el WWW se convirtió en el
      servicio de esta red más utilizado por sus usuarios por delante
      incluso del e-mail o el FTP (sistema usado para transporte de
      ficheros).
    </para>

    <para>
      HTML era el lenguaje usado para crear las páginas individuales que
      formaban esa telaraña mundial. Este era un lenguaje muy sencillo que
      permitía incluir texto, encabezados, imágenes, formularios simples y
      muy poco más. Debido a la gran expansión del WWW el HTML empezó a ser
      usado ampliamente y diversas empresas se dieron cuenta del potencial
      que representaba y empezaron a comercializar programas,
      posteriormente llamados navegadores, exploradores o browsers, capaces
      de encontrar páginas de esta telaraña en Internet e interpretar el
      código HTML para presentar la información de las páginas.
    </para>

    <para>
      Pero entonces surgió el desorden. Cada una de las empresas u
      organismos que elaboraban los navegadores proponía su propia
      interpretación del lenguaje y programaba sus aplicaciones para que
      fuesen fieles a esa interpretación. Esto causaba verdaderos
      quebraderos de cabeza a los programadores de webs ya que si
      preparaba su página para que funcionase con un navegador no
      funcionaba con otro o las diferencias eran más importantes de lo se
      puede considerar como aceptable.
    </para>

    <sect2>

      <title>El estándar HTML 2.0</title>

      <para>
	Para solucionar este desorden se creó un organismo, el World Wide Web
	Consortium (de ahora en adelante W3C), que se encargaría de
	estandarizar todos los temas relacionados con el WWW y por supuesto
	el lenguaje HTML entraba en sus objetivos. En la figura 7.3 podemos
	ver la página de esta organización.
      </para>

      <figure label="7.3">

	<title>
	  El World Wide Web Consortium, o W3C, fue creado para regular el
	  World Wide Web. Esta regulación incluye una estandarización del
	  lenguaje HTML.
	</title>
	<graphic fileref="img/fig7-3.png"/>

      </figure>

      <para>
	El primer estándar serio que vio la luz fue el HTML 2.0. Este
	estándar pretendía contentar a todos los navegadores existentes y en
	un principio lo consiguió. De hecho podemos considerar que todos los
	navegadores existentes actualmente soportan este estándar, por lo
	tanto cualquier página escrita usando código HTML 2.0 podrá ser
	visualizado en cualquiera de ellos. Este estándar incluía:
      </para>

      <itemizedlist>

	<listitem>

	  <para>
	    Texto normal y algunos pocos estilos físicos y lógicos, pero no
	    se podía variar ni el tamaño ni el color. También incluía alguna
	    etiqueta de párrafos como <sgmltag>&lt;P&gt;</sgmltag> o
	    <sgmltag>&lt;BR&gt;</sgmltag> pero sin ningún atributo.
	  </para>

	</listitem>

	<listitem>

	  <para>
	    Seis niveles de encabezados.
	  </para>

	</listitem>

	<listitem>

	  <para>
	    Formularios básicos.
	  </para>

	</listitem>

	<listitem>

	  <para>
	    Enlaces (también llamados links).
	  </para>

	</listitem>

	<listitem>

	  <para>
	    Imágenes.
	  </para>

	</listitem>

      </itemizedlist>

      <para>
	Y muy poco más. Pronto se demostró que este estándar era insuficiente,
	y muy pronto las principales empresas que habían creado navegadores,
	como <productname>Netscape Navigator</productname> y más tarde
	<productname class="trade">Internet explorer</productname>.
	Empezaron a inventarse nuevas etiquetas HTML que, por
	supuesto, sólo serían 
	válidas si se usaba su navegador. A estas nuevas etiquetas se las
	llamó extensiones y entre las más importantes destacan las tablas,
	frames, imágenes de fondo, etc. El desorden surgió de nuevo.
      </para>

    </sect2>

    <sect2>

      <title>El estándar HTML 3.2</title>

      <para>
	El W3C se apresuró en publicar un nuevo estándar, HTML 3.0, que
	incluía algunas de las extensiones de mayor éxito. Sin embargo este
	estándar era excesivamente diferente a HTML 2.0. Introducía muchas
	etiquetas nuevas, y algunas de dudosa utilidad. Por esta razón el
	propio Web Consortium aconsejó que dejase de usarse. Poco tiempo
	después apareció una revisión de este estándar el HTML 3.2 que es el
	que rige actualmente. En este estándar se incluyeron:
      </para>

      <itemizedlist>

	<listitem>

	  <para>
	    Nuevos elementos para introducir en la cabecera como
	    <sgmltag>&lt;SCRIPT&gt;</sgmltag> para incluir código de
	    JavaScript o VBScript y otros como <sgmltag>&lt;STYLE&gt;
	    </sgmltag>, <sgmltag>&lt;META&gt;</sgmltag>, <sgmltag>&lt;BASE
	      &gt;</sgmltag> y <sgmltag>&lt;LINK&gt;</sgmltag>
	  </para>

	</listitem>

	<listitem>

	  <para>
	    Nuevos atributos para la etiqueta BODY para poner color o
	    imágenes de fondo y para cambiar el color del texto y links.
	  </para>

	</listitem>

	<listitem>

	  <para>
	    Nuevos atributos para la mayoría de las etiquetas existentes,
	  </para>

	</listitem>

	<listitem>

	  <para>
	    La posibilidad de cambiar el tamaño y color del texto con la
	    etiqueta <sgmltag>&lt;FONT&gt;</sgmltag>.
	  </para>

	</listitem>

	<listitem>

	  <para>
	    Y por último, y probablemente la más importante, la posibilidad
	    de usar tablas.
	  </para>

	</listitem>

      </itemizedlist>

      <para>
	Sin embargo no todas las extensiones que habían creado los
	fabricantes de navegadores fueron introducidas en el estándar.
	Algunas de ellas muy extendidas, como por ejemplo los frames
	(explicados más adelante) se dejaron fuera, con lo que no se
	consiguió satisfacer a 
	todo el mundo. Además, <productname>Microsoft</productname> ya había
	entrado de lleno en el mundo Internet con su navegador
	<productname>Internet Explorer</productname>, lo que propició
	una explosión de extensiones. Hoy
	en día los programadores de páginas web deben tener en cuenta no sólo
	el lenguaje HTML estándar sino las etiquetas y atributos que van
	incluyendo <productname>Microsoft</productname> y <productname>
	  Netscape</productname>. Ambas compañías crearon páginas con
	información sobre cómo hacer páginas web aprovechando todas
	las características de sus navegadores, al margen de los
	estándares. La figura 7.4 muestra estas páginas tal y como se
	presentaban hace algunos años.
      </para>

      <figure label="7.4">
	<title>
	  Tanto <productname>Microsoft</productname> como
	  <productname>Netscape</productname> crearon sitios web
	  especialmente dedicados a programadores de Internet en el
	  que informan de las tecnologías propietarias soportadas por
	  sus navegadores. 
	</title>
	<graphic fileref="img/fig7-4.png"/>
      </figure>

    </sect2>

    <sect2>

      <title>HTML 4.0 y XHTML</title>

      <para>
	Dado el gran incremento de incompatibilidades entre los
	diferentes navegadores, el W3C hizo un gran esfuerzo para
	reunir a las principales compañías y crear un nuevo estándar
	que todas se comprometían a cumplir: HTML 4.0. Este estándar
	incluye muchas novedades, algunas muy usadas como los frames.
      </para>
      <para>
	HTML 4.0 es tremendamente completo y hay pocas excusas para
	crear páginas web que usen extensiones. Parece que los
	creadores de navegadores han empezado a dar una mayor
	importancia al soporte de estándares, lo que permite crear
	páginas web HTML que se vean correctamente por todo el
	mundo. En particular es destacable el esfuerzo del proyecto
	Mozilla (<ulink url="http://mozilla.org">http://mozilla.org</ulink>),
	que ha tomado las riendas del desarrollo del navegador
	Netscape Navigator como software libre. En este proyecto han
	demostrado un fuerte compromiso por el soporte de los
	estándares y el abandono de las extensiones propietarias.
      </para>
      <para>
	En la figura 7.5 podemos ver el comienzo del documento que
	define este estándar así como la dirección donde podemos
	encontrarlo:
      </para>

      <figure label="7.5">
	<title>
	  En el servidor web del W3C podemos ver la especificación del nuevo
	  estándar HTML 4.0. La dirección concreta es:
	  <ulink url="http://www.w3c/TR/PR-html40/">
	    http://www.w3c/TR/PR-html40/
	  </ulink>
	</title>
	<graphic fileref="img/fig7-5.png"/>
      </figure>

      <para>
	Desde hace ya algún tiempo todos los navegadores soportan el
	estándar HTML 4.0: Internet Explorer, Netscape Navigator,
	Mozilla, Konqueror, Opera, etc. Su uso será una garantía de
	compatibilidad para nuestros sitios webs.
      </para>

      <caution>
	<para>
	  Si bien es cierto que usando únicamente etiquetas de HTML
	  4.0 conseguimos crear páginas que se vean en cualquier
	  navegador han aparecido otras tecnologías como CSS,
	  JavaScript, Applets Java, Flash, etc cuyo soporte varía
	  mucho de unos navegadores a otros. Estas tecnologías no
	  serán tratadas en este curso, pero si queremos advertir de
	  la importancia de que sean usadas de forma que no se obligue
	  al visitante a tener un navegador concreto.
	</para>
      </caution>

      <para>
	¿Y qué es exáctamente XHTML? Pues es una variante de HTML que
	tiene las mismas etiquetas que HTML 4.0 (en concreto es
	idéntica a la revisión HTML 4.0.1), pero con una serie de
	restricciones de sintaxis para ser compatible con XML. Para un
	navegador no hay diferencias entre usar HTML o XHTML, pero
	este último puede ser útil para poder emplear herramientas de
	tratamiento de XML al crear una página web. Las principales
	normas que debemos cumplir para que una página HTML sea
	compatible con XHTML (y por tanto compatible con XML) son:
	<itemizedlist>
	  <listitem>
	    <para>La primera línea del archivo debe ser:</para>
	    <programlisting format="linespecific">
	      &lt;?xml version="1.0"?&gt;
	    </programlisting>
	  </listitem>
	  <listitem>
	    <para>
	      Todas las etiquetas deben tener instrucción de
	      inicio e instrucción de fin. No está permitido no poner
	      <sgmltag>&lt;/p&gt;</sgmltag> al final de un párrafo on
	      <sgmltag>/li&gt;</sgmltag> al final de un 
	      elemento de una lista, como es habitual en HTML.
	    </para>
	  </listitem>
	  <listitem>
	    <para>Las etiquetas de una única instrucción deben
	      terminar con <sgmltag>/&gt;</sgmltag>. Por ejemplo:
	      <programlisting format="linespecific">
		&lt;img src="img.gif"/&gt;
	      </programlisting>
	    </para>
	  </listitem>
	  <listitem>
	    <para>Todos los valores de los atributos deben ir
	    entrecomillados.</para> 
	  </listitem>
	  <listitem>
	    <para></para>
	  </listitem>
	</itemizedlist>
      </para>

    </sect2>
    <sect2>
      <title>El futuro de HTML</title>
      <para>
	El lenguaje HTML seguirá evolucionando y continuará
	siendo, con toda probabilidad, la base de las páginas web. Conocerlo
	será imprescindible para poder aprovechar todas sus
	ventajas. Por ello seguirá usándose directamente para crear
	páginas web muy cuidadas mientras que en otros casos será
	ocultado por herramientas que permitan crear páginas al estilo
	de un procesador de texto. Además de esto seguirán adquiriendo
	mayor y mayor importancia nuevas tecnologías que añaden nuevas
	características a las páginas web como dinamismo o
	interacción con el usuario.
      </para>

      <para>
	Entre estas tecnologías nos encontramos con los ya habituales
	lenguajes de Script (JavaScript y VBScript). Estos son lenguajes de
	programación que se insertan en las páginas web junto con el código
	HTML y que nos permitirá aumentar la interactividad con el visitante
	respondiendo a algunas de sus acciones como pulsar un botón, pasar
	con el ratón por encima de una imagen, etc.
      </para>

      <para>
	Por supuesto también hemos de mencionar las hojas de estilo
	que facilitan el mantenimiento de la apariencia en las páginas
	web además de darnos más potencia.
      </para>
      <para>
	La suma de HTML con los lenguajes de script y las hojas de
	estilo ha sido denominado <emphasis>HTML
	dinámico</emphasis>. Desgraciadamente este ha sido el comienzo
	de una nueva serie de características incompatibles entre
	navegadores. En particular es habitual encontrar páginas que
	sólo pueden verse correctamente en el navegador dominante en
	la actualidad: <productname>Internet
	Explorer</productname>. Esperemos que entre todos los
	creadores de páginas web podamos presionar para que se tienda
	a una mayor compatibilidad entre navegadores. Mientras tanto
	tendremos que tener cuidado en hacer páginas que puedan verse
	en todos ellos.
      </para>

    </sect2>

    <sect2>

      <title>Conclusiones</title>

      <para>
	Bien, ya sabemos todo lo que necesitamos saber sobre la historia del
	lenguaje HTML, sus estándares y las extensiones de los distintos
	navegadores. Es probable que el lector se haga dos preguntas en este
	momento ¿a qué estándar pertenecen las etiquetas vistas hasta ahora?
	y ¿Cuáles puedo usar libremente?. Todas las etiquetas vistas hasta
	ahora pertenecen en su mayor parte al estándar HTML 2.0. De hecho
	siempre que no hemos hecho mención explícita de que cierta etiqueta
	o atributo era nuevo pertenecían a esta versión. También hemos visto
	gran parte de las etiquetas del estándar HTML 3.2, en general las más
	importantes y de mayor uso. En ocasiones hemos dicho explícitamente
	que esta o aquella etiqueta pertenecían al HTML 3.2, ahora sabemos
	que sentido tenía remarcarlo.
      </para>

      <para>
	¿Porqué lo hemos hecho así? Uno de los objetivos que nos planteamos
	desde el principio fue que nuestras páginas pudiesen ser vistas por
	todo el mundo, de esta manera podríamos llegar a la mayor cantidad de
	público posible. Con esta finalidad hemos aprendido a usar etiquetas
	que pueden ser vistas por casi todo el mundo. Las etiquetas de HTML
	2.0 pueden ser vistas por todo el mundo mientras que las etiquetas
	del lenguaje HTML 3.2 vistas hasta ahora están muy extendidas y
	causan problemas al ser vistas con navegadores antiguos. En
	definitiva, todas las etiquetas que ya conocemos pueden ser usadas
	con gran libertad con la garantía de no estar limitando que nuestras
	páginas puedan ser vistas únicamente por los usuarios de las últimas
	versiones de <productname>Navigator</productname> o <productname>
	  Explorer</productname>. Si tenemos mayores requerimientos y queremos
	estar seguros de que <emphasis>nadie</emphasis> tendrá problemas al
	ver nuestras páginas debemos considerar algunos aspectos más. 
      </para>
      <para>
	El W3C ha puesto un servicio público que permite ver si
	una determinada página cumple los estándares o no. Está
	disponible en
	<ulink url="http://validator.w3.org/">http://validator.w3.org/</ulink>
      </para>
      <para>
	También hay un programa, llamado
	<productname>Tidy</productname> que permite hacer la
	validación en un archivo local, sin tener que publicarlo en
	Internet. Este programa es software libre y está disponible en
	<ulink url="http://tidy.sourceforge.net/">http://tidy.sourceforge.net/</ulink>.
      </para>

      <sect3>

	<title>¿Qué etiquetas debo usar y cómo?</title>

	<para>
	  Podemos asumir que todas las etiquetas del estándar HTML 4.0
	  son entendidas por cualquier navegador. Eso sí debemos tener
	  en cuenta que el uso de frames o tablas complicadas puede
	  dificultar su interpretación correcta en navegadores de
	  texto o hablados (como los usados por personas ciegas o en
	  coches). 
	</para>

	<para>
	  Si optamos por emplear una extensión hay que ser consciente
	  de qué navegadores lo soportan y cómo afectará a los
	  usuarios de el resto. Teniendo esto en cuenta hay que considerar:
	</para>

	<itemizedlist>
	  <listitem>
	    <para>
	      Si los usuarios a los que va dirigido el web poseen alguno de
	      dichos navegadores.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Que perjuicios tendrán aquellos usuarios que no lo tengan. Por
	      ejemplo, nunca debemos incluir información vital usando una
	      extensión si existe el riesgo de que cierto tipo de usuarios con
	      navegadores antiguos no puedan acceder a ella. Es decir, la
	      información muy importante debe ser incluida con etiquetas de
	      HTML 2.0 para que todo el mundo pueda verla.
	    </para>
	  </listitem>
	</itemizedlist>

	<para>
	  Si usamos con cuidado las extensiones, podemos evitar que
	  causen mucho perjuicio a los usuarios que usen navegadores
	  que no las soporten, y los usuarios que si que tengan los
	  navegadores adecuados saldrán beneficiados. Para conseguir
	  esto es necesario conocer bien estas extensiones y el
	  comportamiento de un navegador cuando se encuentra con
	  alguna etiqueta o atributo que no soporta (que no
	  entiende). Esto último no es difícil de entender: si un
	  navegador se encuentra con una etiqueta que no conoce
	  simplemente la ignora y lo mismo ocurre con los atributos. 
	</para>

      </sect3>

      <sect3>

	<title>¿Qué queda por aprender?</title>

	<para>
	  En este mismo capítulo veremos las etiquetas del estándar HTML 3.2
	  que todavía nos queda por ver a excepción de los formularios que
	  serán vistos próximamente. En los siguientes capítulos aprenderemos a
	  usar las extensiones de <productname>Microsoft Explorer</productname>
	  y <productname>Netscape Navigator</productname> para aprovechar las
	  últimas capacidades de estos navegadores pero sin causar problemas a
	  los usuarios de los navegadores más antiguos o navegadores en modo
	  texto. Según vayamos estudiando estas nuevas etiquetas aprenderemos
	  también a usarlas adecuadamente. Un buen ejemplo de una de las más
	  importantes extensiones del lenguaje HTML, los frames, es la página
	  web de la figura 7.6:
	</para>

	<figure label="7.6">

	  <title>
	    En esta figura vemos un excelente uso de los frames o marcos, que
	    dividen la pantalla en cuatro partes para facilitar la navegación.
	  </title>
	  <graphic fileref="img/fig7-6.png"/>

	</figure>

	<para>
	  En ella podemos ver como adelanto al capítulo posterior en el que
	  trataremos esta extensión a fondo, que los frames sirven para dividir
	  la pantalla en varios marcos con una página diferente en cada una. En
	  este caso se ha dividido la pantalla en cuatro marcos.
	</para>

	<para>
	  En los capítulos que seguirán trataremos las técnicas para incluir
	  contenido dinámico en nuestras páginas, incluido el nuevo lenguaje
	  HTML Dinámico que constituye por sí sólo una nueva revolución en el
	  World Wide Web.
	</para>

	<para>
	  En definitiva nos queda por estudiar las etiquetas más novedosas del
	  lenguaje HTML y otros acompañantes que nos ayudarán en la
	  programación de páginas web y nos permitirán crear efectos realmente
	  impactantes y sorprendentes. Empecemos con ello sin perder más
	  tiempo.
	</para>
      </sect3>
    </sect2>
  </sect1>

  <sect1>

    <title>Extensiones a las listas</title>

    <para>
      Las etiquetas y atributos que aprendimos a crear en el capítulo 4
      pertenecen al estándar HTML 2.0. Con ellas podíamos crear listas de
      diferentes tipos y anidarlas para crear interesantes efectos. Sin
      embargo tras unos años trabajando con estas etiquetas los
      programadores de HTML empezaron a sugerir algunas ideas para
      conseguir un mayor control sobre las listas.
    </para>

    <para>
      El primer paso para satisfacer estas ideas fue la inserción de nuevos
      atributos en el estándar HTML 3.2 y estos son los que veremos a
      continuación.
    </para>

    <note>

      <para>
	El siguiente paso se ha dado con la creación de las hojas de
	estilo. Estas no son más que un método nuevo con el que se nos
	ofrece a los programadores la posibilidad de especificar las
	características de cada uno de los elementos de nuestras páginas
	web. En lo que a listas se refiere podemos indicar que la viñeta de
	una lista no numerada sea de una manera determinada, que el tamaño
	de los elementos de la lista vayan decreciendo, etc. O incluso
	podemos crear diferentes subtipos de listas. Las hojas de estilo
	son de reciente aparición y por tanto no están bien soportadas por
	los navegadores aunque ya podemos aprovechar gran parte de sus
	ventajas y por ello serán adecuadamente cubiertas en un capítulo
	posterior.
      </para>

    </note>

    <para>
      Las novedades que esta nueva versión del estándar introdujo se
      refieren a las listas ordenadas, OL, y a las listas no ordenadas, UL,
      que son en definitiva las más usadas. Estas novedades afectan también
      a la subetiqueta LI.
    </para>

    <sect2>

      <title>Listas no ordenadas</title>

      <para>
	Para aumentar el control sobre la apariencia de las listas no
	numeradas o no ordenadas se introdujo un nuevo atributo:
	<emphasis>TYPE</emphasis>. Con él podremos cambiar el tipo de
	viñeta de los elementos de la lista. Los tipos de viñetas
	disponibles son:
      </para>

      <itemizedlist>

	<listitem>

	  <para>
	    <emphasis>TYPE=&quot;Circle&quot;</emphasis>: El símbolo es un
	    círculo, es decir, una circunferencia no rellena.
	  </para>

	</listitem>

	<listitem>

	  <para>
	    <emphasis>TYPE=&quot;Square&quot;</emphasis>: La viñeta es un
	    cuadrado.
	  </para>

	</listitem>

	<listitem>

	  <para>
	    <emphasis>TYPE=&quot;Disk&quot;</emphasis>: Similar a Circle,
	    pero ahora la circunferencia si está rellena. Este tipo es el
	    que aparecía por defecto cuando no usábamos el atributo TYPE.
	  </para>

	</listitem>

      </itemizedlist>

      <para>
	Quizá al lector que haya practicado con anidamiento de listas le
	resulten familiares estos tipos de viñetas. Si recordamos al anidar
	listas el tipo de viñeta de cada nivel de anidamiento era
	distinto. Pero ahora nosotros tendremos libertad para elegir
	<emphasis>cuando</emphasis> debe usarse cada uno.
      </para>

      <para>
	Veamos algunos ejemplos. El primero de ellos será una lista de tipo
	Disk. En él se muestra un listado de algunos de los principales
	navegadores, y el código usado es:
      </para>

      <programlisting>

	<sgmltag>&lt;UL TYPE=&quot;circle&quot;&gt;</sgmltag>

	<sgmltag>&lt;LI&gt;</sgmltag>
	<productname>Ms Internet Explorer</productname>
	<sgmltag>&lt;LI&gt;</sgmltag>
	<productname>Netscape Navigator</productname>
	<sgmltag>&lt;LI&gt;</sgmltag>
	<productname>Opera</productname>
	<sgmltag>&lt;LI&gt;</sgmltag>
	<productname>Lynx</productname>

	<sgmltag>&lt;/UL&gt;</sgmltag>

      </programlisting>

      <para>
	Si queremos hacer esta misma lista pero con viñetas cuadradas
	tendremos que escribir:
      </para>

      <programlisting>

	<sgmltag>&lt;UL TYPE=&quot;square&quot;&gt;</sgmltag>

	<sgmltag>&lt;LI&gt;</sgmltag>
	<productname>Ms Internet Explorer</productname>
	<sgmltag>&lt;LI&gt;</sgmltag>
	<productname>Netscape Navigator</productname>
	<sgmltag>&lt;LI&gt;</sgmltag>
	<productname>Opera</productname>
	<sgmltag>&lt;LI&gt;</sgmltag>
	<productname>Lynx</productname>

	<sgmltag>&lt;/UL&gt;</sgmltag>

      </programlisting>

      <para>
	En la figura 7.7 podemos ver ambos ejemplos junto con un tercero
	que se obtiene no usando el atributo TYPE o usándolo con el valor
	TYPE=&quot;disc&quot;.
      </para>

      <figure label="7.7">

	<title>
	  En HTML 3.2 existen 3 tipos de viñetas para las listas no
	  ordenadas. Con el atributo TYPE podemos elegir entre ellos.
	</title>
	<graphic fileref="img/fig7-7.png"/>

      </figure>

      <para>
	En la figura 7.8 vemos estos tres ejemplos de nuevo, pero esta vez
	visualizándolos con <productname>Netscape Navigator</productname>.
      </para>

      <figure label="7.8">

	<title>
	  Comparando esta figura con la anterior vemos la similitud entre
	  las distintas viñetas de los elementos de las listas usadas por
	  <productname>Netscape Navigator</productname> e
	  <productname>Internet Explorer</productname>.
	</title>
	<graphic fileref="img/fig7-8.png"/>

      </figure>

      <para>
	Es importante apreciar que no existen prácticamente diferencias,
	quizá la única sea la variación de tamaño de los símbolos de
	algunas viñetas.
      </para>

      <para>
	Hasta ahora hemos usado el atributo TYPE en la etiqueta que definía
	el tipo de lista, es decir, en la etiqueta UL. De esta forma el
	cambio en el tipo de viñeta afectaba a todos los elementos de
	lista. Sin embargo también puede usarse en la etiqueta LI, y de
	esta forma conseguimos que el cambio de viñeta sólo afecte a un
	elemento de lista concreto. La mejor manera de ver este efecto es
	con un ejemplo y por ello vamos a retomar el primero de los tres
	vistos antes pero cambiando el tipo de viñeta del navegador
	<productname>Lynx</productname>. Esto podría servirnos en un
	ejemplo real para indicar que este navegador es un navegador en
	modo texto, mientras que los demás son navegadores gráficos. El
	código que debemos usar es:
      </para>

      <programlisting>

	<sgmltag>&lt;UL TYPE=&quot;circle&quot;&gt;</sgmltag>

	<sgmltag>&lt;LI&gt;</sgmltag>
	<productname>Ms Internet Explorer</productname>
	<sgmltag>&lt;LI&gt;</sgmltag>
	<productname>Netscape Navigator</productname>
	<sgmltag>&lt;LI&gt;</sgmltag>
	<productname>Opera</productname>
	<sgmltag>&lt;LI TYPE=&quot;disc&quot;&gt;</sgmltag>
	<productname>Lynx</productname>

	<sgmltag>&lt;/UL&gt;</sgmltag>

      </programlisting>

      <para>
	En la figura 7.9 podemos ver el resultado.
      </para>

      <figure label="7.9">

	<title>
	  Usando el atributo TYPE en una etiqueta LI podemos cambiar la
	  viñeta de un único elemento de lista sin afectar a los demás.
	</title>
	<graphic fileref="img/fig7-9.png"/>

      </figure>

      <para>
	Con esto podemos dar por terminadas las novedades de las listas no
	ordenadas, pasemos a las ordenadas.
      </para>

    </sect2>

    <sect2>

      <title>Listas ordenadas</title>

      <para>
	Este tipo de listas tiene alguna novedad más que las anteriores.
	Para empezar también le ha sido añadido un atributo cuyo nombre es
	<emphasis>TYPE</emphasis>. Pero ahora la función que desempeña es
	ligeramente distinta, si antes cambiaba el tipo de viñeta ahora
	cambiará el tipo de numeración. En la tabla 7.1 podemos ver los
	cinco tipos distintos que hay y el valor que debe tomar el atributo
	TYPE para elegir cada uno:
      </para>

      <figure label="7.1">

	<title>
	  Los cinco tipos distintos que puede tomar el atributo TYPE para
	  listas ordenadas
	</title>
	<graphic fileref="img/tabla7-1.png"/>

      </figure>

      <para>
	Siguiendo con la lista usada como ejemplo anteriormente, ahora
	podríamos numerar los elementos de lista con letras escribiendo el
	siguiente código:
      </para>

      <programlisting>

	<sgmltag>&lt;OL TYPE=&quot;a&quot;&gt;</sgmltag>

	<sgmltag>&lt;LI&gt;</sgmltag>
	<productname>Ms Internet Explorer</productname>
	<sgmltag>&lt;LI&gt;</sgmltag>
	<productname>Netscape Navigator</productname>
	<sgmltag>&lt;LI&gt;</sgmltag>
	<productname>Opera</productname>
	<sgmltag>&lt;LI;&gt;</sgmltag>
	<productname>Lynx</productname>

	<sgmltag>&lt;/OL&gt;</sgmltag>

      </programlisting>

      <para>
	Cambiando el valor del atributo TYPE por cada uno de los que veíamos
	en la tabla 7.1 obtendremos todos los tipos de numeración tal y
	como apreciamos en la figura 7.10:
      </para>

      <figure label="7.10">

	<title>
	  Con el atributo TYPE podemos elegir entre 5 tipos distintos de
	  numeración en las listas de HTML. En esta figura vemos los 4
	  nuevos.
	</title>
	<graphic fileref="img/fig7-10.png"/>

      </figure>

      <para>
	Al igual que en el caso de las listas no ordenadas podemos usar el
	atributo TYPE con cada una de las etiquetas LI. Sin embargo ahora el
	efecto es menos útil que antes, ya que, en general, cambiar el tipo
	de numeración (OJO, no se vuelve a empezar desde cero) para algunos
	de los elementos de lista confunde al navegante que vaya a verla.
      </para>

      <para>
	La siguiente novedad introducida por la versión 3.2 del estándar
	del lenguaje HTML para las listas ordenadas es el atributo
	<emphasis>START</emphasis>. Si bien las listas que hemos creado
	hasta ahora comenzaban siempre por 1 (o por a, A, i, I, según el
	tipo de numeración) con este atributo podemos elegir porqué número
	(o letra) comenzará el primer elemento de lista. Esto suele ser útil
	cuando tenemos que partir una lista en dos porque queremos insertar
	algo en medio y queremos retomar la numeración después. Este
	atributo tiene como valores posibles todos los números naturales
	(1, 2, 3, ...)
      </para>

      <para>
	Si en cada uno de los ejemplos de la figura 7.10 ponemos el
	atributo START con el valor 10 obtendremos el resultado de la
	figura 7.11:
      </para>

      <figure label="7.11">

	<title>
	  Si usamos el atributo START podemos variar el número (o letra en
	  estos casos) por los que se empiezan a numerar los elementos de
	  la lista.
	</title>
	<graphic fileref="img/fig7-11.png"/>

      </figure>

      <para>
	Aunque en esta figura no está el tipo de numeración arábigo (1, 2,
	3, ...) los resultados de este tipo de numeración son fácilmente
	previsibles.
      </para>

      <para>
	El atributo START no puede ser usado de manera independiente en
	cada elemento de lista, LI. Si embargo si que existe otro atributo
	que nos permitirá cambiar el número que precede a cada elemento de
	lista: <emphasis>VALUE</emphasis>. Este atributo funciona de manera
	muy similar a START, toma como valor un número natural y lo
	convierte al tipo de numeración que usa esa lista. Por ejemplo
	podríamos crear una lista con numeración romana impar de la
	siguiente manera:
      </para>

      <programlisting>

	<sgmltag>&lt;OL TYPE=&quot;i&quot;&gt;</sgmltag>

	<sgmltag>&lt;LI VALUE=1&gt;</sgmltag>
	<productname>Ms Internet Explorer</productname>
	<sgmltag>&lt;LI VALUE=3&gt;</sgmltag>
	<productname>Netscape Navigator</productname>
	<sgmltag>&lt;LI VALUE=5&gt;</sgmltag>
	<productname>Opera</productname>
	<sgmltag>&lt;LI VALUE=7;&gt;</sgmltag>
	<productname>Lynx</productname>

	<sgmltag>&lt;/OL&gt;</sgmltag>

      </programlisting>

      <para>
	Que nos da el resultado de la figura 7.12:
      </para>

      <figure label="7.12">

	<title>
	  Con el atributo VALUE podemos indicar el valor de la numeración
	  de cada uno de los elementos de las listas numeradas.
	</title>
	<graphic fileref="img/fig7-12.png"/>

      </figure>

      <para>
	Con este atributo ya podemos dar por terminadas las novedades
	introducidas por HTML 3.2 en la creación de listas. Pero aún queda
	por comentar un último atributo que existe desde las primeras
	versiones del lenguaje HTML:<emphasis>COMPACT</emphasis>. Este
	atributo puede ser usado en cualquiera tipo de lista: UL, OL, MENU,
	DIR y DL, y su función es decirle al navegador que intente
	comprimir el tamaño que ocupa la lista al máximo, por ejemplo
	reduciendo el espacio entre cada uno de los elementos de lista. La
	forma de usar este atributo es simple y no toma ningún valor.
	Siguiendo con el ejemplo usado hasta ahora podríamos usar el
	siguiente código:
      </para>

      <programlisting>

	<sgmltag>&lt;OL COMPACT;&gt;</sgmltag>

	<sgmltag>&lt;LI&gt;</sgmltag>
	<productname>Ms Internet Explorer</productname>
	<sgmltag>&lt;LI&gt;</sgmltag>
	<productname>Netscape Navigator</productname>
	<sgmltag>&lt;LI&gt;</sgmltag>
	<productname>Opera</productname>
	<sgmltag>&lt;LI&gt;</sgmltag>
	<productname>Lynx</productname>

	<sgmltag>&lt;/OL&gt;</sgmltag>

      </programlisting>

      <para>
	El problema de este atributo es que en general los navegadores lo
	ignoran y muestran la lista exactamente igual que las demás. Si el
	lector prueba el código de este último ejemplo en <productname>
	  Navigator</productname> o <productname>Explorer</productname>
	probablemente no notará ninguna diferencia por haber usado COMPACT,
	aun así hemos considerado recomendable comentar su existencia.
      </para>

    </sect2>

  </sect1>

  <sect1>

    <title>Alineamiento</title>

    <para>
      Este no es un tema nuevo. En gran parte de las etiquetas que hemos
      visto hasta ahora existía el atributo llamado ALIGN, que aunque
      variaba en su funcionamiento ligeramente de unas a otras cumplía la
      función principal de permitirnos elegir el alineamiento de los
      elementos en la página. Algunos ejemplos de etiquetas donde nos
      encontramos con este atributo son IMG, P y TABLE. También vimos la
      etiqueta CENTER. Con ella podíamos centrar cualquier elemento que
      insertáramos en una página web sin más que situar el código
      correspondiente entre la instrucción de inicio <sgmltag>&lt;CENTER
	&gt;</sgmltag> y la instrucción de fin <sgmltag>&lt;/CENTER&gt;
      </sgmltag>. De esta forma conseguíamos alinear elementos cuyas
      etiquetas no tuviesen el atributo ALIGN.
    </para>

    <para>
      Y...¿hace falta algo más? Quizá lo único que se echa en falta es algo
      de uniformidad. El atributo ALIGN surgió en algunas etiquetas por la
      inexistencia de otro medio de alineamiento. La etiqueta CENTER no
      pertenecía al HTML 2.0 y fue una invención de <productname>Netscape
      </productname>. A pesar de ello empezó a usarse masivamente y el web
      Consortium se vio obligado a incluirla en el estándar HTML 3.2.
    </para>

    <para>
      Pero su enfoque del tema era algo distinto y por ello además de
      incluir la etiqueta CENTER se creó una nueva: <emphasis>DIV
      </emphasis>. La función de esta etiqueta es realizar divisiones en
      las páginas de manera que podamos indicar las propiedades de cada una
      de estas divisiones por separado. Por ahora la única propiedad que
      podemos controlar es el alineamiento horizontal haciendo uso del
      conocido atributo ALIGN. Este atributo puede tomar los, ya conocidos,
      valores: LEFT, CENTER, RIGHT. Es decir, para usar esta etiqueta
      deberemos escribir el siguiente código:
    </para>

    <programlisting>

      <sgmltag>&lt;DIV ALIGN=&quot;CENTER&quot;&gt;</sgmltag>
      ... Cualquier etiqueta ...
      <sgmltag>&lt;/DIV&gt;</sgmltag>

    </programlisting>

    <para>
      En este caso hemos usado como ejemplo el valor CENTER, en la figura
      7.13 podemos ver un ejemplo con cada uno de los tres valores posibles
      en los que hemos alineado de una vez un párrafo una lista y una
      imagen.
    </para>

    <figure label="7.13">

      <title>
	Con la nueva etiqueta DIV podemos cambiar el alineamiento de todo
	tipo de elementos HTML (imágenes, listas, párrafos, etc.) de una
	sola vez.
      </title>
      <graphic fileref="img/fig7-13.png"/>

    </figure>

    <note>

      <para>
	En su idea original usar <sgmltag>&lt;DIV ALIGN=&quot;center&quot;
	  &gt;</sgmltag> debía ser equivalente a usar <sgmltag>&lt;CENTER
	  &gt;</sgmltag> pero por unas razones o por otras el efecto no es el
	mismo y por ello la etiqueta DIV no es muy usada.
      </para>

    </note>

    <para>
      En el estándar HTML 4.0 la función de la etiqueta DIV sufrirá un
      cambio fundamental. En este estándar se desaconseja su uso para
      elegir el tipo de alineamiento, ya que se aconseja que eso se haga
      con hojas de estilo. La función de DIV será entonces seleccionar el
      idioma usado u otras características relacionadas con las hojas de
      estilo que veremos más adelante.
    </para>

    <note>

      <para>
	<productname>Internet Explorer</productname> introdujo como
	extensión el valor ALIGN=&quot;justify&quot;. Más tarde ha sido
	adoptado por <productname>Netscape</productname> y también ha sido
	incluido en el estándar HTML 4.0 (Cougar). La función de este
	atributo es justificar los márgenes tanto derecho como izquierdo de
	la misma manera en que lo están estas columnas de texto de esta
	publicación.
      </para>

    </note>

  </sect1>

  <sect1>

    <title>La etiqueta META</title>

    <para>
      Uno de los mejores métodos para aprender nuevas técnicas en la
      programación HTML consiste en examinar el código de las páginas que
      han creado otros. Desde hace ya algún tiempo empezó a proliferar el
      uso de una etiqueta, de nombre META, que, si bien existe desde los
      comienzos del lenguaje HTML, era una gran desconocida. Incluso hoy en
      día muchos programadores de páginas web no conocen el significado de
      esta etiqueta. A grandes rasgos podríamos decir que la etiqueta META
      sirve para describir las características de la página web. La forma
      en que esta información es usada no está siempre determinada, con lo
      que la mejor forma de aprender a usar la etiqueta META es mediante
      una serie de ejemplos.
    </para>

    <sect2>

      <title>Carga automática de páginas</title>

      <para>
	Esta es, sin duda, la función más útil de todas las que puede
	desempeñar la etiqueta META y consiste en cargar automáticamente
	una página desde la actual transcurridos unos segundos sin que el
	usuario tenga que hacer nada. Para conseguir esto debe incluirse en
	la cabecera del documento HTML, es decir entre <sgmltag>&lt;HEAD
	  &gt;</sgmltag> y <sgmltag>&lt;/HEAD&gt;</sgmltag> la siguiente
	línea:
      </para>

      <programlisting>
	&lt;META HTTP-EQUIV="Refresh" 
	CONTENT="5"
	URL="http://es.gnome.org"&gt;
      </programlisting>

      <para>
	Cuando una página tenga esta línea de código cargará la página
	<ulink url="http://es.gnome.org">es.gnome.org</ulink>
	pasados 5 segundos de la carga de dicha página. Por supuesto el
	número de segundos y la dirección a la que queremos que se salte se
	pueden cambiar. Ambos datos deben estar entre comillas y separados
	por punto y coma, tal y como se muestra en el ejemplo anterior.
      </para>

    </sect2>

    <sect2>

      <title>Información para los buscadores</title>

      <para>
	Todos los navegantes del WWWW hemos usado en alguna ocasión alguno
	de los buscadores como Yahoo (figura 7.14), Altavista, Ole, Ozú, o
	algún otro.
      </para>

      <figure label="7.14">
	<title>
	  Los buscadores permiten a los navegantes encontrar la información
	  que buscan. Usando la etiqueta META podemos proporcionarles datos
	  para que incluyan nuestras páginas en sus bases de datos.
	</title>
	<graphic fileref="img/fig7-14.png"/>
      </figure>

      <para>
	Estos buscadores tienen una serie de programas llamados arañas,
	webbots o bots que navegan por la red reclutando páginas para
	incluir en su buscador. Si incluimos en nuestra página cierta
	información es muy probable que incluya nuestra página en la base
	de datos del buscador. Entre la información que puede necesitar el
	webbot está el autor de la página, una breve descripción de la
	misma, palabras clave que la definan, etc. Para insertar estos
	datos haremos uso de los atributos NAME y CONTENT de la etiqueta
	META. Por ejemplo en la página de Los Alpes será conveniente
	añadir:
      </para>

      <programlisting>

	<sgmltag>
	  &lt;META NAME=&quot;author&quot; 
	  CONTENT=&quot;WebMaster de Los Alpes&quot;&gt;
	</sgmltag>
	<sgmltag>
	  &lt;META NAME=&quot;keywords&quot; 
	  CONTENT=&quot;viajes, ofertas, Los Alpes, Orlando, Nueva
	  Zelanda&quot;&gt;
	</sgmltag>
	<sgmltag>
	  &lt;META NAME=&quot;description&quot; 
	  CONTENT=&quot;La agencia de viajes Los Alpes tiene un
	  gran prestigio en el mundo de las empresas y
	  combina una gran calidad con unos excelentes
	  precios.&quot;&gt;
	</sgmltag>

      </programlisting>

    </sect2>

    <sect2>

      <title>Otros usos</title>

      <para>
	La etiqueta META tiene tres atributos HTTP-EQUIV, NAME y CONTENT.
	Normalmente se pone una de las dos primeras para indicar el nombre
	de la información que vamos a incluir y siempre se usa CONTENT para
	insertar dicha información. El atributo HTTP-EQUIV sirve para
	insertar información relacionada con el protocolo HTTP. Este es el
	lenguaje con el que habla el ordenador donde hay un navegador para
	pedirle páginas a un servidor web y con el que responde este al
	servir (mandar) dicha página. Un ejemplo de su uso es el que
	veíamos al principio de solicitar otra página transcurridos unos
	segundos. Otro posible ejemplo sería indicar una fecha a partir de
	la cual la página no debe ser servida.
      </para>

      <para>
	El atributo NAME tiene un significado mucho más general y puede ser
	usado con multitud de propósitos. Ya hemos visto que puede servir
	para mandar información a los buscadores y también suelen ser
	usados por los editores HTML que generan el código HTML
	automáticamente para incluir información específica.
      </para>

    </sect2>

  </sect1>

  <sect1>

    <title>Otras etiquetas del lenguaje HTML 3.2</title>

    <para>
      Ya casi podemos dar por concluido el aprendizaje del lenguaje HTML
      3.2. Conocemos prácticamente todas las etiquetas y todos los
      atributos que existen en este estándar. En este apartado vamos a
      explicar lo poco que nos quedan para dar por terminado del todo
      nuestro aprendizaje de esta versión del estándar. Las etiquetas que
      vamos a comentar a continuación no tienen demasiada relación entre sí,
      y no han sido explicadas hasta ahora por que son raramente usadas,
      porque muchos navegadores no las entienden o porque necesitamos
      conocer algunas cosas más para entender su funcionamiento.
    </para>

    <sect2>

      <title>Descriptor de tipo de documento</title>

      <para>
	Pero antes de empezar vamos a introducir un nuevo concepto que
	todavía no habíamos mencionado: el <emphasis>descriptor de tipo de
	  documento</emphasis>. Aunque suene extraño, no lo es, nos referimos
	a una declaración que según el estándar todas las páginas web deben
	tener para ser consideradas como HTML. Esta declaración ocupa una
	sola línea e incluirá también información sobre la versión de
	HTML que hemos usado. No es necesario incluir este descriptor en
	nuestras páginas para que los navegadores la interpreten como HTML,
	sin embargo incluirlo no causa demasiado trabajo, y estaremos
	cumpliendo con el estándar. Algunos de estos descriptores más
	comúnmente usados son:
      </para>

      <programlisting>

	<sgmltag>
	  &lt;!DOCTYPE HTML
	  PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
	</sgmltag>
	<sgmltag>
	  &lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
	</sgmltag>

      </programlisting>

      <para>
	Todos empiezan por la cadena &lt;!DOCTYPE ..., el resto no es
	necesario entender que significa a excepción de la cadena HTML 3.2
	del primero que indica que hemos usado etiquetas del ese estándar y
	HTML 2.0 del segundo que indica lo mismo esta vez con la versión
	2.0 del estándar. El descriptor de tipo de documento debe ser la
	primera línea de la página, con lo que ahora la estructura básica
	será:
      </para>

      <programlisting>

	&lt;!DOCTYPE HTML
	PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
	<sgmltag>&lt;HTML&gt;</sgmltag>
	<sgmltag>&lt;HEAD&gt;</sgmltag>...<sgmltag>&lt;/HEAD&gt;</sgmltag>
	<sgmltag>&lt;BODY&gt;</sgmltag>
	... Código ...
	<sgmltag>&lt;/BODY&gt;</sgmltag>
	<sgmltag>&lt;/HTML&gt;</sgmltag>

      </programlisting>

    </sect2>

    <sect2>

      <title>Otras etiquetas</title>

      <para>
	Existen unas pocas etiquetas del lenguaje HTML 3.2 que no hemos
	comentado todavía por diversos motivos. Hemos querido enumerarlas y
	dar una breve descripción para que el lector pueda dar por
	concluido el aprendizaje de la versión estándar de este lenguaje.
	En los siguientes capítulo abordará a fondo las extensiones de
	<productname>Netscape</productname> y <productname>Microsoft
	</productname>.
      </para>

      <para>
	Las etiquetas de HTML 3.2 que todavía no hemos visto son:
      </para>

      <itemizedlist>

	<listitem>

	  <para>
	    <emphasis>APPLET</emphasis>: Esta es la etiqueta que se usa
	    para insertar applets de Java y será estudiada más adelante.
	  </para>

	</listitem>

	<listitem>

	  <para>
	    <emphasis>STYLE</emphasis>: Esta etiqueta está compuesta por
	    una instrucción de inicio, <sgmltag>&lt;STYLE&gt;</sgmltag> y
	    otra de fin <sgmltag>&lt;/STYLE&gt;</sgmltag> y debe ser usado
	    en la cabecera de la página. En su interior se introduce el
	    código de las hojas de estilo que trataremos más a fondo en los
	    últimos capítulos dedicados al lenguaje HTML.
	  </para>

	</listitem>

	<listitem>

	  <para>
	    <emphasis>SCRIPT</emphasis>: Aunque el estándar HTML 3.2 no
	    soporta los lenguajes de script si admite la existencia de esta
	    etiqueta admitiendo que en un futuro será usada con este fin.
	    Las extensiones de <productname>Netscape</productname> y
	    <productname>Explorer</productname> la usan para insertar
	    JavaScript y VBScript. Estos lenguajes son muy importantes en
	    la programación Internet y por tanto también están incluidos en
	    esta obra.
	  </para>

	</listitem>

	<listitem>

	  <para>
	    <emphasis>FORM</emphasis>: Con la etiqueta FORM y una serie de
	    subetiquetas podremos crear formularios interactivos mediante
	    los cuales un usuario podrá mandarnos datos. La creación de
	    estos formularios no se limita a la programación HTML, sino que
	    también hay que tratar de alguna forma la información que se
	    recibe. Por esta razón hemos preferido explicar los formularios
	    un poco más adelante.
	  </para>

	</listitem>

	<listitem>

	  <para>
	    <emphasis>ISINDEX</emphasis>: Este es un método antiguo para
	    crear formularios interactivos. Su uso está desaconsejado y por
	    tanto sólo comentaremos su existencia.
	  </para>

	</listitem>

      </itemizedlist>

      <para>
	Ahora si, ya podemos dar por terminado el aprendizaje del lenguaje
	HTML estándar. A partir de ahora aprenderemos a crear los efectos
	más atractivos que podemos encontrar hoy en día en el World Wide
	web.
      </para>

    </sect2>

  </sect1>

</article>
