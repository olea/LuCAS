<?xml version="1.0" encoding="iso-8859-1" ?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<article>

<articleinfo>

<title>RPM COMO </title>

<author>
<firstname>Donnie Barnes, <ulink
url="mailto:djb@redhat.com"
>djb@redhat.com</ulink
>

Traductor: Antonio Ismael Olea González, 

<ulink
url="mailto:olea@iname.com"
>olea@iname.com</ulink
>
2:345/108.9@fidonet.org</firstname>
</author>

<pubdate>V2.0, April 8, 1997</pubdate>

<abstract>

<para>
Este documento describe el uso del formato de paquetes de instalación que se ha convertido en estándar de facto, el RPM (RedHat Package Manager)
</para>

</abstract>

</articleinfo>

<sect1>
<title>Introducción</title>

<para>
RPM es el gestor de paquetes de Red Hat (<emphasis remap="bf">R</emphasis>ed Hat <emphasis remap="bf">P</emphasis>ackage
<emphasis remap="bf">M</emphasis>anager). Aunque aparece Red Hat en su nombre, la intención es que
sea un sistema de empaquetado abierto y disponible para el uso de
cualquiera. Permite a los usuarios tomar el código fuente (<emphasis remap="it">source
code</emphasis>) y empaquetarlo en forma de fuentes y binaria de forma que los
ficheros binarios sean fácilmente instalables y rastreables y los fuentes
puedan ser reconstruidas con facilidad. También gestiona una base de datos
de todos los paquetes y sus ficheros que puede ser usada para verificar
paquetes e interrogarla para obtener información acerca de ficheros y/o
paquetes.
</para>

<para>
Red Hat Software anima a otros vendedores de distribuciones a dedicar un
rato para examinar RPM y usarlo para sus propias distribuciones. RPM es
completamente flexible y fácil de usar, aunque provee la base para un
sistema muy extenso. También es completamente abierto y disponible aunque
agradeceríamos informes de fallos (<emphasis remap="it">bugs</emphasis>) y sus reparaciones
(<emphasis remap="it">fixes</emphasis>). Se concede permiso para usar y distribuir RPM, libre de
<emphasis remap="it">royalties</emphasis>, bajo la protección de la licencia GPL. 
</para>

<para>
Puede encontrar información más completa sobre RPM en el libro de Ed
Bailey <emphasis>Maximum RPM</emphasis>.  Dicho libro está disponible en <literal remap="tt"><ulink
url="http://www.redhat.com"
>www.redhat.com</ulink
></literal>. 
</para>

</sect1>

<sect1>
<title>Visión general</title>

<para>
Primero, permítame expresar parte de la filosofía tras RPM. Uno de los
objetivos del diseño fue permitir el uso de fuentes
``prístinas
<footnote>

<para>
N.T.: originales
</para>

</footnote>
''.
</para>

<para>
Con RPP (nuestro anterior sistema de empaquetado del cual RPM <emphasis>no
deriva</emphasis> en absoluto), nuestros paquetes de fuentes debían ser
``hackeados
<footnote>

<para>
N.T.: retocados
</para>

</footnote>
'' para poder construir las
aplicaciones desde ellos. Teóricamente, se podía instalar un paquete
fuente RPP y efectuarle un <literal remap="tt">make</literal> sin problemas.  Pero los fuentes no
eran las originales, y no había referencia alguna a los cambios que
habíamos hecho para que pudieran compilar. Se hacía pues necesario bajarse
los fuentes originales de forma separada. 
</para>

<para>
Con RPM, tiene los fuentes originales junto al ``parche
<footnote>

<para>
N.T.:
<emphasis>patch</emphasis> en el original
</para>

</footnote>
'' que hemos usado para poder
compilarlo. Vemos en esto una gran ventaja. ¿Por qué? Son varias las
razones. La primera es que si sale disponible una nueva versión de un
programa, usted no necesita empezar desde la nada para conseguir que
compile bajo RHL. Puede examinar el parche para saber qué <emphasis>podría</emphasis>
necesitar hacer. De esta manera toda la configuración por defecto de
compilación queda fácilmente a la vista. 
</para>

<para>
RPM también está diseñado para disponer de potentes parámetros de
consulta.  Usted puede hacer búsquedas de paquetes a lo largo de toda la
base de datos o sólo de ciertos ficheros. También puede encontrar
fácilmente a qué paquete pertenece un fichero y de dónde proviene. Los
ficheros RPM en sí mismos son archivos comprimidos, pero puede consultar
paquetes independientes fácil y <emphasis>rápidamente</emphasis>, gracias a una cabecera
binaria a medida añadida al paquete con toda la información que puede
necesitar, almacenada sin comprimir. Esto permite consultas <emphasis>rápidas</emphasis>. 
</para>

<para>
Otra poderosa característica es la habilidad de verificar paquetes. Si
está preocupado por haber borrado algún fichero importante, sólo tiene que
verificar el paquete. Quedará cumplidamente informado de cualquier
anomalía.  Llegados a ese punto, podrá reinstalar el paquete si lo
considera necesario.  Cualquier fichero de configuración que usted tenga
quedará a salvo. 
</para>

<para>
Queremos agradecer a los colegas de la distribución BOGUS por muchas de
sus ideas y conceptos que han sido incluidos en RPM. Aunque RPM está
completamente escrito por Red Hat Software, su funcionamiento está basado
en código escrito por BOGUS (PM y PMS). 
</para>

</sect1>

<sect1>
<title>Información general</title>

<sect2>
<title>Adquirir RPM</title>

<para>
La mejor forma de conseguir RPM es instalando Red Hat Commercial Linux. Si
no quiere hacer eso, puede seguir usando RPM. Puede conseguirse
en:
</para>

<para>
<literal remap="tt"><ulink
url="ftp://ftp.redhat.com/pub/redhat/code/rpm"
>ftp.redhat.com/pub/redhat/code/rpm</ulink
></literal>
</para>

</sect2>

<sect2>
<title>Requerimientos de RPM</title>

<para>
El principal requerimiento para ejecutar RPM es <literal remap="tt">cpio</literal> 2.4.2 o
superior. Aunque el sistema fue ideado para ser usado con Linux, puede ser
perfectamente portado a cualquier sistema Unix. De hecho, ha sido
compilado en SunOS, Solaris, AIX, Irix, AmigaOS, y otros.  Queda advertido
que los paquetes binarios generados en diferentes tipos de sistemas Unix
no serán compatibles.
</para>

<para>
Estos son los mínimos requerimientos para instalar RPMs. Para construir
RPMs a partir de los fuentes, necesitará todo lo normalmente requerido
para construir un paquete, cosas como <literal remap="tt">gcc</literal>, <literal remap="tt">make</literal>, etc. 
</para>

</sect2>

</sect1>

<sect1>
<title>Usando RPM</title>

<para>
En su forma más simple, RPM puede usarse para instalar paquetes:
</para>

<para>

<screen>
        rpm -i foobar-1.0-1.i386.rpm 
</screen>

</para>

<para>
El siguiente comando más simple es desinstalar un paquete:
</para>

<para>

<screen>
        rpm -e foobar
</screen>

</para>

<para>
Uno de los más complejos pero <emphasis>más</emphasis> útiles comandos le permiten
instalar paquetes a través de FTP. Si está conectado a la Red y quiere
instalar un nuevo paquete, todo lo que necesita hacer es especificar el
fichero con un url válido, como esto: 
</para>

<para>

<screen>
rpm -i ftp://ftp.pht.com/pub/linux/redhat/rh-2.0-beta/RPMS/foobar-1.0-1.i386.rpm
</screen>

</para>

<para>
Apercíbase de que ahora RPM puede hacer consultas y/o instalaciones a
través de FTP. 
</para>

<para>
Aunque estos son comandos simples, <literal remap="tt">rpm</literal> puede usarse de multitud de
formas, como puede verse en el mensaje de <emphasis>Ayuda</emphasis>:
</para>

<para>

<screen>
RPM version 2.3.9
Copyright (C) 1997 - Red Hat Software
This may be freely redistributed under the terms of the GNU Public License

usage: rpm {--help}
       rpm {--version}
       rpm {--initdb}   [--dbpath &#60;dir&#62;]
       rpm {--install -i} [-v] [--hash -h] [--percent] [--force] [--test]
                        [--replacepkgs] [--replacefiles] [--root &#60;dir&#62;]
                        [--excludedocs] [--includedocs] [--noscripts]
                        [--rcfile &#60;file&#62;] [--ignorearch] [--dbpath &#60;dir&#62;]
                        [--prefix &#60;dir&#62;] [--ignoreos] [--nodeps]
                        [--ftpproxy &#60;host&#62;] [--ftpport &#60;port&#62;]
                        file1.rpm ... fileN.rpm
       rpm {--upgrade -U} [-v] [--hash -h] [--percent] [--force] [--test]
                        [--oldpackage] [--root &#60;dir&#62;] [--noscripts]
                        [--excludedocs] [--includedocs] [--rcfile &#60;file&#62;]
                        [--ignorearch]  [--dbpath &#60;dir&#62;] [--prefix &#60;dir&#62;] 
                        [--ftpproxy &#60;host&#62;] [--ftpport &#60;port&#62;]
                        [--ignoreos] [--nodeps] file1.rpm ... fileN.rpm
       rpm {--query -q} [-afpg] [-i] [-l] [-s] [-d] [-c] [-v] [-R]
                        [--scripts] [--root &#60;dir&#62;] [--rcfile &#60;file&#62;]
                        [--whatprovides] [--whatrequires] [--requires]
                        [--ftpuseport] [--ftpproxy &#60;host&#62;] [--ftpport &#60;port&#62;]
                        [--provides] [--dump] [--dbpath &#60;dir&#62;] [targets]
       rpm {--verify -V -y} [-afpg] [--root &#60;dir&#62;] [--rcfile &#60;file&#62;]
                        [--dbpath &#60;dir&#62;] [--nodeps] [--nofiles] [--noscripts]
                        [--nomd5] [targets]
       rpm {--setperms} [-afpg] [target]
       rpm {--setugids} [-afpg] [target]
       rpm {--erase -e} [--root &#60;dir&#62;] [--noscripts] [--rcfile &#60;file&#62;]
                        [--dbpath &#60;dir&#62;] [--nodeps] [--allmatches]
                        package1 ... packageN
       rpm {-b|t}[plciba] [-v] [--short-circuit] [--clean] [--rcfile  &#60;file&#62;]
                        [--sign] [--test] [--timecheck &#60;s&#62;] specfile
       rpm {--rebuild} [--rcfile &#60;file&#62;] [-v] source1.rpm ... sourceN.rpm
       rpm {--recompile} [--rcfile &#60;file&#62;] [-v] source1.rpm ... sourceN.rpm
       rpm {--resign} [--rcfile &#60;file&#62;] package1 package2 ... packageN
       rpm {--addsign} [--rcfile &#60;file&#62;] package1 package2 ... packageN
       rpm {--checksig -K} [--nopgp] [--nomd5] [--rcfile &#60;file&#62;]
                           package1 ... packageN
       rpm {--rebuilddb} [--rcfile &#60;file&#62;] [--dbpath &#60;dir&#62;]
       rpm {--querytags}
</screen>

</para>

<para>
Podrá encontrar más detalles acerca de la función de estos parametros en
la página del manual de RPM. 
</para>

</sect1>

<sect1>
<title>Y ahora, ¿qué puedo hacer <emphasis>de verdad</emphasis> con RPM?</title>

<para>
RPM es una herramienta potentísima y, como puede ver, dispone de varios
parámetros. La mejor forma de apercibirse de ellas es examinando unos
cuantos ejemplos. Antes mostramos una instalación/desinstalación sencilla,
ahora van unos cuantos más: 
</para>

<para>

<itemizedlist>
<listitem>

<para>
Supongamos que ha borrado unos cuantos ficheros por accidente, pero
no está seguro de qué es lo que ha borrado. Si quiere verificar
completamente su sistema y ver qué se ha perdido, puede hacer:


<screen>
rpm -Va
</screen>


</para>
</listitem>
<listitem>

<para>
Supongamos que se encuentra con un fichero que no reconoce. Para
saber a qué paquete pertenece puede hacer: 


<screen>
rpm -qf /usr/X11R6/bin/xjewel
</screen>


La salida podría ser:


<screen>
xjewel-1.6-1
</screen>


</para>
</listitem>
<listitem>

<para>
Supongamos que acaba de hacerse con un nuevo paquete RPM de
<literal remap="tt">koules</literal>, pero no sabe qué puede ser. Para obtener información al
respecto:


<screen>
rpm -qpi koules-1.2-2.i386.rpm
</screen>


La salida podría ser:


<screen>
Name        : koules                      Distribution: Red Hat Linux Colgate
Version     : 1.2                               Vendor: Red Hat Software
Release     : 2                             Build Date: Mon Sep 02 11:59:12 1996
Install date: (none)                        Build Host: porky.redhat.com
Group       : Games                         Source RPM: koules-1.2-2.src.rpm
Size        : 614939
Summary     : SVGAlib action game with multiplayer, network, and sound support
Description :
This arcade-style game is novel in conception and excellent in execution.
No shooting, no blood, no guts, no gore.  The play is simple, but you
still must develop skill to play.  This version uses SVGAlib to
run on a graphics console.
</screen>


</para>
</listitem>
<listitem>

<para>
Ahora quiere saber qué ficheros instala el paquete RPM. Puede hacer: 


<screen>
rpm -qpl koules-1.2-2.i386.rpm
</screen>


La salida es:

<screen>
/usr/doc/koules
/usr/doc/koules/ANNOUNCE
/usr/doc/koules/BUGS
/usr/doc/koules/COMPILE.OS2
/usr/doc/koules/COPYING
/usr/doc/koules/Card
/usr/doc/koules/ChangeLog
/usr/doc/koules/INSTALLATION
/usr/doc/koules/Icon.xpm
/usr/doc/koules/Icon2.xpm
/usr/doc/koules/Koules.FAQ
/usr/doc/koules/Koules.xpm
/usr/doc/koules/README
/usr/doc/koules/TODO
/usr/games/koules
/usr/games/koules.svga
/usr/games/koules.tcl
/usr/man/man6/koules.svga.6
</screen>

</para>
</listitem>

</itemizedlist>

</para>

<para>
Estos son sólo unos pocos ejemplos. Otros, aún más creativos, podrá
hacerlos fácilmente una vez que se haya familiarizado con RPM. 
</para>

</sect1>

<sect1>
<title>Construyendo paquetes RPM</title>

<para>
Construir paquetes RPM es algo realmente fácil de hacer, especialmente si
puede conseguir que el software que intenta empaquetar pueda compilarse por
sí mismo. 
</para>

<para>
El procedimiento básico es el siguiente:
</para>

<para>

<itemizedlist>
<listitem>

<para>
Asegúrese que su <literal remap="tt">/etc/rpmrc</literal> está configurado para su
sistema. 
</para>
</listitem>
<listitem>

<para>
Hágase con el código fuente del software a empaquetar para ser
compilado en su sistema.
</para>
</listitem>
<listitem>

<para>
Haga un parche con todos los cambios que ha tenido que realizar para
que los fuentes se compilen adecuadamente. 
</para>
</listitem>
<listitem>

<para>
Cree un fichero <literal remap="tt">.spec</literal> para el paquete.
</para>
</listitem>
<listitem>

<para>
Asegúrese de que todo está en su sitio.
</para>
</listitem>
<listitem>

<para>
Construya el paquete usando RPM.
</para>
</listitem>

</itemizedlist>

</para>

<para>
En general, RPM construirá tanto el paquete binario como el de los fuentes.
</para>

<sect2>
<title>El fichero <literal remap="tt">rpmrc</literal></title>

<para>
En lo sucesivo, la única configuración de RPM está disponible en el
fichero <literal remap="tt">/etc/rpmrc</literal>. Éste puede tener la siguiente apariencia: 
</para>

<para>

<screen>
require_vendor: 1
distribution: I roll my own!
require_distribution: 1
topdir: /usr/src/me
vendor: Mickiesoft
packager:  Mickeysoft Packaging Account &#60;packages@mickiesoft.com&#62;

optflags: i386 -O2 -m486 -fno-strength-reduce
optflags: alpha -O2
optflags: sparc -O2

signature: pgp
pgp_name: Mickeysoft Packaging Account
pgp_path: /home/packages/.pgp

tmppath: /usr/tmp
</screen>

</para>

<para>
La línea <literal remap="tt">require_vendor</literal> obliga a RPM a requerir una línea de vendor
(distribuidor). Ésta puede venir o bien del propio fichero
<literal remap="tt">/etc/rpmrc</literal> o de la cabecera del fichero <literal remap="tt">.spec</literal>. Para desactivar
este parámetro debe cambiarse el número a <literal remap="tt">0</literal>. Esto también se aplica a
las líneas <literal remap="tt">require_distribution</literal> y <literal remap="tt">require_group</literal>. 
</para>

<para>
La siguiente línea es la de <literal remap="tt">distribution</literal>
<footnote>

<para>
N.T.: 
distribución
</para>

</footnote>
. Puede definirla bien aquí o bien en el fichero
<literal remap="tt">.spec</literal>.  Cuando se empaqueta para una distribución en concreto, es
buena idea asegurarse de que esta línea es correcta, incluso cuando no se
requiera.  La línea de <literal remap="tt">vendor</literal>
<footnote>

<para>
N.T.: distribuidor
</para>

</footnote>

funciona de la misma manera, aunque puede contener cualquier cosa (ej.:
<emphasis remap="it">Joe's Software and Rock Music Emporium</emphasis>).
</para>

<para>
RPM también soporta ahora el empaquetado de paquetes para múltiples
arquitecturas. El fichero <literal remap="tt">rpmrc</literal> puede incluir una variable de
opciones (<literal remap="tt">optflags</literal>) que contiene parámetros específicos a la
arquitectura.  Lea secciones posteriores para saber cómo usar esta
variable.
</para>

<para>
En adición a las macros anteriores, hay disponibles unas cuantas más.
Puede usar: 
</para>

<para>

<screen>
rpm --showrc
</screen>

</para>

<para>
para saber cuál de sus etiquetas están configuradas y cuáles son los
parámetros disponibles. 
</para>

</sect2>

<sect2>
<title>El fichero <literal remap="tt">spec</literal></title>

<para>
Ahora hablaremos del fichero <literal remap="tt">.spec</literal>. Estos ficheros son
imprescindibles para construir un paquete. El fichero spec es una
descripción del software acompañado con instrucciones sobre cómo
construirlo y una lista de ficheros de todos los binarios instalados. 
</para>

<para>
Debería nombrar a sus ficheros spec de acuerdo a una convención estándar. 
Tal como nombre de paquete-guión-número de versión-guión-número de
publicación-punto-spec. 
</para>

<para>
A continuación, un pequeño fichero spec (<literal remap="tt">eject-1.4.spec</literal>):       
</para>

<para>

<screen>
Summary: ejects ejectable media and controls auto ejection
Name: eject
Version: 1.4
Release: 3
Copyright: GPL
Group: Utilities/System
Source: sunsite.unc.edu:/pub/Linux/utils/disk-management/eject-1.4.tar.gz
Patch: eject-1.4-make.patch
Patch1: eject-1.4-jaz.patch
%description
This program allows the user to eject media that is autoejecting like
CD-ROMs, Jaz and Zip drives, and floppy drives on SPARC machines.

%prep
%setup
%patch -p1
%patch1 -p1

%build
make RPM_OPT_FLAGS="$RPM_OPT_FLAGS"

%install
install -s -m 755 -o 0 -g 0 eject /usr/bin/eject
install -m 644 -o 0 -g 0 eject.1 /usr/man/man1

%files
%doc README COPYING ChangeLog

/usr/bin/eject
/usr/man/man1/eject.1
</screen>

</para>

</sect2>

<sect2>
<title>La Cabecera</title>

<para>
La cabecera tiene unos cuantos campos estándar que usted necesita
rellenar.  También hay unas cuantas advertencias. Los campos deben ser
rellenados tal como sigue: 
</para>

<para>

<itemizedlist>
<listitem>

<para>
<literal remap="tt">Summary:</literal> Descripción en una sóla línea del paquete.
</para>
</listitem>
<listitem>

<para>
<literal remap="tt">Name:</literal> La cadena que vaya a servir de nombre para el fichero
rpm. 

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">Version:</literal> La cadena que vaya a ser el número de versión para el
fichero rpm.

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">Release:</literal> El número de publicación para un paquete dentro de un
mismo número de versión (ej.: si crea un paquete y lo encuentra
ligeramente defectuoso y necesita generarlo de nuevo, el siguiente paquete
debería tener 2 como número de publicación). 

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">Icon:</literal> El nombre del icono que podrán usar interfaces de
instalación alto nivel (como Red Hat `<literal remap="tt">glint</literal>''). Debe ser un fichero
<literal remap="tt">.gif</literal> y estar situado en el directorio <literal remap="tt">SOURCES</literal>.

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">Source:</literal> Esta línea apunta a la localización HOME del fichero de
fuentes original. Se usa si alguna vez quiere tener los fuentes de nuevo o
chequear para nuevas versiones. Precaución: el nombre del fichero en esta
línea DEBE coincidir con el nombre que tiene tal fichero en su sistema
(ej.: no se haga con el fichero fuente y le cambie el nombre). Puede
especificar más de un fichero fuente de esta forma: 


<screen>
Source0: blah-0.tar.gz
Source1: blah-1.tar.gz
Source2: fooblah.tar.gz
</screen>


Estos ficheros deben residir en el directorio <literal remap="tt">SOURCES</literal>. (La estructura
de directorios es discutida en una sección posterior, ``El Árbol de
Directorios de las Fuentes'', <xref linkend="arbol"/>). 

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">Patch:</literal> El lugar donde podrán encontrarse los parches si los
necesita de nuevo. Precaución: el nombre debe coincidir con el de SUS
propios parches. Puede especificar más de un fichero de parches de esta
forma: 


<screen>
Patch0: blah-0.patch
Patch1: blah-1.patch
Patch2: fooblah.patch
</screen>


Estos ficheros deben residir en el directorio <literal remap="tt">SOURCES</literal>.

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">Copyright:</literal> Hace referencia al modelo de copyright al que se
acoje el paquete. Puede tratarse de algo al estilo de GPL, BSD, MIT,
<emphasis remap="it">public domain</emphasis>
<footnote>

<para>
N.T.: dominio público
</para>

</footnote>
,
<emphasis remap="it">distributable</emphasis>
<footnote>

<para>
 N.T.: distribuible
</para>

</footnote>
 o
<emphasis remap="it">commercial</emphasis>
<footnote>

<para>
N.T.: comercial
</para>

</footnote>
. 

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">BuildRoot:</literal> Hace referencia a un directorio que simulará el raíz
(<literal remap="tt">/</literal>) para la construcción e instalación de un nuevo paquete. Puede
usarlo para probar su paquete antes de instalarlo en su máquina. 

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">Group:</literal> Informa a un programa de instalación de alto nivel (como
Red Hat `<literal remap="tt">glint</literal>'') dónde situar este paquete en particular dentro de
la jerarquía de <literal remap="tt">rpm</literal>. Actualmente, esta jerarquía viene a ser:
  

<screen>
Applications 		(aplicaciones)
    Communications	(comunicaciones)
    Editors		(editores)
        Emacs		(Emacs)
    Engineering		(ingenieria)
    Spreadsheets	(hojas de calculo)
    Databases		(bases de datos)
    Graphics		(graficos)
    Networking		(redes de comunicaciones)
    Mail		(correo smtp)
    Math		(matematicas)
    News		(noticias nntp)
    Publishing		(edicion)
        TeX		(TeX)
Base			(basico)
    Kernel		(nucleo)
Utilities		(utilidades)
    Archiving		(archivo)
    Console		(consola)
    File		(ficheros)
    System		(sistema)
    Terminal		(terminales)
    Text		(texto)
Daemons			(demonios)
Documentation		(documentacion)
X11			(X11)
    XFree86		(XFree86)
        Servers		(servidores)
    Applications	(aplicaciones)
        Graphics	(graficos)
        Networking	(redes de comunicaciones)
    Games		(juegos)
        Strategy	(estrategia)
        Video		(video juegos)
    Amusements		(entretenimientos)
    Utilities		(utilidades)
    Libraries		(librerias)
    Window Managers	(gestores de ventana)
Libraries		(librerias)
Networking		(redes de comunicaciones)
    Admin		(administracion)
    Daemons		(demonios)
    News		(noticias nntp)
    Utilities		(utilidades)
Development		(desarrollo)
    Debuggers		(depuradores)
    Libraries		(librerias)
        Libc		(libreria C)
    Languages		(lenguajes)
        Fortran		(fortran)
        Tcl		(tcl)
    Building		(Compilacion)
    Version Control	(control de versiones)
    Tools		(utiles)
Shells			(interpretes de comandos)
Games			(juegos)
</screen>


</para>
</listitem>
<listitem>

<para>
<literal remap="tt">%description</literal> En realidad no es un elemento de la
cabecera, pero debe ser descrito junto a sus otras partes. Necesita una
etiqueta de descripción por cada paquete o subpaquete. Se trata de un
campo multilínea que debe ser usado para proporcionar una descripción
comprensible del paquete. 
</para>
</listitem>

</itemizedlist>

</para>

</sect2>

<sect2>
<title><literal remap="tt">%prep</literal></title>

<para>
Esta es la segunda sección del fichero spec. Se usa para tener las fuentas
listas para compilar. Aquí necesita hacer todo lo necesario para obtener
los fuentes parcheadas y configuradas para ejecutar un <literal remap="tt">make</literal> con
ellas.
</para>

<para>
Una cosa a señalar: Cada una de estas secciones es sólo un lugar para
ejecutar guiones de intérprete de comandos
<footnote>

<para>
N.T.: <emphasis>shell
scripts</emphasis> en el original.
</para>

</footnote>
. Así podrá crear un script simple para
<literal remap="tt">sh</literal> y colocarlo tras la etiqueta <literal remap="tt">%prep</literal> para
desempaquetar y parchear sus fuentes. En cualquier caso, hemos creado unas
macros para ayudar en esto.
</para>

<para>
La primera de estas macros es <literal remap="tt">%setup</literal>. En su forma más simple 
(sin parámetros en la línea de comandos), se limita a desempaquetar los
fuentes y cambiar el directorio actual al de los fuentes. Puede tener
alguna de las siguientes opciones: 
</para>

<para>

<itemizedlist>
<listitem>

<para>
<literal remap="tt">-n nombre</literal> asignará el nombre del directorio en construcción. 
Por defecto es <literal remap="tt">$NAME-$VERSIÓN</literal>. Otras posibilidades
incluyen <literal remap="tt">$NAME</literal>, <literal remap="tt">$&lcub;NAME&rcub;$&lcub;VERSIÓN&rcub;</literal>, o
cualquiera que use el fichero tar principal. (Apercíbese de que estas
variables ``$'' <emphasis>no</emphasis> son variables reales dentro del fichero
spec.  Sólo se usan aquí en lugar de un nombre ejemplo. Necesitará usar el
nombre real y la versión de su paquete, no una variable). 

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">-c</literal> creará y cambiará al directorio nombrado <emphasis>antes</emphasis> de
desempaquetar con tar. 

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">-b #</literal> desempaquetará con <literal remap="tt">tar</literal> el fichero fuente
<literal remap="tt">#</literal> <emphasis>antes</emphasis> de cambiar al directorio (y esto no tiene sentido
con <literal remap="tt">-c</literal>, así que no lo haga).  Sólo es útil cuando se usan varios
archivos fuente. 

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">-a #</literal> desempaquetará el fichero fuente <literal remap="tt">#</literal>
<emphasis>después</emphasis> de cambiar al directorio.

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">-T</literal> Este parámetro anula la acción por defecto de desempaquetar
el fichero fuente y requiere 
 <literal remap="tt">-b 0</literal> o <literal remap="tt">-a 0</literal> para desempaquetar
el fichero fuente principal. Necesitará esto cuando hayan fuentes
secundarias.

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">-D</literal> <emphasis>No</emphasis> borra el directorio antes de desempaquetar.  Sólo
resulta útil cuando tenga más de una macro de configuración. Debería ser
usado <emphasis>solamente</emphasis> en macros de configuración <emphasis>después</emphasis> de la primera
(pero nunca en la primera). 
</para>
</listitem>

</itemizedlist>

</para>

<para>
La siguiente de las macros disponibles es <literal remap="tt">%patch</literal>. Esta macro
ayuda a automatizar el proceso de aplicación de parches a los fuentes. 
Necesita de varios parámetros, listadas a continuación: 
</para>

<para>

<itemizedlist>
<listitem>

<para>
<literal remap="tt">#</literal> aplicará el parche Patch#.
</para>
</listitem>
<listitem>

<para>
<literal remap="tt">-p #</literal> especifica el número de directorios a evitar por el
comando <literal remap="tt">patch(1)</literal>. 

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">-P</literal> La acción por defecto es aplicar <literal remap="tt">Patch</literal> (o <literal remap="tt">Patch0</literal>). 
Este parámetro inhibe dicha acción y requiere un <literal remap="tt">0</literal> para tener
desempaquetado el fichero fuente principal. Esta opción resulta útil en
una segunda (o posterior) macro <literal remap="tt">%patch</literal> que requiera parámetros
distintos a la primera macro.

</para>
</listitem>
<listitem>

<para>
 También puede hacer <literal remap="tt">%patch#</literal> en lugar de hacer el
comando real: <literal remap="tt">%patch # -P</literal>
</para>
</listitem>

</itemizedlist>

</para>

<para>
Estas deberían ser todas las macros que necesite. En cuanto las tenga
claras, podrá crear cualquier otra configuración que necesite mediante
guiones <literal remap="tt">sh</literal>. Todo lo que incluya hasta la macro <literal remap="tt">%build</literal>
(discutida en la siguiente sección) es ejecutado vía <literal remap="tt">sh</literal>. Busque en el
ejemplo anterior el tipo de cosas que puede querer incluir allí. 
</para>

</sect2>

<sect2>
<title><literal remap="tt">%build</literal></title>

<para>
En realidad no hay ninguna macro en esta sección. Solamente debe incluir
todos los comandos que necesitaría para construir y/o compilar el software
una vez que haya desempaquetado y parcheado los fuentes, y se haya movido
al directorio correcto. Es pues otra serie de comandos pasados a <literal remap="tt">sh</literal>,
así que cualquier comando aceptable por <literal remap="tt">sh</literal> podrá ir aquí (incluidos
los comentarios). <emphasis remap="bf">El directorio actual es reajustado en cada una de
estas secciones al de mayor nivel en el directorio de fuentes</emphasis>, así que
téngalo en cuenta. Puede moverse a través de los subdirectorios si
resultase necesario.
</para>

</sect2>

<sect2>
<title><literal remap="tt">%install</literal></title>

<para>
 
</para>

<para>
En realidad no hay ninguna macro en esta sección.  Básicamente debe
incluir aquí cualquier comando necesario para instalar. Si el paquete a
construir tiene disponible un comando <literal remap="tt">make install</literal>, inclúyalo aquí.
Si no, o bien puede parchear el fichero <literal remap="tt">Makefile</literal> y añadirle la
funcionalidad <literal remap="tt">make install</literal> e incluir dicha sentencia en esta sección
o bien instalarlo a mano mediante comandos <literal remap="tt">sh</literal>. Puede considerar su
directorio actual como el directorio superior del directorio de fuentes. 
</para>

</sect2>

<sect2>
<title>Guiones opcionales pre y post Install/Uninstall</title>

<para>
Puede incluir guiones que serían ejecutados antes y después de la
instalación o desinstalación de paquetes binarios. Una razón importante
para esto es hacer cosas como ejecutar <literal remap="tt">ldconfig</literal> tras la instalación o
eliminar paquetes que contienen librerías compartidas. Las macros para
cada uno de los guiones son: 
</para>

<para>

<itemizedlist>
<listitem>

<para>
<literal remap="tt">%pre</literal> es la macro para los guiones pre-instalación.
</para>
</listitem>
<listitem>

<para>
<literal remap="tt">%post</literal> es la macro para los guiones post-instalación.
</para>
</listitem>
<listitem>

<para>
<literal remap="tt">%preun</literal> es la macro para los guiones pre-desinstalación.
</para>
</listitem>
<listitem>

<para>
<literal remap="tt">%postun</literal> es la macro para los guiones post-desinstalación.
</para>
</listitem>

</itemizedlist>

</para>

<para>
Los contenidos de estas secciones deben ser solamente guiones <literal remap="tt">sh</literal>,
luego <emphasis>no</emphasis> resulta necesaria la línea <literal remap="tt">#!/bin/sh</literal>. 
</para>

</sect2>

<sect2>
<title><literal remap="tt">%files</literal></title>

<para>
Esta es la sección donde <emphasis>debe</emphasis> listar los ficheros del paquete
binario.  RPM no tiene forma de saber qué ficheros binarios se han
instalado tras ejecutar <literal remap="tt">make install</literal>. <emphasis>NO</emphasis> hay forma de saberlo.
</para>

<para>
Algunos han sugerido ejecutar un comando <literal remap="tt">find</literal> antes y después de la
instalación del paquete. En un sistema multiusuario, esto es inaceptable
ya que pueden crearse otros ficheros durante la construcción del paquete
que no tienen nada que ver con el mismo.
</para>

<para>
También hay algunas macros disponibles para hacer cosas especiales. Son
las listadas a continuación: 
</para>

<para>

<itemizedlist>
<listitem>

<para>
<literal remap="tt">%doc</literal> se usa para señalar los ficheros de documentación
del paquete fuente que desea que sean instalados en una instalación
binaria. La documentación será instalada en
<literal remap="tt">/usr/doc/$NOMBRE-$VERSIÓN-$PUBLICACIÓN</literal>.  La
lista podrá incluir varios ficheros en una sóla línea o puede listarlos de
forma separada con una macro para cada uno de ellos. 

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">%config</literal> se usa para señalar los ficheros de
configuración en un paquete. Ficheros así pueden ser <literal remap="tt">sendmail.cf</literal>,
<literal remap="tt">passwd</literal>, etc. Si posteriormente desinstala un paquete que incluye
ficheros de configuración, todos los ficheros sin modificar serán borrados
y todos los ficheros modificados serán movidos a su nombre antiguo con el
sufijo <literal remap="tt">.rpmsave</literal> añadido a su nombre. También puede incluir múltiples
ficheros con esta macro.

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">%dir</literal> señala a un único directorio en la lista como
propiedad de un paquete. Por defecto, si incluye en la lista un nombre de
directorio <emphasis>SIN</emphasis> una macro <literal remap="tt">%dir</literal>, <emphasis>TODO</emphasis> el contenido de
ese directorio es incluido en la lista de ficheros y posteriormente
instalado como parte del paquete.

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">%files -f &lt;nombredefichero&gt;</literal> le permitirá tener la
lista de ficheros contenida en un fichero situado en el directorio de las
fuentes. Resulta útil en los casos en los que un paquete puede crear su
propia lista de ficheros por sí mismo. En ese caso sólo tendrá que incluir
el nombre de ese fichero aquí y no necesitará especificar nada más. 
</para>
</listitem>

</itemizedlist>

</para>

<para>
La mayor precacución que debe tener en cuenta en la lista de ficheros es
la inclusión de directorios. Si por accidente incluye <literal remap="tt">/usr/bin</literal>, su
paquete binario contendrá <emphasis>todos</emphasis> los ficheros contenidos en el
directorio <literal remap="tt">/usr/bin</literal> en su sistema. 
</para>

</sect2>

<sect2>
<title>Construcción</title>

<sect3 id="arbol">
<title>``El Árbol de Directorios de los Fuentes'' </title>

<para>
Lo primero que necesita es un árbol de directorios de compilación
configurado de forma apropiada. Esto se puede hacer mediante el fichero
<literal remap="tt">/etc/rpmrc</literal>. La mayoría de la gente sólo usará <literal remap="tt">/usr/src</literal>.
</para>

<para>
Puede que necesite crear los siguientes directorios para organizar un
árbol de construcción: 
</para>

<para>

<itemizedlist>
<listitem>

<para>
<literal remap="tt">BUILD</literal> es el directorio donde RPM lleva a cabo toda la
construcción.  No tiene que llevar a cabo su prueba de construcción en
ningún sitio en particular; aquí es donde RPM llevará a cabo la
compilación y empaquetamiento. 

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">SOURCES</literal> es el directorio donde debe situar los ficheros fuente
originales y los correspondientes parches. Es donde RPM buscará por
defecto. 

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">SPECS</literal> es el directorio donde deben ir situados los ficheros spec.
</para>
</listitem>
<listitem>

<para>
<literal remap="tt">RPMS</literal> es donde RPM dejará los paquetes RPM binarios una vez
construidos.
</para>
</listitem>
<listitem>

<para>
<literal remap="tt">SRPMS</literal> es donde RPM dejará los paquetes RPM fuentes.
</para>
</listitem>

</itemizedlist>

</para>

</sect3>

<sect3>
<title>Prueba de construcción</title>

<para>
Lo primero que querrá hacer es asegurarse que los fuentes se construyen
adecuadamente sin usar RPM. Para ello, desempaquete los fuentes, sitúese
en el directorio <literal remap="tt">$NAME.orig</literal>. De nuevo desempaquete los
fuentes. Use éstos para compilar. Vaya al directorio de los fuentes y siga
las instrucciones para construirlo. Si necesita editar algo, necesitará un
parche. Una vez que lo tenga compilado, limpie el directorio fuentes. 
</para>

<para>
Asegúrese que borra todos los ficheros creados por algún guión de
configuración. Haga entonces un <literal remap="tt">cd</literal> hacia arriba, al directorio
paterno. Deberá hacer algo como: 
</para>

<para>

<screen>
diff -uNr nombredirectorio.orig nombredirectorio &#62; ../SOURCES/nombredirectorio-linux.patch
</screen>

</para>

<para>
Lo que creará un parche que podrá usar en su fichero spec. Advierta que el
``linux'' que aparece en el nombre del parche es sólo un identificador. 
Usted probablemente querrá usar algo más descriptivo como ``config'' o
``bugs'' para describir el <emphasis>porqué</emphasis> del parche. También es buena idea
examinar el fichero parche que ha creado antes de usarlo para asegurarse
de que no se han incluido binarios por error. 
</para>

</sect3>

<sect3>
<title>Creación de la Lista de Ficheros</title>

<para>
Ahora que tiene los fuentes listos para construir y sabe cómo hacerlo,
constrúyalo e instálelo. Examine la salida de la secuencia de instalación
y construya su lista de ficheros a partir de ahí para incluirla en el
fichero spec. Normalmente nosotros construimos el fichero spec en paralelo
a todos estos pasos. Usted puede crear uno inicial y rellenar las partes
sencillas e ir rellenando el resto conforme vaya completando los
diferentes pasos. 
</para>

</sect3>

<sect3>
<title>Construyendo el paquete con RPM</title>

<para>
Una vez que tenga su fichero spec, está listo para intentar construir su
paquete. La forma más útil de hacerlo es con un comando como el siguiente:
</para>

<para>

<screen>
        rpm -ba foobar-1.0.spec
</screen>

</para>

<para>
Hay otras opciones útiles con el parámetro <literal remap="tt">-b</literal> tales como:
</para>

<para>

<itemizedlist>
<listitem>

<para>
<literal remap="tt">p</literal> obliga a ejecutar solamente la sección <literal remap="tt">prep</literal> del fichero
spec. 
</para>
</listitem>
<listitem>

<para>
<literal remap="tt">l</literal> efectúa algunos chequeos en <literal remap="tt">%files</literal>.

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">c</literal> ejecuta la sección <literal remap="tt">%prep</literal> y compila. Resulta útil
cuando no está seguro de si sus fuentes compilan completamente. Puede
parecer inútil porque usted tal vez quiera jugar solamente con los fuentes
hasta que compilen y usar entonces RPM, pero una vez que se haya
acostumbrado a usar RPM, encontrará ocasiones en las que podrá usarla.

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">i</literal> ejecuta las secciones <literal remap="tt">prep</literal>, <literal remap="tt">compile</literal> e <literal remap="tt">install</literal>.

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">b</literal> ejecuta las secciones <literal remap="tt">prep</literal>, <literal remap="tt">compile</literal> e <literal remap="tt">install</literal>
y construye el paquete binario. 

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">a</literal> ejecuta las secciones <literal remap="tt">prep</literal>, <literal remap="tt">compile</literal> e <literal remap="tt">install</literal>
y construye los paquetes binario y fuentes. 
</para>
</listitem>

</itemizedlist>

</para>

<para>
Hay varios modificadores para el parámetro <literal remap="tt">-b</literal>. Son los siguientes:
</para>

<para>

<itemizedlist>
<listitem>

<para>
<literal remap="tt">--short-circuit</literal> El proceso de construcción comenzará
directamente por la fase especificada, saltándose las previas a la
indicada. (Sólo puede ser empleado en conjunción con <literal remap="tt">c</literal> e <literal remap="tt">i</literal>). 

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">--clean</literal> elimina el árbol de construcción una vez que ha
concluido.

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">--keep-temps</literal> mantendrá todos los ficheros temporales y los
guiones que estuvieran en <literal remap="tt">/tmp</literal>. Podrá saber qué ficheros fueron
creados allí usando el parámetro <literal remap="tt">-v</literal>. 

</para>
</listitem>
<listitem>

<para>
<literal remap="tt">--test</literal> No lleva a cabo ninguna fase realmente, pero mantiene
todos los ficheros temporales. 
</para>
</listitem>

</itemizedlist>

</para>

</sect3>

</sect2>

<sect2>
<title>Probándolo</title>

<para>
Una vez que tenga los paquetes rpm binario y fuentes, necesitará
probarlos.  La mejor forma y la más sencilla es usar para el test una
máquina completamente diferente de la que usó para la construcción.
Después de todo, ha hecho un montón de <literal remap="tt">make install</literal> en su máquina por
lo que debería haber quedado instalado de forma aceptable. 
</para>

<para>
Puede ejecutar un <literal remap="tt">rpm -u nombredepaquete</literal> al paquete a probar, pero
puede ser decepcionante porque en la construcción del paquete usted hizo
un <literal remap="tt">make install</literal>. Si se dejó algo fuera de la lista de ficheros, no
será desinstalado. Reinstale entonces el paquete binario y su sistema
estará completo de nuevo, aunque no el paquete rpm. 
Asegúrese y tenga en mente que sólo porque usted hace <literal remap="tt">rpm -ba
package</literal>; la mayoría de la gente instalará su paquete sólo con <literal remap="tt">rpm -i
package</literal>. 
</para>

<para>
Asegúrese también de que no hace nada en las secciones <literal remap="tt">build</literal> o
<literal remap="tt">install</literal> que necesite hacerse cuando los binarios se instalan por
sí mismos.  
</para>

</sect2>

<sect2>
<title>¿Qué hacer con los nuevos paquetes RPM?</title>

<para>
Una vez que ha hecho su propio RPM de algo (asumiendo que no ha sido
empaquetado en RPM con anterioridad), puede contribuir con su trabajo a
otras personas (asumiendo igualmente que el paquete en RPM es libremente
distribuible). Para hacerlo, puede querer subirlo a <literal remap="tt"><ulink
url="ftp://ftp.redhat.com"
>ftp.redhat.com</ulink
></literal>. 
</para>

</sect2>

<sect2>
<title>¿Y ahora qué?</title>

<para>
Por favor mire las secciones anteriores sobre pruebas y qué hacer con los
nuevos RPM. Queremos todos los paquetes RPM disponibles que podamos
conseguir, y queremos que estén correctamente empaquetados. Por favor,
tómese el tiempo de probarlos adecuadamente y de subirlos para el
beneficio de todos. 
</para>

<para>
También, <emphasis>por favor</emphasis> asegúrese de que no está haciendo llegar solamente
<emphasis>software de libre disposición</emphasis>. Software comercial y
shareware
<footnote>

<para>
N.T.: Probar antes de comprar
</para>

</footnote>
 <emphasis>no</emphasis> deberían ser
subidos a menos que esté claramente permitido en alguna cláusula de su
licencia. Esto incluye el software de Netscape, ssh, pgp, etc.
</para>

</sect2>

</sect1>

<sect1>
<title>Construcción multi-arquitectura de paquetes RPM </title>

<para>
Ahora puede usarse RPM para construir paquetes para Intel i386, Digital
Alpha ejecutando Linux y Sparc. También se ha informado de su
funcionamiento en estaciones de trabajo SGI y HP. Hay varias
características que hacen que la construcción de paquetes para todas las
plataformas sea fácil.
La primera de éstas es la directiva ``<literal remap="tt">optflags</literal>'' del fichero
<literal remap="tt">/etc/rpmrc</literal>.  Puede usarse para asignar las opciones usadas durante
la construcción del software con valores específicos de cada arquitectura.
Otras son las macros ``<literal remap="tt">arch</literal>'' en el fichero spec. Pueden usarse para
diferentes cosas, en función de la arquitectura para la que se está
construyendo. Otra más, es la directiva ``<literal remap="tt">Exclude</literal>'' de la cabecera.
</para>

<sect2>
<title>Ejemplo de fichero spec </title>

<para>
El siguiente es parte del fichero spec para el paquete ``<literal remap="tt">fileutils</literal>''. 
Está configurado para compilar en Alpha e Intel.
</para>

<para>

<screen>
Summary: GNU File Utilities
Name: fileutils
Version: 3.16
Release: 1
Copyright: GPL
Group: Utilities/File
Source0: prep.ai.mit.edu:/pub/gnu/fileutils-3.16.tar.gz
Source1: DIR_COLORS
Patch: fileutils-3.16-mktime.patch

%description
These are the GNU file management utilities.  It includes programs
to copy, move, list, etc, files.

The ls program in this package now incorporates color ls!

%prep
%setup

%ifarch alpha
%patch -p1
autoconf
%endif
%build
configure --prefix=/usr --exec-prefix=/
make CFLAGS="$RPM_OPT_FLAGS" LDFLAGS=-s

%install
rm -f /usr/info/fileutils*
make install
gzip -9nf /usr/info/fileutils*

.
.
.

</screen>

</para>

</sect2>

<sect2>
<title><literal remap="tt">Optflags</literal></title>

<para>
En este ejemplo puede ver cómo se usa la directiva ``<literal remap="tt">optflags</literal>'' desde
el fichero <literal remap="tt">/etc/rpmrc</literal>. En función de la arquitectura para la que
está construyendo, el valor adecuado lo proporciona <literal remap="tt">RPM_OPT_FLAGS</literal>.
Debe parchear el fichero <literal remap="tt">Makefile</literal> de su paquete para usar esta
variable en lugar de las directivas normales que puede usar (como
<literal remap="tt">-m486</literal> y <literal remap="tt">-O2</literal>).  Tendrá una mejor perspectiva de lo que necesita
hacer instalando este paquete de fuentes, desempaquetando el fichero tar
con los fuentes y examinando el fichero <literal remap="tt">Makefile</literal>. Examine el parche
para el <literal remap="tt">Makefile</literal> y compruebe qué cambios son necesarios realizar. 
</para>

</sect2>

<sect2>
<title>Macros</title>

<para>
La macro <literal remap="tt">%ifarch</literal> es muy importante para todo esto. La mayoría
de las veces necesitará hacer un parche o dos específicos para una sóla
arquitectura. En ese caso, RPM le permitirá aplicar ese parche sólo para
una arquitectura. 
</para>

<para>
En el ejemplo anterior, <literal remap="tt">fileutils</literal> tiene un parche para máquinas de 64
bits.  Obviamente, sólo tiene aplicación en Alpha, por el momento. 
Entonces, añadimos una macro <literal remap="tt">%ifarch</literal> al parche de 64 tal como:
</para>

<para>

<screen>
%ifarch axp
%patch1 -p1
%endif
</screen>

</para>

<para>
Esto asegurará que el parche no es aplicado en cualquier arquitectura
excepto en Alpha. 
</para>

</sect2>

<sect2>
<title>Excluyendo arquitectura de los paquetes.</title>

<para>
A la vez que puede tener fuentes RPM en un sólo directorio para todas las
plataformas, hemos implementado la posibilidad de ``excluir'' paquetes
para que no sean construidos en ciertas arquitecturas. Debido a esto,
puede hacer cosas como: 
</para>

<para>

<screen>
rpm --rebuild /usr/src/SRPMS/*.rpm
</screen>

</para>

<para>
y conseguir construir los paquetes adecuados. Si todavía no ha portado una
aplicación a una determinada plataforma, todo lo que tiene que hacer es
añadir una línea como: 
</para>

<para>

<screen>
ExcludeArch: axp
</screen>

</para>

<para>
a la cabecera del fichero spec del paquete de fuentes. Reconstruya entonces
el paquete sobre la plataforma para la que está preparado. Como resultado
tendrá disponible un paquete compilable sobre Intel pero que es
fácilmente omitible sobre Alpha.
</para>

</sect2>

<sect2>
<title>Acabando</title>

<para>
Usar RPM para crear paquetes para múltiples arquitecturas es generalmente
más sencillo de hacer que conseguir que el paquete compile por sí mismo 
en todos los casos. Como siempre, la mejor ayuda disponible cuando uno se
queda bloqueado al construir un paquete RPM es examinar un paquete de
fuentes similar. 
</para>

</sect2>

</sect1>

<sect1>
<title>Copyright</title>

<para>
Este documento y sus contenidos están protegidos por las leyes de
propiedad intelectual. Se permite la redistribución de este documento
siempre que sus contenidos permanezcan intactos y sin cambios. En otras
palabras, solamente lo puede reformatear, reimprimir o redistribuir. 
</para>

</sect1>

<sect1 id="Grupos">
<title>Anexo: El INSFLUG </title>

<para>
El <emphasis>INSFLUG</emphasis> forma parte del grupo internacional 
<emphasis remap="it">Linux Documentation Project</emphasis>, 
encargándose de las traducciones al castellano de los Howtos (Comos),
así como la producción de documentos originales en aquellos casos
en los que no existe análogo en inglés.
</para>

<para>
En el <emphasis remap="bf">INSFLUG</emphasis> se orienta preferentemente a la traducción de documentos
breves, como los <emphasis>COMOs</emphasis> y <emphasis>PUFs</emphasis> (<emphasis remap="bf">P</emphasis>reguntas de
<emphasis remap="bf">U</emphasis>so <emphasis remap="bf">F</emphasis>recuente, las <emphasis remap="it">FAQs</emphasis>. <literal remap="tt">:)</literal> ), etc.
</para>

<para>
Diríjase a la sede del INSFLUG para más información al respecto.
</para>

<para>
En la sede del INSFLUG encontrará siempre las <emphasis remap="bf">últimas</emphasis> versiones 
de las traducciones:  <literal remap="tt"><ulink
url="http://www.insflug.org"
>www.insflug.org</ulink
></literal>. Asegúrese de comprobar cuál es la última versión 
disponible en el Insflug antes de bajar un documento de un servidor réplica.
</para>

<para>
Se proporciona también una lista de los servidores
réplica (<emphasis remap="it">mirror</emphasis>) del Insflug más cercanos a Vd.,  
e información relativa a otros recursos en castellano.
</para>

<para>
Francisco José Montilla, <literal remap="tt"><ulink
url="mailto:pacopepe@insflug.org"
>pacopepe@insflug.org</ulink
></literal>.
</para>

</sect1>

</article>
