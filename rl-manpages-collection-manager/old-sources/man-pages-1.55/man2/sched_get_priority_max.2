.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (C) Tom Bjorkholm & Markus Kuhn, 1996
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" 1996-04-01 Tom Bjorkholm <tomb@mydata.se>
.\"            First version written
.\" 1996-04-10 Markus Kuhn <mskuhn@cip.informatik.uni-erlangen.de>
.\"            revision
.\"
.TH GET_PRIORITY_MAX 2 1996-04-10 "Linux 1.3.81" "Linux Programmer's Manual"
.SH NAME
sched_get_priority_max, sched_get_priority_min  \- get static priority range
.SH SYNOPSIS
.B #include <sched.h>
.sp
\fBint sched_get_priority_max(int \fIpolicy\fB);
.sp
\fBint sched_get_priority_min(int \fIpolicy\fB);
.fi
.SH DESCRIPTION
.B sched_get_priority_max 
returns the maximum priority value that can be used with the
scheduling algorithm identified by \fIpolicy\fR.
.B sched_get_priority_min 
returns the minimum priority value that can be used with the
scheduling algorithm identified by \fIpolicy\fR. Supported \fIpolicy\fR 
values are
.IR SCHED_FIFO , 
.IR SCHED_RR ,
and 
.IR SCHED_OTHER .

Processes with numerically higher priority values are scheduled before
processes with numerically lower priority values. Thus, the value
returned by \fBsched_get_priority_max\fR will be greater than the
value returned by \fBsched_get_priority_min\fR.

Linux allows the static priority value range 1 to 99 for
\fISCHED_FIFO\fR and \fISCHED_RR\fR and the priority 0 for
\fISCHED_OTHER\fR. Scheduling priority ranges for the various policies
are not alterable.

The range of scheduling priorities may vary on other POSIX systems,
thus it is a good idea for portable applications to use a virtual
priority range and map it to the interval given by
\fBsched_get_priority_max\fR and \fBsched_get_priority_min\fR.
POSIX.1b requires a spread of at least 32 between the maximum and the
minimum values for \fISCHED_FIFO\fR and \fISCHED_RR\fR.

POSIX systems on which
.B sched_get_priority_max
and
.B sched_get_priority_min
are available define
.I _POSIX_PRIORITY_SCHEDULING
in <unistd.h>.

.SH "RETURN VALUE"
On success,
.B sched_get_priority_max
and
.B sched_get_priority_min
return the maximum/minimum priority value for the named scheduling
policy.
On error, \-1 is returned,
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EINVAL
The parameter \fIpolicy\fR does not identify a defined scheduling policy.
.SH "CONFORMING TO"
POSIX.1b (formerly POSIX.4)
.SH "SEE ALSO"
.BR sched_setaffinity (2),
.BR sched_getaffinity (2),
.BR sched_setscheduler (2),
.BR sched_getscheduler (2),
.BR sched_setparam (2),
.BR sched_getparam (2)
.PP
.BR sched_setscheduler (2)
has a description of the Linux scheduling scheme.
.PP
.I Programming for the real world \- POSIX.4
by Bill O. Gallmeister, O'Reilly & Associates, Inc., ISBN 1-56592-074-0
.br
.I IEEE Std 1003.1b-1993
(POSIX.1b standard)
.br
.I ISO/IEC 9945-1:1996
