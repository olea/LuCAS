.\" This manpage has been automatically generated by docbook2man 
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.TH "FUTEX" "2" "31 December 2002" "" ""
.SH NAME
futex \- Fast Userspace Locking system call
.SH SYNOPSIS
.sp
.B "#include <linux/futex.h>"
.sp
.B "#include <sys/time.h>"
.sp
.BI "int sys_futex (void *" futex ", int " op ", int " val ", const struct timespec *" timeout );
.SH "DESCRIPTION"
.PP
The \fBsys_futex\fR system call provides a method for
a program to wait for a value at a given address to change, and a
method to wake up anyone waiting on a particular address (while the
addresses for the same memory in separate processes may not be
equal, the kernel maps them internally so the same memory mapped in
different locations will correspond for
\fBsys_futex\fR calls).  It is typically used to
implement the contended case of a lock in shared memory, as
described in
\fBfutex\fR(4).
.PP
When a 
\fBfutex\fR(4)
operation did not finish uncontended in userspace, a call needs to be made to the kernel
to arbitrate. Arbitration can either mean putting the calling process to sleep or, conversely, 
waking a waiting process.
.PP
Callers of this function are expected to adhere to the semantics as set out in
\fBfutex\fR(4). As these
semantics involve writing non-portable assembly instructions, this in turn
probably means that most users will in fact be library authors and not general application developers.
.PP
The \fIfutex\fR argument needs to point to an aligned integer which stores the counter.
The operation to execute is passed via the \fIop\fR parameter, along with a value \fIval\fR.
.PP
Three operations are currently defined:
.TP
\fBFUTEX_WAIT\fR
This operation atomically verifies that the futex address still contains the value given, and sleeps awaiting \fIFUTEX_WAKE\fR on this futex address.  If the 
\fItimeout\fR argument is non-NULL, its contents describe the maximum duration 
of the wait, which is infinite otherwise.  For \fBfutex\fR(4), this call is executed if decrementing the count gave a negative value (indicating contention), and will sleep until another process  releases the futex and executes the FUTEX_WAKE operation. 
.TP
\fBFUTEX_WAKE\fR
This operation wakes at most \fIval\fR
processes waiting on this futex address (ie. inside
\fIFUTEX_WAIT\fR).  For \fBfutex\fR(4), this is executed if incrementing
the count showed that there were waiters, once the futex value has been set to 1 (indicating that it is available).
.TP
\fBFUTEX_FD\fR
To support a asynchronous wakeups, this operation associates a file descriptor with a futex.
If another process executes a FUTEX_WAKE, the process will receive the signal number that
was passed in \fIval\fR. The calling process must close the returned file 
descriptor after use.

To prevent race conditions, the caller should test if the futex has been upped after FUTEX_FD 
returns.
.SH "RETURN VALUE"
.PP
Depending on which operation was executed, the returned value can have differing meanings.
.TP
\fBFUTEX_WAIT\fR
Returns 0 if the process was woken by a FUTEX_WAKE call. In case of timeout, ETIMEDOUT is returned. If the futex was not equal to the expected value, the operation returns EWOULDBLOCK. Signals (or other spurious wakeups) cause FUTEX_WAIT to return EINTR.
.TP
\fBFUTEX_WAKE\fR
Returns the number of processes woken up.
.TP
\fBFUTEX_FD\fR
Returns the new file descriptor associated with the futex.
.SH "NOTES"
.PP
To reiterate, bare futexes are not intended as an easy to use abstraction for end-users. Implementors
are expected to be assembly literate and to have read the sources of the futex userspace library referenced
below.
.SH "AUTHORS"
.PP
Futexes were designed and worked on by Hubertus Franke (IBM Thomas J. Watson Research Center), 
Matthew Kirkwood, Ingo Molnar (Red Hat) and Rusty Russell (IBM Linux Technology Center). This page written
by bert hubert.
.SH "VERSIONS"
.PP
Initial futex support was merged in Linux 2.5.7 but with different semantics from those described above.
Current semantics are available from Linux 2.5.40 onwards.
.SH "SEE ALSO"
.PP
\fBfutex\fR(4), 
`Fuss, Futexes and Furwocks: Fast Userlevel Locking in Linux' (proceedings of the Ottawa Linux 
Symposium 2002), 
futex example library, futex-*.tar.bz2 <URL:ftp://ftp.nl.kernel.org:/pub/linux/kernel/people/rusty/>.
