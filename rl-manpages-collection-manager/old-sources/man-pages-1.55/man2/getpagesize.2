.\" Copyright (C) 2001 Andries Brouwer <aeb@cwi.nl>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.TH GETPAGESIZE 2 2001-12-21 "Linux 2.5.0" "Linux Programmer's Manual"
.SH NAME
getpagesize \- get memory page size
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.B int getpagesize(void);
.SH DESCRIPTION
The function
.B getpagesize()
returns the number of bytes in a page, where a "page" is the thing
used where it says in the description of
.BR mmap (2)
that files are mapped in page-sized units.

The size of the kind of pages that
.B mmap
uses, is found using

.RS
.nf
#include <unistd.h>
long sz = sysconf(_SC_PAGESIZE);
.fi
.RE

(where some systems also allow the synonym _SC_PAGE_SIZE for _SC_PAGESIZE),
or

.RS
.nf
#include <unistd.h>
int sz = getpagesize();
.fi
.RE
.SH HISTORY
This call first appeared in 4.2BSD.
.SH CONFORMING TO
SVr4, 4.4BSD, SUSv2.
In SUSv2 the
.B getpagesize()
call is labeled "legacy", and in POSIX 1003.1-2001
it has been dropped.
HPUX does not have this call.
.SH NOTES
Whether
.B getpagesize()
is present as a Linux system call depends on the architecture.
If it is, it returns the kernel symbol PAGE_SIZE,
which is architecture and machine model dependent.
Generally, one uses binaries that are architecture but not
machine model dependent, in order to have a single binary
distribution per architecture. This means that a user program
should not find PAGE_SIZE at compile time from a header file,
but use an actual system call, at least for those architectures
(like sun4) where this dependency exists.
Here libc4, libc5, glibc 2.0 fail because their
.B getpagesize()
returns a statically derived value, and does not use a system call.
Things are OK in glibc 2.1.
.SH "SEE ALSO"
.BR mmap (2),
.BR sysconf (3)
