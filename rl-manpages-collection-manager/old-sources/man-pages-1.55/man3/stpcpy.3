.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright 1995 James R. Van Zandt <jrv@vanzandt.mv.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.TH STPCPY 3  1995-09-03 "GNU" "Linux Programmer's Manual"
.SH NAME
stpcpy \- copy a string returning a pointer to its end
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "char *stpcpy(char *" dest ", const char *" src );
.fi
.SH DESCRIPTION
The \fBstpcpy()\fP function copies the string pointed to by \fIsrc\fP
(including the terminating `\\0' character) to the array pointed to by 
\fIdest\fP.  The strings may not overlap, and the destination string 
\fIdest\fP must be large enough to receive the copy.
.SH "RETURN VALUE"
\fBstpcpy()\fP returns a pointer to the \fBend\fP of the string
\fIdest\fP (that is, the address of the terminating null character)
rather than the beginning.
.SH EXAMPLE
For example, this program uses \fBstpcpy\fP to concatenate \fBfoo\fP and
\fBbar\fP to produce \fBfoobar\fP, which it then prints.
.nf

          #include <string.h>

          int
          main (void)
          {
            char *to = buffer;
            to = stpcpy (to, "foo");
            to = stpcpy (to, "bar");
            printf ("%s\\n", buffer);
          }
.fi
.SH "CONFORMING TO"
This function is not part of the ANSI or POSIX standards, and is
not customary on Unix systems, but is not a GNU invention either.
Perhaps it comes from MS-DOS.
.SH "SEE ALSO"
.BR strcpy (3),
.BR bcopy (3),
.BR memccpy (3),
.BR memcpy (3),
.BR memmove (3)
