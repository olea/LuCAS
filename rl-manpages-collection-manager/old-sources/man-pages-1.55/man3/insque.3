.\" peter memishian -- meem@gnu.ai.mit.edu
.\" $Id: insque.3,v 1.1 2004/09/06 10:01:04 Jorge.Rodriguez Exp $
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" References consulted:
.\"   Linux libc source code (5.4.7)
.\"   Solaris 2.x, OSF/1, and HP-UX manpages
.\"   Curry's "UNIX Systems Programming for SVR4" (O'Reilly & Associates 1996)
.\"
.\"
.TH INSQUE 3  1996-10-30 "GNU" "Linux Programmer's Manual"
.SH NAME
insque, remque \- insert/remove an item from a queue
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "void insque(struct qelem *" elem ", struct qelem *" prev );
.BI "void remque(struct qelem *" elem );
.SH DESCRIPTION
\fBinsque()\fP and \fBremque()\fP are functions for manipulating
queues made from doubly-linked lists.  Each element in this list is of
type \fBstruct qelem\fP

The \fBqelem\fP structure is defined as 

.RS
.nf
struct qelem {
    struct    qelem *q_forw;
    struct    qelem *q_back;
    char      q_data[1];
};
.fi
.RE

\fBinsque()\fP inserts the element pointed to by \fIelem\fP
immediately after the element pointed to by \fIprev\fP, which must \fB
NOT\fP be NULL. 

\fBremque()\fP removes the element pointed to by \fIelem\fP from the
doubly-linked list.
.SH "CONFORMING TO"
SVR4
.SH BUGS
The q_data field is sometimes defined to be type \fBchar *\fP, and under
solaris 2.x, it doesn't appear to exist at all.

The location of the prototypes for these functions differ among several
versions of UNIX.  Some systems place them in <search.h>, others in
<string.h>.  Linux places them in <stdlib.h> since that seems to make
the most sense.

Some versions of UNIX (like HP-UX 10.x) do not define a \fBstruct
qelem\fP but rather have the arguments to \fBinsque()\fP and
\fBremque()\fP be of type \fBvoid *\fP.

