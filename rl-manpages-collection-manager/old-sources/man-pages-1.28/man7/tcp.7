.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" $Id: tcp.7,v 1.1 2004/07/14 11:21:35 pepin.jimenez Exp $
.TH TCP  7 "25 Apr 1999" "Linux Man Page" "Linux Programmer's Manual" 
.SH NAME
tcp \- TCP protocol.
.SH SYNOPSIS
.B #include <sys/socket.h>
.br
.B #include <netinet/in.h>
.br
.B tcp_socket = socket(PF_INET, SOCK_STREAM, 0); 
.SH DESCRIPTION
This is an implementation of the TCP protocol 
defined in RFC793, RFC1122 
and RFC2001 with the NewReno and SACK extensions.  
It provides a reliable, stream oriented, full duplex connection between
two sockets on top of 
.BR ip (7).
TCP guarantees that the data arrives in order and retransmits lost
packets.  It generates and checks a per packet checksum to catch
transmission errors. TCP does not preserve record boundaries. 

A fresh TCP socket has no remote or local address and is not fully specified.
To create an outgoing TCP connection use 
.BR connect (2)
to establish a connection to another TCP socket.
To receive new incoming connections
.BR bind (2) 
the socket first to a local address and port and then call 
.BR listen (2)
to put the socket into listening state. After that a new
socket for each incoming connection can be accepted 
using
.BR accept (2).
A socket which has had
.B accept
or 
.B connect
successfully called on it is fully specified and may transmit data.
Data cannot be transmitted on listening or not yet connected sockets.

Linux 2.2 supports the RFC1323 TCP high performance extensions.
This includes large TCP windows to support links with high latency
or bandwidth. 
In order to make use of them, the send and receive buffer sizes must be
increased.  They can be be set globally with the 
.B net.core.wmem_default
and
.B net.core.rmem_default
sysctls, or on individual sockets by using the 
.B SO_SNDBUF 
and 
.B SO_RCVBUF 
socket options.  The maximum sizes for socket buffers are limited by the global
.B net.core.rmem_max
and
.B net.core.wmem_max
sysctls. See
.BR socket (7)
for more information. 
.PP 
TCP supports urgent data. Urgent data is used to signal the receiver 
that some important message is part of the data stream and that it should
be processed as soon as possible. 
To send urgent data specify the 
.B MSG_OOB
option to 
.BR send (2).
When urgent data is received, the kernel sends a
.B SIGURG
signal to the 
reading process or the process or process group that has been set for
the socket using the
.B FIOCSPGRP
or 
.B FIOCSETOWN 
ioctls. When the 
.B SO_OOBINLINE
socket option is enabled, urgent data is put into the normal data stream
(and can be tested for by the 
.B SIOCATMARK
ioctl), 
otherwise it can be only received when the
.B MSG_OOB
flag is set for 
.BR sendmsg (2). 
.SH ADDRESS FORMATS
TCP is built on top of IP (see 
.BR ip (7)).
The address formats defined by
.BR ip (7)
apply to TCP.  TCP only supports 
point-to-point communication; broadcasting and multicasting are not supported.
.SH SYSCTLS
These sysctls can be accessed by the 
.B /proc/sys/net/ipv4/* 
files or with the 
.BR sysctl (2)
interface. In addition, most IP sysctls also apply to TCP; see
.BR ip (7). 
.TP
.B tcp_window_scaling
Enable RFC1323 TCP window scaling.
.TP
.B tcp_sack
Enable RFC2018 TCP Selective Acknowledgements.
.TP
.B tcp_timestamps
Enable RFC1323 TCP timestamps.
.TP
.B tcp_fin_timeout
How many seconds to wait for a final FIN packet before the socket is
forcibly closed.  This is strictly a violation of the TCP specification,
but required to prevent denial-of-service attacks.
.TP
.B tcp_keepalive_probes
Maximum TCP keep-alive probes to send before giving up. Keep-alives are only
sent when the 
.B SO_KEEPALIVE 
socket option is enabled.
.TP
.B tcp_keepalive_time
The number of seconds after no data has been transmitted before a keep-alive
will be sent on a connection.  The default is 10800 seconds (3 hours).
.TP
.B tcp_max_ka_probes
How many keep-alive probes are sent per slow timer run. To prevent
bursts, this value should not be set too high.
.TP
.B tcp_stdurg
Enable the strict RFC793 interpretation of the TCP urgent-pointer field. 
The default is to use the BSD-compatible interpretation of the urgent-pointer,
pointing to the first byte after the urgent data. The RFC793 interpretation
is to have it point to the last byte of urgent data. Enabling this option
may lead to interoperatibility problems.
.TP
.B tcp_syncookies
Enable TCP syncookies. The kernel must be compiled with 
.BR CONFIG_SYN_COOKIES .
Syncookies protects a socket from overload when too many connection
attempts arrive. Client machines may not be able to detect 
an overloaded machine with a short timeout anymore when syncookies are enabled.

.TP
.B tcp_max_syn_backlog
Length of the per-socket backlog queue. As of Linux 2.2, the backlog specified
in 
.BR listen (2)
only specifies the length of the backlog queue of already established sockets.
The maximum queue of sockets not yet established (in 
.B SYN_RECV 
state) 
per listen socket is set by this sysctl. When more connection requests arrive,
Linux starts to drop packets. When syncookies are enabled the packets are still
answered and this value is effectively ignored.
.TP
.B tcp_retries1
Defines how many times an answer to a TCP connection request is
retransmitted before giving up.
.TP
.B tcp_retries2
Defines how many times a TCP packet is retransmitted in established state 
before giving up.
.TP
.B tcp_syn_retries
Defines how many times to try to send an initial SYN packet to a remote
host before giving up and returns an error. Must be below 255.
This is only the timeout for outgoing connections; for incoming
connections the number of retransmits is defined by 
.BR tcp_retries1 .
.TP
.B tcp_retrans_collapse
Try to send full-sized packets during retransmit. This is used to work around
TCP bugs in some stacks.  
.\" tcp_rfc1337 is not documented because it is too obscure and broken.
.SH SOCKET OPTIONS
To set or get a TCP socket option, call
.BR getsockopt (2)
to read or
.BR setsockopt (2)
to write the option with the socket family argument set to 
.BR SOL_TCP .
In addition,
most 
.B SOL_IP 
socket options are valid on TCP sockets. For more information see
.BR ip (7).
.TP
.B TCP_NODELAY
Turn the Nagle algorithm off. This means that packets are always sent as soon
as possible and no unnecessary delays are introduced, at the cost of more 
packets in the network. Expects an integer boolean flag.   
.TP
.B TCP_MAXSEG 
Set or receive the maximum segment size for outgoing TCP packets. If this
option is set before connection establishment, it also changes the MSS value
announced to the other end in the initial packet. Values greater than 
the interface MTU are ignored and have no effect.
.TP
.B TCP_CORK
If enabled don't send out partial frames. 
All queued partial frames are sent when the option is cleared again.
This is useful for prepending headers
before calling 
.BR sendfile (2),
or for throughput optimization. This option cannot be combined with
.BR TCP_NODELAY .
.SH IOCTLS
These ioctls can be accessed using 
.BR ioctl (2).
The correct syntax is:
.PP
.RS
.nf
.BI int " value";
.IB error " = ioctl(" tcp_socket ", " ioctl_type ", &" value ");"
.fi
.RE
.TP
.B FIONREAD
Returns the amount of queued unread data in the receive buffer. Argument
is a pointer to an integer.
.TP
.B SIOCATMARK
Returns true when the all urgent data has been already received by the user
program.
This is used together with
.BR SO_OOBINLINE .
Argument is an pointer to an integer for the test result.
.TP
.B TIOCOUTQ
Returns the amount of unsent data in the socket send queue in the passed
integer value pointer.  
.SH ERROR HANDLING
When a network error occurs, TCP tries to resend the packet. If it doesn't 
succeed after some time, either 
.B ETIMEDOUT 
or the last received error 
on this connection is reported.
.PP
Some applications require a quicker error notification.
This can be enabled with the 
.B SOL_IP 
level 
.B IP_RECVERR 
socket option. When this
option is enabled, all incoming errors are immediately passed to the user program.
Use this option with care \- it makes TCP less tolerant to routing changes
and other normal network conditions.
.SH NOTES
When an error occurs doing a connection setup occuring in a socket write
.B SIGPIPE
is only raised when the
.B SO_KEEPOPEN 
socket option is set.
.PP
TCP has no real out-of-band data; it has urgent data. In Linux this means
if the other end sends newer out-of-band data the older urgent data is
inserted as normal data into the stream (even when
.B SO_OOBINLINE
is not set). This differs from BSD based stacks. 
.PP
Linux uses the BSD compatible interpretation
of the urgent pointer field by default. This violates RFC1122, but is 
required for interoperability with other stacks. It can be changed by
the 
.B tcp_stdurg
sysctl.

.SH ERRORS
.TP
.B EPIPE
The other end closed the socket unexpectedly or a read is executed on
a shut down socket.
.TP
.B ETIMEDOUT
The other end didn't acknowledge retransmitted data after some time.
.TP
.B EAFNOTSUPPORT
Passed socket address type in 
.I sin_family 
was not 
.BR AF_INET .
.PP
Any errors defined for
.BR ip (7)
or the generic socket layer may also be returned for TCP. 
.PP

.SH BUGS
Not all errors are documented. 
.PP
IPv6 is not described. 
.PP
Transparent proxy options are not described.
.SH VERSIONS
The sysctls are new in Linux 2.2. 
.B IP_RECVERR 
is a new 
feature in Linux 2.2. 
.B TCP_CORK 
is new in 2.2.
.SH SEE ALSO
.BR socket (7),
.BR socket (2),
.BR ip (7),
.BR sendmsg (2),
.BR recvmsg (2).
.br
RFC793 for the TCP specification.
.br
RFC1122 for the TCP requirements and a description of the Nagle
algorithm.
.br
RFC2001 for some TCP algorithms.
