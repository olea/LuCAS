.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"                               1993 Michael Haardt, Ian Jackson.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Wed Jul 21 23:02:38 1993 by Rik Faith <faith@cs.unc.edu>
.\"
.TH _EXIT 2 "21 July 1993" Linux "Linux Programmer's Manual"
.SH NAME
_exit \- terminate the current process
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.BI "void _exit(int " status );
.SH DESCRIPTION
.B _exit
terminates the calling process immediately. Any open file descriptors
belonging to the process are closed; any children of the process are
inherited by process 1, init, and the process's parent is sent a
.B SIGCHLD
signal.

.I status
is returned to the parent process as the process's exit status, and
can be collected using one of the
.B wait
family of calls.
.SH "RETURN VALUE"
.B _exit
never returns.
.SH "CONFORMING TO"
SVr4, SVID, POSIX, X/OPEN, BSD 4.3
.SH NOTES
.B _exit
does not call any functions registered with the ANSI C
.B atexit
function and does not flush standard I/O buffers. To do these things,
use
.BR exit (3).
.SH "SEE ALSO"
.BR fork (2),
.BR execve (2),
.BR waitpid (2),
.BR wait4 (2),
.BR kill (2),
.BR wait (2),
.BR exit (3)
