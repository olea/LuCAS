.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Fri Jan 31 16:26:07 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Fri Dec 11 17:57:27 1998 by Jamie Lokier <jamie@imbolc.ucc.ie>
.\"
.TH FLOCK 2 "11 December 1998" Linux "Linux Programmer's Manual"
.SH NAME
flock \- apply or remove an advisory lock on an open file
.SH SYNOPSIS
.B #include <sys/file.h>
.sp
.BR "int flock(int " fd ", int " operation )
.SH DESCRIPTION
Apply or remove an advisory lock on an open file.  The file is specified by
.IR fd .
Valid operations are given below:
.RS
.sp
.TP 1.0i
LOCK_SH
Shared lock.  More than one process may hold a shared lock for a given file
at a given time.
.TP
LOCK_EX
Exclusive lock.  Only one process may hold an exclusive lock for a given
file at a given time.
.TP
LOCK_UN
Unlock.
.TP
LOCK_NB
Don't block when locking.  May be specified (by
.IR or 'ing)
along with one of the other operations.
.sp
.RE

A single file may not simultaneously have both shared and exclusive locks.

A file is locked (i.e., the inode),
.I not
the file descriptor.  So,
.BR dup (2)
and
.BR fork (2)
do not create multiple instances of a lock.
.SH "RETURN VALUE"
On success, zero is returned.  On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EWOULDBLOCK
The file is locked and the
.B LOCK_NB
flag was selected.
.SH CONFORMING TO
4.4BSD (the
.BR flock (2)
call first appeared in 4.2BSD).
.SH NOTES
.BR flock (2)
does not lock files over NFS.  Use
.BR fcntl (2)
instead: that does work over NFS, given a sufficiently recent version of
Linux and a server which supports locking.
.PP
.BR flock (2)
and
.BR fcntl (2)
locks have different semantics with respect to forked processes and
.BR dup (2).
.SH "SEE ALSO"
.BR open (2),
.BR close (2),
.BR dup (2),
.BR execve (2),
.BR fcntl (2),
.BR fork (2).
There are also
.I locks.txt
and
.I mandatory.txt
in
.IR /usr/src/linux/Documentation .
