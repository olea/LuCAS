'\" t
.\" Don't change the first line, it tells man that we need tbl.
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\" and copyright (c) 1999 Matthew Wilcox. 
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" $Id: socket.7,v 1.2 2004/08/16 20:58:05 pepin.jimenez Exp $
.\"
.\" 30 Oct 2002, Modified, Michael Kerrisk, mtk16@ext.canterbury.ac.nz
.\"	Added description of SO_ACCEPTCONN
.\"	Plus 1 language tidy-up
.\"
.\" Translated on Sat Jul 10 1999 by Juan Piernas <piernas@ditec.um.es>
.\" Translation revised Fri Apr 21 2000 by Juan Piernas <piernas@ditec.um.es>
.\" 
.TH SOCKET  7 "7 mayo 1999" "P√°gina man de Linux" "Manual del Programador de Linux" 
.SH NOMBRE
socket - Interfaz de conectores (sockets) de Linux
.SH SINOPSIS
.B #include <sys/socket.h>
.br
.IB mysocket " = socket(int " socket_family ", int " socket_type ", int " protocol );
.SH DESCRIPCI√ìN
Esta p√°gina de manual describe la interfaz de usuario de la capa de
conectores de red de Linux. Los conectores compatibles con BSD son la
interfaz uniforme entre el proceso de usuario y las pilas de protocolos de
red dentro del n√∫cleo.
Los m√≥dulos de protocolo se agrupan en
.I familias de protocolos
como
.BR PF_INET ", " PF_IPX " y " PF_PACKET ,
y
.I tipos de conectores
como
.B SOCK_STREAM
o
.BR SOCK_DGRAM .
Vea
.BR socket (2)
para obtener m√°s informaci√≥n sobre las familias y los tipos.

.SH "FUNCIONES DE LA CAPA DE CONECTORES"
Estas funciones las usa el proceso de usuario para enviar o recibir paquetes
y para realizar otras operaciones con conectores. Para m√°s informaci√≥n vea
sus p√°ginas de manual respectivas.

.BR socket (2)
crea un conector,
.BR connect (2)
conecta un conector a una direcci√≥n de conector remota, la funci√≥n
.BR bind (2)
enlaza un conector a una direcci√≥n de conector local,
.BR listen (2)
indica al conector que se aceptar√°n nuevas conexiones y
.BR accept (2)
se usa para obtener un nuevo conector con una nueva conexi√≥n de entrada.
.BR socketpair (2)
devuelve dos conectores an√≥nimos conectados (s√≥lo implementado para unas
pocas familias locales como
.BR PF_UNIX )
.PP
.BR send (2),
.BR sendto (2)
y
.BR sendmsg (2)
env√≠an datos a trav√©s de un conector y
.BR recv (2),
.BR recvfrom (2)
y
.BR recvmsg (2)
reciben datos de un conector.
.BR poll (2)
y
.BR select (2)
esperan la llegada de datos o la posibilidad de enviar datos.
Adem√°s, se pueden usar las operaciones est√°ndares de E/S como
.BR write (2),
.BR writev (2),
.BR sendfile (2),
.BR read (2)
y
.BR readv (2)
para leer y escribir datos.
.PP
.BR getsockname (2)
devuelve la direcci√≥n de un conector local y
.BR getpeername (2)
devuelve la direcci√≥n de un conector remoto.
.BR getsockopt (2)
y
.BR setsockopt (2)
se usan para configurar o consultar opciones de los protocolos o las capas.
.BR ioctl (2)
se puede usar para configurar o consultar otras opciones determinadas.
.PP
.BR close (2)
se usa para cerrar un conector.
.BR shutdown (2)
cierra partes de una conexi√≥n bidireccional entre conectores.
.PP
Las b√∫squedas o las llamadas a
.BR pread (2) 
o 
.BR pwrite (2)
con una posici√≥n distinta de cero, no est√°n soportadas en conectores.
.PP
Es posible realizar E/S no bloqueante con conectores activando la opci√≥n
.B O_NONBLOCK
sobre el descriptor de fichero de un conector usando
.BR fcntl (2).
A continuaci√≥n, todas las operaciones que normalmente se bloquear√≠an
devolver√°n (usualmente) el error
.B EAGAIN .
(la operaciÛn deber· ser reintentada m·s tarde);
.BR connect (2)
devolver· un error
.B EINPROGRESS.
M√°s tarde, el usuario puede esperar diferentes eventos mediante
.BR poll (2)
o
.BR select (2).
.TS
tab(:) allbox;
c s s
l l l.
Eventos de E/S
Evento:T{
Opci√≥n de \fBpoll\fR
T}:Ocurrencia
Lectura:POLLIN:T{
Han llegado nuevos datos.
T}
Lectura:POLLIN:T{
Se ha completado una nueva solicitud de conexi√≥n (para conectores orientados
a conexi√≥n).
T}
Lectura:POLLHUP:T{
El otro extremo ha iniciado una solicitud de desconexi√≥n.
T}
Lectura:POLLHUP:T{
Se ha roto una conexi√≥n (s√≥lo para protocolos orientados a conexi√≥n).
Cuando se escribe en el conector, tambi√©n se env√≠a la se√±al
.BR SIGPIPE .
T}
Escritura:POLLOUT:T{
El conector tiene suficente espacio en el buffer de env√≠o para escribir
nuevos datos.
T}
Lectura/Escritura:T{
POLLIN|
.br
POLLOUT
T}:T{
Ha finalizado un
.BR connect (2)
de salida.
T}
Lectura/Escritura:POLLERR:T{
Se ha producido un error as√≠ncrono.
T}
Lectura/Escritura:POLLHUP:T{
El otro extremo ha cerrado una direcci√≥n de la conexi√≥n.
T}
Excepci√≥n:POLLPRI:T{
Han llegado datos fuera de orden, lo que hace que se env√≠e la se√±al
.BR SIGURG .
T}
.\" XXX not true currently
.\" It is no I/O event when the connection
.\" is broken from the local end using 
.\" .BR shutdown (2)
.\" or 
.\" .BR close (2)
.\" .
.TE
.PP
Una alternativa a poll/select
es dejar que el n√∫cleo informe de los eventos a la aplicaci√≥n mediante una
se√±al
.BR SIGIO .
Para ello, se debe activar la opci√≥n
.B FASYNC
en el descriptor de fichero de un conector mediante
.BR fcntl (2)
y se debe instalar un manejador de se√±ales v√°lido para
.B SIGIO
mediante
.BR sigaction (2). 
Vea la discusi√≥n sobre
.I SE√ëALES
m√°s abajo.
.SH "OPCIONES DE LOS CONECTORES"
Estas opciones de conector se pueden configurar usando 
.BR setsockopt (2)
y consultar con
.BR getsockopt (2)
con el nivel de conectores fijado a
.B SOL_SOCKET 
para todos los conectores:
.TP
.B SO_KEEPALIVE
Habilita el env√≠o de mensajes "sigue vivo" (keep-alive) en conectores
orientados a conexi√≥n. Espera una opci√≥n booleana entera.
.TP
.B SO_OOBINLINE
Si se habilita esta opci√≥n, los datos fuera de orden se colocan directamente
en el flujo de recepci√≥n de datos. En otro caso, los datos fuera de orden
s√≥lo se pasan cuando se activa la opci√≥n
.B MSG_OOB 
durante la recepci√≥n.
.\" don't document it because it can do too much harm.
.\".B SO_NO_CHECK
.TP
.BR SO_RCVLOWAT " y " SO_SNDLOWAT
Especifican el n√∫mero m√≠nimo de bytes en el buffer para que la capa de
conectores pase los datos al protocolo
.RB ( SO_SNDLOWAT ) 
o al usuario durante la recepci√≥n
.RB ( SO_RCVLOWAT ).
Estos dos valores no se pueden cambiar en Linux y sus argumentos de tama√±o
siempre tienen el valor de 1 byte.
.B getsockopt 
es capaz de leerlos.
.B setsockopt 
siempre devolver√°
.BR ENOPROTOOPT .  
.TP
.BR SO_RCVTIMEO " y " SO_SNDTIMEO
Especifica los plazos de tiempo (timeouts) para enviar y recibir antes de
informar de un error. En Linux el valor de ambos es fijo y viene dado por
una configuraci√≥n espec√≠fica del protocolo y no se pueden ni leer ni
modificar. Su funcionalidad se puede emular usando
.BR alarm (2)
o
.BR setitimer (2).
.TP
.B SO_BSDCOMPAT
Habilita la compatibilidad fallo a fallo con BSD. Esto lo usa s√≥lo el m√≥dulo
del protocolo UDP y est√° previsto que se elimine en el futuro. Cuando est√°
activa, los errores ICMP recibidos por un conector UDP no se pasan al
programa de usuario. Linux 2.0 tambi√©n habilitaba las opciones de
compatibilidad fallo a fallo con BSD (cambio aleatorio de las cabeceras,
omisi√≥n de la opci√≥n de difusi√≥n) para los conectores directos con esta
opci√≥n, pero esto se ha eliminado en la versi√≥n 2.2 de Linux. Es mejor
corregir los programas de usuario que habilitar esta opci√≥n.
.TP
.B SO_PASSCRED
Habilita o deshabilita la recepci√≥n del mensaje de control
.BR SCM_CREDENTIALS .
Para m√°s informaci√≥n, vea
.BR unix (7). 
.TP
.B SO_PEERCRED
Devuelve las credenciales del proceso externo conectado a este conector.
S√≥lo √∫til para conectores
.BR PF_UNIX .
Vea
.BR unix (7). 
El argumento es una estructura
.BR ucred .
Esta opci√≥n s√≥lo es v√°lida para
.BR getsockopt .
.TP
.B SO_BINDTODEVICE
Enlaza este conector a un dispositivo particular, como \(lqeth0\(rq,
especificado en el nombre de inferfaz pasado. Si el nombre es una cadena
vac√≠a o la longitud de las opciones es cero, se elimina el enlace entre el
dispositivo y el conector. La
opci√≥n pasada es una cadena (terminada en \\0) de longitud variable con el
nombre de la interfaz, con un tama√±o m√°ximo de
.BR IFNAMSIZ . 
Si el conector est√° ligado a una interfaz, √©ste s√≥lo procesar√° los paquetes
recibidos desde la interfaz particular. Observe que esto sÛlo funciona para algunos
tipos de conector, particularmente para conectores de tipo
.B AF_INET
. No est· soportado por los conectores de paquete (use 
.BR bind (8)
con ellos).
.TP
.B SO_DEBUG 
Activa la depuraci√≥n de los conectores. S√≥lo permitida para los procesos con
la capacidad
.B CAP_NET_ADMIN
o un identificador de usuario efectivo 0.
.TP
.B SO_REUSEADDR
Indica que las reglas usadas para validar las direcciones proporcionadas en
una llamada
.BR bind (2) 
deben permitir la reutilizaci√≥n de las direcciones locales. Para los
conectores
.B PF_INET
esto significa que un conector se puede enlazar a una direcci√≥n, excepto
cuando hay un conector activo escuchando asociado a la direcci√≥n. Cuando el
conector que est√° escuchando est√° asociado a
.B INADDR_ANY
con un puerto espec√≠fico, entonces no es posible realizar enlaces a este
puerto para ninguna direcci√≥n local.
.TP
.B SO_TYPE
Obtiene el tipo de conector como un valor entero (como
.BR SOCK_STREAM ). 
S√≥lo puede ser le√≠do con
.BR getsockopt . 
.\" SO_ACCEPTCONN is in SUSv3, and its origin is explained in 
.\" W R Stevens, UNPv1
.TP
.B SO_ACCEPTCONN
Devuelve un valor indicando si el conector ha sido marcado o no
para aceptar conexiones con
.BR listen ().
El valor 0 indica que es un conector que no escucha peticiones,
el valor 1 indica que es un conector que escucha peticiones.
SÛlo puede ser leÌdo con
.BR getsockopt . 
.TP
.B SO_DONTROUTE
No enviar a trav√©s de un enrutador, s√≥lo enviar a ordenadores directamente
conectados.
Se puede conseguir el mismo efecto activando la opci√≥n
.B MSG_DONTROUTE
en una operaci√≥n
.BR send (2)
sobre un conector. Espera una opci√≥n booleana entera.
.TP
.B SO_BROADCAST
Establece o consulta la opci√≥n de difusi√≥n. Cuando est√° activa, los
conectores de datagramas reciben los paquetes enviados a una direcci√≥n de
difusi√≥n y se les permite enviar paquetes a una direcci√≥n de difusi√≥n. Esta
opci√≥n no tiene efecto en conectores orientados a conexi√≥n.
.TP
.B SO_SNDBUF 
Establece u obtiene, en bytes, el m√°ximo buffer de env√≠o de un conector. El
valor por defecto se configura con la sysctl
.B wmem_default 
y el m√°ximo valor permitido se establece con la sysctl
.BR wmem_max .
.TP
.B SO_RCVBUF
Establece u obtiene, en bytes, el m√°ximo buffer de recepci√≥n de un conector.
El valor por defecto se configura con la sysctl
.B rmem_default 
y el m√°ximo valor permitido se establece con la sysctl
.BR rmem_max .
.TP
.B SO_LINGER
Establece u obtiene la opci√≥n
.BR SO_LINGER .
El argumento es una estructura
.BR linger .
.PP
.RS
.nf
.ta 4n 10n 22n
struct linger {
	int	l_onoff;	/* activar/desactivar demora */
	int	l_linger;	/* segundos de demora */
};
.ta
.fi
.RE
.IP
Cuando esta opci√≥n est√° activa, un
.BR close (2)
o
.BR shutdown (2)
no regresar√°n hasta que todos los mensajes encolados para el conector hayan
sido enviados con √©xito o se haya alcanzado el plazo de tiempo de demora.
En otro caso, la llamada regresa inmediatamente y el cierre se realiza en
segundo plano. Cuando el conector se cierra como parte de una llamada
.BR exit (2),
siempre se demora en segundo plano.
.TP
.B SO_PRIORITY
Asigna a todos los paquetes a enviar a trav√©s de este conector
la prioridad definida por el protocolo. Linux usa este valor para ordenar las
colas de red: los paquetes con una prioridad mayor se pueden procesar
primero dependiendo de la disciplina de encolamiento del dispositivo
seleccionado. Para
.BR ip (7),
esto tambi√©n establece el campo "tipo de servicio IP" (TOS) para los
paquetes de salida.
.TP
.B SO_ERROR
Obtiene y borra el error de conector pendiente. S√≥lo v√°lida para
.BR getsockopt .
Espera un entero.
.SH SE√ëALES
Cuando se escribe en un conector orientado a conexi√≥n que ha sido cerrado
(por el extremo local o remoto) se env√≠a una se√±al
.B SIGPIPE
al proceso escritor y se devuelve el valor de error
.BR EPIPE .
No se env√≠a la se√±al cuando la llamada para escritura especifica la
opci√≥n
.BR MSG_NOSIGNAL .
.PP
Cuando se solicita con la fcntl
.B FIOSETOWN 
o la ioctl
.BR SIOCSPGRP ,
la  se√±al
.B SIGIO
se env√≠a cuando se produce un evento de E/S. Es posible usar
.BR poll (2)
o
.BR select (2)
en el manejador de la se√±al para averigurar sobre qu√© conector se produjo el
evento. Una alternativa (en Linux 2.2) es configurar una se√±al de tiempo
real usando la fcntl
.BR F_SETSIG .
Se llamar√° al manejador de la se√±al de tiempo real con el descriptor de
fichero en el campo
.I si_fd
de su estructura
.IR siginfo_t .
Vea 
.BR fcntl (2)
para m√°s informaci√≥n.
.PP
Bajo determinadas circunstancias (por ejemplo, varios procesos accediendo a
un √∫nico conector), la condici√≥n que ha provocado la se√±al
.B SIGIO
puede haber desaparecido ya cuando el proceso reaccione a la se√±al. Si esto
ocurre, el proceso deber√≠a esperar de nuevo ya que Linux reenviar√° la se√±al
.B SIGIO
m√°s tarde.
.\" .SH ANCILLARY MESSAGES
.SH SYSCTLS
Se puede acceder a las sysctls fundamentales de red de los conectores usando
los ficheros
.B /proc/sys/net/core/* 
o mediante la interfaz
.BR sysctl (2).
.TP
.B rmem_default
contiene el valor por defecto, en bytes, del buffer de recepci√≥n de un
conector.
.TP
.B rmem_max
contiene el tama√±o m√°ximo, en bytes, del buffer de recepci√≥n de un conector
que el usuario puede establecer usando la opci√≥n de conector
.BR SO_RCVBUF .
.TP
.B wmem_default
contiene el valor por defecto, en bytes, del buffer de env√≠o de un conector.
.TP
.B wmem_max
contiene el tama√±o m√°ximo, en bytes, del buffer de env√≠o de un conector que
un usuario puede configurar usando la opci√≥n de conector
.BR SO_SNDBUF .
.TP
.BR message_cost " y " message_burst 
configuran el filtro de cubetas de fichas usado to load limit warning
messages provocados por eventos de red externos.
.TP
.B netdev_max_backlog 
N√∫mero m√°ximo de paquetes en la cola de entrada global.
.TP
.B optmem_max
Longitud m√°xima de los  datos auxiliares y de los datos de control del
usuario, como los iovecs por conector.
.\" netdev_fastroute is not documented because it is experimental
.SH IOCTLS
Se puede acceder a estas ioctls usando
.BR ioctl (2):

.RS
.nf
.IB error " = ioctl(" ip_socket ", " ioctl_type ", " &value_result ");"
.fi
.RE

.TP
.B SIOCGSTAMP
Devuelve una
.B struct timeval 
con la marca de tiempo recibida del √∫ltimo paquete pasado al usuario. Esto
es √∫til para realizar medidas exacta del tiempo de ida y vuelta o tiempo de
viaje. Vea
.BR setitimer (2) 
para una descripci√≥n de
.BR "struct timeval" .
.\"
.TP
.BR SIOCSPGRP
Configura el proceso o grupo de procesos al que enviar la se√±al
.B SIGIO
o 
.B SIGURG
cuando termina una operaci√≥n de E/S as√≠ncrona o hay disponibles datos
urgentes. El argumento es un puntero a un
.BR pid_t . 
Si el argumento es positivo, las se√±ales se envian a ese proceso. Si es
negativo, las se√±ales se env√≠an al grupo de procesos cuyo identificador es el
valor absoluto del argumento. El proceso s√≥lo puede seleccionar a √©l mismo
o a su propio grupo de procesos para que reciban las se√±ales, a menos que
posea la capacidad
.B CAP_KILL
o un identificador de usuario efectivo 0.
.TP
.B FIOASYNC
Modifica la opci√≥n
.B O_ASYNC
para habilitar o deshabilitar el modo de E/S as√≠ncrona del conector. El modo
de E/S as√≠ncrona significa que se producir√° una se√±al
.BR SIGIO ,
o la se√±al establecida mediante
.BR F_SETSIG ,
cuando se produzca un nuevo evento de E/S.
.IP
El argumento es una opci√≥n booleana entera.
.TP
.BR SIOCGPGRP
Obtiene el proceso o grupo de procesos actual que recibe las se√±al
.B SIGIO 
o 
.BR SIGURG ,
o 0 cuando no hay ning√∫no.
.PP
Fcntls v√°lidas:
.TP
.BR FIOGETOWN
Id√©ntica a la ioctl SIOCGPGRP.
.TP
.BR FIOSETOWN
Id√©ntica a la ioctl SIOCSPGRP.
.SH OBSERVACIONES
Linux asume que se usa la mitad del buffer de env√≠o/recepci√≥n para
estructuras internas del n√∫cleo. Por tanto, las sysctls son el doble de lo
que se puede observar en √∫ltima instancia.
.SH FALLOS
No se han documentado las opciones de conector
.B SO_ATTACH_FILTER 
y 
.B SO_DETACH_FILTER
de
.BR CONFIG_FILTER .
La interfaz sugerida para usarlas es la biblioteca libpcap.
.SH VERSIONES
.B SO_BINDTODEVICE
se introdujo en la versi√≥n 2.0.30 de Linux.
.B SO_PASSCRED 
es nueva en la versi√≥n 2.2 del n√∫cleo.
Las sysctls son nuevas en Linux 2.2.
.SH AUTORES
Esta p√°gina de manual fue escrita por Andi Kleen.
.SH V√âASE TAMBI√âN
.BR socket (2),
.BR ip (7),
.BR setsockopt (2),
.BR getsockopt (2),
.BR packet (7),
.BR ddp (7)
