'\" t
.\" Don't change the first line, it tells man that tbl is needed.
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" $Id: netdevice.7,v 1.2 2004/08/09 20:27:14 pepin.jimenez Exp $
.\"
.\" Translated on Fri Jul 2 1999 by Juan Piernas <piernas@ditec.um.es>
.\" Translation revised Thu Apr 20 2000 by Juan Piernas <piernas@ditec.um.es>
.\"
.TH NETDEVICE  7 "2 mayo 1999" "P√°gina man de Linux" "Manual del Programador de Linux" 
.SH NOMBRE
netdevice \- Acceso de bajo nivel a los dispositivos de red de Linux.
.SH SINOPSIS
.B "#include <sys/ioctl.h>"
.br
.B "#include <net/if.h>"
.SH DESCRIPCI√ìN
Esta p√°gina de manual describe la interfaz de conectores que se usa para
configurar los dispositivos de red.

Linux soporta algunas ioctls est√°ndares para configurar los dispositivos de
red. Se pueden usar sobre cualquier descriptor de fichero de un conector sin
tener en cuenta la familia o el tipo.
Se pasa una estructura
.BR ifreq :

.nf
.ta 4 12 20
struct ifreq {
	char	ifr_name[IFNAMSIZ];	/* Nombre de la interfaz */
	union {
		struct sockaddr	ifr_addr;
		struct sockaddr	ifr_dstaddr;
		struct sockaddr	ifr_broadaddr;
		struct sockaddr	ifr_netmask;
		struct sockaddr	ifr_hwaddr;
		short	ifr_flags;
		int	ifr_ifindex;
		int	ifr_metric;
		int	ifr_mtu;
		struct ifmap	ifr_map;
		char	ifr_slave[IFNAMSIZ];
		char	ifr_newname[IFNAMSIZ];
		char *	ifr_data;
	};
};

struct ifconf { 
  	int ifc_len;		/* size of buffer */
	union {            
		char *	ifc_buf; /* buffer address */ 
		struct ifreq *ifc_req; /* array of structures */
	};  
}; 	   
.ta
.fi

Normalmente, el usuario especifica a qu√© dispositivo va a afectar asignando a
.B ifr_name
el nombre de la interfaz. Todos los otros miembros de la estructura pueden
compartir memoria.

.SH IOCTLS
Si se marca una ioctl como privilegiada entonces su uso requiere un
identificador de usuario efectivo 0 o la capacidad
.BR CAP_NET_ADMIN .
Si √©ste no es el caso se devuelve
.BR EPERM .

.TP
.B SIOCGIFNAME
Dado un
.BR ifr_ifindex ,
devuelve el nombre de la interfaz en
.BR ifr_name .
√âsta es la √∫nica ioctl que devuelve su resultado en
.BR ifr_name .

.TP
.B SIOCGIFINDEX
Devuelve el √≠ndice de interfaz de la interfaz en
.BR ifr_ifindex .

.TP
.BR SIOCGIFFLAGS ", " SIOCSIFFLAGS
Obtiene o establece la palabra de banderas activas del dispositivo.
.B ifr_flags
contiene una m√°scara de bits de los siguientes valores:

.TS
tab(:) allbox;
c s
l l.
Significado de las banderas
IFF_UP:La interfaz est√° funcionando.
IFF_BROADCAST:Direcci√≥n de difusi√≥n v√°lida asignada.
IFF_DEBUG:Bandera de depuraci√≥n interna.
IFF_LOOPBACK:√âsta es una interfaz loopback.
IFF_POINTOPOINT:La interfaz es un enlace punto a punto.
IFF_RUNNING:Recursos necesarios reservados.
IFF_NOARP:T{
Sin protocolo ARP, la direcci√≥n de destino de Nivel 2 no est√° configurada.
T}
IFF_PROMISC:La interfaz se encuentra en modo promiscuo.
IFF_NOTRAILERS:Evitar el uso de terminadores.
IFF_ALLMULTI:Recibir todos los paquetes multidestino.
IFF_MASTER:T{
Interfaz maestra de un grupo de balanceo de carga.
T}
IFF_SLAVE:T{
Interfaz esclava de un grupo de balanceo de carga.
T}
IFF_MULTICAST:La interfaz soporta multidestino.
IFF_PORTSEL:T{
La interfaz es capaz de seleccionar el tipo de medio mediante
ifmap.
T}
IFF_AUTOMEDIA:Autoselecci√≥n de medios activa.
IFF_DYNAMIC:T{
Las direcciones se pierden cuando la interfaz se desactiva.
T}
.TE 

La configuraci√≥n de la palabra de banderas activas es una operaci√≥n
privilegiada pero cualquier proceso puede leerla.
.TP
.BR SIOCGIFMETRIC ", " SIOCSIFMETRIC
Obtiene o establece la m√©trica del dispositivo usando
.BR ifr_metric .
Todav√≠a no implementado. Asigna un 0 a
.B ifr_metric
cuando se intenta leer y devuelve
.B EOPNOTSUPP
cuando se intenta asignarle un valor.
.TP
.BR SIOCGIFMTU ", " SIOCSIFMTU
Obtiene o establece la MTU (unidad de transferencia m√°xima) del dispositivo
usando
.BR ifr_mtu .
La configuraci√≥n de la MTU es una operaci√≥n privilegiada. Configurar la MTU
con valores demasiado peque√±os puede provocar un fallo del n√∫cleo.
.TP
.BR SIOCGIFHWADDR ", " SIOCSIFHWADDR
Obtiene o establece la direcci√≥n hardware del dispositivo usando
.BR ifr_hwaddr .
La configuraci√≥n de la direcci√≥n hardware es una operaci√≥n privilegiada.
.TP
.B SIOCSIFHWBROADCAST
Establece la direcci√≥n de difusi√≥n hardware del dispositivo a partir de
.BR ifr_hwaddr .
Es una operaci√≥n privilegiada.
.TP
.BR SIOCGIFMAP ", " SIOCSIFMAP
Obtiene o establece los par√°metros hardware de la interfaz usando
.BR ifr_map .
La configuraci√≥n de los par√°metros es una operaci√≥n privilegiada.

.nf
.ta 4 20 42
struct ifmap 
{
	unsigned long	mem_start;
	unsigned long	mem_end;
	unsigned short	base_addr; 
	unsigned char	irq;	
	unsigned char	dma; 
	unsigned char	port; 
};
.ta
.fi

La interpretaci√≥n de la estructura ifmap depende del manejador del
dispositivo y de la arquitectura.
.TP
.BR SIOCADDMULTI ", " SIOCDELMULTI
A√±ade una direcci√≥n a o borra una direcci√≥n de los filtros multidestino de
la capa de enlace de la interfaz usando
.BR ifr_hwaddr .
La direcciÛn hardware queda especificada en una estructura
.IR sockaddr .
.I sa_family 
contiene el tipo de dispositivo ARPHRD_*, 
.I sa_data
la direcciÛn hardware L2 comenzando desde el byte 0.
Estas operaciones son privilegiadas. Si quiere una alternativa, vea tambi√©n
.BR packet (7).
.TP
.BR SIOCGIFTXQLEN ", " SIOCSIFTXQLEN
Obtiene o establece la longitud de la cola de transmisi√≥n de un dispositivo
usando
.BR ifr_qlen .
La configuraci√≥n de la longitud de la cola de transmisi√≥n es una operaci√≥n
privilegiada.
.TP
.B SIOCSIFNAME
Cambia el nombre de la interfaz indicada en
.BR ifr_name
a
.BR ifr_newname .
Es una operaci√≥n privilegiada. SÛlo est· permitida cuando la interfaz no est· activada.
.TP
.B SIOCGIFCONF
Devuelve una lista de direcciones de interfaces (capa de transporte).
Actualmente, esto s√≥lo significa direcciones de la familia AF_INET (IPV4) por
compatibilidad. El usuario pasa a la ioctl una estructura
.B ifconf
como argumento. Contiene un puntero a un array de estructuras
.I ifreq
en
.B ifc_req
y sus longitudes en bytes en
.B ifc_len.
El n√∫cleo rellena los ifreqs con todas las direcciones de las interfaces de
Nivel 3 actuales que est√°n funcionando:
.I ifr_name
contiene el nombre de la interfaz (eth0:1 etc.),
.I ifr_addr
la direcci√≥n.
El n√∫cleo regresa con la longitud real en
.IR ifc_len .
Si 
.I ifc_len
es igual a la longitud original, el buffer probablemente se haya desbordado y
deberÌa reintentarlo con un buffer mayor. Cuando no se produce ning√∫n error,
la ioctl devuelve 0. En otro caso, \-1. El desbordamiento no es un error.

.\" XXX Slaving isn't supported in 2.2
.\" .TP
.\" .BR SIOCGIFSLAVE ", " SIOCSIFSLAVE
.\" Get or set the slave device using
.\" .BR ifr_slave .
.\" Setting the slave device is a privileged operation.
.\" .PP
.\" XXX add amateur radio stuff.
.PP
La mayor√≠a de los protocolos soportan sus propias ioctls para configurar las
opciones de la interfaz espec√≠ficas del protocolo. Vea las p√°ginas de manual
de los protocolos para una descripci√≥n m√°s amplia.
Para la configuraci√≥n de direcciones IP, vea
.BR ip (7).
.PP
Adem√°s, algunos dispositivos soportan ioctls privadas. √âstas no se describen
aqu√≠.
.SH OBSERVACIONES
Si lo vemos de forma estricta,
.B SIOCGIFCONF
es espec√≠fica de IP y pertenece a
.BR ip (7).
.LP
Los nombres de interfaces que no tiene direcci√≥n o que no tienen la opci√≥n
.B IFF_RUNNING
activa, se pueden encontrar a trav√©s de
.IR /proc/net/dev.
.LP
Las direcciones IP locales versiÛn 6 (IPv6) se pueden obtener vÌa
/proc/net o vÌa
.BR rtnetlink (7).
.SH FALLOS
glibc 2.1 no posee la macro
.I ifr_newname 
en net/if.h. AÒada lo siguiente a su programa como soluciÛn:
.sp
.RS
.nf
.ta 4 20 42
#ifndef ifr_newname
#define ifr_newname     ifr_ifru.ifru_slave
#endif
.ta
.fi
.RE
.SH "V…ASE TAMBI…N"
.BR ip (7),
.BR proc (7),
.BR rtnetlink (7)
