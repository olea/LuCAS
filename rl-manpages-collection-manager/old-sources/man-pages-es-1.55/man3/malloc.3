.\" (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" License.
.\" Modified Sat Jul 24 19:00:59 1993 by Rik Faith (faith@cs.unc.edu)
.\" Clarification concerning realloc, iwj10@cus.cam.ac.uk (Ian Jackson), 950701
.\" Documented MALLOC_CHECK_, Wolfram Gloger (wmglo@dent.med.uni-muenchen.de)
.\"
.\" Translated 3 Mar 1998 by Vicente Pastor Gómez
.\"   <VPASTORG@santandersupernet.com , vicpastor@hotmail.com>
.\" Translation revised Tue Aug 18 1998 by Juan Piernas <piernas@ditec.um.es>
.\" Translation revised Wed Dec 30 1998 by Juan Piernas <piernas@ditec.um.es>
.\" Traducción revisada por Miguel Pérez Ibars <mpi79470@alu.um.es> el 29-marzo-2005
.\"
.TH MALLOC 3  "4 Abril 1993" "GNU" "Manual del Programador de Linux"
.SH NOMBRE
calloc, malloc, free, realloc \- Asignar y liberar memoria dinámica
.SH SINOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "void *calloc(size_t " "nmemb" ", size_t " "size" ");"
.nl
.BI "void *malloc(size_t " "size" ");"
.nl
.BI "void free(void " "*ptr" ");"
.nl
.BI "void *realloc(void " "*ptr" ", size_t "  "size" ");"
.fi
.SH DESCRIPCIÓN
.B calloc()
asigna memoria para una matriz de
.I nmemb
elementos de
.I size
bytes cada uno y devuelve un puntero a la memoria asignada. La memoria es
puesta a cero.
.PP
.B malloc()
asigna
.I size
bytes y devuelve un puntero a la memoria asignada. La memoria no es borrada.
.PP
.B free()
libera el espacio de memoria apuntado por
.IR ptr ,
que debe haber sido devuelto por una llamada previa a
.BR malloc() ,
.B calloc()
o
.BR realloc() .
En caso contrario, o si
.BI "free(" "ptr" )
ya se ha llamado antes, se produce un comportamiento indefinido.
Si
.I ptr
es
.BR NULL ,
no se realiza ninguna operación.
.PP
.B realloc()
cambia el tamaño del bloque de memoria apuntado por
.I ptr
a
.I size
bytes.
El contenido permanecerá inalterado hasta el mínimo entre el tamaño viejo y
el nuevo; la memoria recién asignada quedará sin inicializar.
Si
.I ptr
es
.BR NULL ,
la llamada es equivalente a
.BR malloc(size) ;
si size es igual a cero, la llamada es equivalente a
.BI "free(" "ptr" ) .
.I ptr
debe haber sido devuelto por una llamada previa a
.BR malloc() ,
.BR calloc()
o
.BR realloc() ,
a menos que
.I ptr
sea
.BR NULL .
.SH "VALOR DEVUELTO"
Para
.BR calloc() " y " malloc() ,
el valor devuelto es un puntero a la memoria asignada, que está
convenientemente alineada para cualquier tipo de variable, o
.B NULL
si la petición falla.
.PP
.B free()
no devuelve ningún valor.
.PP
.B realloc()
devuelve un puntero a la memoria recién asignada, que está convenientemente
preparada para cualquier tipo de variable y podría ser diferente de
.IR ptr ,
o
.B NULL
si la petición falla. Si
.I size
es igual a 0, se devuelve o bien NULL o bien un puntero susceptible
de ser pasado a
.IR free (). Si
.B realloc()
falla el bloque original se queda como estaba - no es liberado ni movido.
.SH "CONFORME A"
ANSI-C
.SH "VÉASE TAMBIÉN"
.BR brk (2),
.BR posix_memalign (3)
.SH OBSERVACIONES
El estándar Unix98 necesita que
.BR malloc (),
.BR calloc ()
y
.BR realloc ()
asignen a
.I errno
el valor ENOMEM en caso de fallo. Glibc asume que esto se hace
(y las versiones de glibc de estas rutinas hacen esto); si usa
una implementación privada de malloc que no asinga un valor a
.IR errno ,
entonces ciertas rutinas de biblioteca pueden fallar sin que en
.I errno
aparezca el motivo del fallo.
.LP
Los caídas de
.BR malloc() ,
.BR free()
o
.BR realloc()
casi siempre están relacionadas con la corrupción de la memoria montón
(heap), tal como el desbordamiento de una porción de memoria reservada o la
liberación del mismo puntero dos veces.
.PP
Las versiones recientes de libc de Linux (posteriores a la 5.4.23) y de GNU
libc (2.x) incluyen una implementación de malloc que se puede ajustar
mediante variables de entorno. Cuando se define
.BR MALLOC_CHECK_ ,
se usa una implementación especial (menos eficiente) que está diseñada para
tolerar errores simples, tales como una llamada doble a
.BR free()
con el mismo argumento o sobrepasar un límite en un byte (fallos "fuera por
poco" o de desbordamiento).
No obstante, no es posible protegerse contra todos los errores y se pueden
producir pérdidas de memoria.
Si se asigna a
.BR MALLOC_CHECK_
el valor 0, cualquier corrupción de memoria montón detectada se ignora
silenciosamente; si se le asigna el valor 1, se imprime un diagnóstico en la
salida estándar de error (stderr); si se le asigna el valor 2, se llama
inmediatamente a
.BR abort() .
Esto es útil porque, en caso contrario, se puede producir una caída mucho
más tarde y entonces es mucho más difícil buscar y encontrar la causa real
del problema.
.PP
Linux sigue una estrategia de asignación de memoria optimista.
Ésto significa que cuando
.B malloc()
devuelve un valor distinto de NULL no hay garantía de que la memoria
esté realmente disponible. En caso de el sistema se haya
quedado sin memoria, uno o más procesos serán matados por el
infame asesino 00M.

