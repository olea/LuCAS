.\" Copyright 1995 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\"
.\" Se concede autorizaci√≥n para hacer y distribuir copias literales de este 
.\" manual siempre que el aviso de copyright y esta autorizaci√≥n se conserven
.\" en todas las copias.
.\"
.\" Se concede autorizaci√≥n para copiar y distribuir versiones modificadas de 
.\" este manual bajo las condiciones de copia literal, siempre que el resultado 
.\" completo del trabajo realizado se distribuya bajo los t√©rminos de una 
.\" autorizaci√≥n id√©ntica a esta.
.\" 
.\" Como el n√∫cleo y las bibliotecas de Linux est√°n permanentemente cambiando
.\" esta p√°gina del manual puede ser incorrecta o estar desactualizada. El 
.\" autor o autores no asumen ninguna responsabilidad sobre los errores u 
.\" omisiones, o por los da√±os que resulten del uso de la informaci√≥n contenida
.\" aqu√≠. Puede que el autor o los autores no hayan tenido el mismo cuidado en
.\" escribir este manual, cuya licencia es libre de cargo, como el que puedan
.\" tener cuando trabajan profesionalmente.
.\" 
.\" Versiones formatadas o procesadas de este manual, si no van acommpa√±adas 
.\" por la fuente, deben dar a conocer el copyright y los autores de este 
.\" trabajo.
.\"
.\" Traducido por Carlos Gomez Romero (cgomez@databasedm.es)
.\" TraducciÛn revisada por Miguel PÈrez Ibars <mpi79470@alu.um.es> el 1-enero-2005
.\"
.TH TSEARCH 3  "24 septiembre 1995" "GNU" "Manual del Programador de Linux"
.SH NOMBRE
tsearch, tfind, tdelete, twalk \- manejan un √°rbol binario 
.SH SINOPSIS
.nf
.B #include <search.h>
.sp
.BI "void *tsearch(const void *" key ", void **" rootp ,
.BI "                int(*" compar ")(const void *, const void *));"
.sp
.BI "void *tfind(const void *" key ", const void **" rootp ,
.BI "                int(*" compar ")(const void *, const void *));"
.sp
.BI "void *tdelete(const void *" key ", void **" rootp ,
.BI "                int(*" compar ")(const void *, const void *));"
.sp
.BI "void twalk(const void *" root ", void(*" action ")(const void *" nodep ,
.BI "                                   const VISIT " which ,
.BI "                                   const int " depth "));"
.sp
.B #define _GNU_SOURCE
.br
.B #include <search.h>
.sp
.BI "void tdestroy (void *" root ", void (*" free_node ")(void *" nodep ));
.RE
.fi
.SH DESCRIPCI√ìN
\fBtsearch\fP, \fBtfind\fP, \fBtwalk\fP y \fBtdelete\fP manejan un √°rbol 
binario.  Son una generalizaci√≥n del algoritmo T de Knuth (6.2.2).
El primer campo de cada nodo del √°rbol es un puntero al correspondiente 
elemento de datos. (El programa llamante debe almacenar los datos actuales).
\fIcompar\fP apunta a la rutina de comparaci√≥n, que toma punteros a los dos 
elementos.  Debe devolver un entero negativo, cero o positivo dependiendo 
de si el primer elemento es menor, igual o mayor que el segundo.
.PP
\fBtsearch\fP busca un elemento en el √°rbol.  \fIkey\fP apunta al elemento 
buscado.  \fIrootp\fP apunta a la variable que apunta a la ra√≠z del √°rbol.
Si el √°rbol est√° vac√≠o la variable a la que apunta \fIrootp\fP deber√≠a estar a
\fBNULL\fP.
Si se encuentra el elemento dentro del √°rbol \fBtsearch\fP devuelve un puntero
al elemento.  Si no lo encuentra, \fBtsearch\fP lo a√±ade y devuelve un puntero 
al nuevo elemento.
.PP
\fBtfind\fP es como \fBtsearch\fP, s√≥lo que si no encuentra el elemento 
\fBtfind\fP devuelve \fBNULL\fP.
.PP
\fBtdelete\fP borra un elemento del √°rbol.  Sus argumentos son los mismos que
los de \fBtsearch\fP.  
.PP
\fBtwalk\fP realiza un recorrido en profundidad o en anchura de un √°rbol 
binario. \fIroot\fP apunta al nodo de comienzo del recorrido.
Si el nodo no es la ra√≠z s√≥lo se visitar√° parte del √°rbol.
\fBtwalk\fP llama a la funci√≥n de usuario \fIaction\fP cada vez que se visita
un nodo (esto es, tres veces para un nodo interno y una vez para una hoja). 
\fIaction\fP, toma tres argumentos.  El primero es un puntero al nodo que se
est√° visitando.  El segundo es un entero cuyo valor toma algundo de los 
valores \fBpreorder\fP, \fBpostorder\fP o \fBendorder\fP dependiendo de si
esta es la primera, sregunda o tercera visita al nodo interno o \fBleaf\fP 
si es la √∫nica vez que se visita la hoja.  (Estos s√≠mbolos est√°n definidos 
en \fI<search.h>\fP). El tercer argumento es la profundidad del nodo, 
siendo la profundidad de la ra√≠z cero.
.PP
(M·s com˙nmente, \fBpreorder\fP, \fBpostorder\fP, y \fBendorder\fP
son conocidos como \fBpreorder\fP, \fBinorder\fP, and \fBpostorder\fP:
antes de visitar los hijos, despuÈs del primero y antes del segundo,
y despuÈs de visitar los hijos. AsÌ, la elecciÛn del nombre \fBpost\%order\fP
es bastante confusa.)
.PP
\fBtdestroy\fP elimina el ·rbol entero apuntado por \fIrootp\fP,
liberando todos los recursos reservados por la funciÛn \fBtsearch\fP.
Para los datos en cada nodo del ·rbol se llama a la funciÛn \fIfree_node\fP.
El puntero a los datos es pasado como argumento a la funciÛn. Si esta tarea
no es necesaria \fIfree_node\fP debe apuntar a una funciÛn que no haga nada.
.SH "VALOR DEVUELTO"
\fBtsearch\fP devuelve un puntero al elemento igual del √°rbol, o al elemento
a√±adido, o \fBNULL\fP si no hubo suficiente memoria para a√±adir el elemento.  
\fBtfind\fP devuelve un puntero al elemento, o \fBNULL\fP si no se encuentra 
ninguno igual.  Si hay m√∫ltiples elementos que concuerdan con la clave el 
elemento devuelto es inespecificado.
.PP
\fBtdelete\fP devuelve un puntero al padre del elemento borrado, o \fBNULL\fP 
si no se encontr√≥ el elemento.
.PP
\fBtsearch\fP, \fBtfind\fP, y \fBtdelete\fP devuelven \fBNULL\fP si 
\fIrootp\fP es \fBNULL\fP en la entrada a la funci√≥n.  
.SH ADVERTENCIAS
\fBtwalk\fP toma un puntero a la ra√≠z, mientra que las otras funciones toman
un puntero a una variable que apunta a la ra√≠z.
.PP
\fBtwalk\fP usa \fBpostorder\fP con el significado "depu√©s del sub√°rbol 
izquierdo y antes del sub√°rbol derecho".  Algunas autoridades llamana a esto 
"inorden" y reservan "postorden" con el significado "despu√©s de ambos 
sub√°rboles".
.PP
\fBtdelete\fP libera la memoria necesaria para el elemento en el √°rbol.
El usuario es el responsable de liberar la memoria de los correspondientes 
datos.
.PP
El programa de ejemplo depende del hecho de que \fBtwalk\fP no vuelve a 
referenciar a un nodo despu√©s de llamar a la funci√≥n de usuario con el 
argumento "endorder" o "leaf".  Esto funciona con la biblioteca de GNU, pero
no est√° en la documentaci√≥n SysV.  
.SH EJEMPLO
El ejemplo siguiente inserta doce n√∫meros aleatorios en un √°rbol binario,
donde los n˙meros duplicados se meten hacia abajo, e imprime los n˙meros en orden.
.sp
.nf
    #include <search.h>
    #include <stdlib.h>
    #include <stdio.h>
    #include <time.h>
    
    void *root=NULL;
    
    void *xmalloc(unsigned n) {
      void *p;
      p = malloc(n);
      if(p) return p;
      fprintf(stderr, "insufficient memory\\n");
      exit(1);
    }
    
    int compare(const void *pa, const void *pb) {
      if(*(int *)pa < *(int *)pb) return -1;
      if(*(int *)pa > *(int *)pb) return 1;
      return 0;
    }
    
    void action(const void *nodep, const VISIT which, const int depth) {
      int *datap;
    
      switch(which) {
        case preorder:
          break;
        case postorder:
          datap = *(int **)nodep;
          printf("%6d\\n", *datap);
          break;
        case endorder:
          break;
        case leaf:
          datap = *(int **)nodep;
          printf("%6d\\n", *datap);
          break;
      }
    }
    
    int main() {
      int i, *ptr;
      void *val;

      srand(time(NULL));    
      for (i = 0; i < 12; i++) {
          ptr = (int *)xmalloc(sizeof(int));
          *ptr = rand()&0xff;
          val = tsearch((void *)ptr, &root, compare);
          if(val == NULL) exit(1);
      }
      twalk(root, action);
      return 0;
    }
.fi
.SH "CONFORME A"
SVID.
La funciÛn
.B tdestroy()
es una extensiÛn de GNU.
.SH "V…ASE TAMBI…N"
.BR qsort (3),
.BR bsearch (3),
.BR hsearch (3),
.BR lsearch (3)
