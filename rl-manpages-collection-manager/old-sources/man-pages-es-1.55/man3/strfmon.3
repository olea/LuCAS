.\" Copyright (c) 2000 Andries Brouwer (aeb@cwi.nl)
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" Traducido por Miguel Pérez Ibars <mpi79470@alu.um.es> el 13-agosto-2004
.\"
.TH STRFMON 3  "5 diciembre 2000" "Linux" "Manual del Programador de Linux"
.SH NOMBRE
strfmon \- convierte valores monetarios a una cadena
.SH SINOPSIS
.nf
.B #include <monetary.h>
.sp
.BI "ssize_t strfmon(char *" s ", size_t " max ", const char *" format ,
.B "...);"
.fi
.SH DESCRIPCIÓN
La función \fBstrfmon()\fP formatea las cantidades especificadas
según la especificación de formato \fIformat\fP y guarda el resultado
en el array de caracteres \fIs\fP de tamaño \fImax\fP.
.PP
Los caracteres ordinarios en \fIformat\fP se copian a \fIs\fP
sin conversión. Los especificadores de conversión comienzan con un
carácter `%'. Inmediatamente después puede haber cero o más
de las siguientes opciones:
.TP
.BI = f
El carácter
.I f
de un sólo byte se usa como carácter de relleno numérico (to be used with
a left precision, see below).
Cuando no se especifica, se utiliza el carácter espacio.
.TP
.B ^
No usar ningún carácter de grupo que pueda estar definido
para la localización actual. Por defecto, el agrupamiento está habilitado.
.TP
.BR ( " or " +
La opción ( indica que las cantidades negativas deben ser encerradas entre
paréntesis. La opción + indica que los signos deben ser manejados en el
modo por defecto, esto es, las cantidades son precedidas por
la indicación de signo de la localización, p.e., nada para positivo, "-" para negativo.
.TP
.BR !
Omitir el símbolo monetario.
.TP
.BR \-
Justificar a la izquierda todos los campos. Por defecto se justifican a la derecha.
.LP
A continuación, puede haber una anchura de campo: una cadena de dígitos decimales
especificando una anchura mínima de campo. El valor por defecto es 0.
Un resultado más pequeño que esta anchura es rellenado con espacios
(a la izquierda, a menos que se especifique la opción de justificado a la izquierda).
.LP
Next, there may be a left precision of the form "#" followed by
a decimal digit string. If the number of digits left of the
radix character is smaller than this, the representation is
padded on the left with the numeric fill character.
Grouping characters are not counted in this field width.
.LP
Next, there may be a right precision of the form "." followed by
a decimal digit string. The amount being formatted is rounded to
the specified number of digits prior to formatting.
The default is specified in the
.I frac_digits
and
.I int_frac_digits
items of the current locale.
If the right precision is 0, no radix character is printed.
(The radix character here is determined by LC_MONETARY, and may
differ from that specified by LC_NUMERIC.)
.LP
Finalmente, la especificación de conversión debe terminar
con un carácter de conversión. Los tres carácteres de conversión son
.TP
.B %
(En este caso la especificación completa debe ser exactamente "%%".)
Pone un carácter `%' en la cadena resultado.
.TP
.B i
Un argumento de tipo double es convertido usando el formato
monetario internacional de la localización.
.TP
.B n
Un argumento de tipo double es convertido usando el formato
monetario nacional de la localización.
.SH "VALOR DEVUELTO"
La función \fBstrfmon()\fP devuelve el número de caracteres puestos en
el array \fIs\fP, sin incluir el carácter NUL del final,
supuesto que la cadena, incluendo el NUL del final, quepa.
En otro caso, asigna a
.I errno
el valor E2BIG, devuelve \-1, y el contenido del array queda indefinido.
.SH EJEMPLO
La llamada
.RS
.nf
strfmon(buf, sizeof(buf), "[%^=*#6n] [%=*#6i]",
        1234.567, 1234.567);
.fi
.RE
produce la salida
.RS
[ fl **1234,57] [ NLG  **1 234,57]
.RE
en la localización alemana (con fl para "florijnen" y NLG para Netherlands Guilders).
El carácter de grupo es muy molesto porque ocupa mucho espacio como
dígito, mientras que no debería ocupar más de la mitad,
y provocará sin duda confusión.
Sorprendentemente, "fl" es precedido y seguido por un espacio,
y "NLG" es precedido por uno y seguido por dos espacios.
Ésto puede ser un fallo en los ficheros de localización. Las localizaciones
italiana, australiana, suiza y portuguesa producen los resultados
.RS
[ L. **1235] [ ITL  **1.235]
.br
[ $**1234.57] [ AUD **1,234.57]
.br
[Fr. **1234,57] [CHF  **1.234,57]
.br
[ **1234$57Esc] [ **1.234$57PTE ]
.RE
.SH "VÉASE TAMBIÉN"
.BR setlocale (3),
.BR sprintf (3),
.BR locale (7)
