
.\" Copyright (c) 1999 Andries Brouwer (aeb@cwi.nl)
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\"
.\" Earlier versions of this page influenced the present text.
.\" It was derived from a Berkeley page with version
.\"       @(#)printf.3    6.14 (Berkeley) 7/30/91
.\" converted for Linux by faith@cs.unc.edu, updated by
.\" Helmut.Geyer@iwr.uni-heidelberg.de, agulbra@troll.no and Bruno Haible.
.\"
.\" 1999-11-25 aeb - Rewritten, using SUSv2 and C99.
.\" 2000-07-26 jsm28@hermes.cam.ac.uk - three small fixes
.\" 2000-10-16 jsm28@hermes.cam.ac.uk - more fixes
.\"
.\" Traducido al castellano (con permiso) por:
.\" Sebastian Desimone (chipy@argenet.com.ar) (desimone@fasta.edu.ar)
.\" Translation revised May 11 1998 by juanma <imontalvoo@medynet.com>
.\" Translation revised June 9 1998 by Juan Piernas <piernas@dif.um.es>
.\" Translation revised August 17 1998 by Juan Piernas <piernas@ditec.um.es>
.\" Translation revised Sat Jun 26 1999 by Juan Piernas <piernas@ditec.um.es>
.\" Translation revised Mon Aug  7 2000 by Juan Piernas <piernas@ditec.um.es>
.\" Traducción revisada por Miguel Pérez Ibars <mpi79470@alu.um.es> el 4-abril-2005
.\"
.TH PRINTF 3  "16 octubre 2000" "Página man de Linux" "Manual del Programador de Linux"
.SH NOMBRE
printf, fprintf, sprintf, vprintf, vfprintf, vsprintf \- conversión de 
salida formateada
.SH SINOPSIS
.B #include <stdio.h>
.sp
.BI "int printf(const char *" format ", ...);"
.br
.BI "int fprintf(FILE *" stream ", const char *" format ", ...);"
.br
.BI "int sprintf(char *" str ", const char *" format ", ...);"
.br
.BI "int snprintf(char *" str ", size_t " size ", const char *" format ", ...);"
.sp
.B #include <stdarg.h>
.sp
.BI "int vprintf(const char *" format ", va_list " ap );
.br
.BI "int vfprintf(FILE *" stream ", const char *" format ", va_list " ap );
.br
.BI "int vsprintf(char *" str ", const char *" format ", va_list " ap );
.br
.BI "int vsnprintf(char *" str ", size_t " size ", const char *" format ", va_list " ap );
.SH DESCRIPCIÓN
Las funciones de la familia
.B printf
producen una salida de acuerdo a
.I format
como se describe abajo.
.B Printf
y
.B vprintf
escriben su salida a
.IR stdout ,
el flujo de salida estándar.
.B fprintf
y
.B vfprintf
escriben su salida al
.IR stream 
de salida dado.
.BR sprintf ,
.BR snprintf ,
.B vsprintf
y
.B vsnprintf
escriben a una cadena de caracteres
.IR  str .
.PP
Las funciones
.BR vprintf ,
.BR vfprintf ,
.B vsprintf
y
.B vsnprintf
son equivalentes a las funciones
.BR printf ,
.BR fprintf ,
.B sprintf
y
.BR snprintf ,
respectivamente, salvo en que se las llama con un va_list en lugar de con un
número variable de argumentos. Estas funciones no llaman a la macro
.IR va_end .
En consecuencia, el valor de
.I ap
queda indefinido después de la llamada. La propia aplicación debería llamar
a
.I va_end(ap)
después.
.PP
Estas ocho funciones escriben la salida bajo el control de una cadena
.I format
que especifica cómo los argumentos posteriores (o los argumentos accedidos
mediante las facilidades de argumentos de longitud variables proporionadss
por
.BR stdarg (3))
son convertidos para su salida.
.SS "Valor devuelto"
En caso de éxito, estas funciones devuelven el número de
caracteres impresos (no incluyendo el carácter `\e0' usado para terminar
la salida de cadenas).
Las funciones
.BR snprintf " y " vsnprintf
no escriben más de
.I size
bytes (incluyendo el carácter terminador '\e0').
Si la salida fue truncada debido a este límite el valor devuelto
es el número de caracteres (no incluyendo el carácter final '\e0')
que se habrían escrito en la cadena final si hubiera habido suficiente espacio.
De esta manera, un valor de retorno de
.I size
o más significa que la salida fue truncada. (Vea también
debajo de OBSERVACIONES.)
Si se encuentra un error de salida, se devuelve un valor negativo.
.SS "Formato de la cadena de formato"
La cadena de formato es una cadena de caracteres que comienza y termina en
su estado de cambios inicial, si lo hay.
La cadena \fBformat\fP está compuesta de cero o más directivas: caracteres
ordinarios (no
.BR % )
que se copian sin cambios al flujo de salida, e
indicaciones de conversión, cada uno de las cuales produce la búsqueda
de cero o más argumentos posteriores. Cada especificación de conversión se
introduce mediante el carácter 
.B %
y termina con un
.IR "indicador de conversión" .
En medio puede haber (en este orden) cero o más
.IR opciones ,
una
.I anchura de campo
opcional mínima,
una
.I precisión
opcional y un
.I "modificador de longitud"
opcional.

Los argumentos se deben corresponder adecuadamente (después de la promoción
de tipos) con el indiciador de conversión. Por defecto, los argumentos se
usan en el orden dado, donde cada `*' y cada indicador de conversión pregunta
por el siguiente argumento (y es un error si se dan de forma insuficiente
muchos argumentos). También se puede especificar explícitamente qué
argumento se toma, en cada lugar donde se necesite un argumento, escribiendo
`%m$' en lugar de `%' y `*m$' en lugar de `*', donde el entero decimal m denota
la posición en la lista de argumentos del argumento deseado, empezando por
1. Por tanto,
.RS
.nf
	printf("%*d", width, num);
.fi
.RE
y
.RS
.nf
	printf("%2$*1$d", width, num);
.fi
.RE
son equivalentes. El segundo estilo permite referencias repetidas al mismo
argumento. El estándar C99 no incluye el estilo usando caracteres `$',
que proviene de `the Single Unix Specification'.  Si se utiliza el estilo con
`$', debe ser usado para todas las conversiones tomando un argumento
y todos los argumentos de anchura y precisión, pero puede mezclarse con
formatos `%%' que no consumen ningún argumento. No puede haber huecos
en los números de los argumentos especificados usando `$'; por ejemplo, si
se especifican los argumentos 1 y 3, el argumento 2 debe ser también especificado
en algún lugar en la cadena de formato.

Para alguna conversión numérica se usa un carácter radical (`punto decimal') o
carácter separador de miles. El carácter real usado depende de la parte
LC_NUMERIC de la localización. La localizacíon POSIX usa `.' como carácter
radical y no posee un carácter separador de miles. Por tanto,
.RS
.nf
	printf("%'.2f", 1234567.89);
.fi
.RE
produce `1234567.89' en la localización POSIX, `1234567,89' en la localización
nl_NL, y `1.234.567,89' en la localización da_DK.
.SS "Los caracteres de opción"
El carácter % va seguido por cero o más de las siguientes opciones:
.TP
.B #
El valor debe ser convertido a un ``formato alternativo''.
Para las conversiones
.BR o ,
el primer carácter de la cadena de salida se hace 0 (prefijando un cero si
ya era distinto de cero).
Para las conversiones
.B x
y
.BR X ,
la cadena `0x' (o `0X' para conversiones
.B X
) precede a los resultados que son distintos de 0.  Para las conversiones
.BR a ,
.BR A ,
.BR e ,
.BR E ,
.BR f ,
.BR F ,
.BR g ,
y
.BR G ,
el resultado contendrá un punto decimal, aún si ningún dígito lo
sigue (normalmente, sólo aparece un punto decimal en el resultado de
aquellas conversiones que son seguidas de algún dígito). Para las conversiones 
.B g
y
.BR G ,
en el resultado no se eliminan los ceros del final, como ocurriría en otro
caso.
Para otras conversiones, el resultado es indefinido.
.TP
.B \&0
El valor se debe rellenar con ceros. Para las conversiones
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
.BR X ,
.BR a ,
.BR A ,
.BR e ,
.BR E ,
.BR f ,
.BR F ,
.BR g ,
y
.B G
, el valor convertido es rellenado a la izquierda con ceros en vez de blancos.
Si las banderas
.B \&0
y
.B \-
aparecen a la vez, la bandera
.B \&0
es ignorada.
Si en una conversión numérica
.BR "" ( d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
y
.BR X ),
se indica una precisión, la bandera
.B \&0
se ignora.
Para otras conversiones, el resultado es indefinido.
.TP
.B \-
El valor convertido es justificado a la izquierda sobre el límite del campo.
(Por defecto, la justificación es a la derecha). Excepto para conversiones
.BR n ,
el valor convertido es rellenado a la derecha con blancos, en vez de a la
izquierda con blancos o ceros. Un
.B \-
sobreescribe un 
.B \&0
si se indican ambos.
.TP
.B ""
(un espacio) Se debe dejar un espacio en blanco delante de 
un número positivo (o cadena vacía) producido por una conversión con signo.
.TP
.B +
Siempre se colocará el signo (+ o -) delante de un número producido
por una conversión con signo.  Por omisión, sólo se usa el signo para los
números negativos. Un
.B +
sobreescribe un espacio si se usan ambos.
.PP
Los cinco carácteres de opción anteriores se definen en el estándar C. SUSv2
especifica un carácter de opción adicional.
.TP
.B '
Para una conversión decimal
.BR "" ( i ,
.BR d ,
.BR u ,
.BR f ,
.BR F ,
.BR g ,
.BR G )
la salida se va a agrupar con caracteres de separación de miles si la
información de localización así lo indica. Dese cuenta que muchas versiones
de
.B gcc
no pueden analizar esta opción y producirán una advertencia. SUSv2 no incluye
%'F.
.PP
glibc 2.2 añada un nuevo carácter de opción adicional.
.TP
.B I
Para una conversión decimal entera
.BR "" ( i ,
.BR d ,
.BR u )
la salida utiliza los dígitos de salida alternativos de la localización, 
si hay (por ejemplo, dígitos árabes). Sin embargo, no incluye ninguna
definición de localización con tales dígitos de salida
.B outdigits
definidos.
.\" See http://sources.redhat.com/ml/libc-alpha/2000-08/msg00230.html
.SS "La anchura de campo"
Una cadena de dígitos decimales opcional (con un primer dígito distinto de
cero) que especifica una anchura de campo mínimo. Si el valor convertido tiene
menos caracteres que la anchura del campo, se rellenará con espacios a la
izquierda (o a la derecha, si se da la opción de justificación a la
izquierda). En lugar de una cadena de dígitos decimales se puede escribir `*'
o `*m$' (para algún entero decimal m) para especificar que la anchura del campo
se proporciona en el siguiente argumento o en el m-ésimo argumento,
respectivamente, que debe ser de tipo
.IR int .
Una anchura de campo negativa se toma como una opción `-' seguida por una
anchura de campo positiva.
En ningún caso, una anchura de campo inexistente o pequeña hace que el campo
se trunque. Si el resultado de la conversión es más ancho que la anchura del
campo, el campo se expande para contener el resultado de la conversión.
.SS "La precisión"
Una precisión opcional, indicada por un punto (`\&.') seguido por una
cadena de dígitos también opcional.
En lugar de una cadena de dígitos decimales se puede escribir `*' o `*m$'
(para algún entero decimal m) para especificar que la precisión se da en el
siguiente argumento o en el m-ésimo argumento, respectivamente, que debe ser
de tipo
.IR int .
Si la precisión se da como un simple `.', o si la precisión es negativa, la
precisión se toma como cero. Esto da el número mínimo de dígitos 
que deben aparecer en las conversiones
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
y
.BR X ,
el número de dígitos que deben aparacer tras el carácter radical en las 
conversiones
.BR a ,
.BR A ,
.BR e ,
.BR E ,
.B f
y
.BR F ,
el máximo número de dígitos significativos para las conversiones 
.B g
y
.BR G ,
o el máximo número de caracteres a imprimir de una cadena en
las conversiones 
.B s
y
.BR S .
.SS "El indicador de longitud"
Aquí, `conversión entera' significa una conversión
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
o
.BR X .
.TP
.B hh
La siguiente conversión entera se corresponde con un argumento
.I signed char
o
.IR "unsigned char" ,
o la siguiente conversión
.B n
se corresponde a un puntero a un argumento
.I "signed char" .
.TP
.B h
La siguiente conversión entera se corresponde con un argumento
.I short int
o
.IR "unsigned short int" ,
o que la siguiente conversión
.B n
corresponde a un puntero a un argumento
.IR "short int" .
.TP
.B l
(ele) La siguiente conversión entera corresponde a un argumento 
.I long int
o
.IR "unsigned long int" ,
o que la siguiente conversión
.B n
corresponde a un puntero a un argumento
.IR "long int"
o que la siguiente conversión
.B c
corresponde a un argumento
.IR wint_t ,
o que la siguiente conversión
.B s
corresponde a un puntero a un argumento
.IR wchar_t .
.TP
.B ll
(ele-ele).
La siguiente conversión entera corresponde a un argumento
.I long long int
o
.I "unsigned long long int" ,
o que la siguiente conversión
.B n
corresponde a un puntero a un argumento
.IR "long long int" .
.TP
.B L
La siguiente conversión
.BR a ,
.BR A ,
.BR e ,
.BR E ,
.BR f ,
.BR F ,
.BR g ,
o
.B G
corresponde a un argumento
.IR "long double" .
(C99 permite %LF, pero SUSv2 no.)
.TP 
.B q
(`cuadruple'. BSD 4.4 y Linux libc5 sólo. No usar.)
Esto es un sinónimo de
.BR ll .
.TP
.B j
La siguiente conversión entera corresponde a un
.I intmax_t
o
.IR uintmax_t .
.TP 
.B z
La siguiente conversión entera corresponde a un argumento
.I size_t
o
.IR ssize_t .
(Linux libc5 tiene
.B Z
con este significado. No lo use.)
.TP
.B t
La siguiente conversión entera corresponde a un argumento
.IR ptrdiff_t .
.PP
SUSv2 sólo conoce los indicadores de longitud
.B h
(en
.BR hd ,
.BR hi ,
.BR ho ,
.BR hx ,
.BR hX ,
.BR hn ),
.B l
(en
.BR ld ,
.BR li ,
.BR lo ,
.BR lx ,
.BR lX ,
.BR ln ,
.BR lc ,
.BR ls )
y
.B L
(en
.BR Le ,
.BR LE ,
.BR Lf ,
.BR Lg ,
.BR LG ).

.SS "El indicador de conversión"
Un carácter que especifica el tipo de conversión a ser aplicado.
Los indicadores de conversión y sus significados son:      
.TP
.BR d , i
El argumento
.I int
se convierte a la notación decimal con signo. La precisión, si la hay, da el
número mínimo de dígitos que deben aparecer. Si el valor convertido necesita
menos dígitos, se rellena a la izquierda con ceros. La precisión por omisión
es 1. Cuando se imprime 0 con una precisión explícita 0, la salida es la
cadena vacía.
.TP
.BR o , u , x , X
El argumento
.I "unsigned int"
se convierte a un octal sin signo
.BR "" ( o ,
a decimal sin signo
.BR "" ( u ,
a a notación hexadecimal sin signo
.BR "" ( x
y
.BR X ).
Las letras
.B abcdef
son usadas para conversiones
.BR x .
Las letras
.B ABCDEF
son usadas para conversiones
.BR X .
La precisión, si se ha indicado alguna, da el mínimo número de dígitos que
deben aparecer. Si el valor convertido requiere menos dígitos, éste es
rellenado a la izquierda con ceros. La precisión por omisión es 1. Cuando se
imprime 0 con una precisión explícita 0, la salida es la cadena vacía.
.TP
.BR e , E
El argumento 
.I double
es redondeado y convertido al formato
.if \w'\*(Pm'=0 .ds Pm ±
.BR "" [\-]d \&. ddd e \\*(Pmdd
donde hay un dígito delante del carácter del punto decimal y el número de
dígitos después de éste es igual a la precisión. Si no se indica precisión,
ésta es tomada como 6. Si la precisión es cero, no aparece el carácter de
punto decimal. Una conversión
.B E
usa la letra
.B E
( en vez de 
.BR e )
para introducir el exponente. El exponente siempre contiene al menos dos
dígitos. Si el valor es cero, el exponente es 00.
.TP
.BR f , F
El argumento
.I double
es redondeado y convertido a una notación decimal del estilo
.BR "" [\-]ddd \&. ddd,
donde el número de dígitos después del carácter del punto decimal es igual a 
la especificación de la precisión. Si no se indica precisión, ésta es
tomada como 6. Si la precisión es explícitamente cero, no aparece el carácter
del punto decimal. Si aparece un punto decimal, al menos aparece un dígito
delante de él.

(SUSv2 no conoce
.B F
y dice que deben estar disponibles reprentaciones como cadenas de caracteres
para infinito y NaN (Not a Number, no es un número). El estándar C00
especifica `[-]inf' o `[-]infinity' para el infinito y una cadena que
comienza por `Nan' para NaN, en el caso de una conversión
.BR f ,
y `[-]INF' o `[-]INFINITY' o `NAN*' en el caso de una conversión
.BR F .)
.TP
.BR g , G
El argumento
.I double
es convertido al estilo de
.B f
o
.B e
(o
.B F 
o
.B E
para conversiones
.B G
). La precisión especifica el número de dígitos significativos.
Si no se indica precisión, se dan 6 dígitos. Si la precisión es cero,
ésta es tratada como 1. Se utiliza el formato de
.B e
si el exponente de su conversión es menor que \-4 o más grande
o igual a la precisión. Los ceros finales se eliminan de la parte fraccional
del resultado. Un punto decimal sólo aparece si es seguido de al menos un
dígito. 
.TP
.BR a , A
(C99. No en SUSv2) Para una conversión
.BR a ,
el argumento
.I double
se convierte a notación hexadecimal (usando las letras abcdef) según el
estilo
.BR "" [-] 0x h \&. hhhh p \\*(Pmd.
Para una conversión
.B A
se usan el prefijo
.BR 0X ,
las letras ABCDEF y el separador de exponente
.BR P .
Hay un dígito hexadecimal antes del punto decimal y el número de dígitos
tras él es igual a la precisión. La precisión por omisión es suficiente
para una representación exacta del valor si existe una representación exacta
en base 2 y, en otro caso, es suficientemente grande para distinguir valores
de tipo
.IR double .
El dígito antes del punto decimal queda sin especificar para números no
normalizados y distinto de cero pero, en cualquier caso, sin especificar
para números normalizados.
.TP
.B c
Si no está presente un modificador
.BR l ,
el argumento
.I int
es convertido a un
.IR "unsigned char" ,
y se escribe el carácter resultante.
Si está presente un modificador
.BR l ,
el argumento
.I wint_t
(carácter ancho) se convierte a una secuencia multibyte llamando a la
función
.BR wcrtomb ,
con un estado de conversión que comienza en el estado inicial, y se escribe
la cadena multibyte resultante.
.TP
.B s
Si no está presente un modificador
.BR l :
se espera que el argumento
.I "const char *"
sea un puntero a un vector (array) de tipo carácter (puntero a una cadena de
caracteres). Se escriben caracteres del array hasta (pero no incluyendo)
un carácter terminador 
.BR NUL .
Si se especifica una precisión, no se escriben más caracteres del número
especificado. Si se da una precisión, no es necesario que aparezca ningún
carácter nulo. Si no se especifica precisión, o es mayor que el tamaño
de la cadena, la cadena debe contener un carácter de terminación
.BR NUL .
Si está presente un modificador
.BR l :
se espera que el argumento
.I "const wchar_t *"
sea un puntero a un vector de caracteres anchos. Los caracteres anchos del
array se convierten a caracteres multibyte (cada uno llamando a la función
.BR wcrtomb ,
con un estado de conversión que comienza en el estado inicial antes del
primer carácter ancho) incluyendo el carácter ancho nulo terminador. Los
caracteres multibyte resultantes se escriben hasta llegar (pero sin incluir)
el byte nulo terminador. Si se especifica una precisión, no se escriben más
bytes de los indica el número, aunque no se escribe ningún carácter
multibyte parcial. Advierta que la precisión determina el número de
.I bytes
escritos, no el número de
.I caracteres anchos
o
.IR "posiciones de pantalla" .
El vector debe contener un carácter ancho nulo terminador, a menos que se de
una precisión que sea tan pequeña que el número de bytes escritos la exceda
antes de llegar al final del vector.
.TP
.B C
(No en C99, pero sí en SUSv2.)
Sinónimo de
.BR lc .
No usar.
.TP
.B S
(No en C99, pero sí en SUSv2.)
Sinónimo de
.BR ls .
No usar.
.TP
.B p
El argumento de tipo puntero
.I "void *"
se imprime en hexadecimal (como si se hubiera indicado
.B %#x
o
.BR  %#lx ).
.TP
.B n
El número de caracteres escritos hasta ahora se guarda en el entero indicado
por el argumento de tipo puntero
.I "int *"
(o una variante suya). No se convierte ningún argumento.
.TP
.B %
Se escribe un `%'. No se convierte ningún argumento. La especificación completa
de conversión es `%%'.
.PP
.SH EJEMPLOS
.br
.if \w'\*(Pi'=0 .ds Pi pi
Para imprimir \*(Pi con cinco cifras decimales:
.RS
.nf
#include <math.h>
#include <stdio.h>
fprintf(stdout, "pi = %.5f\en", 4 * atan(1.0));
.fi
.RE
.PP
Para imprimir una fecha y una hora de la forma `Sunday, July 3, 10:02',
donde
.I weekday
y
.I month
son punteros a cadenas:
.RS
.nf
#include <stdio.h>
fprintf(stdout, "%s, %s %d, %.2d:%.2d\en",
	weekday, month, day, hour, min);
.fi
.RE
.PP
Muchos países usan el orden día-mes-año. Por tanto, una versión
internacionalizada debe ser capaz de mostrar los argumentos en el orden
indicado por el formato:
.RS
.nf
#include <stdio.h>
fprintf(stdout, formato,
	diasemana, mes, día, hora, min);
.fi
.RE
donde
.I formato
depende de la localización y puede permutar los argumentos. Con el valor
.RS
.nf
"%1$s, %3$d. %2$s, %4$d:%5$.2d\en"
.fi
.RE
se podría obtener `sonntag, 3. Juli, 10:02'.
.PP
Para reservar una cadena de 128 bytes e imprimir dentro de ella:
Para reservar una cadena suficientemente grande e imprimir dentro de ella:
(código correcto tanto para glibc 2.0 como glibc 2.1):
.RS
.nf
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
char *
construye_mensaje(const char *fmt, ...) {
	/* Suponemos que no necesitamos más de 100 bytes. */
	int n, size = 100;
	char *p;
	va_list ap;
	if ((p = malloc (size)) == NULL)
		return NULL;
	while (1) {
		/* Intenta imprimir en el espacio reservado. */
		va_start(ap, fmt);
		n = vsnprintf (p, size, fmt, ap);
		va_end(ap);
		/* Si ha funcionado, devuelve la cadena. */
		if (n > -1 && n < size)
			return p;
		/* Si no, inténtalo de nuevo con más espacio. */
		if (n > -1)    /* glibc 2.1 */
			size = n+1; /* exactamente lo que se necesita */
		else           /* glibc 2.0 */
			size *= 2;  /* el doble del tamaño anterior*/
		if ((p = realloc (p, size)) == NULL)
			return NULL;
	}
}
.fi
.RE

.SH OBSERVACIONES
La implementación de glibc de las funciones
.B snprintf
y
.B vsnprintf
es conforme con el estándar C99, es decir, se comporta como
se describe arriba, desde la versión 2.1 de glibc. Hasta la versión
2.0.6 de glibc devolvían \-1 cuando la salida era truncada.
.SH "CONFORME A"
Las funciones
.BR fprintf ,
.BR printf ,
.BR sprintf ,
.BR vprintf ,
.BR vfprintf ,
y
.B vsprintf
están conforme a ANSI X3.159-1989 (``ANSI C'') e ISO/IEC 9899:1999
(``ISO C99'').
Las funciones
.B snprintf
y
.B vsnprintf
están conforme a ISO/IEC 9899:1999.
.PP
Teniendo en cuenta el valor devuelto pr
.BR snprintf ,
SUSv2 y el estándar C99 se contradicen: cuando
.B snprintf
se llama con
.IR size =0,
SUSv2 estipula un valor devuelto sin especificar menor que 1, mientras que
C99 permite que
.I str
sea NULL en este caso y da el valor devuelto (como siempre) como el número
de caracteres que habrían sido escritos en el caso de que la cadena de
salida hubiera sido lo suficientemente grande.
.PP
La libc4 de Linux reconoce las cinco opciones estándares de C. Reconoce los
modificadores de longitud h, l y L, y las conversiones
cdeEfFgGinopsuxX, donde F es un sinónimo de f.
Adicionalmente, acepta D, O y U, como sinónimos de ld, lo y lu. (Esto es
malo y provocó serios fallos más tarde, cuando desapareció el soporte para
%D). No reconoce un carácter radical dependiente de la localización, ni un
separador de miles, ni NaN ni infinito, ni %m$ ni *m$.
.PP
La biblioteca libc5 de Linux reconoce las cinco opciones estándares de C y la
opción ', locale, %m$ y *m$.
Reconoce los modificadores de longitud h, l, L, Z y q, pero acepta L y q,
ambos para valores
.I long double
y
.I long long integer
(esto es un fallo).
Ya no reconoce más FDOU, pero añade un nuevo carácter de conversión
.BR m ,
que produce
.IR strerror(errno) .
.PP
glibc 2.0 añade los caracteres de conversión C y S.
.PP
glibc 2.1 añade los modificadores de longitud hh, j, t y z, y los caracteres
de conversión a y A.
.PP
glibc 2.2 añade el carácter de conversión F con la semántica de C99, y el carácter
de opción I.
.SH HISTORIA
Unix V7 define las tres rutinas
.BR printf ,
.BR fprintf ,
.BR sprintf ,
y posee la opción -, la anchura o precisión *, el modificador de longitud l,
las conversiones doxfegcsu, y también D, O, U y X como sinónimos de
ld, lo, lu y lx.
Esto todavía es cierto para BSD 2.9.1, pero BSD 2.10 tiene las opciones
#, + y <space> y ya no menciona D, O, U y X.
BSD 2.11 tiene
.BR vprintf ,
.BR vfprintf ,
.BR vsprintf ,
y advierte de no usar D, O, U y X.
BSD 4.3 Reno tiene la opción 0, los modificadores de longitud h y L,
las conversiones n, p, E, G, X (con el significado actual)
y hace obsoletas D, O y U.
BSD 4.4 introduce las funciones
.B snprintf
y
.BR vsnprintf ,
y el modificador de longitud q.
FreeBSD también posee las funciones
.I asprintf
y
.IR vasprintf ,
que reservan un buffer los suficientemente largo para
.BR sprintf .
En glibc están las funciones
.I dprintf
y
.I vdprintf
que imprimen en un descriptor de fichero en lugar de un flujo.
.SH FALLOS
Ya que
.B sprintf
y
.B vsprintf
asumen una cadena de longitud arbitraria, los invocadores deben tener cuidado
de no sobrepasar el espacio real, lo que a menudo resulta imposible de garantizar.
Advierta que las longitudes de las cadenas producidas dependen de la
localización y que son difíciles de predecir.
Use
.B snprintf
y
.B vsnprintf
en su lugar (o
.B asprintf
y
.BR vasprintf ).
.PP
La biblioteca libc4.[45] de Linux no posee la función
.BR snprintf ,
pero proporciona una libbsd que contiene una función
.B snprintf
equivalente a
.BR sprintf ,
es decir, una que ignora el argumento
.IR size .
Por tanto, el uso de
.B snprintf
con las primeras libc4 conduce a serios problemas de seguridad.
.PP
Fragmentos de código como
.BI printf( foo );
indican a menudo un fallo, puesto que
.I foo
puede contener un carácter %. Si
.I foo
proviene de la entrada del usuario, puede contener %n, provocando que
la llamada
.B printf
escriba en memoria y creando un agujero de seguridad.
.\"" .PP
.\" Algunas conversiones de punto flotante en las primeras libc4 producían
.\" pérdidas de memoria.

.SH "VÉASE TAMBIÉN"
.BR printf (1),
.BR asprintf (3),
.BR dprintf (3),
.BR wcrtomb (3),
.BR wprintf (3),
.BR scanf (3),
.BR locale (5)
