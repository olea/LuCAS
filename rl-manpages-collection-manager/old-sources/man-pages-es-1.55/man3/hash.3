.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)hash.3	8.6 (Berkeley) 8/18/94
.\"
.\" Translated into Spanish on Mon Apr 12 1999 by
.\"	Juan Piernas Cánovas <piernas@ditec.um.es>
.\"
.TH HASH 3 "18 Agosto 1994"
.UC 7
.SH NOMBRE
hash \- método de acceso a bases de datos dispersas (hash)
.SH SINOPSIS
.nf
.ft B
#include <sys/types.h>
#include <db.h>
.ft R
.fi
.SH DESCRIPCIÓN
La rutina
.IR dbopen
es la interfaz de biblioteca para los ficheros de bases de datos. Uno de los
formatos de fichero soportados es el de los ficheros dispersos.
La descripción general de los métodos de acceso a las bases de datos se
encuentra en
.IR dbopen (3);
esta página de manual describe sólo información específica sobre la
dispersión.
.PP
La estructura de datos de dispersión es un esquema disperso dinámico y
extensible.
.PP
El estructura de datos específica del método de acceso proporcionada a
.I dbopen
se define en el fichero cabecera <db.h> como sigue:
.sp
typedef struct {
.RS
u_int bsize;
.br
u_int ffactor;
.br
u_int nelem;
.br
u_int cachesize;
.br
u_int32_t (*hash)(const void *, size_t);
.br
int lorder;
.RE
} HASHINFO;
.PP
Los elementos de esta estructura son de la siguiente manera:
.TP
bsize
.I Bsize
define el tamaño de la cubeta de la tabla dispersa y es, por defecto, de 256
bytes. Puede ser preferible incrementar el tamaño de página para tablas
residentes en disco y tabla con grandes elementos de datos.
.TP
ffactor
.I Ffactor
indica la densidad deseada dentro de la tabla dispersa. Es una aproximación
del número de claves que se permite acumular en cualquier cubeta,
determinando cuándo la tabla dispersa crece o se encoge.
El valor por defecto es 8.
.TP
nelem
.I Nelem
es una estimación del tamaño final de la tabla dispersa.
Si no se configura o se le asigna un valor demasiado pequeño, las tablas
dispersas se expandirán de forma elegante cuando se introduzcan claves,
aunque se puede observar una ligera degradación del rendimiento. El valor
por defecto es 1.
.TP
cachesize
Tamaño máximo sugerido, en bytes, de la cache.
Este valor
.B sólo
es consultivo ya que el método de acceso reserverá más memoria antes
que fallar.
.TP
hash
.I Hash
Es una función de dispersión definida por el usuario.
Ya que ninguna función de dispersión funciona igualmente bien sobre todos
los datos posibles, el usuario puede encontrar que la función de dispersión
ya incorporada funciona de manera pobre sobre un conjunto de datos particular.
Las funciones de dispersión especificadas por el usuario deben tomar dos
argumentos (un puntero a una cadena de bytes y una longitud) y devolver una
cantidad de 32 bits para usar como valor de dispersión.
.TP
lorder
El orden de los bytes para los enteros de los metadatos almacenados en la
base de datos. El número debería representar el orden como un entero; por
ejemplo, el orden `el byte de mayor peso el último' (orden ascendente)
debería ser el número 4321.
Si
.I lorder
es cero (no se especifica un orden) se usa el orden del anfitrión actual. Si
el fichero ya existe, el valor especificado se ignora y se usa el valor
especificado cuando se creó la tabla.
.PP
Si el fichero ya existe (y no se especifica la opción O_TRUNC), los valores
especificados por los parámetros bsize, ffactor, lorder y nelem se ignoran y
se usan los valores especificados cuando se creó la tabla.
.PP
Si se especifica una función de dispersión,
.I hash_open
intentará determinar si la función de dispersión especificada es la misma
que aquella con la que se creó la base de datos y fracasará si no lo es.
.PP
Se proporcionan interfaces compatibles con las antiguas rutinas descritas en
.IR dbm (3)
y
.IR ndbm (3);
sin embargo, estas inferfaces no son compatibles con los anteriores formatos
de fichero.
.SH ERRORES
Las rutinas del método de acceso
.I disperso
pueden fallar y asignar a
.I errno
cualquiera de los errores especificados para la rutina de biblioteca
.IR dbopen (3).
.SH "VÉASE TAMBIÉN"
.IR btree (3),
.IR dbopen (3),
.IR mpool (3),
.IR recno (3)
.sp
.IR "Dynamic Hash Tables" ,
Per-Ake Larson, Communications of the ACM, April 1988.
.sp
.IR "A New Hash Package for UNIX" ,
Margo Seltzer, USENIX Proceedings, Winter 1991.
.SH FALLOS
Sólo se soportan los órdenes de bytes ascendente (el byte de mayor peso el
último) y descendente (el byte de menor peso el último).
