.\" Copyright (C) 2001 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Traducido por Miguel Pérez Ibars <mpi79470@alu.um.es> el 11-julio-2004
.\"
.TH LOCKFILE 3  "18 octubre 2001" "" "Manual del Programador de Linux"
.SH NOMBRE
flockfile, ftrylockfile, funlockfile \- bloqueo sobre el objeto FILE de stdio
.SH SINOPSIS
.nf
.B #include <stdio.h>
.sp
.BI "void flockfile(FILE *" filehandle );
.br
.BI "int ftrylockfile(FILE *" filehandle );
.br
.BI "void funlockfile(FILE *" filehandle );
.fi
.SH DESCRIPCIÓN
Las funciones stdio son hilo-seguro. Ésto se consigue asignando
a cada objeto FILE una cuenta de bloqueos (lockcount) y (si la cuenta es
distinta de cero) un hilo que actúa de propietario.
Por cada llamada a la biblioteca, estas funciones esperan hasta que el 
objeto FILE deje de estar bloqueado por algún otro hilo diferente, después lo bloquean,
realizan la petición de E/S solicitada, y desbloquean el objeto de nuevo.
.LP
(Nota: este bloqueo no tiene nada que ver con el bloqueo realizado
por funciones como
.BR flock (2)
y
.BR lockf (3).)
.LP
Todo ésto es invisible al programador de C, pero puede haber dos
razones para querer un control más detallado. Por una parte, 
una serie de acciones de E/S de un hilo pueden ir juntas, y no
deberían ser interrumpidas por la E/S de ningún otro hilo.
Por otra parte, la sobrecarga del bloqueo debería evitarse para lograr una
mayor eficiencia.
.LP
Para este propósito, un hilo puede bloquear explícitamente el objeto FILE,
realizar su serie de acciones de E/S, y después desbloquearlo. Ésto impide
que otros hilos lo interrumpan. Si la razón para hacer esto
es lograr una mayor eficiencia, se debe realizar la E/S con
las versiones no-bloqueantes de las funciones stdio: con
\fIgetc_unlocked\fP() y \fIputc_unlocked\fP() en lugar de
\fIgetc\fP() y \fIputc\fP().
.LP
La función \fBflockfile()\fP espera a que *\fIfilehandle\fP deje de
estar bloqueado por otro hilo, hace al hilo actual propietario
de *\fIfilehandle\fP, e incrementa
la cuenta de bloqueos.
.LP
La función \fBfunlockfile()\fP decrementa la cuenta de bloqueos.
.LP
La función \fBftrylockfile()\fP es una versión no-bloqueante
de \fBflockfile()\fP. No hace nada en el caso de que otro hilo
sea el propietario de *\fIfilehandle\fP, en otro caso obtiene
la propiedad e incrementa la cuenta de bloqueos.
.SH "VALOR DEVUELTO"
La función \fBftrylockfile()\fP devuelve cero cuando tiene éxito
(obtuvo el bloqueo), y un valor distinto de cero en caso de fallo.
.SH ERRORES
Ninguno.
.SH DISPONIBILIDAD
Estas funciones están disponibles cuando _POSIX_THREAD_SAFE_FUNCTIONS
está definida. Están presentes en libc desde libc 5.1.1 y en glibc
desde glibc 2.0.
.SH "CONFORME A"
POSIX.1
.SH "VÉASE TAMBIÉN"
.BR unlocked_stdio (3)

