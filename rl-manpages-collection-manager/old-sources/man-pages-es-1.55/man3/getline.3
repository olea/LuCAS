.\" Copyright (c) 2001 John Levon <moz@compsoc.man.ac.uk>
.\" Based in part on GNU libc documentation
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" License.
.\"
.\" Traducido por Miguel Pérez Ibars <mpi79470@alu.um.es> el 25-julio-2004
.\"
.TH GETLINE 3  "7 octubre 2001" "GNU" "Manual del Programador de Linux"
.SH NOMBRE
getline, getdelim \- entrada de cadena delimitada
.SH SINOPSIS
.nf
.B #define _GNU_SOURCE
.B #include <stdio.h>
.sp
.BI "ssize_t getline(char **" lineptr ", size_t *" n ", FILE *" stream );
.nl
.BI "ssize_t getdelim(char **" lineptr ", size_t *" n ", int " delim ", FILE *" stream );
.SH DESCRIPCIÓN
.B getline()
lee una línea entera, almacenando la dirección del buffer que contiene
el texto en
.IR "*lineptr".
Al final del buffer se coloca el valor null y además se incluye el carácter nueva línea si 
se encontró el delimitador nueva línea.

.\" FIXME: what happens if *lineptr is NULL but *n isn't zero ?
.\" Answer: *n is ignored and a new buffer is allocated
Si
.IR "*lineptr"
es
.BR "NULL",
la rutina
.BR getline()
reservará un buffer para contener la línea, que debe ser liberado
por el programa de usuario.
Alternativamente, antes de llamar a
.BR "getline()",
.IR "*lineptr"
puede contener un puntero a
un buffer reservado via
.BR "malloc()"
de tamaño
.IR "*n"
bytes. Si el buffer no es lo suficientemente grande para almacenar la línea leída,
.B getline()
redimensiona el buffer para que quepa con
.BR "realloc()",
actualizando
.IR "*lineptr"
y
.IR "*n"
si es necesario. En cualquier caso, si la llamada tiene éxito,
.IR "*lineptr"
y
.IR "*n"
serán actualizados para reflejar la dirección del buffer y el tamaño respectivamente.

.BR getdelim()
funciona como
.BR "getline()",
salvo que se puede especificar otro delimitador de línea distinto 
de nueva línea en el argumento
.IR delimiter.
Como con
.BR "getline()",
no se añade un carácter delimitador si no hay ninguno 
presente en la entrada antes de que se alcanze el fin del fichero.

.SH "VALOR DEVUELTO"
En caso de éxito,
.B "getline()"
y
.B "getdelim()"
devuelven el número de caracteres leídos, incluyendo el carácter delimitador,
pero sin incluir el carácter null del final. Este valor puede usarse para
manejar los carácters null embebidos en la línea leída.

Ambas funciones devuelven \-1 si fallan al leer una línea (incluyendo la condición
de fin de fichero).

.SH ERRORES
.TP
.B EINVAL
Parámetros incorrectos
.RI ( n
o
.I lineptr
son NULL, o
.I stream
no es válido).

.SH "EJEMPLO"
.nf
#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>

int main(void)
{
	FILE * fp;
	char * line = NULL;
	size_t len = 0;
	ssize_t read;
	fp = fopen("/etc/motd", "r");
	if (fp == NULL)
		exit(EXIT_FAILURE);
	while ((read = getline(&line, &len, fp)) != -1) {
		printf("Retrieved line of length %zu :\en", read);
		printf("%s", line);
	}
	if (line)
		free(line);
	return EXIT_SUCCESS;
}
.fi
.SH "CONFORME A"
Tanto getline() como getdelim() son extensiones de GNU.
Están disponibles desde libc 4.6.27.

.SH "VÉASE TAMBIÉN"
.BR read (2),
.BR fopen (3),
.BR fread (3),
.BR gets (3),
.BR fgets (3),
.BR scanf (3)
