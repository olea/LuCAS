.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:49:27 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Fri Apr 26 12:38:55 MET DST 1996 by Martin Schulze (joey@linux.de)
.\" Modified 2001-11-13, aeb
.\" Modified 2001-12-13, joey, aeb
.\"
.\" Traducido al castellano (con permiso) por:
.\" Sebastian Desimone (chipy@argenet.com.ar) (desimone@fasta.edu.ar)
.\" Translation fixed on Thu Apr 23 16:27:38 CEST 1998 by
.\"             Gerardo Aburruzaga Garc√≠a <gerardo.aburruzaga@uca.es>
.\" Translation revised on Sun Apr 4 1999 by Juan Piernas <piernas@ditec.um.es>
.\" TraducciÛn revisada por Miguel PÈrez Ibars <mpi79470@alu.um.es> el 14-febrero-2005
.\"
.TH CTIME 3  "13 diciembre 2001" "" "Manual del Programador de Linux"
.SH NOMBRE
asctime, ctime, gmtime, localtime, mktime \- transforman fechas y horas
binarias a ASCII
.SH SINOPSIS
.nf
.B #include <time.h>
.sp
.BI "char *asctime(const struct tm *" tm );
.br
.BI "char *asctime_r(const struct tm *" tm ", char *" buf );
.sp
.BI "char *ctime(const time_t *" timep );
.br
.BI "char *ctime_r(const time_t *" timep ", char *" buf );
.sp
.BI "struct tm *gmtime(const time_t *" timep );
.br
.BI "struct tm *gmtime_r(const time_t *" timep ", struct tm *" result );
.sp
.BI "struct tm *localtime(const time_t *" timep );
.br
.BI "struct tm *localtime_r(const time_t *" timep ", struct tm *" result );
.sp
.BI "time_t mktime(struct tm *" tm );
.fi
.SH DESCRIPCI√ìN
La funciones \fBctime()\fP, \fBgmtime()\fP y \fBlocaltime()\fP toman
todas un argumento de tipo \fItime_t\fP que representa el tiempo de calendario.
Al ser interpretado como un valor de tiempo absoluto, representa el 
n√∫mero de segundos transcurridos desde las 00:00:00 del 1 de Enero de 1970, 
en Tiempo Universal Coordinado, Coordinated Universal Time (UTC).
.PP
Las funciones \fBasctime()\fP y \fBmktime()\fP toman un argumento
que representa el tiempo descompuesto, que es una representaci√≥n 
separada en a√±o, mes, d√≠a, etc.
.PP
El tiempo descompuesto se guarda en 
una estructura \fItm\fP, que se define en \fI<time.h>\fP como sigue:
.sp
.RS
.nf
.ne 11
.ta 8n 16n 32n
struct tm {
	int	tm_sec;			/* segundos */
	int	tm_min;			/* minutos */
	int	tm_hour;		/* horas */
	int	tm_mday;		/* d√≠a del mes */
	int	tm_mon;			/* mes */
	int	tm_year;		/* a√±o */
	int	tm_wday;		/* d√≠a de la semana */
	int	tm_yday;		/* d√≠a del a√±o */
	int	tm_isdst;		/* cambio horario verano/invierno */
};
.ta
.fi
.RE
.PP
Los miembros de la estructura \fItm\fP son:
.TP
.I tm_sec
El n√∫mero de segundos, normalmente en el rango de 0 a 59, pero puede llegar
a 61 para permitir segundos bisiestos.
.TP
.I tm_min
El n√∫mero de minutos, en el rango de 0 a 59.
.TP
.I tm_hour
El n√∫mero de horas pasada la medianoche, en el rango de 0 a 23.
.TP
.I tm_mday
El d√≠a del mes, en el rango de 1 a 31.
.TP
.I tm_mon
El n√∫mero de meses desde Enero, en el rango de 0 a 11.
.TP
.I tm_year
El n√∫mero de a√±os desde 1900. 
.TP
.I tm_wday
El n√∫mero de dias desde el Domingo, en el rango  de 0 a 6. 
.TP
.I tm_yday
El n√∫mero de dias desde el 1 de Enero en el rango de 0 a 365.
.TP
.I tm_isdst
Un indicador que dice si existe cambio horario entre verano e invierno
para el tiempo descrito. El valor es positivo si existe este cambio,
cero si no lo hay, y negativo si la informaci√≥n no est√°
disponible.
.PP
La llamada
.BI ctime( t )
es equivalente a
.BI asctime(localtime( t )) \fR.
Convierte el tiempo de calendario \fItimep\fP a una
cadena de la forma
.sp
.RS
"Wed Jun 30 21:49:08 1993\\n"
.RE
.sp
Las abreviaturas para los dias de la semana son `Sun', `Mon', `Tue', `Wed',
`Thu', `Fri', y `Sat'.  Las abreviaturas para los meses son `Jan',
`Feb', `Mar', `Apr', `May', `Jun', `Jul', `Aug', `Sep', `Oct', `Nov', y
`Dec'. El valor devuelto apunta a una cadena reservada est√°ticamente que
puede ser sobreescrita por posteriores llamadas a cualquiera de las
funciones de fecha u hora. La funci√≥n tambi√©n pone en la variable externa
\fItzname\fP (vÈase 
.BR tzset (3))
informaci√≥n acerca del huso horario.
La versiÛn reentrante \fBctime_r()\fP hace lo mismo, pero almacena la cadena
en un buffer suministrado por el usuario de longitud mÌnima 26. No necesita
modificar \fItzname\fP.
.PP
La funci√≥n \fBgmtime()\fP convierte el tiempo de calendario \fItimep\fP a una
representaci√≥n descompuesta del tiempo, expresado en Tiempo Universal
Coordinado (UTC). Puede devolver NULL cuando el aÒo no cabe en una variable entera.
El valor devuelto apunta a una estructura reservada est·ticamente que puede
ser sobreescrita por llamadas posteriores a cualquiera de las funciones de fecha y tiempo.
La funciÛn \fBgmtime_r()\fP hace lo mismo, pero almacena los datos en una
estructura suministrada por el usuario.
.PP
La funci√≥n \fBlocaltime()\fP convierte el tiempo de calendario \fItimep\fP a
una representaci√≥n descompuesta, expresada relativa a la zona horaria
especificada por el usuario. La funciÛn act˙a como si hubiera llamado a
.BR tzset (3)
y pone en la variable externa \fItzname\fP 
informaci√≥n acerca de la zona horaria en curso, en \fItimezone\fP la
diferencia entre el Tiempo Universal Coordinado (UTC) y la hora local normal 
en segundos, y en \fIdaylight\fP un valor distinto de cero si las reglas del
cambio horario de verano/invierno se aplican durante alguna parte del aÒo.
El valor devuelto apunta a una estructura reservada est·ticamente que puede
ser sobreescrita por llamadas posteriores a cualquiera de las funciones de fecha y tiempo.
La funciÛn \fBlocaltime_r()\fP hace lo mismo, pero almacena los datos en una
estructura suministrada por el usuario.
.PP
La funci√≥n \fBasctime()\fP convierte el tiempo descompuesto
\fItm\fP a una cadena con el mismo formato que \fBctime()\fP.
El valor devuelto apunta a una cadena reservada est√°ticamente que
puede ser sobreescrita por posteriores llamadas a cualquiera de las
funciones de fecha u hora.
La funciÛn \fBasctime_r()\fP hace lo mismo, pero almacena la cadena
en un buffer suministrado por el usuario de longitud mÌnima 26.
.PP
La funci√≥n \fBmktime()\fP convierte un tiempo descompuesto a
una representaci√≥n tiempo de calendario. La funci√≥n hace caso omiso de los 
contenidos espec√≠f√≠cos en los miembros de la estructura \fItm_wday\fP y
\fItm_yday\fP y los recalcula a partir de otra informaci√≥n existente
en la estructura del tiempo descompuesto.
Si los miembros de la estructura est√°n fuera de sus intervalos permitidos,
ser√°n normalizados (del tal manera que, por ejemplo, el 40 de octubre se
cambiar√° al 9 de noviembre).
Al llamar a \fBmktime()\fP tambi√©n se pone un valor en la variable externa
\fItzname\fP con informaci√≥n acerca de la zona horaria. Si el tiempo
descompuesto especificado no puede representarse como tiempo de calendario
(segundos desde la `√âpoca'), \fBmktime()\fP devuelve el valor  (time_t)(\-1)
y no altera los miembros \fItm_wday\fP ni \fItm_yday\fP de la estructura del
tiempo descompuesto.
.SH "VALOR DEVUELTO"
Cada una de estas funciones devuelve el valor descrito, o NULL
(\-1 en el caso de \fBmktime()\fP) en caso de error.
.SH OBSERVACIONES
Las cuatro funciones
.BR acstime() ,
.BR ctime() ,
.B gmtime()
y
.B localtime()
devuelven un puntero a datos est·ticos y por tanto no son seguras
para trabajar con hilos.
Las versiones hilo-seguro
.BR acstime_r() ,
.BR ctime_r() ,
.B gmtime_r()
y
.BR localtime_r()
est·n especificadas por SUSv2, y est·n disponibles desde la versiÛn 5.2.5 de libc.
.LP
La versiÛn glibc de la estructura tm contiene campos adicionales
.sp
.RS
.nf
long tm_gmtoff;           /* Segundos al este de UTC */
const char *tm_tm_zone;   /* AbreviaciÛn del huso horario */
.fi
.RE
.sp
definidos cuando se pone _BSD_SOURCE antes de incluir
.IR <time.h> .
Esta es una extensiÛn BSD, presente en 4.3BSD-Reno.
.SH "CONFORME A"
SVID 3, POSIX, BSD 4.3, ISO 9899
.SH "V…ASE TAMBI…N"
.BR date (1),
.BR gettimeofday (2),
.BR newctime (3),
.BR time (2),
.BR utime (2),
.BR clock (3),
.BR difftime (3),
.BR strftime (3),
.BR strptime (3),
.BR tzset (3)
