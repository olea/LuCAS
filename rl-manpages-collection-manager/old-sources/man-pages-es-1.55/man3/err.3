.\" Copyright (c) 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	From: @(#)err.3	8.1 (Berkeley) 6/9/93
.\" $FreeBSD: src/lib/libc/gen/err.3,v 1.11.2.5 2001/08/17 15:42:32 ru Exp $
.\"
.Dd March 6, 1999
.Dt ERR 3
.Os
.Sh NOMBRE
.Nm err ,
.Nm verr ,
.Nm errx ,
.Nm verrx ,
.Nm warn ,
.Nm vwarn ,
.Nm warnx ,
.Nm vwarnx ,
.Nd mensajes de error con formato
.Sh SINOPSIS
.Fd #include <err.h>
.Ft void
.Fn err "int eval" "const char *fmt" "..."
.Ft void
.Fn errx "int eval" "const char *fmt" "..."
.Ft void
.Fn warn "const char *fmt" "..."
.Ft void
.Fn warnx "const char *fmt" "..."
.Fd #include <stdarg.h>
.Ft void
.Fn verr "int eval" "const char *fmt" "va_list args"
.Ft void
.Fn verrx "int eval" "const char *fmt" "va_list args"
.Ft void
.Fn vwarn "const char *fmt" "va_list args"
.Ft void
.Fn vwarnx "const char *fmt" "va_list args"
.Sh DESCRIPCIÓN
La familia de funciones
.Fn err
y
.Fn warn
muestran un mensaje de error con formato en la salida estándar de error.
En todos los casos, se imprime el último componente del nombre del programa, 
un carácter punto y un espacio.
Si el argumento
.Fa fmt
es distinto de NULL, se imprime 
un mensaje de error con formato al estilo de
.Xr printf 3
. La salida finaliza con un carácter nueva línea.
.Pp
Las funciones
.Fn err ,
.Fn verr ,
.Fn warn ,
y
.Fn vwarn 
añaden un mensaje de error obtenido con
.Xr strerror 3
basado en un código o en la variable global
.Va errno ,
precedido por otro punto y un espacio a menos que el argumento
.Fa fmt
sea 
.Dv NULL .
.Pp
Las funciones
.Fn err ,
.Fn verr ,
.Fn warn ,
y
.Fn vwarn
usan la variable global
.Va errno
para buscar el mensaje de error.
.Pp
Las funciones
.Fn errx
y
.Fn warnx
no añaden ningún mensaje de error.
.Pp
Las funciones
.Fn err ,
.Fn verr ,
.Fn errx ,
y
.Fn verrx
no regresan, sino que terminan la ejecución con el valor del argumento
.Fa eval .
.Sh EJEMPLOS
Muestra la cadena de información del error actual y termina:
.Bd -literal -offset indent
if ((p = malloc(size)) == NULL)
	err(1, NULL);
if ((fd = open(file_name, O_RDONLY, 0)) == -1)
	err(1, "%s", file_name);
.Ed
.Pp
Muestra un mensaje de error y termina:
.Bd -literal -offset indent
if (tm.tm_hour < START_TIME)
	errx(1, "too early, wait until %s", start_time_string);
.Ed
.Pp
Aviso de un error:
.Bd -literal -offset indent
if (
	warnx("%s: %s: trying the block device",
	    raw_device, strerror(errno));
if ((fd = open(block_device, O_RDONLY, 0)) == -1)
	err(1, "%s", block_device);
.Ed
.Sh VÉASE TAMBIÉN
.Xr exit 3 ,
.Xr printf 3 ,
.Xr perror 3 ,
.Xr strerror 3
.Sh HISTORIA
Las funciones
.Fn err
y
.Fn warn
aparecieron por primera vez en
.Bx 4.4 .
