.\" Copyright 2000 Nicolás Lichtmaier <nick@debian.org>
.\" Created 2000-07-22 00:52-0300
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" Traducido por Miguel Pérez Ibars <mpi79470@alu.um.es> el 11-julio-2004
.\"
.TH ENCRYPT 3 "22 julio 2000" GNU "Manual del Programador de Linux"
.SH NOMBRE
encrypt \- Cifra mensajes de 64 bits
.SH SINOPSIS
.B #define _XOPEN_SOURCE
.sp
.B #include <unistd.h>
.sp
.BI "void encrypt(char " block "[64], int " edflag );
.br
.BI "void setkey(const char *" key );
.SH DESCRIPCIÓN
Estas funciones cifran y descifran mensajes de 64 bits.
La función setkey() establece la clave usada por encrypt(). El parámetro
.I key
es un array de bytes, cada uno con un valor de 1 ó 0. El byte key[n], donde
n=8*q-1, se ignora, consistiendo la clave utilizada en 56 bits.
.PP
.\" I think the original document is mistaken at this point (setkey() = encrypt())
La función encrypt() modifica el buffer pasado, cifrando si
.I edflag
es 0, y descifrando si se pasa un valor 1.
.PP
Estas funciones no son reentrantes.
.SH "VALOR DEVUELTO"
Estas funciones no devuelven ningún valor.
.SH "CONFORME A"
SVID, SUSv2
.SH "VÉASE TAMBIÉN"
.BR crypt (3)
