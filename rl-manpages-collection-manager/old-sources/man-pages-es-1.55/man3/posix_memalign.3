.\" (c) 2001 by John Levon <moz@compsoc.man.ac.uk>
.\" Based in part on GNU libc documentation.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" License.
.\"
.\" 2001-10-11, aeb, added some details
.\"
.\" Traducido por Miguel Pérez Ibars <mpi79470@alu.um.es> el 9-agosto-2004
.\"
.TH POSIX_MEMALIGN 3  "11 octubre 2001" "GNU" "Manual del Programador de Linux"
.SH NOMBRE
posix_memalign, memalign, valloc \- Asigna memoria alineada
.SH SINOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "int posix_memalign(void **" memptr ", size_t " alignment ", size_t " size );
.BI "void *memalign(size_t " boundary ", size_t " size );
.BI "void *valloc(size_t " size );
.nl
.fi
.SH DESCRIPCIÓN
La función
.B posix_memalign()
asigna
.I size
bytes y deja la dirección de la memoria reservada en
.IR "*memptr".
La dirección de la memoria reservada será un múltiplo de
.IR "alignment",
que debe ser una potencia de dos y un múltiplo de 
.IR "sizeof(void *)".

La función obsoleta
.B memalign()
asigna
.I size
bytes y devuelve un puntero a la memoria reservada.
La dirección de memoria será un múltiplo de
.IR "boundary",
que debe ser una potencia de dos.

La función obsoleta
.B valloc()
asigna
.I size
bytes y devuelve un puntero a la memoria reservada.
La dirección de memoria será un múltiplo del tamaño de página.
Es equivalente a
.IR "memalign(sysconf(_SC_PAGESIZE),size)" .

En todas estas rutinas, la memoria no se rellena con ceros.

.SH "VALOR DEVUELTO"
.BR memalign()
y
.BR valloc()
devuelven un puntero a la memoria reservada, o
.B NULL
si falla la petición.

.BR posix_memalign()
devuelve cero en caso de éxito, o uno de los códigos de error listados
en la siguiente sección en caso de fallo. Observe que
.IR errno
no se modifica.

.SH "ERRORES"
.TP
.B EINVAL
El parámetro
.IR alignment
no es una potencia de dos, o no es un múltiplo de
.IR "sizeof(void *)" .
.TP
.B ENOMEM
No hay suficiente memoria para satisfacer la petición de reserva.

.SH OBSERVACIONES

.BR posix_memalign()
verifica que
.IR alignment
cumpla los requisitos detallados arriba.
.BR memalign()
puede no comprobar que el parámetro
.IR boundary
sea correcto.

POSIX exige que la memoria obtenida con
.BR posix_memalign()
pueda ser liberada usando
.IR free ().
Algunos sistemas no ofrecen ninguna manera de recuperar la memoria reservada con
.IR memalign ()
o
.IR valloc ()
(porque sólo se puede pasar a
.IR free ()
un puntero obtenido con
.IR malloc (),
mientras p.e.
.IR memalign ()
llamaría a
.IR malloc ()
y después alinearía el valor obtenido).
.\" Other systems allow passing the result of
.\" .IR valloc ()
.\" to
.\" .IR free (),
.\" but not to
.\" .IR realloc ().
GNU libc permite que la memoria obtenida con cualquiera de estas rutinas sea
recuperada con
.IR free ().

La versión de
.BR "malloc()"
de GNU libc siempre devuelve direcciones de memoria alineadas de 8 bytes, por lo que estas rutinas
solamente se necesitan si requiere valores de alineamiento mayores.

.SH AVAILABILITY
Las funciones
.IR memalign ()
y
.IR valloc ()
han estado disponibles en todas las bibliotecas libc de Linux.
La función
.IR posix_memalign ()
está disponible desde glibc 2.1.91.

.SH "CONFORME A"
La función
.IR valloc ()
apareció en 3.0 BSD. Está documentada como obsoleta en BSD 4.3,
y como antigua en SUSv2. Ya no aparece en SUSv3.
La función
.IR memalign ()
aparece en SunOS 4.1.3 pero no en BSD 4.4.
La función
.BR posix_memalign()
viene de POSIX 1003.1d.
.SH "VÉASE TAMBIÉN"
.BR malloc (3),
.BR free (3),
.BR getpagesize (2),
.BR brk (2)
