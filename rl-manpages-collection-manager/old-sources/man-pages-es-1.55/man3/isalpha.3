.\" (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" License.
.\"
.\" Modified Sat Jul 24 19:10:00 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Aug 21 17:51:50 1994 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sat Sep  2 21:52:01 1995 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\" Modified Mon May 27 22:55:26 1996 by Martin Schulze (joey@linux.de)
.\"
.\" Translated into Spanish Thu Feb 26 21:24:01 CET 1998 by Gerardo
.\" Aburruzaga García <gerardo.aburruzaga@uca.es>
.\" Translation revised Wed Dec 30 1998 by Juan Piernas <piernas@ditec.um.es>
.\"
.TH ISALPHA 3  "2 septiembre 1995" "GNU" "Manual del Programador de Linux"
.SH NOMBRE
isalnum, isalpha, isascii, isblank, iscntrl, isdigit, isgraph, islower, 
isprint, ispunct, isspace, isupper, isxdigit \- rutinas de
clasificación de caracteres
.SH SINOPSIS
.nf
.B #include <ctype.h>
.sp
.BI "int isalnum(int " "c" );
.nl
.BI "int isalpha(int " "c" );
.nl
.BI "int isascii(int " "c" );
.nl
.BI "int isblank(int " "c" );
.nl
.BI "int iscntrl(int " "c" );
.nl
.BI "int isdigit(int " "c" );
.nl
.BI "int isgraph(int " "c" );
.nl
.BI "int islower(int " "c" );
.nl
.BI "int isprint(int " "c" );
.nl
.BI "int ispunct(int " "c" );
.nl
.BI "int isspace(int " "c" );
.nl
.BI "int isupper(int " "c" );
.nl
.BI "int isxdigit(int " "c" );
.fi
.SH DESCRIPCIÓN
Estas funciones comprueban si
.IR c ,
que debe tener el valor de un
.B unsigned char
o
.BR EOF ,
cae dentro de una cierta clase de caracteres de acuerdo con la
localización en curso.
.TP 
.B "isalnum()"
comprueba si el carácter es alfanumérico; es equivalente a
.BI "(isalpha(" c ") || isdigit(" c "))" \fR.
.TP
.B "isalpha()"
comprueba si el carácter es alfabético; en la localización estándar
\fB"C"\fP, es equivalente a
.BI "(isupper(" c ") || islower(" c "))" \fR.
En algunas localizaciones, pueden existir caracteres adicionales para
los que
.B  isalpha()
sea verdad: letras que no sean ni mayúculas ni minúsculas.
.TP
.B "isascii()"
comprueba si \fIc\fP es un valor
.I unsigned char
de 7 bits, que encaje dentro del conjunto de caracteres ASCII. Esta
función es una extensión de BSD y de SVID. 
.TP
.B "isblank()"
comprueba si el carácter es un blanco; esto es, un espacio o un
tabulador. Esta función es una extensión de GNU.
.TP
.B "iscntrl()"
comprueba si el carácter es de control.
.TP
.B "isdigit()"
comprueba si el carácter es un dígito (de 0 a 9).
.TP
.B "isgraph()"
comprueba si el carácter es imprimible, exceptuando el espacio en blanco.
.TP
.B "islower()"
comprueba si el carácter es una letra minúscula.
.TP
.B "isprint()"
comprueba si el carácter es imprimible, incluyendo el espacio en blanco.
.TP
.B "ispunct()"
comprueba si el carácter es imprimible sin ser un espacio ni un
carácter alfanumérico; o sea, si es un signo de puntuación.
.TP
.B "isspace()"
comprueba si el carácter es uno de los de espacios en blanco. En las
localizaciones 
.B """C"""
y
.B """POSIX"""
éstos son: espacio, salto de página
.RB ( '\ef' ),
salto de línea
.RB ( '\en' ),
retorno de carro
.RB ( '\er' ),
tabulador horizontal
.RB ( '\et' ),
y tabulador vertical
.RB ( '\ev' ).
.TP
.B "isupper()"
comprueba si el carácter es una letra mayúscula.
.TP
.B "isxdigit()"
comprueba si el carácter es un dígito hexadecimal, o sea, uno de
.nl
.BR "0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F" .
.SH "VALOR DEVUELTO"
Los valores devueltos son no-cero si el carácter
.I c
cae dentro de la clase pedida, y cero si no.
.SH "CONFORME A"
ANSI - C, BSD 4.3.
\fBisascii()\fP es una extensión de BSD
y también una extensión de SVID.
\fBisblank()\fP es una extensión de GNU.
.SH "NOTA"
Los detalles de qué caracteres pertenecen a qué clase dependen de la
localización en curso. Por ejemplo,
.B isupper()
no reconocerá una Å (`a' mayúscula con círculo encima) como una letra
mayúscula en la localización predeterminada
.BR "C" .
.SH "VÉASE TAMBIÉN"
.BR tolower "(3), " toupper "(3), " setlocale "(3), " ascii "(7), " locale (7)

