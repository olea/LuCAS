'\" t
.\" Copyright (c) 1994,1995 Mike Battersby <mib@deakin.edu.au>
.\" based on work by faith@cs.unc.edu
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified, aeb, 960424
.\" Modified Fri Jan 31 17:31:20 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Thu Nov 26 02:12:45 1998 by aeb - add SIGCHLD stuff.
.\" Modified Sat May  8 17:40:19 1999 by Matthew Wilcox - add POSIX.1b signals
.\" Modified Sat Dec 29 01:44:52 2001 by Evan Jones <ejones@uwaterloo.ca> - SA_ONSTACK
.\"
.\" Translated into Spanish Thu Jan 29 1998 by Gerardo Aburruzaga
.\" Garc√≠a <gerardo.aburruzaga@uca.es>
.\" Translation revised Wed Dec 30 1998 by Juan Piernas <piernas@ditec.um.es>
.\" Translation revised Sun Jun 27 1999 by Juan Piernas <piernas@ditec.um.es>
.\" Translation revised Sun Apr 16 2000 by Juan Piernas <piernas@ditec.um.es>
.\" Revisado por Miguel PÈrez Ibars <mpi79470@alu.um.es> el 1-diciembre-2004
.\"
.TH SIGACTION 2 "29 diciembre 2001" "Linux 2.4" "Manual del Programador de Linux"
.SH NOMBRE
sigaction, sigprocmask, sigpending, sigsuspend \- funciones POSIX de
manejo de se√±ales
.SH SINOPSIS
.B #include <signal.h>
.sp 2
.BI "int sigaction(int " signum ", const struct sigaction *" act ,
.BI "struct sigaction *" oldact );
.sp
.BI "int sigprocmask(int " how ", const sigset_t *" set ,
.BI "sigset_t *" oldset );
.sp
.BI "int sigpending(sigset_t *" set );
.sp
.BI "int sigsuspend(const sigset_t *" mask );
.SH DESCRIPCI√ìN
La llamad al sistema
.B sigaction
se emplea para cambiar la acci√≥n tomada por un proceso cuando recibe
una determinada se√±al.
.PP
.I signum
especifica la se√±al y puede ser cualquiera v√°lida salvo
.B SIGKILL
o
.BR SIGSTOP .
.PP
Si
.I act
no es nulo, la nueva acci√≥n para la se√±al
.I signum
se instala como
.IR act .
Si
.I oldact
no es nulo, la acci√≥n anterior se guarda en
.IR oldact .
.PP
La estructura
.B sigaction
se define como algo parecido a
.sp
.RS
.nf
struct sigaction {
    void (*sa_handler)(int);
    void (*sa_sigaction)(int, siginfo_t *, void *);
    sigset_t sa_mask;
    int sa_flags;
    void (*sa_restorer)(void);
}
.fi
.RE
.PP
En algunas arquitecturas se utiliza una union - no asigne valores a
.I sa_handler
y
.IR sa_sigaction .
.PP
El elemento
.I sa_restorer
est√° obsoleto y no deber√≠a utilizarse. POSIX no especifica un elemento
.IR sa_restorer .
.PP
.I sa_handler
especifica la acci√≥n que se va a asociar con
.I signum
y puede ser
.B SIG_DFL
para la acci√≥n predeterminada,
.B SIG_IGN
para no tener en cuenta la se√±al, o un puntero a una funci√≥n
manejadora para la se√±al.
.PP
.I sa_mask
da una m√°scara de se√±ales que deber√≠an bloquearse durante la ejecuci√≥n
del manejador de se√±al. Adem√°s, la se√±al que lance el manejador ser√°
bloqueada, a menos que se activen las opciones
.B SA_NODEFER
o
.BR SA_NOMASK .
.PP
.I sa_flags
especifica un conjunto de opciones que modifican el comportamiento del
proceso de manejo de se√±al. Se forma por la aplicaci√≥n del operador de
bits OR a cero o m√°s de las siguientes constantes:
.RS
.TP
.B SA_NOCLDSTOP
Si
.I signum
es
.BR SIGCHLD ", "
no se reciba notificaci√≥n cuando los procesos hijos se paren (esto es,
cuando los procesos hijos reciban una de las se√±ales
.BR SIGSTOP ", " SIGTSTP ", " SIGTTIN
o
.BR SIGTTOU ")."
.TP
.BR SA_ONESHOT " o " SA_RESETHAND
Rest√°urese la acci√≥n para la se√±al al estado predeterminado una vez
que el manejador de se√±al haya sido llamado. 
.TP
.BR SA_ONSTACK
Llama al manejador de seÒal en una pila de seÒales alternativa proporcionada por
.BR sigaltstack (2).
Si esta pila alternativa no est· disponible, se utilizar· la pila por defecto.
.TP
.B SA_RESTART
Proporciona un comportamiento compatible con la sem√°ntica de se√±ales
de BSD haciendo re-ejecutables algunas llamadas al sistema entre se√±ales.
.TP
.BR SA_NOMASK " o " SA_NODEFER
No se impida que se reciba la se√±al desde su propio manejador.
.TP
.B SA_SIGINFO
El manejador de se√±al toma 3 argumentos, no uno. En este caso, se debe
configurar
.I sa_sigaction
en lugar de
.IR sa_handler .
(El campo sa_sigaction fue a√±adido en la versi√≥n 2.1.86 de Linux.)
.RE
.PP
El par√°metro
.I siginfo_t
para
.I sa_sigaction
es una estructura con los siguientes elementos
.sp
.RS
.nf
.ta 4 13 24
siginfo_t {
	int	si_signo;	/* N√∫mero de se√±al */
	int	si_errno;	/* Un valor errno */
	int	si_code;	/* C√≥digo de se√±al */
	pid_t	si_pid;	/* ID del proceso emisor */
	uid_t	si_uid;	/* ID del usuario real del proceso emisor */
	int	si_status;	/* Valor de salida o se√±al */
	clock_t	si_utime;	/* Tiempo de usuario consumido */
	clock_t	si_stime;	/* Tiempo de sistema consumido */
	sigval_t	si_value;	/* Valor de se√±al */
	int	si_int;	/* se√±al POSIX.1b */
	void *	si_ptr;	/* se√±al POSIX.1b */
	void *	si_addr;	/* Direcci√≥n de memoria que ha producido el fallo */
	int	si_band;	/* Evento de conjunto */
	int	si_fd;	/* Descriptor de fichero */
}
.fi
.RE
.IR si_signo ", " si_errno " y " si_code
est√°n definidos para todas las se√±ales.
El resto de la estructura puede ser una uniÛn, por lo que deberÌan
leerse solamente los campos que sean de interÈs para la seÒal dada.
.BR kill (2),
las se√±ales POSIX.1b y SIGCHLD rellenan
.IR si_pid " y " si_uid .
.BR
SIGCHLD tambi√©n rellena
.IR si_status ", " si_utime " y " si_stime .
.IR si_int " y " si_ptr
son especificados por el emisor de la se√±al POSIX.1b.
.\" VÈase
.\" .BR sigqueue (2)
.\" para mas detalles.
 SIGILL, SIGFPE, SIGSEGV y SIGBUS rellenan
.I si_addr
con la direcci√≥n del fallo.
SIGPOLL rellena
.IR si_band " y " si_fd .

.I si_code
indica por qu√© se ha enviado la se√±al. Es un valor, no una m√°scara de bits.
Los valores que son posibles para cualquier se√±al se listan en la siguiente
tabla:
.TS
tab(:) allbox;
c s
l l.
\fIsi_code\fR
Valor:Origen de la se√±al
SI_USER:kill, sigsend o raise
SI_KERNEL:El n√∫cleo
SI_QUEUE:sigqueue
SI_TIMER:el cron√≥metro ha vencido
SI_MESGQ:ha cambiado el estado de mesq
SI_ASYNCIO:ha terminado una E/S as√≠ncrona
SI_SIGIO:SIGIO encolada
.TE

.TS
tab(:) allbox;
c s
l l.
SIGILL
ILL_ILLOPC:c√≥digo de operaci√≥n ilegal
ILL_ILLOPN:operando ilegal
ILL_ILLADR:modo de direccionamiento ilegal
ILL_ILLTRP:trampa ilegal
ILL_PRVOPC:c√≥digo de operaci√≥n privilegiada
ILL_PRVREG:registro privilegiado
ILL_COPROC:error del coprocesador
ILL_BADSTK:error de la pila interna
.TE

.TS
tab(:) allbox;
c s
l l.
SIGFPE
FPE_INTDIV:entero dividido por cero
FPE_INTOVF:desbordamiento de entero
FPE_FLTDIV:punto flotante dividido por cero
FPE_FLTOVF:desbordamiento de punto flotante
FPE_FLTUND:desbordamiento de punto flotante por defecto
FPE_FLTRES:resultado de punto flotante inexacto
FPE_FLTINV:operaci√≥n de punto flotante inv√°lida
FPE_FLTSUB:subscript fuera de rango
.TE

.TS
tab(:) allbox;
c s
l l.
SIGSEGV
SEGV_MAPERR:direcci√≥n no asociada a un objeto
SEGV_ACCERR:permisos inv√°lidos para un objeto presente en memoria
.TE

.TS
tab(:) allbox;
c s
l l.
SIGBUS
BUS_ADRALN:alineamiento de direcci√≥n inv√°lido
BUS_ADRERR:direcci√≥n f√≠sica inexistente
BUS_OBJERR:error hardware espec√≠fico del objeto
.TE

.TS
tab(:) allbox;
c s
l l.
SIGTRAP
TRAP_BRKPT:punto de parada de un proceso
TRAP_TRACE:trampa de seguimiento paso a paso de un proceso
.TE

.TS
tab(:) allbox;
c s
l l.
SIGCHLD
CLD_EXITED:ha terminado un hijo
CLD_KILLED:se ha matado a un hijo
CLD_DUMPED:un hijo ha terminado anormalmente
CLD_TRAPPED:un hijo con seguimiento paso a paso ha sido detenido
CLD_STOPPED:ha parado un hijo
CLD_CONTINUED:un hijo parado ha continuado
.TE

.TS
tab(:) allbox;
c s
l l.
SIGPOLL
POLL_IN:datos de entrada disponibles
POLL_OUT:buffers de salida disponibles
POLL_MSG:mensaje de entrada disponible
POLL_ERR:error de E/S
POLL_PRI:entrada de alta prioridad disponible
POLL_HUP:dispositivo desconectado
.TE

.PP
La llamada
.B sigprocmask
se emplea para cambiar la lista de se√±ales bloqueadas actualmente. El
comportamiento de la llamada depende del valor de
.IR how ,
como sigue:
.RS
.TP
.B SIG_BLOCK
El conjunto de se√±ales bloqueadas es la uni√≥n del conjunto actual y el
argumento
.IR set .
.TP
.B SIG_UNBLOCK
Las se√±ales en
.I set
se quitan del conjunto actual de se√±ales bloqueadas. Es legal intentar
el desbloqueo de una se√±al que no est√° bloqueada.
.TP
.B SIG_SETMASK
El conjunto de se√±ales bloqueadas se pone seg√∫n el argumento
.IR set .
.RE
.PP
Si
.I oldset
no es nulo, el valor anterior de la m√°scara de se√±al se guarda en
.IR oldset .
.PP
La llamada
.B sigpending
permite el examen de se√±ales pendientes (las que han sido producidas
mientras estaban bloqueadas). La m√°scara de se√±al de las se√±ales
pendientes se guarda en
.IR set .
.PP
La llamada
.B sigsuspend
reemplaza temporalmente la m√°scara de se√±al para el proceso con la
dada por
.I mask
y luego suspende el proceso hasta que se recibe una se√±al.

.SH "VALOR DEVUELTO"
Las funciones
.BR sigaction ,
.BR sigprocmask 
y
.B sigpending
devuelven 0 en caso de √©xito y \-1 en caso de error.
La funciÛn
.B sigsuspend
siempre devuelve \-1, normalmente acompaÒado del error
.BR EINTR .

.SH ERRORES
.TP
.B EINVAL
Se ha especificado una se√±al inv√°lida. Esto tambi√©n se genera si se
hace un intento de cambiar la acci√≥n para
.BR SIGKILL " o " SIGSTOP ", "
que no pueden ser capturadas.
.TP
.B EFAULT
.IR act ", " oldact ", " set ", " oldset
u 
.I mask
apuntan a una zona de memoria que no forma parte v√°lida del espacio de
direcciones del proceso.
.TP
.B EINTR
La llamada al sistema ha sido interrumpida.

.SH OBSERVACIONES
No es posible bloquear
.BR SIGKILL " ni " SIGSTOP
con una llamada a sigprocmask.  Los intentos de hacerlo no ser√°n
tenidos en cuenta, silenciosamente.
.PP
De acuerdo con POSIX, el comportamiento de un proceso est√° indefinido
despu√©s de que no haga caso de una se√±al SIGFPE, SIGILL o SIGSEGV que
no haya sido generada por las funciones \fIkill()\fP o \fIraise()\fP.
La divisi√≥n entera por cero da un resultado indefinido.
En algunas arquitecturas generar√° una se√±al SIGFPE.
(Tambi√©n, el dividir el entero m√°s negativo por \-1 puede generar una se√±al
SIGFPE.)
No hacer caso de esta se√±al puede llevar a un bucle infinito.
.PP
POSIX (B.3.3.1.3) anula el establecimiento de SIG_IGN como acci√≥n para SIGCHLD.
Los comportamientos de BSD y SYSV difieren, provocando el fallo en
Linux de aquellos programas BSD que asignan SIG_IGN como acci√≥n para SIGCHLD.
.PP
La especificaci√≥n POSIX s√≥lo define
.BR SA_NOCLDSTOP .
El empleo de otros valores en
.I sa_flags
no es transportable.
.PP
La opci√≥n
.B SA_RESETHAND
es compatible con la de SVr4 del mismo nombre.
.PP
La opci√≥n
.B SA_NODEFER
es compatible con la de SVr4 del mismo nombre bajo los n√∫cleos
1.3.9 y posteriores. En n√∫cleos m√°s viejos la implementaci√≥n de Linux 
permit√≠a la recepci√≥n de cualquier se√±al, no s√≥lo la que est√°bamos
instalando (sustituyendo as√≠ efectivament cualquier valor de
.IR sa_mask ).
.PP
Los nombres
.BR SA_RESETHAND " y " SA_NODEFER
para compatibilidad con SVr4 est√°n presentes solamente en las
versiones de la biblioteca 3.0.9 y mayores.
.PP
La opci√≥n
.B SA_SIGINFO
viene especificada por POSIX.1b. El soporte para ella se a√±adi√≥ en la
versi√≥n 2.2 de Linux.
.PP
.B sigaction
puede llamarse con un segundo argumento nulo para saber el manejador
de se√±al en curso. Tambi√©n puede emplearse para comprobar si una se√±al
dada es v√°lida para la m√°quina donde se est√°, llam√°ndola con el
segundo y el tercer argumento nulos.
.PP
Vea
.BR sigsetops (3)
para detalles sobre manipulaci√≥n de conjuntos de se√±ales.
.SH "CONFORME A"
POSIX, SVr4.  SVr4 no documenta la condici√≥n EINTR.

.SH SIN DOCUMENTAR
Antes de la introducciÛn de
.B SA_SIGINFO
tambiÈn era posible obtener informaciÛn adicional, 
usando un manejador sa_handler con el segundo argumento del tipo
.IR "struct sigcontext".
Vea las fuentes del n˙cleo relevantes para m·s detalles.
Este uso est· obsoleto en la actualidad.

.SH "V√âASE TAMBI√âN"
.BR kill (1),
.BR kill (2),
.BR killpg (2),
.BR pause (2),
.BR sigaltstack (2),
.BR raise (3),
.BR siginterrupt (3),
.BR signal (2),
.BR signal (7),
.BR sigsetops (3),
.BR sigvec (2)
