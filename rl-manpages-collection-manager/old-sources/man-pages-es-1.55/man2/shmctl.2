.\" Copyright (c) 1993 Luigi P. Bai (lpb@softint.com) July 28, 1993
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Wed Jul 28 11:03:24 1993, Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Nov 28 16:43:30 1993, Rik Faith <faith@cs.unc.edu>
.\"          with material from Giorgio Ciucci <giorgio@crcc.it>
.\" Portions Copyright 1993 Giorgio Ciucci <giorgio@crcc.it>
.\" Modified Fri Jan 31 17:24:31 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Sun Feb 18 01:59:29 2001 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 5 Jan 2002 Michael Kerrisk <mtk16@ext.canterbury.ac.nz>
.\"
.\" Traducci√≥n por Urko Lusa <ulusa@arrakis.es> el 28 Ene 98
.\" Revisado por Miguel PÈrez Ibars <mpi79470@alu.um.es> el 1-diciembre-2004
.\"
.TH SHMCTL 2 "5 enero 2002" "Linux 2.4.1" "Manual del programador de Linux"
.SH NOMBRE
shmctl \- control de memoria compartida
.SH SINOPSIS
.ad l
.B #include <sys/ipc.h>
.sp
.B #include <sys/shm.h>
.sp
.BI "int shmctl(int " shmid ", int " cmd ", struct shmid_ds *" buf );
.ad b
.SH DESCRIPCI√ìN
\fBshmctl()\fP
permite al usuario recibir informaci√≥n sobre un segmento de memoria
compartida, establecer el due√±o, grupo y permisos del segmento, as√≠ como
destruirlo. La informaci√≥n sobre el segmento identificado como \fIshmid\fP
se devuelve en una estructura \fIshmid_ds\fP:
.PP
.in +4n
.nf
struct shmid_ds {
    struct ipc_perm shm_perm;  /* permisos de operaciÛn */
    int shm_segsz;             /* tamaÒo del segmento (bytes) */
    time_t shm_atime;          /* tiempo de la ˙ltima uniÛn */
    time_t shm_dtime;          /* tiempo de la ˙ltima separaciÛn */
    time_t shm_ctime;          /* tiempo de la ˙ltima modificaciÛn */
    unsigned short shm_cpid;   /* pid del creador */
    unsigned short shm_lpid;   /* pid of ˙ltimo operador */
    short shm_nattch;          /* n∫. de uniones actuales */
    ...
};
.fi
.in -4n
.PP
Los campos resaltados del miembro \fIshm_perm\fP pueden ser modificados:
.PP
.in +4n
.nf
struct ipc_perm {
    key_t  key;
    \fBushort uid\fP;   /* euid y egid del \fBpropietario\fP */
    \fBushort gid\fP;
    ushort cuid;  /* euid y egid del creador */
    ushort cgid;
    \fBushort mode\fP;  /* 9 bits m·s bajos de los modos de acceso */
    ushort seq;   /* n˙mero de secuencia */
};
.fi
.in -4n
.PP
Est√°n disponibles los siguientes \fIcmds\fP:
.br
.TP 12
.B IPC_STAT
se usa para copiar la informaci√≥n sobre el segmento de memoria compartida en
la memoria intermedia \fIbuf\fP. El usuario debe tener permiso de \fBlectura\fP del
segmento de memoria compartida.
.TP
.B IPC_SET
se usa para aplicar los cambios que el usuario ha efectuado en los miembros
\fIuid\fP, \fIgid\fP, o \fImode\fP del campo \fIshm_perms\fP. S√≥lo se usan
los 9 bits m√°s bajos de \fImode\fP.
El miembro
.I shm_ctime
tambi√©n es actualizado. El usuario debe ser el due√±o, creador o el
superusuario.
.TP
.B IPC_RMID
se usa para marcar el segmento como destruido. En realidad, se destruir√°
despu√©s de la √∫ltima separaci√≥n (es decir, cuando el miembro
.I shm_nattch
de la estructura asociada
.I shmid_ds
sea cero). El usuario debe ser el due√±o, creador o el superusuario.
.PP
El usuario \fIdebe\fP asegurarse de que el segmento se destruye al
final; de lo contrario, las p√°ginas de dicho segmento que se
cargaron en memoria al producir un fallo de p√°gina,
permanecer√°n en memoria o en el fichero de intercambio.
.PP
Adem√°s, el \fBsuperusuario\fP puede impedir o permitir que un segmento de
memoria compartida pase al fichero de intercambio con las siguientes Ûrdenes (s√≥lo
Linux):
.br
.TP 12
.B SHM_LOCK
impide que un segmento de
memoria compartida pase al fichero de intercambio.
El usuario debe cargar en memoria mediante fallos de p√°gina
cualquier p√°gina que necesite estar presente despu√©s de que
se habilite el bloqueo.
.TP
.B SHM_UNLOCK
permite sacar del fichero de intercambio al segmento de
memoria compartida.
.PP
Las llamadas de control
.BR IPC_INFO ,
.BR SHM_STAT
y
.B SHM_INFO
son usadas por el programa
.BR ipcs (8)
para proporcionar informaci√≥n sobre los recursos asignados. En el futuro,
√©stos pueden ser modificados seg√∫n se necesite o movidos a un sistema de
ficheros proc.
.SH "VALOR DEVUELTO"
En caso de √©xito se devuelve 0, en caso de error \-1.
.SH ERRORES
En caso de error,
.B errno
tomar√° uno de los siguientes valores:
.TP 12
.B EACCES
se devuelve si se pide \fBIPC_STAT\fP y
\fIshm_perm.modes\fP no permite acceso de lectura para
.IR shmid .
.TP
.B EFAULT
el argumento
.I cmd
tiene el valor
.B IPC_SET
o
.B IPC_STAT
pero la direcci√≥n apuntada por
.I buf
no es accesible.
.TP
.B EINVAL
se devuelve si \fIshmid\fP no es un identificador v√°lido
o \fIcmd\fP no es una orden v·lida.
.TP
.B EIDRM
se devuelve si \fIshmid\fP apunta a un identificador borrado.
.TP
.B EPERM
se devuelve si se intenta \fBIPC_SET\fP o \fBIPC_RMID\fP y el
identificador de usuario efectivo del proceso invocador no es el creador
(seg˙n figura en
.IR shm_perm.cuid ),
el propietario
(seg˙n figura en
.IR shm_perm.uid ),
o el super-usuario.
.TP
.B EOVERFLOW
se devuelve si se intenta \fBIPC_STAT\fP, y el valor gid o uid
es demasiado grande para ser almacenado en la estructura apuntada por
.IR buf . 
.SH NOTA
Algunos campos de la estructura \fIshmid_ds\fP eran de tipo short bajo Linux 2.2
y se han convertido a long en Linux 2.4. Para aprovecharse de Èsto,
deberÌa bastar una recompilaciÛn bajo glibc-2.1.91 o alguna versiÛn posterior.
(El n˙cleo distingue las llamadas antiguas y nuevas por una bandera IPC_64 en
.IR cmd .)
.SH "CONFORME A"
SVr4, SVID.  SVr4 documenta las condiciones de error adicionales
EINVAL,
ENOENT, ENOSPC, ENOMEM, EEXIST. Ni SVr4 ni SVID documentan una
condici√≥n de error EIDRM.
.SH "V√âASE TAMBI√âN"
.BR shmget (2),
.BR shmop (2)
