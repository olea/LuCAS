.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" License.
.\"
.\" Modified Sat Jul 24 13:30:06 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Aug 21 17:42:42 1994 by Rik Faith <faith@cs.unc.edu>
.\"          (Thanks to Koen Holtman <koen@win.tue.nl>)
.\" Modified Wed May 17 15:54:12 1995 by Rik Faith <faith@cs.unc.edu>
.\"           To remove *'s from status in macros (Thanks to Michael Shields).
.\" Modified as suggested by Nick Duffek <nsd@bbc.com>, aeb, 960426
.\" Modified Mon Jun 23 14:09:52 1997 by aeb - add EINTR.
.\" Modified Thu Nov 26 02:12:45 1998 by aeb - add SIGCHLD stuff.
.\" Modified Mon Jul 24 21:37:38 2000 by David A. Wheeler
.\"          <dwheeler@dwheeler.com> - noted thread issues.
.\" Modified 26 Jun 01 by Michael Kerrisk
.\"          Added __WCLONE, __WALL, and __WNOTHREAD descriptions
.\" Modified 2001-09-25, aeb
.\" Modified 26 Jun 01 by Michael Kerrisk, <mtk16@ext.canterbury.ac.nz>
.\"	Updated notes on setting disposition of SIGCHLD to SIG_IGN
.\"
.\" Translation revised Thu Dec 31 1998 by Juan Piernas <piernas@ditec.um.es>
.\" Revisado por Miguel Pérez Ibars <mpi79470@alu.um.es> el 24-diciembre-2004
.\"
.TH WAIT 2  "24 julio 2000" "Linux" "Manual del Programador de Linux"
.SH NOMBRE
wait, waitpid \- espera por el final de un proceso
.SH SINOPSIS
.B #include <sys/types.h>
.br
.B #include <sys/wait.h>
.sp
.BI "pid_t wait(int *" "status" );
.br
.BI "pid_t waitpid(pid_t " pid ", int *" status ", int " options );
.SH DESCRIPCIÓN
La función
.B wait
suspende la ejecución del proceso actual haste que un proceso hijo ha
terminado, o hasta que se produce una señal cuya acción es terminar el
proceso actual o llamar a la función manejadora de la señal. Si un hijo
ha salido cuando se produce la llamada (lo que se entiende por proceso
"zombie"), la función vuelve inmediatamente. Todos los recursos del sistema
reservados por el hijo son liberados.

La función
.B waitpid
suspende la ejecución del proceso en curso hasta que un hijo especificado
por el argumento
.I pid
ha terminado, o hasta que se produce una señal cuya acción es finalizar el
proceso actual o llamar a la función manejadora de la señal.

Si el hijo especificado por
.I pid
ha terminado cuando se produce la llamada (un proceso "zombie"), la función
vuelve inmediatamente. Todos los recursos del sistema reservados por el hijo son liberados.

El valor de
.I pid
puede ser uno de los siguientes:
.IP "< \-1"
lo que significa esperar a que cualquier proceso hijo cuyo ID del proceso
es igual al valor absoluto de 
.IR pid .
.IP \-1
lo que significa que espera por cualquier proceso hijo; este es el mismo
comportamiento que tiene
.BR wait .
.IP 0
lo que significa que espera por cualquier proceso hijo cuyo ID es igual al
del proceso llamante.
.IP "> 0"
lo que significa que espera por el proceso hijo cuyo ID es igual al valor de
.IR pid .
.PP
El valor de
.I options
es un OR de cero o más de las siguientes constantes:
.TP
.B WNOHANG
que significa que vuelve inmediatamente si ningún hijo ha terminado.
.TP
.B WUNTRACED
que significa que también vuelve si hay hijos parados (pero no rastreados), y de cuyo estado no ha
recibido notificación.
El estado para los hijos rastreados que están parados también se proporciona sin esta opción.
.PP
(Para opciones exclusivas de Linux, vea más abajo.)
.PP
Si
.I status
no es
.BR NULL ,
.B wait
o
.B waitpid
almacena la información de estado en la memoria apuntada por
.IR status .

Si el estado puede ser evaluado con las siguientes macros (dichas macros
toman el buffer stat (un \fBint\fR) como argumento \(em ¡no un puntero al
buffer!):
.TP
.BI WIFEXITED( status )
es distinto de cero si el hijo terminó normalmente.
.TP
.BI WEXITSTATUS( status )
evalúa los ocho bits menos significativos del código de retorno del hijo
que terminó, que podrían estar activados como el argumento de una llamada a
.B exit()
o como el argumento de unñ
.B return
en el programa principal. Esta macro solamente puede ser tenida en cuenta si 
.B WIFEXITED
devuelve un valor distinto de cero.
.TP
.BI WIFSIGNALED( status )
devuelve true si el proceso hijo terminó a causa de una señal no capturada.
.TP
.BI WTERMSIG( status )
devuelve el número de la señal que provocó la muerte del proceso hijo. Esta
macro sólo puede ser evaluada si
.B WIFSIGNALED
devolvió un valor distinto de cero.
.TP
.BI WIFSTOPPED( status )
devuelve true si el proceso hijo que provocó el retorno está actualmente pardo;
esto solamente es posible si la llamada se hizo usando
.BR WUNTRACED 
o cuando el hijo está siendo rastreado (vea
.BR ptrace (2)).
.TP
.BI WSTOPSIG( status )
devuelve el número de la señal que provocó la parada del hijo. Esta macro
solamente puede ser evaluada si
.B WIFSTOPPED
devolvió un valor distinto de cero.
Algunas versiones de Unix (p.e. Linux, Solaris, pero no AIX ni SunOS)
definen también una macro
.BI WCOREDUMP( status )
para comprobar si el proceso hijo provocó un volcado de memoria. 
Utilícela solamente encerrada entre #ifdef WCOREDUMP ... #endif.
.SH "VALOR DEVUELTO"
El ID del proceso del hijo que terminó, o cero si se
utilizó
.B WNOHANG
y no hay hijo disponible, o \-1 en caso de error (en este caso, 
.I errno
se pone a un valor apropiado).
.SH "ERRORES"
.TP
.B ECHILD
si el proceso especificado en
.I pid
no termina o no es hijo del proceso llamante.
(Esto puede ocurrir para nuestros propios hijos si se asigna SIG_IGN como
acción de SIGCHLD. Vea también la sección NOTAS DE LINUX sobre hilos.)
.TP
.B EINVAL
si el argumento
.I options
no fue valido.
.TP
.B EINTR
si no se activó
.B WNOHANG
y si no se ha capturado una señal no bloqueada o 
.B SIGCHLD.
.SH "OBSERVACIONES"
The Single Unix Specification (Especificación para un Unix Único) describe
un modificador SA_NOCLDWAIT (no soportado en Linux) tal que si este
modificador está activo, o bien se ha asignado SIG_IGN como acción para
SIGCHLD, entonces los hijos que terminan no se convierten en zombies y una llamada a
.BR wait()
o
.BR waitpid()
se bloqueará hasta que todos los hijos hayan terminado y, a continuación,
fallará asignando a
.I errno
el valor ECHILD.
.LP
El estándar POSIX original estableció como indefinido el comportamiento
de tratar SIGCHLD con SIG_IGN.
Estándares posteriores, incluyendo SUSv2 y POSIX 1003.1-2001 especifican
este comportamiento describiéndolo tan solo como una opción conforme con XSI.
Linux no es conforme con el segundo de los dos puntos recién descritos:
si se hace una llamada a
.BR wait "() o " waitpid ()
mientras SIGCHLD está siendo ignorada,
la llamada se comporta como si SIGCHLD no estuviera siendo ignorada, es decir,
se bloquea hasta que el siguiente hijo termina y luego devuelve el PID y el estado
de ese hijo.
.SH "NOTAS DE LINUX"
En el núcleo de Linux, un hijo planificado por el núcleo no es una construcción
distinta a un proceso. En su lugar, un hilo es simplemente un proceso
que es creado usando la llamada al sistema única en Linux
.BR clone (2)
; otras rutinas como la llamada portable
.BR pthread_create (3)
son implementadas usando
.BR clone (2).
Antes de la versión 2.4. de Linux, un hilo era un caso especial de un proceso,
y como consecuencia, un hilo no podía esperar al hijo de otro hilo, incluso
cuando este último pertenecía al mismo grupo de hilos.
Sin embargo, POSIX recomienda tal funcionalidad, y desde la versión 2.4. de
Linux un hilo puede, y por defecto lo hará, esperar a hijos de otros hilos en el
mismo grupo de hilos.
.LP
Las siguientes opciones específicas de Linux
codificadas en
.I options
se pueden utilizar con hijos creados usando
.BR clone (2).
.TP
.B __WCLONE
.\" desde 0.99pl10
Espera por hijos "clone" solamente. Si se omite
espera sólo por hijos "no clone". (Un hijo "clone" es el que
al terminar no comunica ninguna señal, o una señal distinta de
.B SIGCHLD
a su padre.)
Esta opción es ignorada si se especifica también
.B __WALL.
.TP
.B __WALL
.\" desde patch-2.3.48
(Desde Linux 2.4) Espera por todos los hijos, sin importar su
tipo ("clone" o "no clone").
.TP
.B __WNOTHREAD
.\" desde patch-2.4.0-test8
(Desde Linux 2.4) No espera por hijos de otros hilos en el mismo grupo
de hilos. Era la opción por defecto antes de la versión 2.4. de Linux.
.SH "CONFORME A"
SVr4, POSIX.1
.SH "VÉASE TAMBIÉN"
.BR clone (2),
.BR ptrace (2),
.BR signal (2),
.BR wait4 (2),
.BR pthread_create (3),
.BR signal (7)
