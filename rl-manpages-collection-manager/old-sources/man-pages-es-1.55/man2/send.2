.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     $Id: send.2,v 1.3 2005/03/06 20:16:55 pepin.jimenez Exp $
.\"
.\" Modified Sat Jul 24 01:15:33 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Oct 22 17:55:49 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Oct 1998 by Andi Kleen
.\" Translation revised Tue Apr 6 1999 by Juan Piernas <piernas@ditec.um.es>
.\" Translation revised Sun Jun 27 1999 by Juan Piernas <piernas@ditec.um.es>
.\" Translation revised Sat Jan 29 2000 by Juan Piernas <piernas@ditec.um.es>
.\" Revisado por Miguel PÈrez Ibars <mpi79470@alu.um.es> el 29-septiembre-2004
.\"
.TH SEND 2 "31 diciembre 2002" "P√°gina man de Linux" "Manual del Programador de Linux"
.SH NOMBRE
send, sendto, sendmsg \- env√≠a un mensaje de un conector (socket)
.SH SINOPSIS
.B #include <sys/types.h>
.br
.B #include <sys/socket.h>
.sp
.BI "ssize_t send(int " s ", const void *" msg ", size_t " len ,
.BI "int " flags );
.br
.BI "ssize_t sendto(int " s ", const void *" msg ", size_t " len ,
.BI "int " flags ", const struct sockaddr *" to ", socklen_t " tolen );
.br
.BI "ssize_t sendmsg(int " s ", const struct msghdr *" msg ,
.BI "int " flags );
.SH DESCRIPCI√ìN
.BR Send ,
.BR sendto
y
.B sendmsg
son utilizados para transmitir un mensaje a otro conector.
.B Send
solo puede ser usado cuando un conector est√° en un estado
.I connected
mientras
.B sendto
y
.B sendmsg
pueden ser utilizados en cualquier momento.
.PP
La direcci√≥n de destino viene dada por
.I to
con
.I tolen
especificando su tama√±o. La longitud del mensaje viene dada por
.IR len .
Si el mensaje es demasiado largo para pasar autom√°ticamente a trav√©s del
protocolo inferior, se devuelve el error
.B EMSGSIZE
y el mensaje no es transmitido.
.PP
La llamada
.B send
lleva impl√≠cita el que no se indiquen los posibles errores en la entrega.
Los errores detectados localmente se indican devolviendo un valor \-1.
.PP
Cuando el mensaje no cabe en el buffer de env√≠o del conector,
.B send
se bloquea, a no ser que el conector se haya colocado en el modo de E/S no
bloqueante. En el modo no bloqueante devolver√≠a
.B EAGAIN
en este caso. Se puede utilizar la llamada
.BR select (2)
para determinar cuando es posible enviar m√°s informaci√≥n.
.PP
El par√°metro
.I flags
es una palabra de opciones y puede contener las siguientes opciones:
.\" XXX document MSG_PROXY
.TP
.B MSG_OOB
Enviar datos
.IR "fuera de orden" (out-of-band)
en conectores que soportan esta noci√≥n (p.ej. 
.BR SOCK_STREAM );
el protocolo subyacente tambi√©n debe soportar datos
.IR "fuera de orden" .
.TP
.B MSG_DONTROUTE
No usar un ``gateway'' para enviar el paquete, enviar s√≥lo a los ordenadores
que se encuentren en redes conectadas directamente. Normalmente, esto s√≥lo
lo utilizan los programas de diagn√≥stico y enrutamiento. Esta opci√≥n s√≥lo
est√° definida para familias de protocolos que enrutan. Los conectores de
paquetes no enrutan.
.TP
.B MSG_DONTWAIT
Habilitar el funcionamiento no bloqueante. Si la operaci√≥n se bloqueara, se
devolver√≠a
.B EAGAIN
(esto tambi√©n se puede habilitar usando la bandera
.B O_NONBLOCK
con la operaci√≥n
.B F_SETFL
de
.BR fcntl(2)).
.TP
.B MSG_NOSIGNAL
Solicitar el no enviar
.B SIGPIPE
en caso de error en conectores orientados a conexi√≥n cuando el otro extremo
rompa la conexi√≥n. Todav√≠a se devuelve el error
.BR EPIPE .
.TP
.BR MSG_CONFIRM " (Linux 2.3+ solamente)"
Le dice a la capa de enlace que se produjo el proceso de redirecciÛn: tienes
una confirmaciÛn positiva del otro lado. Si la capa de enlace no recibe esta respuesta
interrogar· regularmente al vecino (p.e. a travÈs de un mensaje ARP unicast).
SÛlo v·lida para conectores 
.B SOCK_DGRAM
y
.B SOCK_RAW
y actualmente sÛlo est· implementada en IPv4 e IPv6. Vea
.BR arp (7)
para m·s detalles.
.PP
La definiciÛn de la estructura
.I msghdr
se muestra a continuaciÛn. Vea 
.BR recv (2)
y m·s abajo para una descripciÛn exacta de sus campos.
.IP
.RS
.nf
.ta 4n 17n 33n
struct msghdr {
	void	* msg_name;	/* direcciÛn opcional */
	socklen_t	msg_namelen;	/* tamaÒo de la direcciÛn */
	struct iovec	* msg_iov;	/* vector dispersiÛn/reuniÛn */
	size_t	msg_iovlen;	/* # elementos en msg_iov */
	void	* msg_control;	/* datos auxiliares, vea m·s abajo */
	socklen_t	msg_controllen;	/* longitud del buffer de datos auxiliares */
	int	msg_flags;	/* banderas en el mensaje recibido */
};
.ta
.fi
.RE
.PP
Puede enviar informaci√≥n de control usando los miembros
.I msg_control
y
.IR msg_controllen .
La longitud m√°xima del buffer de control que el n√∫cleo puede procesar est√°
limitada por conector por la sysctl
.BR net.core.optmem_max .
Vea
.BR socket (7).
.SH "VALOR DEVUELTO"
Las llamadas devuelven el numero de caracteres enviados, o \-1
si ha ocurrido un error.
.SH ERRORES
Estos son algunos errores est√°ndares generados por la capa de conectores.
Los m√≥dulos de los protocolos subyacentes pueden generar y devolver errores
adicionales. Vea sus p√°ginas de manual respectivas.
.TP
.B EBADF
Se ha especificado un descriptor no v√°lido.
.TP
.B ENOTSOCK
El argumento
.I s
no es un conector.
.TP
.B EFAULT
Se ha especificado como par√°metro una direcci√≥n incorrecta del espacio de
usuario.
tro.
.TP
.B EMSGSIZE
El conector requiere que este mensaje sea enviado autom√°ticamente, y el tama√±o 
del mensaje a ser enviado lo hace imposible.
.TP
.BR EAGAIN " o " EWOULDBLOCK
El conector est√° marcado como no bloqueante y la operaci√≥n solicitada
lo bloquear√≠a.
.TP
.B ENOBUFS
La cola de salida del interfaz de red est√° llena.
Esto generalmente indica que el interfaz ha parado de enviar,
pero puede ser causado por una congesti√≥n temporal.
(Esto no puede ocurrir en Linux, los paquetes simplemente se suprimen
silenciosamente cuando la cola de un dispositivo se desborda.)
.TP
.B EINTR
Se ha producido una se√±al.
.TP
.B ENOMEM
No hay memoria disponible.
.TP
.B EINVAL
Se ha pasado un argumento inv√°lido.
.TP
.B EPIPE
Se ha desconectado el extremo local en un conector orientado a conexi√≥n.
En este caso el proceso tamb√≠en recibir√° una se√±al
.B SIGPIPE
a menos que se active la opci√≥n
.BR MSG_NOSIGNAL .
.SH "CONFORME A"
4.4BSD, SVr4, borrador POSIX 1003.1g (estas llamadas a funci√≥n aparecieron
en 4.2BSD).

.B MSG_CONFIRM 
es una extensiÛn de Linux.
.SH NOTA
Los prototipos indicados m√°s arriba siguen `the Single Unix Specification',
ya que glibc2 tambi√©n lo hace; el argumento
.I flags
era `int' en BSD 4.* pero `unsigned int' en libc4 y libc5;
el argumento 
.I len
era `int' en BSD 4.* y libc4 pero `size_t' en libc5;
el argumento
.I tolen
era `int' en BSD 4.*, libc4 y libc5.
Vea tambi√©n
.BR accept (2).
.SH "V√âASE TAMBI√âN"
.BR fcntl (2),
.BR recv (2),
.BR select (2),
.BR getsockopt (2),
.BR sendfile (2),
.BR socket (2),
.BR write (2),
.BR socket (7),
.BR ip (7),
.BR tcp (7),
.BR udp (7)
