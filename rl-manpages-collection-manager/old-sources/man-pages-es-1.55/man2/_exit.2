.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (C) 1992 Drew Eckhardt;
.\"               1993 Michael Haardt, Ian Jackson.
.\"
.\" Se autoriza hacer y distribuir copias literales de este manual siempre
.\" que el aviso de copyright y este aviso de autorizaciÃ³n se preserven en
.\" todas las copias.
.\"
.\" Se autoriza copiar y distribuir versiones modificadas de este manual
.\" bajo las condiciones para copiar literalmente, siempre que todo el trabajo
.\" resultante sea distribuido bajo los tÃ©rminos de un aviso de autorizaciÃ³n
.\" idÃ©ntico a Ã©ste.
.\" 
.\" Ya que el kernel y las bibliotecas de Linux estÃ¡n cambiando
.\" constantemente, esta pÃ¡gina de manual puede ser incorrecta u obsoleta.
.\" El(Los) autor(es) no asumen ninguna responsabilidad de los errores u
.\" omisiones, o de los daÃ±os resultantes del uso de la informaciÃ³n contenida
.\" aquÃ­. El(Los) autor(es) pueden no haber tomado el mismo nivel de cuidado en
.\" la producciÃ³n de este manual, que es licenciado gratuitamente, como el que
.\" podrÃ­an haber tomado trabajando profesionalmente.
.\"
.\" Las versiones procesadas o tratadas de este manual que no se acompaÃ±en
.\" con los fuentes deben reconocer el copyright y los autores de este trabajo.
.\"
.\" Modificado el MiÃ© 21 de Julio de 1993 a las 23:02:38 por Rik Faith (faith@cs.unc.edu)
.\" Modified 2001-11-17, aeb
.\" Traducido el SÃ¡b 19 de Julio de 1997 por Juan Piernas (piernas@dif.um.es)
.\" Revisado el SÃ¡b 28 de Febrero de 1998 por NicolÃ¡s Lichtmaier <nick@debian.org>
.\" Revisado el SÃ¡b 25 de Abril de 1998 por Juan Piernas <piernas@dif.um.es>
.\" Revisado por Miguel Pérez Ibars <mpi79470@alu.um.es> el 29-septiembre-2004
.\" 
.TH _EXIT 2 "17 noviembre 2001" "Linux" "Manual del programador de Linux"
.SH NOMBRE
_exit, _Exit \- Produce la terminaciÃ³n del proceso actual
.SH SINOPSIS
.B #include <unistd.h>
.sp
.BI "void _exit(int " status );
.sp
.B #include <stdlib.h>
.sp
.BI "void _Exit(int " status );
.SH DESCRIPCIÃ“N
La función
.B _exit
termina "inmediatamente" la ejecuciÃ³n del proceso invocador.
Todos los descriptores de ficheros abiertos que pertenezcan al proceso se
cierran; todos los procesos hijos son heredados por el proceso 1, init,
y al proceso padre se le envÃ­a la seÃ±al
.B SIGCHLD.
.LP
El valor
.I status
se le devuelve al proceso padre como estado de terminaciÃ³n
del proceso, y se puede leer mediante una de las funciones de la familia de
.B wait.
.LP
La función
.B _Exit
es equivalente a
.BR _exit .
.SH "VALOR DEVUELTO"
Estas funciones nunca regresan.
.SH "CONFORME A"
SVr4, SVID, POSIX, X/OPEN, BSD 4.3.
La función \fI_Exit()\fP fue introducida por C99.
.SH OBSERVACIONES
Para una discusión sobre los efectos de una llamada exit, la transmisión de
estados de salida, procesos zombie, señales enviadas, etc., vea
.BR exit (3).
.LP
La función
.B _exit
hace lo mismo que \fBexit()\fP, pero no llama a ninguna función registrada
con la función
.B atexit
del ANSI C, ni a ningún manejador de señales registrado. Que la función
vacíe los buffers estándar de E/S y elimine los ficheros temporales creados
con
.BR tmpfile (3)
depende de la implementación.
Por otra parte,
.B _exit
no cierra los descriptores de fichero abiertos, y ésto puede provocar un retardo
desconocido, a la espera de finalizar cualquier salida pendiente. Si el retardo
es no deseado, podría ser util llamar a funciones tales como \fItcflush()\fP antes
de llamar a \fB_exit()\fP.
Que cualquier petición de E/S pendiente sea cancelada, y qué petición de E/S 
puede ser cancelada en una llamada \fB_exit()\fP depende de la implementación.
.SH "VÃ‰ASE TAMBIÃ‰N"
.BR fork (2),
.BR execve (2),
.BR waitpid (2),
.BR wait4 (2),
.BR kill (2),
.BR wait (2),
.BR exit (3),
.BR termios (3)
