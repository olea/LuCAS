 <chapter id="jdbc">
  <title>La interfaz JDBC</title>

  <para>
   <note>
    <title>Autor</title>
    <para>
     Escrito  por <ulink url="peter@retep.org.uk">Peter T. Mount</ulink>, el
     autor del driver <acronym>JDBC</acronym>.
    </para>
   </note>
  </para>

  <para>
   <acronym>JDBC</acronym> es una <acronym>API</acronym> del nucleo de Java 1.1 y posteriores.
   Provee un conjunto estandar de 
   interfaces para bases de datos que cumplen <acronym>SQL</acronym>.
  </para>

  <para>
   <application>Postgres</application> provee 
   un Driver <acronym>JDBC</acronym> de <firstterm>tipo 4</firstterm>.
   El tipo 4 indica que el driver 
   esta escrito en Puro Java, y se comunica en el protocolo de red propio
   de la base de datos. A causa de esto, el driver es independiente de la
   plataforma. Una vez es compilado, el driver puede ser utilizado en cualquier
   plataforma.
  </para>

  <sect1>
   <title>Construyendo la Interfaz <acronym>JDBC</acronym></title>

   <sect2>
    <title>Compilando el Driver</title>

    <para>
     Los fuentes del drives estan ubicado en el directorio del arbol fuente
     <filename>src/interfaces/jdbc</filename>.
     Para compilarlo simplemente cambiese al este directorio y escriba:

     <programlisting>
% make
     </programlisting>
    </para>

    <para>
     Una vez acabado, encontrara el archivo <filename>postgresql.jar</filename>
     en el directorio actual. Este es el driver <acronym>JDBC</filename>.

     <note>
      <para>
       Debe utilizar <application>make</application>,
       no <application>javac</application>,
       ya que el driver utiliza algunas 
       tecnicas dinamicas por razones de rendimiento,
       y el <application>javac</application> no puede afrontar. 
       El <filename>Makefile</filename> generara el archivo jar.
      </para>
     </note>
    </para>
   </sect2>

   <sect2>
    <title>Instalando el Driver</title>

    <para>
     Para utilizar el driver, el archivo jar postgresql.jar necesita estar
     incluido en <envar>CLASSPATH</envar>.
    </para>

    <sect3>
     <title>Ejemplo</title>

     <para>
      Tengo un aplicacion que utiliza el driver <acronym>JDBC</acronym> para
      acceder a una base de datos grande que contiene obetos astronomicos. Tengo
      Tengo la aplicacion y el driver jdbc instalado en el directorio 
      /usr/local/lib, y el jdk d ejava en /usr/local/jdk1.1.6.
     </para>

     <para>
      Para ejecutar la aplicacion, utilizaria:

      <programlisting>
export CLASSPATH = /usr/local/lib/finder.jar:/usr/local/lib/postgresql.jar:.
java uk.org.retep.finder.Main
      </programlisting>
     </para>

     <para>
      La carga del driver es cuberta más adelante en este capítulo.
     </para>
    </sect3>
   </sect2>
  </sect1>

  <sect1>
   <title>Preparando la Base de Datos para <acronym>JDBC</acronym></title>

   <para>
    Como Java solo puede utilizar conexiones TCP/IP, el postmaster de 
    <application>Postgres</application> debe ser ejecutado con la opcion -i.
   </para>

   <para>
    Tambien, el fichero <filename>pg_hba.conf</filename> debe ser configurado. 
    Esta localizado en el directorio PGDATA. En una instalación por defecto, 
    este fichero permite ser accedido solo por sockets de dominio Unix. Para que
    el driver <acronym>JDBC</acronym> conecte al mismo localhost, necesita 
    añadir algo como:
    <programlisting>
host         all         127.0.0.1     255.255.255.255   password
    </programlisting>

    Aqui el acceso a todas las bases de datos es posible desde la maquina local
    con <acronym>JDBC</acronym>.
   </para>

   <para>
    El Driver <acronym>JDBC</acronym> soporta metodos de confianza (trust),
    ident, contraseña y autentificacion cifrada. 
   </para>
  </sect1>

  <sect1>
   <title>Utilizando el Driver</title>

   <para>
    esta seccion no esta orientada como una guia completa para programacion
    <acronym>JDBC</acronym>, pero deberia ayudarle a a ponerse en marcha. Para
    más información consulte la documentacion estándar <acronym>JDBC</acronym> 
    <acronym>API</acronym>.
    Tambien, echele un vistazo a los ejemplos incluidos con el fuente. El 
    ejemplo básico es utilizado aqui.
   </para>
  </sect1>

  <sect1>
   <title>Importando <acronym>JDBC</acronym></title>

   <para>
    Cualquier fuente que utilice <acronym>JDBC</acronym>
    necesita importar el paquete java.sql, utilizando:

    <programlisting>
import java.sql.*;
    </programlisting>

    <important>
     <para>
      No importe el paquete postgresql. Si lo hace, su fuente no compilara,
      ya que javac se quedara confuso.
     </para>
    </important>
   </para>
  </sect1>

  <sect1>
   <title>Cargando el Driver</title>

   <para>
    Antes de que pueda conectar a una base de datos, necesita cargar el driver.
    Aqui dos métodos disponibles, y depende de su codigo cual sera el mejor a 
    utilizar. 
   </para>

   <para>
    En el primer método, su código carga implicitamente el driver utilizando
    el método <function>Class.forName()</function>.
    Para <application>Postgres</application>, podría utilizar:

    <programlisting>
Class.forName("postgresql.Driver");
    </programlisting>

    esto cargara el driver, y mientras se carga, el driver se registrará 
    automáticamente a sí mismo con <acronym>JDBC</acronym>.
   </para>

   <para>
    Nota: El método <function>forName()</function> 
    puede devolver un <literal>ClassNotFoundException</literal>, así que 
    necesitará capturarlo si el driver no está disponible.
   </para>

   <para>
    este es el método más común a emplear, pero restringe su cñodigo a utilizar
    solo <application>Postgres</application>. 
    Si su código puede acceder a otras bases de datos en un futuro, y no 
    no utiliza nuestras extensiones, entonces el segundo método es aconsejable.
   </para>

   <para>
    El segundo método pasa el driver como un parametro al JVM cuando arranca,
    utilizando el argumento -D. Ejemplo:

    <programlisting>
% java -Djdbc.drivers=postgresql.Driver example.ImageViewer
    </programlisting>

    En este ejemplo, el JVM intentará cargar el driver como parte de su 
    inicializació. Una vez hecho, el ImageViewer es arrancado.
   </para>

   <para>
    Ahora, este método es el mejor a usar porque permite a su código ser
    utilizado con otras bases de datos, sin recompilar el código. La única
    cosa que debería hacer es cambiar al URL, lo que tratamos a continuación.
   </para>

   <para>
    Una última cosa. Cuando su código intenta entonces abrir una Conexión, y 
    se le devuelve un <literal>No driver available</literal> ha sido devuelta 
    una SQLException, esto es, probablemente causado por que el driver no estuvo
    en la classpath, o el valor en el parametro no era correcto.
   </para>
  </sect1>

  <sect1>
   <title>Conectando a la Base de Datos</title>

   <para>
    Con <acronym>JDBC</acronym>, una base de datos se representa por una URL 
    (Uniform Resource Locator).
    Con <application>Postgres</application>, esto  toma una de la siguientes
    formas:

    <itemizedlist>
     <listitem>
      <para>
       jdbc:postgresql:<replaceable class="parameter">database</replaceable>
      </para>
     </listitem>

     <listitem>
      <para>
       jdbc:postgresql://<replaceable class="parameter">>hos</replaceable>>/<replaceable class="parameter">database</replaceable>
      </para>
     </listitem>

     <listitem>
      <para>
       jdbc:postgresql://<replaceable class="parameter">>hos</replaceable>><replaceable class="parameter">">po</replaceable>e>/<replaceable class="parameter">database</replaceable>
      </para>
     </listitem>
    </itemizedlist>

    donde:

    <variablelist>
     <varlistentry>
      <term>
       <replaceable class="parameter">host</replaceable>
      </term>
      <listitem>
       <para>
	El nombre de host del servidor. Por defecto "localhost".
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>
       <replaceable class="parameter">port</replaceable>
      </term>
      <listitem>
       <para>
        El número de puerto donde el servidor está escuchando. El número de 
        puerto por defecto estándar de Postgres es (5432)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>
       <replaceable class="parameter">database</replaceable>
      </term>
      <listitem>
       <para>
	El nombre de la base de datos.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

   <para>
    Para conectar, necesitas obtener una instancia de Conexión desde
    <acronym>JDBC</acronym>. Para hacer esto,
    deberia utilizar el método DriverMnager.getConnection:

    <programlisting>
Connection db = DriverManager.getConnection(url,user,pwd);
    </programlisting>
   </para>
  </sect1>

  <sect1>
   <title>Enviando una Consulta y Procesando el Resultado</title>

   <para>
    Cada vez que quiera entregar una declaracion SQL a la base de datos, 
    requerira una instancia de Declaracion. Una vez tenga una Decalracion, podra
    utilizar me metodo executeQuery() para dar salida a la consulta. Esto 
    devolvera un ResultSet de instancia, el cual contendra el resultado 
    completo.
   </para>

   <sect2>
    <title>Utulizando el Interfaz de Declaracion</title>

    <para>
     Lo siguiente debe ser considerado cuando se utiliza el interfaz de 
     declaracion:

     <itemizedlist>
      <listitem>
       <para>
        Puede utilizan una instancia de Declaracion tantas veces como quiera.
        Puede crear una tan pronto como abra la conexion, y utilizarla durante
        el tiempo de vida de la conexion. Debe recordar que solo un ResultSet
        puede existir por Declaracion.
      </listitem>

      <listitem>
       <para>
        Si necesita ejecutar una consulta mientras un ResulSet esta procesandose
        puede simplemente crear y utilizar otra Declaracion.
       </para>
      </listitem>
      <listitem>
       <para>
        Si esta utilizando Hilos (threads), y muchos estan utilizando la base
        de datos, debe utilizar una Declaracion separada para cada hilo. 
        Remitase a la seccion que cubre los Hilos (threads) y Servlets mas 
        adelante en este documento si esta pensando en utilizarlos, ya que se 
        ocupa de algunos punto importantes.
       </para>
      </listitem>
     </itemizedlist>
    </para>
   </sect2>

   <sect2>
    <title>Utilizando el Interfaz ResultSet</title>

    <para>
     Lo siguiente debe ser considerado cuando se utiliza el interfaz ResultSet:

     <itemizedlist>
      <listitem>
       <para>
        Antes de leer cualquier valos, debe llamar <function>netxt()</function>.
        Esta devolvera 'true' si hay un resultado, pero mas importante, se 
        prepara para el procesamiento de registros. 
       </para>
      </listitem>

      <listitem>
       <para>
        Bajo la especificacion  <acronym>JDBC</acronym>, deberia acceder a un
        campo solo una vez. Es lo mas seguro pararse en este regla, aunque
        en el momento actual, el driver <application>Postgres</application> le
        permitira acceder a un campo tantas veces como quiera.  
       </para>
      </listitem>

      <listitem>
       <para>
        Debe cerrar un ResultSet llamando a
	<function>close()</function> una vez haya acabado con el.
       </para>
      </listitem>

      <listitem>
       <para>
        Una vez solicite otra consulta con la Declaracion utilizada para crear
        un ResultSet, la instancia abierta en curso se cerrara. 
       </para>
      </listitem>
     </itemizedlist>
    </para>

    <para>
     Un ejemplo seria como el que sigue:

     <programlisting>
Statement st = db.createStatement();
ResultSet rs = st.executeQuery("select * from mytable");
while(rs.next()) {
    System.out.print("Column 1 returned ");
    System.out.println(rs.getString(1));
}
rs.close();
st.close();
     </programlisting>
    </para>
   </sect2>
  </sect1>

  <sect1>
   <title>Ejecutando  Actualizaciones (Updates)</title>

   <para>
    Para ejecutar una actualizacion (o cualquier otra declaracion SQL que no 
    devuelva un resultado), simplemente utilice el método 
    <function>executeUpdate()</function>:

    <programlisting>
st.executeUpdate("create table basic (a int2, b int2)");
    </programlisting>
   </para>
  </sect1>

  <sect1>
   <title>Cerrando la Conecxion</title>

   <para>
    Para cerrar la conexion a la base de datos, simplemete llame al método
    close() a la Conexion:

    <programlisting>
db.close();
    </programlisting>
   </para>
  </sect1>

  <sect1>
   <title>Utilizando Objetos Grandes (Large Objects)</title>

   <para>
    En <application>Postgres</application>, 
    los obejtos grandes -large objects-(tambien conocidos como 
    <firstterm>blobs</firstterm> son utilizados para albergar datos en la base
    de datos que no pueden ser almacenados en una tabla normal SQL. Son 
    almacenados como un par Tabla/Indice, y desde sus propias tablas son 
    referidos por un valor OID.
   </para>

   <para>
    <important>
     <para>
      Para <productname>Postgres</productname>, debe acceder a los objetos 
      grandes dentro de una transaccion SQL. Aunque esto siempre ha sido verdad
      en principio, no fue estrictamente impuesto hasta la version v6.5. Podria
      abrir una transaccion utilizando el método 
      <function>setAutoCommit()</function> con un parametro de entrada de
      <literal>false</literal>:

      <programlisting>
Connection mycon;
...
mycon.setAutoCommit(false);
... now use Large Objects
      </programlisting>
     </para>
    </important>
   </para>

   <para>
    Ahora, hay dos métodos de utilización de Objetos Grandes (Large Objects).
    EL primero es la manera estandar <acronym>JDBC</acronym>, y está documentada
    aquí. La otra, utiliza nuestra propia extensión al api, la cual  
    representada la <acronym>API</acronym> libpq para objetos grandes para Java,
    proveyendo aún mejor acceso a los objetos grandes que la estándar. 
    Internamente, el driver utilizará la extensión para porveer soporte para 
    objetos grandes.
   </para>

   <para>
    
    En <acronym>JDBC</acronym>, la manera estándar para acceder a ellos es 
    utilizando el método getBinaryStream() en ResultSet, y el método 
    setBinaryStream() en PreparedStatment. Estos métodos hacen que los objetos
    grandes aparezcan como un Java stream, permitiendole utilizar el paquete
    java.io, y otros, para manipular el objeto.
   </para>

   <para>
    Por ejemplo, supongamos que tiene una table que contiene el nombre del 
    fichero de una imagen, y un objeto grande conteniendo la imagen:

    <programlisting>
create table images (imgname name,imgoid oid);
    </programlisting>
   </para>

   <para>
    Para insertar una imagen, utilizacia:

    <programlisting>
File file = new File("myimage.gif");
FileInputStream fis = new FileInputStream(file);
PreparedStatement ps = conn.prepareStatement("insert into images values (?,?)");
ps.setString(1,file.getName());
ps.setBinaryStream(2,fis,file.length());
ps.executeUpdate();
ps.close();
fis.close();
    </programlisting>
   </para>

   <para>
    Ahora en este ejemplo, setBianryStream transfiere un conjunto de numeros de 
    bytes desde el stream dentro de un objeto grande, y almacena el OID dentro 
    de un campo mantiendo la referencia a el.
   </para>

   <para>
    Recuperar una imagen es aun más fácil (Estoy utilizando PreparedStatment
    aquí, pero Statment puede ser igualmente utilizado):

    <programlisting>
PreparedStatement ps = con.prepareStatement("select oid from images where name=?");
ps.setString(1,"myimage.gif");
ResultSet rs = ps.executeQuery();
if(rs!=null) {
    while(rs.next()) {
        InputStream is = rs.getBinaryInputStream(1);
        // utilice el stream de alguna manera aquí
        is.close();
    }
    rs.close();
}
ps.close();
    </programlisting>
   </para>

   <para>
    Ahora puede ver donde los objetos grandes se recuperan como un InputStream.
    Tambien advertirá que cerramos el stream antes de procesar el siguiente
    registro en el resultado. Esto es una parte de la especificación de 
    Ahora puede ver donde los objetos grandes se recuperan como un InputStream.
    <acronym>JDBC</acronym>, que declara que cualquier InputStream devuelto es
    cerrado cuando se llama ResultSet.next() o ResultSet.close().
   </para>
  </sect1>

  <sect1>
   <title>Extensiones de <application>Postgres</application> al 
   <acronym>API</acronym> <acronym>JDBC</acronym> </title>

   <para>
    <application>Postgres</application> es un sistema de  base de datos 
    extensible. Puede añadir sus propias funciones al motor (backend), que 
    pueden ser llamadas desde consultas, o incluso añadir sus propios tipos de 
    datos. 
   </para>

   <para>
    Ahora, como estas facilidades son unicas para nosotros, las soportamos desde
    Java, con un conjunto de extensiones <acronym>API</acronym>'s. Algunas 
    prestaciones en el nucleo del driver estándar actualmente utilizan estas 
    extensiones para implementar Objetos Grandes, etc.

<!--
************************************************************
Nada marcado desde aquí en adelante. Parece como si fuera engañoso:
que queremos hacer con los diagramas de herencia de clases?
- thomas 1998-10-23
************************************************************
-->

<programlisting>
Accediendo a las  extensiones

Para acceder a alguna de las extensiones, necesita utilizar algunos métodos
extra en la clase postgresql.Connection. En este caso, necesitara "encajonar"
el valro devuelto por Driver.getConnection().

Por ejemplo:

    Connection db = Driver.getConnection(url,user,pass);

    // despues en
    Fastpath fp = ((postgresql.Connection)db).getFastpathAPI();

Class postgresql.Connection
                                
java.lang.Object
   |
   +----postgresql.Connection

   public class Connection extends Object implements Connection

Estos son métodos extra utilizados para obtener acceso a nuestras extensiones.
No he listado los métodos definidos por java.sql.Connection.

 public Fastpath getFastpathAPI() throws SQLException

          Esto devuelve la <acronym>API</acronym> Fastpath para la conexión en
          en curso.

          NOTA: Esto no es una parte de <acronym>JDBC</acronym>, pero permite
          acceder a las funciones en el mismo motor (backend) de postgresql.


          Es primeramente utilizado por el <acronym>API</acronym> LargeObject

          La mejor manera de utilizar esto es como sigue:

 import postgresql.fastpath.*;
 ...
 Fastpath fp = ((postgresql.Connection)myconn).getFastpathAPI();

          donde myconn es una Conexión abierta a postgresql.

        Devuelve:
                El objeto Fastpath permitiendo el acceso a las funciones en el
                motor (backend) de postgresql.

        Arroja: SQLException
                por Fastpath cuando se inicializa por primea vez
          
 public LargeObjectManager getLargeObjectAPI() arroja una SQLException

          Esto devuelve el LargeObject <acronym>API</acronym> para la conexión
          en curso

          NOTA: Esto no es parte de <acronym>JDBC</acronym>, pero permite 
          acceder a las funciones en el mismo motor (backend) de postgresql.
   
          La mejor manera de utilizar esto es como sigue:

 import postgresql.largeobject.*;
 ...
 LargeObjectManager lo = 
((postgresql.Connection)myconn).getLargeObjectAPI();

          donde myconn es una conexión abierta a postgresql. 

        Devuelve:
                Un objeto LargeObject que implementa la <acronym>API</acronym> 

        Arroja: SQLException
                por LargeObject cuando se inicializa por primea vez

 public void addDataType(String type,
                         String name)

          Esto permite al código del cliente añadir un manejador para uno o
          más tipos de datos de postgresql. Normalmente, un tipo de datos no
          conocido por el driver es devuelto pro ResultSet.getObject() como una
          instancia PGobject.   

Este método le permite escribir una clase que extienda PGobject, y 
le diga al driver el nombre del tipo, y el nombre de la clase a utilizar.

De aquí en adelante, es lo que ud. debe llamar este método cada vez que 
una conexión es hecha.

          NOTA: Esto no es una  parte de <acronym>JDBC</acronym>, sino una
          extension.

          La mejor manera de utilizar esto es como sigue:

 ...
 ((postgresql.Connection)myconn).addDataType("mytype","my.class.name"-
);
 ...

          donde myconn es una coenxión abierta a postgresql.

          La clase manejadora debe extender postgresql.util.PGobject

        Vease  tambien:
                PGobject

************************ colocar aquí la segunda parte del fichero
************************ Dejar estas líneas para el coordinador.
