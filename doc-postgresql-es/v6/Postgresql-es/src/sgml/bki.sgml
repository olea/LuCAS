<!--
$Header: /home/cvs/lucas/doc-postgresql-es/v6/Postgresql-es/src/sgml/bki.sgml,v 1.7 2001/09/01 14:50:44 santamarta Exp $

Transcribed from the original bki.man.5 documentation
- Thomas Lockhart 1998-08-03
-->

<chapter id="bki">
<title>Interfaces de Backend</title>

<para>
Los ficheros de interfaces (<acronym>BKI</acronym>) son scripts que sirven de entrada para los backend 
de <productname>Postgres</productname> ejecutándose en un modo especial "bootstrap" permite realizar 
funciones de base de datos sin que exista todavia el sistema de la base de datos. Los ficheros 
<acronym>BKI</acronym> pueden por lo tanto ser usados para crear el sistema de base de datos al inicio.

<application>initdb</application> usa ficheros <acronym>BKI</acronym> para hacer exactamente eso: 
crear el sistema de base de datos. De cualquier manera, los ficheros <acronym>BKI</acronym> de 
<application>initdb</application> son generalmente internos. Los genera usando los ficheros 
<filename>global1.bki.source</filename> y <filename>local1.template1.bki.source</filename>, 
que se encuentran en el directorio de "librerias" de <productname>Postgres</productname>. 
Estos se instalan aquí como parte de la instalación de <productname>Postgres</productname>. 
Estos ficheros .source se generan como parte del proceso de construcción de 
<productname>Postgres</productname>, construido por un programa llamado 
<application>genbki</application>.

  <application>genbki</application> toma como entrada los ficheros fuente de 
  <productname>Postgres</productname> que sirven como entrada de 
  <application>genbki</application> que construye tablas y ficheros de cabecera de C que describen 
  estas tablas. 
</para>

<para>
Se puede encontrar información al respecto en la documentación de  <application>initdb</application>,
<application>createdb</application>,
y en el comando de <acronym>SQL</acronym> <command>CREATE DATABASE</command>.
</para>

<sect1>
<title>Formato de fichero <acronym>BKI</acronym></title>

<para>
Los backend de <productname>Postgres</productname> interpretan los ficheros <acronym>BKI</acronym> 
como se describe abajo. Esta descripción será más fácil de entender si cogemos el fichero 
<filename>global1.bki.source</filename> como ejemplo. (como se explica arriba, este fichero 
.source no es exactamente un fichero <acronym>BKI</acronym>, pero de todos modos le servirá 
para comprender el resultado si lo fuese.
</para>

<para>
Los comandos estan compuestos por un identificador seguido por argumentos separados por espacios. 
Los argumentos de los comandos que comienzan por <quote>$</quote> se tratan de forma especial. 
Si <quote>$$</quote> son los primeros dos caracteres, entonces el primer <quote>$</quote> se ignora 
y el argumento se procesa normalmente . Si el <quote>$</quote> va seguido por espacio, entonces se 
trata como un valor NULL. De otro modo, los caracteres seguidos de <quote>$</quote> se interpretan 
como el nombre de una macro, lo que provoca que el argumento se reemplace por el valor de la macro. 
Si la macro no está definida se genera un error. 
</para>

<para>
Las macros se definen usando
<programlisting>
define macro macro_name = macro_value
</programlisting>
y se quita la definición usando 
<programlisting>
undefine macro macro_name
</programlisting>
y se redefine usando la misma sintaxis que en la definición.
</para>

<para>
Seguidamente se listan los comandos generales y los comandos de macro.
</para>
</sect1>

<sect1>
<title>Comandos Generales</title>

<variablelist>
<varlistentry>
<term>
OPEN <replaceable class="parameter">classname</replaceable>
</term>
<listitem>
<para>
Abre la clase llamada 
<replaceable class="parameter">classname</replaceable>
para futuras manipulaciones.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
CLOSE [<replaceable class="parameter">classname</replaceable>]
</term>
<listitem>
<para>
Cierra la clase abierta llamada 
<replaceable class="parameter">classname</replaceable>.
Se genera un error si 
<replaceable class="parameter">classname</replaceable>
no está actualmente abierta. Si no aparece <replaceable class="parameter">classname</replaceable>, 
entonces la clase que actualmente está abierta se cierra.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
PRINT
</term>
<listitem>
<para>
Imprime la clase que actualmente está abierta.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
INSERT [OID=<replaceable class="parameter">oid_value</replaceable>] (<replaceable class="parameter">value1</replaceable> <replaceable class="parameter">value2</replaceable> ...)
</term>
<listitem>
<para>
Inserta una nueva instancia para la clase abierta usando <replaceable class="parameter">value1</replaceable>,
<replaceable class="parameter">value2</replaceable>,
etc., como valores de los atributos y 
<replaceable class="parameter">oid_value</replaceable>
como OID.  Si <replaceable class="parameter">oid_value</replaceable>
no es <quote>0</quote>, entonces este valor se usará como identificador del objeto instancia. 
De otro modo, provoca un error. </para>
</listitem>
</varlistentry>

<varlistentry>
<term>
INSERT (<replaceable class="parameter">value1</replaceable> <replaceable class="parameter">value2</replaceable> ...)
</term>
<listitem>
<para>
Como arriba, pero el sistema genera un identificador de objeto único.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
CREATE <replaceable class="parameter">classname</replaceable> (<replaceable class="parameter">name1</replaceable> = <replaceable class="parameter">type1</replaceable> [,<replaceable class="parameter">name2</replaceable> = <replaceable class="parameter">type2</replaceable>[,...]])
</term>
<listitem>
<para>
Crea una clase llamada <replaceable class="parameter">classname</replaceable> con los atributos 
introducidos entre paréntesis.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
OPEN (<replaceable class="parameter">name1</replaceable> = <replaceable class="parameter">type1</replaceable> [,<replaceable class="parameter">name2</replaceable> = <replaceable class="parameter">type2</replaceable>[,...]]) AS <replaceable class="parameter">classname</replaceable>
</term>
<listitem>
<para>
Abre una clase llamada <replaceable class="parameter">classname</replaceable> para escritura pero no 
graba su existencia en los catálogos de sistema. (Esto es primordialmente lo que ayuda al bootstrapping.)
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
DESTROY <replaceable class="parameter">classname</replaceable>
</term>
<listitem>
<para>
Destruye la clase llamada <replaceable class="parameter">classname</replaceable>.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
DEFINE INDEX <replaceable class="parameter">indexname</replaceable> ON <replaceable class="parameter">class_name</replaceable> USING <replaceable class="parameter">amname</replaceable>
  (<replaceable class="parameter">opclass</replaceable> <replaceable class="parameter">attr</replaceable> | (<replaceable class="parameter">function</replaceable>(<replaceable class="parameter">attr</replaceable>))
</term>
<listitem>
<para>
Crea un índice llamado <replaceable class="parameter">indexname</replaceable>
para la clase llamada <replaceable class="parameter">classname</replaceable>
usando el metodo de acceso <replaceable class="parameter">amname</replaceable>. 
Los campos se llaman <replaceable class="parameter">name1</replaceable>,
<replaceable class="parameter">name2</replaceable>
etc., y los operadores de recogida que usa son <replaceable class="parameter">collection_1</replaceable>,
<replaceable class="parameter">collection_2</replaceable>
etc., respectivamente. </para>
</listitem>
</varlistentry>

</variablelist>

<note>
<para>
Esta última sentencia no referencia a nada del ejemplo. Deberia ser cambiado para que tenga sentido. - Thomas 1998-08-04
</para>
</note>
</sect1>

<sect1>
<title>Macro Commands</title>

<para>
<variablelist>
<varlistentry>
<term>
DEFINE FUNCTION <replaceable class="parameter">macro_name</replaceable> AS <replaceable class="parameter">rettype</replaceable> <replaceable class="parameter">function_name</replaceable>(<replaceable class="parameter">args</replaceable>)
</term>
<listitem>
<para>
Define un prototipo de función para la función llamada <replaceable class="parameter">macro_name</replaceable>
la cual tienen el tipo de valor
<replaceable class="parameter">rettype</replaceable>
calculada desde la ejecución de 
<replaceable class="parameter">function_name</replaceable>
con los argumentos
<replaceable class="parameter">args</replaceable>
declarados a la manera de C. </para>
</listitem>
</varlistentry>

<varlistentry>
<term>
DEFINE MACRO <replaceable class="parameter">macro_name</replaceable> FROM FILE <replaceable class="parameter">filename</replaceable>
</term>
<listitem>
<para>
Define una macro llamada <replaceable class="parameter">macro_name</replaceable>
la cual tendrá un valor que se leerá del archivo <replaceable class="parameter">filename</replaceable>.
</para>
</listitem>
</varlistentry>

</variablelist>
</para>
</sect1>

<sect1>
<title>Comandos de Depuración</title>

<para>
<note>
<para>
Esta sección de los comandos de depuración fue comentada por completo en la documentación original. Thomas 1998-08-05
</para>
</note>

<variablelist>
<varlistentry>
<term>
r
</term>
<listitem>
<para>
Visualiza aleatoriamente la clase abierta.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
m -1
</term>
<listitem>
<para>
Cambia la visualización de la información del tiempo.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
m 0
</term>
<listitem>
<para>
Activa la recuperación inmediatamente.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
m 1 Jan 1 01:00:00 1988
</term>
<listitem>
<para>
Activa la recuperación de la foto para un tiempo específico.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
m 2 Jan 1 01:00:00 1988, Feb 1 01:00:00 1988
</term>
<listitem>
<para>
Activa la recuperación para un rango especifico de tiempo. Ambos tiempos deben ser reemplazados por un 
espacio en blanco si el rango de tiempo deseado es ilimitado.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
&amp;A <replaceable class="parameter">classname</replaceable> <replaceable class="parameter">natts</replaceable> <replaceable class="parameter">name1</replaceable> <replaceable class="parameter">type1</replaceable> <replaceable class="parameter">name2</replaceable> <replaceable class="parameter">type2</replaceable> <replaceable class="parameter">...</replaceable>
</term>
<listitem>
<para>
Añade atributos 'chivato' llamados
<replaceable class="parameter">name1</replaceable>,
<replaceable class="parameter">name2</replaceable>,
etc. de tipos <replaceable class="parameter">type1</replaceable>,
<replaceable class="parameter">type2</replaceable>,
etc. para la clase 
<replaceable class="parameter">classname</replaceable>.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
&amp;RR <replaceable class="parameter">oldclassname</replaceable> <replaceable class="parameter">newclassname</replaceable>
</term>
<listitem>
<para>
Renombra la clase <replaceable class="parameter">oldclassname</replaceable>
por
<replaceable class="parameter">newclassname</replaceable>.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
&amp;RA	classname oldattname newattname
<replaceable class="parameter">classname</replaceable>
<replaceable class="parameter">oldattname</replaceable>
<replaceable class="parameter">newattname</replaceable>
</term>
<listitem>
<para>
Renombra el atributo <replaceable class="parameter">oldattname</replaceable>
de la clase llamada
<replaceable class="parameter">classname</replaceable>
por el
<replaceable class="parameter">newattname</replaceable>.
</para>
</listitem>
</varlistentry>
</variablelist>
</para>
</sect1>

<sect1>
<title>Ejemplo</title>

<para>
El siguiente conjunto de comandos creará la clase <quote>pg_opclass</quote>
conteniendo una colección de <parameter>int_ops</parameter>
como un objeto con un OID igual a 
<parameter>421</parameter>,
visualiza la clase , y después la cierra. <programlisting>
create pg_opclass (opcname=name)
open pg_opclass
insert oid=421 (int_ops)
print
close pg_opclass
</programlisting>
</para>
</sect1>
</chapter>
