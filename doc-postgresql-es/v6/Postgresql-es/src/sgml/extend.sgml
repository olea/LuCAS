 <chapter id="extend">
  <title>Extensor <acronym>SQL</acronym>: Preludio</title>

  <para>
   En la seccion que sigue, trataremos como añadir extensiones al
   <productname>Postgres</productname> 
   <acronym>SQL</acronym> usando peticiones del lenguaje:

   <itemizedlist spacing="compact" mark="bullet">
    <listitem>
     <para>
      funciones
     </para>
    </listitem>
    <listitem>
     <para>
      tipos
     </para>
    </listitem>
    <listitem>
     <para>
      operadores
     </para>
    </listitem>
    <listitem>
     <para>
      añadidos
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <sect1>
   <title>Como hacer extensible el trabajo</title>

   <para>
    <productname>Postgres</productname> es extensible porque las operaciones
    son catalogos en disco. Si está familiarizado con los estandares de sistemas
    relacionales, sabe que la informacion se almacena en bases de datos,
    tablas, columnas, etc., en lo que se comunmente conoce como sistema de catalogos.
    (Algunos sistemas lo llaman diccionario de datos). El catalogo aparece al usuario
    como una clase, como otro objeto cualquiera, pero <acronym>DBMS</acronym> lo almacena en una
    bilioteca. Una diferencia clave entre <productname>Postgres</productname>
    y el estandar de sistemas relacionales es que <productname>Postgres</productname>
    almacena muchas mas informacion en su catalogos -- no solo informacion de tablas y
    columnas, sino tambien informacion sobre sus tipos, funciones y metodos de acceso.
    Estas clases pueden ser modificadas por el usuario, y dado que <productname>Postgres</productname>
    basa la operacion interna en todas sus clases, esto significa que <productname>Postgres</productname>
    puede ser extendido por los usuarios. Por comparacion, la convencion es que los sitemas de base de datos pueden
    ser extendidos solamante cambiando los procedimientos codificados del <acronym>DBMS</acronym> o
    cargando modulos especialmente escritos por el vendedor de <acronym>DBMS</acronym>.  
   </para>
   
   <para>
    <productname>Postgres</productname> es tambien distinto a otros gestores de datos en
    que el servidor puede incoporar codigo escrito por el usuario a traves de bibliotecas de carga dinamicas. 
    O sea, el usuario puede especificar un fichero de codigo objeto  (p. ej., un fichero 
    compilado .o o bibliotecas de intercambio) con lo que se implementa un nuevo tipo o funciones y
    <productname>Postgres</productname> cargara lo que requiera. El codigo escrito en
    <acronym>SQL</acronym> es mas dificil de añadir al servidor.
    Esta habilitad para modificar la operacion 'al vuelo' hace de <productname>Postgres</productname>
    la unica suite para prototipos rapidos de nuevas aplicaciones y estructuras de almacenamiento.    
   </para>
  </sect1>

  <sect1>
   <title>El Tipo de Sistema de <productname>Postgres</productname></title>

   <para>
    El tipo de sistema de <productname>Postgres</productname>
    puede entrar en crisis por varios medios.  
    Los tipos estan divididos en tipos base y tipos compuestos.
    Los tipos base son precisamente eso, como <firstterm>int4</firstterm>, que es 
    implementado en leguajes como <productname>C</productname>.  
    Generalmente se corresponde a lo comunmente conocido como 
    "abstract data types"; <productname>Postgres</productname>    
    puede operar solo con los tipos de metodos provistos por el usuario y
    solo se entiende el comportamiento de los tipos de la extension que
    el usuario describe.
    Los tipos compuestos son los creados cuando el usuario crea una clase.
    EMP es un ejemplo de un tipo de composicion.
   </para>

   <para>
   <productname>Postgres</productname> almacena estos tipos
    en solo un sentido (que el fichero que almacena todas las
    instancias de las clases) pero el usuario puede "mirar dentro"
    de estos tipos desde el lenguaje de peticion y optimizar sus
    recuperacion por (por ejemplo) definir indices en los atributos.    
    La base de tipos de <productname>Postgres</productname> esta mas 
    dividida en tipos y tipos definidos por el usuario. 
    Los tipos de construccion (como <firstterm>int4</firstterm>)
    son los que son compilados dentro del sistema.
    Los tipos definidos por el usuario son creados por el usuario 
    de la manera descrita abajo. 
   </para>
  </sect1>

  <sect1>
   <title>Acerca de los Sistema de Catalogo de
<productname>Postgres</productname></title>

   <para>
    Para introducirnos en los conceptos basicos de la extensibilidad,
    hemos de estudiar como se dise¤an los catalogos.
    Puede saltarse esta seccion ahora, pero algunas secciones mas tarde no seran
    comprendidas sin la informacion dada aqui, asi que marque esta paágina como
    posterior referencia.
    Todos los sistemas de catalogos tienen un nombre que empieza por
    <firstterm>pg_</firstterm>.
    Las siguientes clases contienen informacion que debe de ser util para
    los usuarios finales. (Hay muchas otros sistemas de catalogo, pero estos
    raramente son pedidos directamente.)
    <table tocentry="1">
     <title>Sistema de Catalogos de Postgres</title>
     <titleabbrev>Catalogs</titleabbrev>
     <tgroup cols="2">
      <thead>
       <row>
	<entry>Nombre del Catalogo</entry>
	<entry>Descriccion</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry>pg_database</entry>
	<entry> base de datos</entry>
       </row>
       <row>
	<entry>pg_class</entry>
	<entry> clases</entry>
       </row>
       <row>
	<entry>pg_attribute</entry>
	<entry> atributos de clases</entry>
       </row>
       <row>
	<entry>pg_index</entry>
	<entry> indices secundarios</entry>
       </row>
       <row>
	<entry>pg_proc</entry>
	<entry> procedimientos (ambos C y SQL)</entry>
       </row>
       <row>
	<entry>pg_type</entry>
	<entry> tipos (ambos base y complejo)</entry>
       </row>
       <row>
	<entry>pg_operator</entry>
	<entry> operadores</entry>
       </row>
       <row>
	<entry>pg_aggregate</entry>
	<entry> conjunto y conjunto de funciones</entry>
       </row>
       <row>
	<entry>pg_am</entry>
	<entry> metodo de acceso</entry>
       </row>
       <row>
	<entry>pg_amop</entry>
	<entry> operador de metodo de acceso</entry>
       </row>
       <row>
	<entry>pg_amproc</entry>
	<entry> soporte de operador de metodo de acceso</entry>
       </row>
       <row>
	<entry>pg_opclass</entry>
	<entry> operador de clases de metodo de acceso</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>

   <para>
    <figure float="1" id="EXTEND-CATALOGS">
     <title>El principal sistema de catalogo de <productname>Postgres</productname></title>
     <graphic fileref="catalogs.gif" format="GIF" align="center"></graphic>
    </figure>

    El manual de referencia da mas detalle de explicacion de estos catalogos
    y sus atributos. De cualquier manera, 
    <xref endterm="EXTEND-CATALOGS" linkend="EXTEND-CATALOGS">
    muestra su mayor entidades y sus relacionamiento en el sistema de catalogo.
    (Los atributos que no se refieren a otras entidades no son mostrados si no
    son parte primaria de la llave.
	
    Este diagrama puede ser mas o menos incomprensible hasta que realmente 
    comience a mirar los contenidos de los catalogos y vea como se 
    relacionan entre si. Por ahora, lo principal seguir este diagrama:
     
    <itemizedlist spacing="compact" mark="bullet">
     <listitem>
      <para>
       En varias de las secciones que vienen a continuacion, presentaremos 
       varias consultas compuestas en los catalogos del sistema que 
       presentan informacion que necesitamos para extender el sistema. 
       Mirado este diagrama podremos hacer que algunas de estas consultas 
       compuestas (que a menudo se componen de tres o cuatro partes) sean          Más comprensibles
       mas faciles de entender, dado que sera capaz de ver los atributos 
       usados en las claves importadas de los formularios de consulta de 
       otras clases.
      </para>
     </listitem>
     <listitem>
      <para>
       Muchas caracteristicas distintas (clases, atributos, funciones, tipos,
       metodos de acceso, etc) estan estrechamente relacionadas en este 
       esquema. Un simple comando de creacion puede modificar muchos de estos 
       catalogos.
      </para>
     </listitem>
     <listitem>
      <para>
       Los tipos y procedimientos son elementos fundamentales de este esquema.

       <note>
	<para>
	 Usamos las palabras <firstterm>procedure</firstterm> y 
	 <firstterm>function</firstterm> de forma mas o menos indistinta.
	</para>
       </note>
       Practicamente todo catalogo contiene alguna referencia a instancias
       en una o ambas clases. Por ejemplo, <productname>Postgres</productname>  
       frecuentemente usa firmas de tipo (por ejemplo, de funciones y  
       operadores) para identificar instancias unicas en otros catalogos.
      </para>
     </listitem>
     <listitem>
      <para>
       Hay muchos otros atributos y relaciones que tienen significados 
       obvios, pero hay otros muchos (particularmente aquellos que tienen que 
       ver con los metodos de acceso) que no los tienen. Las relaciones entre 
       pg_am,   pg_amop,   pg_amproc,  pg_operator  y pg_opclass son 
       particularmente dificiles de complrender, y seran descritas en 
       profundidad (en la seccion sobre tipos de interfase y operadores de 
       indice) antes de que estudiemos las extensiones basicas.
      </para>
     </listitem>
    </itemizedlist>
   </para>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"./reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/CATALOG"
sgml-local-ecat-files:nil
End:
-->
