 <chapter id="xfunc">
  <title id="xfunc-title">Extendiendo <acronym>SQL</acronym>: Funciones</title>

  <para>
   Parte de definir un tipo nuevo es la
   definición de funciones que describen su comportamiento.
   Como consecuencia, mientras que es posible definir una nueva
   función sin definir un tipo nuevo, lo contrario no es cierto.
   Por ello describimos como añadir nuevas funciones para 
   <productname>Postgres</productname> antes de describir cómo 
   añadir nuevos tipos.
  </para>

  <para>
   <productname>Postgres</productname>  <acronym>SQL</acronym>  
   proporciona  tres tipos de funciones:

   <itemizedlist>
    <listitem>
     <para>
      funciones de lenguaje de consultas 
      (funciones escritas en <acronym>SQL</acronym>)
     </para>
    </listitem>
    <listitem>
     <para>
      funciones de lenguaje procedural (funciones escritas en, por ejemplo, PLTCL o PLSQL)
     </para>
    </listitem>
    <listitem>
     <para>
      funciones de lenguaje de programación (funciones escritas en un lenguaje de programación compilado tales como <acronym>C</acronym>)
     </para>
    </listitem>
   </itemizedlist>

   Cada clase
   de función puede tomar un tipo base, un tipo compuesto
   o alguna combinación como argumentos (parámetros). Además,
   cada clase de funcón puede devolver un tipo base o
   un tipo compuesto. Es más fácil definir funciones <acronym>SQL</acronym>,
   así que empezaremos con ellas. Los ejemplos en esta sección
   se puede encontrar también en <filename>funcs.sql</filename>
   y <filename>funcs.c</filename>.   
  </para>

  <sect1>
   <title>Funciones de Lenguaje de Consultas (<acronym>SQL</acronym>) </title>

   <para>
    Las funciones SQL ejecutan una lista arbitraria de consultas SQL, devolviendo
    los resultados de la última consulta de la lista. Las funciones SQL en general
    devuelven conjuntos. Si su tipo de retorno no se especifica como un
    <literal>setof</literal>,
    entonces un elemento arbitrario del resultado de la última consulta será devuelto. </para>

   <para>
    El cuerpo de una función SQL que sigue a AS
    debería ser una lista de consultas separadas por caracteres espacio en blanco y
    entre paréntesis dentro de comillas simples. Notar que las comillas simples usadas en
    las consultas se deben escribir como símbolos de escape, precediéndolas con dos barras invertidas. 
   </para>

   <para>
    Los argumentos de la función SQL se pueden referenciar en las consultas usando
    una sintaxis $n: $1 se refiere al primer argumento, $2 al segundo, y así sucesivamente. Si un argumento es complejo, entonces una notación <firstterm>dot</firstterm> (por ejemplo "$1.emp") se puede
    usar para acceder a las propiedades o atributos del argumento o para llamar a funciones.
   </para>

   <sect2>
    <title>Ejemplos</title>

    <para>
     Para ilustrar una función SQL sencilla, considere lo siguiente,
     que se podría usar para cargar en una cuenta bancaria:

     <programlisting>
create function TP1 (int4, float8) returns int4
    as 'update BANK set balance = BANK.balance - $2
        where BANK.acctountno = $1
        select(x = 1)'
    language 'sql';
     </programlisting>

     Un usuario podría ejecutar esta función para cargar $100.00 en la cuenta 17 de
     la siguiente forma:
   

     <programlisting>
select (x = TP1( 17,100.0));
     </programlisting>
    </para>

    <para>
     El más interesante ejemplo siguiente toma una argumento sencillo de tipo
     EMP, y devuelve resultados múltiples:

     <programlisting>
select function hobbies (EMP) returns set of HOBBIES
    as 'select (HOBBIES.all) from HOBBIES
        where $1.name = HOBBIES.person'
    language 'sql';
     </programlisting>
    </para>
   </sect2>

   <sect2>
    <title>Funciones <acronym>SQL</acronym> sobre Tipos Base</title>

    <para>
     La función SQL más simple posible no tiene argumentos y 
     sencillamente devuelve un tipo base, tal como <literal>int4</literal>:
     
     <programlisting>
    CREATE FUNCTION one() RETURNS int4
     AS 'SELECT 1 as RESULT' LANGUAGE 'sql';

    SELECT one() AS answer;

         +-------+
         |answer |
         +-------+
         |1      |
         +-------+
     </programlisting>
    </para>
    <para>
     Notar que definimos una lista objetivo para la función
     (con el nombre RESULT), pero la lista objetivo de la
     consulta que llamó a la función sobreescribió la lista
     objetivo de la función. Por esto, el resultado se etiqueta answer
     en vez de one.
    </para>
    <para>
     Es casi tan fácil definir funciones <acronym>SQL</acronym>
     que tomen tipos base como argumentos. En el ejemplo de abajo, note
     cómo nos referimos a los argumentos dentro de la función como $1
     y $2:

     <programlisting>
    CREATE FUNCTION add_em(int4, int4) RETURNS int4
     AS 'SELECT $1 + $2;' LANGUAGE 'sql';

    SELECT add_em(1, 2) AS answer;

         +-------+
         |answer |
         +-------+
         |3      |
         +-------+
     </programlisting>
    </para>
   </sect2>

   <sect2>
    <title>Funciones <acronym>SQL</acronym> sobre Tipos Compuestos</title>

    <para>
     Al especificar funciones con argumentos de tipos compuestos
     (tales como EMP), debemos no solo especificar qué
     argumento queremos (como hicimos más arriba con $1 y $2) sino
     también los atributos de ese argumento. Por ejemplo,
     observe la función double_salary que procesa cual sería 
     su salario si se doblase:

     <programlisting>
    CREATE FUNCTION double_salary(EMP) RETURNS int4
     AS 'SELECT $1.salary * 2 AS salary;' LANGUAGE 'sql';

    SELECT name, double_salary(EMP) AS dream
     FROM EMP
     WHERE EMP.cubicle ~= '(2,1)'::point;
     

         +-----+-------+
         |name | dream |
         +-----+-------+
         |Sam  | 2400  |
         +-----+-------+
     </programlisting>
    </para>
    <para>
     Note el uso de la sintaxis $1.salary.
     Antes de adentrarnos en el tema de las funciones que
     devuelven tipos compuestos, debemos presentar primero la
     notación de la función para proyectar atributos. La forma sencilla
     de explicar esto es que podemos normalmente usar la
     notación atributo(clase) y clase.atributo indistintamente:

     <programlisting>
    --
    -- esto es lo mismo que:
    --  SELECT EMP.name AS youngster FROM EMP WHERE EMP.age &lt; 30
    --
    SELECT name(EMP) AS youngster
     FROM EMP
     WHERE age(EMP) &lt; 30;

         +----------+
         |youngster |
         +----------+
         |Sam       |
         +----------+
     </programlisting>
    </para>
    <para>
     Como veremos, sin embargo, no siempre es este el caso.
     Esta notación de función es importante cuando queremos usar
     una función que devuelva una única instancia. Hacemos esto
     embebiendo la instancia completa dentro de la función,
     atributo por atributo. Esto es un ejemplo de una función
     que devuelve una única instancia EMP:

     <programlisting>
    CREATE FUNCTION new_emp() RETURNS EMP
     AS 'SELECT \'None\'::text AS name,
      1000 AS salary,
      25 AS age,
       \'(2,2)\'::point AS cubicle'
      LANGUAGE 'sql';
     </programlisting>
    </para>
    <para>
     En este caso hemos especificado cada uno de los atributos
     con un valor constante, pero cualquier computación o expresión
     se podría haber sustituido por estas constantes.
     Definir una función como esta puede ser delicado. Algunos de
     las deficiencias más importantes son los siguientes:

     <itemizedlist>
      <listitem>
       <para>
        La orden de la lista objetivo debe ser exactamente la misma que
        aquella en la que los atributos aparezcan en la orden 
        CREATE TABLE (o cuando ejecute una consulta .*).
       </para>
      </listitem>
      <listitem>
       <para>
        Se debe encasillar las expresiones (usando ::) muy cuidadosamente
        o verá el siguiente error:

	<programlisting>
	 <computeroutput>
WARN::function declared to return type EMP does not retrieve (EMP.*)
	 </computeroutput>
	</programlisting>
       </para>
      </listitem>
      <listitem>
       <para>
        Al llamar a una función que devuelva una instancia, no
        podemos obtener la instancia completa. Debemos o bien 
        proyectar un atributo fuera de la instancia o bien pasar la
        instancia completa a otra función.

	<programlisting>
    SELECT name(new_emp()) AS nobody;

            +-------+
            |nobody |
            +-------+
            |None   |
            +-------+
	</programlisting>
       </para>
      </listitem>
      <listitem>
       <para>
        La razón por la que, en general, debemos usar la sintaxis de
        función para proyectar los atributos de los valores de retorno
        de la función es que el parser no comprende la otra sintaxis (dot)
        para la proyección cuando se combina con llamadas a funciones.

	<programlisting>
            SELECT new_emp().name AS nobody;
            WARN:parser: syntax error at or near "."
	</programlisting>
       </para>
      </listitem>
     </itemizedlist>
    </para>     
    <para>
     Cualquier colección de ordenes en el lenguaje de consulta
     <acronym>SQL</acronym> se pueden empaquetar juntas y se pueden
     definir como una función.
     Las ordenes pueden incluir updates (es decir, consultas <command>INSERT</command>, <command>UPDATE</command>, y
     <command>DELETE</command>) así como
     <command>SELECT</command>. Sin embargo, la orden final debe ser un
     <command>SELECT</command> que devuelva lo que se especifique como el
     tipo de retorno de la función.

     <programlisting>
    CREATE FUNCTION clean_EMP () RETURNS int4
     AS 'DELETE FROM EMP WHERE EMP.salary &lt;= 0;
    SELECT 1 AS ignore_this'
     LANGUAGE 'sql';

    SELECT clean_EMP();

         +--+
         |x |
         +--+
         |1 |
         +--+
         
     </programlisting>
    </para>
   </sect2>
  </sect1>

  <sect1>
   <title>Funciones de Lenguaje Procedural</title>

   <para>
    Los lenguajes procedurales no están construidos dentro de Postgres. Se proporcionan
    como módulos cargables. Por favor diríjase a la documentación para el
    PL en cuestión para los detalles sobre la sintaxis y cómo la cláusula
    AS se interpreta por el manejador del PL.
   </para>

   <para>
    Hay dos lenguajes procedurales disponibles con la distribución
    estándar de <productname>Postgres</productname> (PLTCL y PLSQL), y otros
    lenguajes se pueden definir.
    Diríjase a <xref linkend="xplang-title" endterm="xplang-title">
    para más información.
   </para>
  </sect1>

  <sect1>
   <title>Funciones Internas</title>

   <para>
    Las funciones internas son funciones escritas en C que han sido enlazadas
    estáticamente en el proceso backend de <productname>Postgres</productname>. La
    cláusula da el nombre en lenguaje C de la función, que no necesita ser el 
    mismo que el nombre que se declara para el uso de SQL.
    (Por razones de compatibilidad con versiones anteriores, una cadena AS vacía
    se acepta con el significado de que el nombre de la función en lenguaje C es 
    el mismo que el nombre en SQL.) Normalmente, todas las funciones internas 
    presentes en el backend se declaran como funciones SQL durante la inicialización
    de la base de datos, pero un usuario podría usar <command>CREATE FUNCTION</command>
    para crear nombres de alias adicionales para una función interna.
   </para>
  </sect1>

  <sect1>
   <title>Funciones de Lenguaje Compilado (C) </title>

   <para>
    Las funciones escritas en C se pueden compilar en objetos que se pueden
    cargar de forma dinámica, y usar para implementar funciones SQL definidas 
    por el usuario. La primera vez que la función definida por el usuario es 
    llamada dentro del backend, el cargador dinámico carga el código objeto de 
    la función en memoria, y enlaza la función con el ejecutable en ejecución de
    <productname>Postgres</productname>. La sintaxis SQL para <command>CREATE FUNCTION</command>
    enlaza la función SQL a la función en código C de una de dos formas.
    Si la función SQL tiene el mismo nombre que la función en código C se usa la 
    primera forma. El argumento cadena en la cláusula AS es el nombre de camino
    (pathname) completo del fichero que contiene el objeto compilado que se puede
    cargar de forma dinámica. Si el nombre de la función C es diferente del nombre
    deseado de la función SQL, entonces se usa la segunda forma. En esta forma la 
    cláusula AS toma dos argumentos cadena, el primero es el nombre del camino 
    completo del fichero objeto que se puede cargar de forma dinámica, y el segundo
    es el símbolo de enlace que el cargador dinámico debería buscar. Este símbolo   
    de enlace es solo el nombre de función en el código fuente C.

    <note>
     <para>
      Después de que se use por primera vez, una función de usuario, dinámicamente
      cargada, se retiene en memoria, y futuras llamadas a la función solo incurren
      en la pequeña sobrecarga de una búsqueda de tabla de símbolos.
     </para>
    </note>
   </para>

   <para>
    La cadena que especifica el fichero objeto (la cadena en la cláusula AS)
    debería ser el <emphasis>camino completo</emphasis> del fichero de código
    objeto para la función, unido por comillas simples. Si un símbolo de enlace
    se usa en la cláusula AS, el símbolo de enlace se debería unir por comillas
    simples también, y debería ser exactamente el mismo que el nombre de la función
    en el código fuente C. En sistemas Unix la orden <command>nm</command> imprimirá
    todos los símbolos de enlace de un objeto que se puede cargar de forma dinámica.
    (<productname>Postgres</productname> no compilará una función automáticamente; se
    debe compilar antes de que se use en una orden CREATE FUNCTION. Ver abajo para
    información adicional.)
   </para>

   <sect2>
    <title>Funciones de Lenguaje C sobre Tipos Base</title>

    <para>
     La tabla siguiente da el tipo C requerido para los parámetros en las funciones
     C que se cargarán en Postgres. La columna "Defined In" da el fichero de 
     cabecera real (en el directorio  <filename>.../src/backend/</filename>) en el
     que el tipo C equivalente se define. Sin embargo, si incluye <filename>utils/builtins.h</filename>,
     estos ficheros se incluirán de forma automática.

     <table tocentry="1">
      <title>Tipos de C equivalentes para los tipos internos de <productname>Postgres</productname></title>
      <titleabbrev>Tipos C equivalentes</titleabbrev>
      <tgroup cols="3">
       <thead>
	<row>
	 <entry>
	  Built-In Type
	 </entry>
	 <entry>
	  C Type
	 </entry>
	 <entry>
	  Defined In
	 </entry>
	</row>
       </thead>
       <tbody>
	<row>
	 <entry>abstime</entry>
	 <entry>AbsoluteTime</entry>
	 <entry>utils/nabstime.h</entry>
	</row>
	<row>
	 <entry>bool</entry>
	 <entry>bool</entry>
	 <entry>include/c.h</entry>
	</row>
	<row>
	 <entry>box</entry>
	 <entry>(BOX *)</entry>
	 <entry>utils/geo-decls.h</entry>
	</row>
	<row>
	 <entry>bytea</entry>
	 <entry>(bytea *)</entry>
	 <entry>include/postgres.h</entry>
	</row>
	<row>
	 <entry>char</entry>
	 <entry>char</entry>
	 <entry>N/A</entry>
	</row>
	<row>
	 <entry>cid</entry>
	 <entry>CID</entry>
	 <entry>include/postgres.h</entry>
	</row>
	<row>
	 <entry>datetime</entry>
	 <entry>(DateTime *)</entry>
	 <entry>include/c.h or include/postgres.h</entry>
	</row>
	<row>
	 <entry>int2</entry>
	 <entry>int2</entry>
	 <entry>include/postgres.h</entry>
	</row>
	<row>
	 <entry>int2vector</entry>
	 <entry>(int2vector *)</entry>
	 <entry>include/postgres.h</entry>
	</row>
	<row>
	 <entry>int4</entry>
	 <entry>int4</entry>
	 <entry>include/postgres.h</entry>
	</row>
	<row>
	 <entry>float4</entry>
	 <entry>float32 or (float4 *)</entry>
	<entry>include/c.h or include/postgres.h</entry>
	</row>
	<row>
	 <entry>float8</entry>
	 <entry>float64 or (float8 *)</entry>
	 <entry>include/c.h or include/postgres.h</entry>
	</row>
	<row>
	 <entry>lseg</entry>
	 <entry>(LSEG *)</entry>
	 <entry>include/geo-decls.h</entry>
	</row>
	<row>
	 <entry>name</entry>
	 <entry>(Name)</entry>
	 <entry>include/postgres.h</entry>
	</row>
	<row>
	 <entry>oid</entry>
	 <entry>oid</entry>
	 <entry>include/postgres.h</entry>
	</row>
	<row>
	 <entry>oidvector</entry>
	 <entry>(oidvector *)</entry>
	 <entry>include/postgres.h</entry>
	</row>
	<row>
	 <entry>path</entry>
	 <entry>(PATH *)</entry>
	 <entry>utils/geo-decls.h</entry>
	</row>
	<row>
	 <entry>point</entry>
	 <entry>(POINT *)</entry>
	 <entry>utils/geo-decls.h</entry>
	</row>
	<row>
	 <entry>regproc</entry>
	 <entry>regproc or REGPROC</entry>
	 <entry>include/postgres.h</entry>
	</row>
	<row>
	 <entry>reltime</entry>
	 <entry>RelativeTime</entry>
	 <entry>utils/nabstime.h</entry>
	</row>
	<row>
	 <entry>text</entry>
	 <entry>(text *)</entry>
	 <entry>include/postgres.h</entry>
	</row>
	<row>
	 <entry>tid</entry>
	 <entry>ItemPointer</entry>
	 <entry>storage/itemptr.h</entry>
	</row>
	<row>
	 <entry>timespan</entry>
	 <entry>(TimeSpan *)</entry>
	 <entry>include/c.h or include/postgres.h</entry>
	</row>
	<row>
	 <entry>tinterval</entry>
	 <entry>TimeInterval</entry>
	 <entry>utils/nabstime.h</entry>
	</row>
	<row>
	 <entry>uint2</entry>
	 <entry>uint16</entry>
	 <entry>include/c.h</entry>
	</row>
	<row>
	 <entry>uint4</entry>
	 <entry>uint32</entry>
	 <entry>include/c.h</entry>
	</row>
	<row>
	 <entry>xid</entry>
	 <entry>(XID *)</entry>
	 <entry>include/postgres.h</entry>
	</row>
       </tbody>
      </tgroup>
     </table>
    </para>

    <para>
     Internamente, <productname>Postgres</productname> considera un tipo base 
     como un "blob de memoria".
     Las funciones definidas por el usuario que usted define sobre un tipo
     en turn definen la forma en que <productname>Postgres</productname> puede operar
     sobre él. Esto es, <productname>Postgres</productname> solo almacenará y 
     recuperará los datos desde disco y solo usará sus funciones definidas por el
     usuario para introducir y procesar los datos, así como para obtener la salida
     de los datos. Los tipos base pueden tener uno de los tres formatos internos siguientes:

     <itemizedlist>
      <listitem>
       <para>
	pass by value, fixed-length
       </para>
      </listitem>
      <listitem>
       <para>
	pass by reference, fixed-length
       </para>
      </listitem>
      <listitem>
       <para>
	pass by reference, variable-length
       </para>
      </listitem>
     </itemizedlist>
    </para>

    <para>
     Los tipos por valor solo pueden tener 1, 2 o 4 bytes de longitud
     (incluso si su computadora soporta tipos por valor de otros 
     tamaños). <productname>Postgres</productname> mismo
     solo pasa los tipos entero por valor. Debería tener cuidado
     al definir sus tipos para que tengan el mismo tamaño (en bytes)
     en todas las arquitecturas. Por ejemplo, el tipo <literal>long</literal>
     es peligroso porque es de 4 bytes en algunas máquinas y de 8 bytes en otras,
     mientras que el tipo <literal>int</literal> es de 4 bytes en la mayoría de
     las máquinas Unix (aunque no en la mayoría de computadores personales). Una
     implementación razonable del tipo <literal>int4</literal> en las máquinas
     Unix podría ser:

     <programlisting>
/* 4-byte integer, passed by value */
typedef int int4;
     </programlisting>
    </para>

    <para>
     En el otro lado, los tipos de longitud fija de cualquier tamaño se pueden
     pasar por referencia. Por ejemplo, aquí se presenta una implementación
     de ejemplo de un tipo de <productname>Postgres</productname>:

     <programlisting>
/* 16-byte structure, passed by reference */
typedef struct
{
    double  x, y;
} Point;
     </programlisting>
    </para>

    <para>
     Solo los punteros a tales tipos se pueden usar a la hora de pasarlos
     como argumentos de entrada o de retorno en las funciones de <productname>Postgres</productname>. 
     Finalmente, todos los tipos de longitud variable se deben pasar también
     por referencia. Todos los tipos de longitud variable deben comenzar
     con un campo length de exactamente 4 bytes, y todos los datos
     que se tengan que almacenar dentro de ese tipo deben estar situados
     en la memoria inmediatamente a continuación de ese campo length.
     El campo length es la longitud total de la estructura (es decir,
     incluye el tamaño del campo length mismo). Podemos definir el tipo
     texto como sigue: 
 
     <programlisting>
typedef struct {
    int4 length;
    char data[1];
} text;
     </programlisting>
    </para>

    <para>
     Obviamente, el campo data no es suficientemente largo para almacenar
     todas las cadenas posibles; es imposible declarar tal estructura en <acronym>C</acronym>.
     Al manipular tipos de longitud variable, debemos tener cuidado de
     reservar la cantidad de memoria correcta y de inicializar el campo length.
     Por ejemplo, si quisiéramos almacenar 40 bytes en una estructura text, 
     podríamos usar un fragmento de código como este:

     <programlisting>
#include "postgres.h"
...
char buffer[40]; /* our source data */
...
text *destination = (text *) palloc(VARHDRSZ + 40);
destination-&gt;length = VARHDRSZ + 40;
memmove(destination-&gt;data, buffer, 40);
...
     </programlisting>
    </para>

    <para>
     Ahora que hemos visto todas las estructuras posibles para los tipos base,
     podemos mostrar algunos ejemplos de funciones reales.
     Suponga que <filename>funcs.c</filename> es así:

     <programlisting>
         #include &lt;string.h&gt;
         #include "postgres.h"

         /* By Value */
         
         int
         add_one(int arg)
         {
             return(arg + 1);
         }
         
         /* By Reference, Fixed Length */
         
         Point *
         makepoint(Point *pointx, Point *pointy )
         {
             Point     *new_point = (Point *) palloc(sizeof(Point));
        
             new_point->x = pointx->x;
             new_point->y = pointy->y;
                
             return new_point;
         }
        
         /* By Reference, Variable Length */
         
         text *
         copytext(text *t)
         {
             /*
              * VARSIZE is the total size of the struct in bytes.
              */
             text *new_t = (text *) palloc(VARSIZE(t));
             memset(new_t, 0, VARSIZE(t));
             VARSIZE(new_t) = VARSIZE(t);
             /*
              * VARDATA is a pointer to the data region of the struct.
              */
             memcpy((void *) VARDATA(new_t), /* destination */
                    (void *) VARDATA(t),     /* source */
                    VARSIZE(t)-VARHDRSZ);        /* how many bytes */
             return(new_t);
         }
         
         text *
         concat_text(text *arg1, text *arg2)
         {
             int32 new_text_size = VARSIZE(arg1) + VARSIZE(arg2) - VARHDRSZ;
             text *new_text = (text *) palloc(new_text_size);

             memset((void *) new_text, 0, new_text_size);
             VARSIZE(new_text) = new_text_size;
             strncpy(VARDATA(new_text), VARDATA(arg1), VARSIZE(arg1)-VARHDRSZ);
             strncat(VARDATA(new_text), VARDATA(arg2), VARSIZE(arg2)-VARHDRSZ);
             return (new_text);
         }
     </programlisting>
    </para>

    <para>
     On <acronym>OSF/1</acronym> we would type:
     
     <programlisting>
         CREATE FUNCTION add_one(int4) RETURNS int4
              AS '<replaceable>PGROOT</replaceable>/tutorial/funcs.so' LANGUAGE 'c';

         CREATE FUNCTION makepoint(point, point) RETURNS point
              AS '<replaceable>PGROOT</replaceable>/tutorial/funcs.so' LANGUAGE 'c';
    
         CREATE FUNCTION concat_text(text, text) RETURNS text
              AS '<replaceable>PGROOT</replaceable>/tutorial/funcs.so' LANGUAGE 'c';
                                  
         CREATE FUNCTION copytext(text) RETURNS text
              AS '<replaceable>PGROOT</replaceable>/tutorial/funcs.so' LANGUAGE 'c';
     </programlisting>
    </para>

    <para>
     En otros sistemas, podríamos tener que especificar la extensión del nombre
     del fichero como .sl (para indicar que es una librería (o biblioteca) compartida).
    </para>
   </sect2>

   <sect2>
    <title>Funciones del Lenguaje C sobre Tipos Compuestos</title>

    <para>
     Los tipos compuestos no tienen un formato fijo como las estructuras de C.
     Las instancias de un tipo compuesto pueden contener campos null. Además,
     los tipos compuestos que son parte de una jerarquía de herencia pueden 
     tener campos diferentes respecto a otros miembros de la misma jerarquía de herencia.
     Por ello, <productname>Postgres</productname> proporciona una interfaz
     procedural para acceder a los campos de los tipos compuestos desde C.
     Cuando <productname>Postgres</productname> procesa un conjunto de instancias,
     cada instancia se pasará a su función como una estructura opaca de tipo
     <literal>TUPLE</literal>. Suponga que queremos escribir una función para
     responder a la consulta

     <programlisting>
         * SELECT name, c_overpaid(EMP, 1500) AS overpaid
           FROM EMP
           WHERE name = 'Bill' or name = 'Sam';
     </programlisting>

     En la consulta anterior, podemos definir c_overpaid como:
     
     <programlisting>
         #include "postgres.h"
         #include "executor/executor.h"  /* for GetAttributeByName() */
         
         bool
         c_overpaid(TupleTableSlot *t, /* the current instance of EMP */
                    int4 limit)
         {
             bool isnull = false;
             int4 salary;
             salary = (int4) GetAttributeByName(t, "salary", &amp;isnull);
             if (isnull)
                 return (false);
             return(salary &gt; limit);
         }
     </programlisting>
    </para>

    <para>
     <function>GetAttributeByName</function> es la función de sistema de
     <productname>Postgres</productname> que devuelve los atributos fuera de
     la instancia actual. Tiene tres argumentos: el argumento de tipo TUPLE 
     pasado a la función, el nombre del atributo deseado, y un parámetro de retorno
     que describe si el atributo es null. <function>GetAttributeByName</function> alineará
     los datos apropiadamente de forma que usted pueda convertir su valor de retorno
     al tipo deseado. Por ejemplo, si tiene un atributo name que es del tipo name,
     la llamada a <function>GetAttributeByName</function> sería así:

     <programlisting>
         char *str;
         ...
         str = (char *) GetAttributeByName(t, "name", &amp;isnull)
     </programlisting>
    </para>

    <para>
     La consulta siguiente permite que <productname>Postgres</productname> conozca a la función c_overpaid:

     <programlisting>
         * CREATE FUNCTION c_overpaid(EMP, int4) RETURNS bool
              AS '<replaceable>PGROOT</replaceable>/tutorial/obj/funcs.so' LANGUAGE 'c';
     </programlisting>
    </para>

    <para>
     Aunque hay formas de construir nuevas instancias o de modificar las instancias
     existentes desde dentro de una función C, éstas son demasiado complejas
     para discutirlas en este manual.
    </para>
   </sect2>

   <sect2>
    <title>Escribiendo código</title>

    <para>
     Ahora volvemos a la tarea más difícil de escribir funciones del lenguaje
     de programación. Aviso: esta sección del manual no le hará un programador.
     Debe tener un gran conocimiento de <acronym>C</acronym> (incluyendo el uso
     de punteros y el administrador de memoria malloc) antes de intentar escribir
     funciones <acronym>C</acronym> para usarlas con <productname>Postgres</productname>.
     Aunque sería posible cargar funciones escritas en lenguajes distintos a <acronym>C</acronym>
     en <productname>Postgres</productname>, eso es a menudo difícil (cuando es
     posible hacerlo completamente) porque otros lenguajes, tales como <acronym>FORTRAN</acronym>
     y <acronym>Pascal</acronym> a menudo no siguen la misma <firstterm>convención de 
     llamada</firstterm> que <acronym>C</acronym>. Esto es, otros lenguajes no 
     pasan argumentos y devuelven valores entre funciones de la misma forma. Por
     esta razón, asumiremos que las funciones de su lenguaje de programación están
     escritas en <acronym>C</acronym>.
    </para>

    <para>
     Las funciones C con tipos base como argumentos se pueden escribir de una
     forma sencilla. Los equivalentes C de los tipos internos de Postgres
     son accesibles en un fichero C si
     <filename><replaceable>PGROOT</replaceable>/src/backend/utils/builtins.h</filename>
     se incluye como un fichero de cabecera. Esto se puede conseguir escribiendo

     <programlisting>
#include &lt;utils/builtins.h&gt;
     </programlisting>

     al principio del fichero fuente C.
    </para>

    <para>
     Las reglas básicas para construir funciones <acronym>C</acronym> son las siguientes:

     <itemizedlist>
      <listitem>
       <para>
        La mayoría de los ficheros cabecera (include) para 
	<productname>Postgres</productname>
	deberían      estar     ya     instalados     en
	<filename><replaceable>PGROOT</replaceable>/include</filename>  (ver  Figura  2).
	Debería incluir siempre

	<programlisting>
-I$PGROOT/include
	</programlisting>

	en sus líneas de llamada a cc.  A veces, podría
        encontrar que necesita ficheros cabecera que están en
        el código fuente del servidor mismo (es decir, necesita un fichero
        que no hemos instalado en include). En esos
        casos puede necesitar añadir uno o más de

	<programlisting>
-I$PGROOT/src/backend
-I$PGROOT/src/backend/include
-I$PGROOT/src/backend/port/&lt;PORTNAME&gt;
-I$PGROOT/src/backend/obj
	</programlisting>

	(donde &lt;PORTNAME&gt; es el nombre del puerto, por ejemplo,
	alpha or sparc).
       </para>
      </listitem>
      <listitem>
       <para>
        Al reservar memoria, use las rutinas de
	<productname>Postgres</productname>
        palloc y pfree en vez de las
        rutinas de la librería de C correspondientes
        malloc y free.
        La memoria reservada por palloc se liberará
        automáticamente al final de cada transacción,
        previniendo fallos de memoria.	
       </para>
      </listitem>
      <listitem>
       <para>
        Siempre céntrese en los bytes de sus estructuras usando
        memset o bzero. Varias rutinas (tales como el 
        método de acceso hash, hash join y el algoritmo sort)
        computan funciones de los bits puros contenidos en
        su estructura. Incluso si usted inicializa todos los campos
        de su estructura, puede haber 
        varios bytes de relleno de alineación (agujeros en la 
        estructura) que pueden contener valores incorrectos o basura.
       </para>
      </listitem>
      <listitem>
       <para>
            La mayoría de los tipos internos de <productname>Postgres</productname>
        se declaran en <filename>postgres.h</filename>,
            por eso es una buena
        idea incluir siempre ese fichero también. Incluyendo 
        postgres.h incluirá también elog.h y palloc.h por usted.
       </para>
      </listitem>
      <listitem>
       <para>
        Compilar y cargar su código objeto para que
        se pueda cargar dinámicamente en
	<productname>Postgres</productname>
	siempre requiere flags (o banderas) especiales.
	Ver <xref linkend="dfunc-title" endterm="dfunc-title">
	para una explicación detallada de cómo hacerlo para 
        su sistema operativo concreto.
       </para>
      </listitem>
     </itemizedlist>
    </para>
   </sect2>
  </sect1>

  <sect1>
   <title>Sobrecarga de funciones</title>

   <para>
    Se puede definir más de una función con el mismo nombre, siempre que
    los argumentos que tomen sean diferentes. En otras palabras, los nombres de las funciones
    se pueden <firstterm>sobrecargar</firstterm>.
    Una función puede tener además el mismo nombre que un atributo. En el caso
    de que haya ambigüedad entre una función sobre un tipo complejo y
    un atributo del tipo complejo, se usará siempre el atributo.
   </para>

   <sect2>
    <title>Conflictos en el Espacio de Nombres</title>

    <para>
     A partir de <productname>Postgres</productname> v6.6, la forma
     alternativa de la cláusula AS para la orden 
     de SQL <command>CREATE FUNCTION</command>
     desempareja el nombre de la función SQL del nombre de función en el 
     código fuente C. Esta es ahora la técnica preferida para realizar
     la sobrecarga de funciones.
    </para>

    <sect3>
     <title>Pre-v6.6</title>

     <para>
      Para funciones escritas en C, el nombre SQL declarado en 
      <command>CREATE FUNCTION</command>
      debe ser exactamente el mismo que el nombre real de la función en el
      código C (debido a esto debe ser un nombre de función de C legal).
     </para>

     <para>
      Hay una sutil consecuencia de este restricción: mientras las
      rutinas de carga dinámicas en la mayoría de los sistemas operativos están mas que
      felices de permitirle cargar cualquier número de librerías compartidas que
      contienen nombres de funciones conflictivos (con idénticos nombres), pueden,
      de hecho, chapucear la carga de formas interesantes. Por ejemplo, si usted
      define una función dinámicamente cargada que resulta tener el 
      mismo nombre que una función perteneciente a Postgres, el cargador DEC OSF/1
      dinámico hace que Postgres llame a la función dentro de él mismo preferiblemente a
      dejar que Postgres llame a su función. Por esto, si quiere que su función
      se use en diferentes arquitecturas, recomendamos que 
      no sobrecargue los nombres de las funciones C.
     </para>

     <para>
      Hay un truco ingenioso para resolver el problema que se acaba de describir.
      Dado que no hay problemas al sobrecargar funciones SQL, usted puede
      definir un conjunto de funciones C con nombres diferentes y entonces definir
      un conjunto de funciones SQL con idénticos nombres que tomen los 
      tipos de argumentos apropiados y llamen a la función C correspondiente. 
     </para>

     <para>
      Otra solución es no usar la carga dinámica, sino enlazar sus
      funciones al backend státicamente y declararlas como funciones 
      INTERNAL. Entonces, las funciones deben tener todas nombres C distintos pero
      se pueden declarar con los mismos nombres SQL (siempre que los tipos
      de sus argumentos difieran, por supuesto). Esta forma evita la sobrecarga de
      una función wrapper (o envolvente) SQL, con la desventaja de un mayor esfuerzo para preparar un 
      ejecutable del backend a medida. (Esta opción está disponible sólo en la versión 
      6.5 y posteriores, dado que las versiones anteriores requerían funciones internas para
      tener el mismo nombre en SQL que en el código C.)
     </para>
    </sect3>
   </sect2>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"./reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/CATALOG"
sgml-local-ecat-files:nil
End:
-->
