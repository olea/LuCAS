 <chapter id="functions">
  <title id="functions-title">Funciones</title>

  <abstract>
   <para>
    Describe las funciones built-in disponibles en <productname>Postgres</productname>.
   </para>
  </abstract>

  <para>
   Están disponibles muchos tipos de datos para la conversión a otros tipos relacionados. En adición, existen algunos tipos específicos de funciones. Algunas funciones tambien estan disponibles através de operadores y pueden ser documentadas solo como operadores.

  </para>

  <sect1>
   <title id="sql-funcs">Funciones SQL </title>

   <para>
    <quote>Funciones <acronym>SQL</acronym></quote> son contrucciones definidas por el standart <acronym>SQL92</acronym>, que tiene sintaxis igual que funciones pero que no pueden ser implementadas como simples funciones.
   </para>

   <para>
    <table tocentry="1">
     <title>Funciones SQL</title>
     <tgroup cols="4">
      <thead>
       <row>
	<entry>Funciones</entry>
	<entry>Retorna</entry>
	<entry>Descripcion</entry>
	<entry>Ejemplo</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry> COALESCE(<replaceable class="parameter">list</replaceable>) </entry>
	<entry> no-NULO </entry>
	<entry> retorna el primer valor no-NULO en la lista </entry>
	<entry> COALESCE(<replaceable class="parameter">r"</replaceable>le>, <replaceable
	  class="parameter">c2</replaceable> + 5, 0) </entry>
       </row>
       <row>
	<entry> NULLIF(<replaceable class="parameter">input</replaceable>,<replaceable class="parameter">value</replaceable>) </entry>
	<entry> <replaceable class="parameter">input</replaceable> or NULO </entry>
	<entry> retorna NULO si <replaceable class="parameter">input</replaceable> = <replaceable class="parameter">value</replaceable> </entry>
	<entry> NULLIF(<replaceable class="parameter">c1</replaceable>, 'N/A')</entry>
       </row>
       <row>
	<entry> CASE WHEN <replaceable class="parameter">expr</replaceable> THEN <replaceable class="parameter">expr</replaceable> [...] ELSE <replaceable class="parameter">expr</replaceable> END </entry>
	<entry> <replaceable class="parameter">expr</replaceable> </entry>
	<entry> retorna la expresión para la primera claúsula verdadera </entry>
	<entry> CASE WHEN <replaceable class="parameter">c1</replaceable> = 1 THEN 'match' ELSE 'no match' END </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
  </sect1>

  <sect1>
   <title id="math-funcs">Funciones Matemáticas</title>

   <para>
    <table tocentry="1">
     <title>Funciones Matemáticas</title>
     <tgroup cols="4">
      <thead>
       <row>
	<entry>Funciones</entry>
	<entry>Retorna</entry>
	<entry>Descripcion</entry>
	<entry>Ejemplo</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry> dexp(float8) </entry>
	<entry> float8 </entry>
	<entry> redimensiona al exponente especificado </entry>
	<entry> dexp(2.0) </entry>
       </row>
       <row>
	<entry> dpow(float8,float8) </entry>
	<entry> float8 </entry>
	<entry> redimensiona un numero al exponente especificado </entry>
	<entry> dpow(2.0, 16.0) </entry>
       </row>
       <row>
	<entry> float(int) </entry>
	<entry> float8 </entry>
	<entry> convierte un entero a punto flotante
 </entry>
	<entry> float(2) </entry>
       </row>
       <row>
	<entry> float4(int) </entry>
	<entry> float4 </entry>
	<entry> convierte un entero a punto flotante
</entry>
	<entry> float4(2) </entry>
       </row>
       <row>
	<entry> integer(float) </entry>
	<entry> int </entry>
	<entry> convierte un punto flotante a entero 
</entry>
	<entry> integer(2.0) </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
  </sect1>

  <sect1>
   <title>String Functions</title>

   <para>
    SQL92 define funciones de texto con sintaxis específica. Algunas son implementadas usando otras funciones <productname>Postgres</productname> Los tipos de Texto soportados para <acronym>SQL92</acronym> son <type>char</type>, <type>varchar</type>, y <type>text</type>.
   </para>

   <para>
    <table tocentry="1">
     <title><acronym>SQL92</acronym> String Functions</title>
     <tgroup cols="4">
      <thead>
       <row>
	<entry>Funciones</entry>
	<entry>Retorna</entry>
	<entry>Descripcion</entry>
	<entry>Ejemplo</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry> char_length(string) </entry>
	<entry> int4 </entry>
	<entry> longitud del texto</entry>
	<entry> char_length('jose') </entry>
       </row>
       <row>
	<entry> character_length(string) </entry>
	<entry> int4 </entry>
	<entry> longitud del texto </entry>
	<entry> char_length('jose') </entry>
       </row>
       <row>
	<entry> lower(string) </entry>
	<entry> string </entry>
	<entry> convierte el texto a minúsculas </entry>
	<entry> lower('TOM') </entry>
       </row>
       <row>
	<entry> octet_length(string) </entry>
	<entry> int4 </entry>
	<entry> almacena el tamaño del texto  </entry>
	<entry> octet_length('jose') </entry>
       </row>
       <row>
	<entry> position(string in string) </entry>
	<entry> int4 </entry>
	<entry> localiza la posición de un subtexto especificado</entry>
	<entry> position('o' in 'Tom') </entry>
       </row>
       <row>
	<entry> substring(string [from int] [for int]) </entry>
	<entry> string </entry>
	<entry> extrae un subtexto especificado  </entry>
	<entry> substring('Tom' from 2 for 2) </entry>
       </row>
       <row>
	<entry> trim([leading|trailing|both] [string] from string) </entry>
	<entry> string </entry>
	<entry> borra caracteres de un texto
 </entry>
	<entry> trim(both 'x' from 'xTomx') </entry>
       </row>
       <row>
	<entry> upper(text) </entry>
	<entry> text </entry>
	<entry> convierte un texto a mayúsculas </entry>
	<entry> upper('tom') </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>

   <para>
    La mayoría de funciones de texto están disponibles para tipos text, varchar() y char ().Algunas son usadas internamente para implementar las funciones de texto SQL92 descritas arriba
.
   </para>

   <para>
    <table tocentry="1">
     <title>Funciones de Texto</title>
     <tgroup cols="4">
      <thead>
       <row>
	<entry>Funciones</entry>
	<entry>Retorna</entry>
	<entry>Descripcion</entry>
	<entry>Ejemplo</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry> char(text) </entry>
	<entry> char </entry>
	<entry> convierte un texto a tipo char</entry>
	<entry> char('text string') </entry>
       </row>
       <row>
	<entry> char(varchar) </entry>
	<entry> char </entry>
	<entry> convierte un varchar a tipo char </entry>
	<entry> char(varchar 'varchar string') </entry>
       </row>
       <row>
	<entry> initcap(text) </entry>
	<entry> text </entry>
	<entry> primera letra de cada palabra a mayúsculas</entry>
	<entry> initcap('thomas') </entry>
       </row>
       <row>
	<entry> lpad(text,int,text) </entry>
	<entry> text </entry>
	<entry> relleno de caracteres por la izquierda a la longitud especificada </entry>
	<entry> lpad('hi',4,'??') </entry>
       </row>
       <row>
	<entry> ltrim(text,text) </entry>
	<entry> text </entry>
	<entry> recorte de caracteres por la izquierda del texto </entry>
	<entry> ltrim('xxxxtrim','x') </entry>
       </row>
       <row>
	<entry> textpos(text,text) </entry>
	<entry> text </entry>
	<entry> localiza un subtexto especificado</entry>
	<entry> position('high','ig') </entry>
       </row>
       <row>
	<entry> rpad(text,int,text) </entry>
	<entry> text </entry>
	<entry> relleno de caracteres por la derecha a la longitud especificada </entry>
	<entry> rpad('hi',4,'x') </entry>
       </row>
       <row>
	<entry> rtrim(text,text) </entry>
	<entry> text </entry>
	<entry> recorte de caracteres por la derecha del texto </entry>
	<entry> rtrim('trimxxxx','x') </entry>
       </row>
       <row>
	<entry> substr(text,int[,int]) </entry>
	<entry> text </entry>
	<entry> extrae el subtexto especificado</entry>
	<entry> substr('hi there',3,5) </entry>
       </row>
       <row>
	<entry> text(char) </entry>
	<entry> text </entry>
	<entry> convierte char a tipo text</entry>
	<entry> text('char string') </entry>
       </row>
       <row>
	<entry> text(varchar) </entry>
	<entry> text </entry>
	<entry> convierte varchar a tipo text </entry>
	<entry> text(varchar 'varchar string') </entry>
       </row>
       <row>
	<entry> translate(text,from,to) </entry>
	<entry> text </entry>
	<entry> convierte character a string </entry>
	<entry> translate('12345', '1', 'a') </entry>
       </row>
       <row>
	<entry> varchar(char) </entry>
	<entry> varchar </entry>
	<entry> convierte char a tipo varchar</entry>
	<entry> varchar('char string') </entry>
       </row>
       <row>
	<entry> varchar(text) </entry>
	<entry> varchar </entry>
	<entry> convierte text a tipo varchar</entry>
	<entry> varchar('text string') </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>

   <para>
    La mayoría de funciones explicitamente definidas para texto trabajarán para argumentos char () y varchar().
   </para>
  </sect1>

  <sect1>
   <title>Funciones de Fecha/Hora</title>

   <para>
    Las funciones de Fecha/Hora provee un poderoso conjunto de herramientas para manipular varios tipos Date/Time.
   </para>

   <para>
    <table tocentry="1">
     <title>Date/Time Functions</title>
     <tgroup cols="4">
      <thead>
       <row>
	<entry>Funciones</entry>
	<entry>Retorna</entry>
	<entry>Descripcion</entry>
	<entry>Ejemplo</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry> abstime(datetime) </entry>
	<entry> abstime </entry>
	<entry> convierte a abstime  </entry>
	<entry> abstime('now'::datetime) </entry>
       </row>
       <row>
	<entry> age(datetime,datetime) </entry>
	<entry> timespan </entry>
	<entry> preserva meses y años </entry>
	<entry> age('now','1957-06-13'::datetime) </entry>
       </row>
       <row>
	<entry> datetime(abstime) </entry>
	<entry> datetime </entry>
	<entry> convierte abstime a datetime </entry>
	<entry> datetime('now'::abstime) </entry>
       </row>
       <row>
	<entry> datetime(date) </entry>
	<entry> datetime </entry>
	<entry> convierte date a datetime </entry>
	<entry> datetime('today'::date) </entry>
       </row>
       <row>
	<entry> datetime(date,time) </entry>
	<entry> datetime </entry>
	<entry> convierte adatetime </entry>
	<entry> datetime('1998-02-24'::datetime, '23:07'::time); </entry>
  </row>
       <row>
	<entry> date_part(text,datetime) </entry>
	<entry> float8 </entry>
	<entry> porción de fecha</entry>
	<entry> date_part('dow','now'::datetime) </entry>
       </row>
       <row>
	<entry> date_part(text,timespan) </entry>
	<entry> float8 </entry>
	<entry> porción de hora</entry>
	<entry> date_part('hour','4 hrs 3 mins'::timespan) </entry>
       </row>
       <row>
	<entry> date_trunc(text,datetime) </entry>
	<entry> datetime </entry>
	<entry> fecha truncada </entry>
	<entry> date_trunc('month','now'::abstime) </entry>
       </row>
       <row>
	<entry> isfinite(abstime) </entry>
	<entry> bool </entry>
	<entry> un tiempo finito ? </entry>
	<entry> isfinite('now'::abstime) </entry>
       </row>
       <row>
	<entry> isfinite(datetime) </entry>
	<entry> bool </entry>
	<entry> una hora finita ? </entry>
	<entry> isfinite('now'::datetime) </entry>
       </row>
       <row>
	<entry> isfinite(timespan) </entry>
	<entry> bool </entry>
	<entry> una hora finita ? </entry>
	<entry> isfinite('4 hrs'::timespan) </entry>
       </row>
       <row>
	<entry> reltime(timespan) </entry>
	<entry> reltime </entry>
	<entry> convierte a reltime </entry>
	<entry> reltime('4 hrs'::timespan) </entry>
       </row>
       <row>
	<entry> timespan(reltime) </entry>
	<entry> timespan </entry>
	<entry> convierte a timespan </entry>
	<entry> timespan('4 hours'::reltime) </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>

   <para>
    Para las funciones 
    <function>date_part</function> and <function>date_trunc</function>, los argumentos pueden ser `year', `month', `day', `hour', `minute', y `second', asi como las mas especializadas cantidades `decade', `century', `millenium', `millisecond', y `microsecond'.
    <function>date_part</function> permite `dow' para retornar el día de la semana `epoch' para retornar los segundos desde 1970 (para <type>datetime</type>) o 'epoch' para retornar el total de segundos transcurridos(para <type>timespan</type>
   </para>
  </sect1>

  
  <sect1>

   <title id="formatting-funcs"> Funciones de Formato</title>

   <note>
    <title>Author</title>
    <para>
     Written by 
     <ulink url="mailto:zakkr@zf.jcu.cz">Karel Zak</ulink>
     on 2000-01-24.
    </para>
   </note>

   <para>
    Las funciones de formato proveen un poderoso conjunto de herramientas para convertir varios datetypes (date/time, int, float, numeric) a texto formateado y convertir de texto formateado a su datetypes original. 
   </para>

   <para>
    <table tocentry="1">
     <title>Funciones de Formato</title>
     <tgroup cols="4">
      <thead>
       <row>
	<entry>Funciones</entry>
	<entry>Retorna</entry>
	<entry>Descripcion</entry>
	<entry>Ejemplo</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry> to_char(datetime, text) </entry>
	<entry> text </entry>
	<entry> convierte datetime a string </entry>
	<entry> to_char('now'::datetime, 'HH12:MI:SS') </entry>
       </row>
       <row>
	<entry> to_char(timestamp, text) </entry>
	<entry> text </entry>
	<entry> convierte timestamp a string </entry>
	<entry> to_char( now(), 'HH12:MI:SS') </entry>
       </row>
       <row>
	<entry> to_char(int, text) </entry>
	<entry> text </entry>
	<entry> convierte int4/int8 a string </entry>
	<entry> to_char(125, '999') </entry>
       </row>
       <row>
	<entry> to_char(float, text) </entry>
	<entry> text </entry>
	<entry> convierte float4/float8 a string </entry>
	<entry> to_char(125.8, '999D9') </entry>
       </row>
       <row>
	<entry> to_char(numeric, text) </entry>
	<entry> text </entry>
	<entry> convierte numeric a string </entry>
	<entry> to_char(-125.8, '999D99S') </entry>
       </row>       
       <row>
	<entry> to_datetime(text, text) </entry>
	<entry> datetime </entry>
	<entry> convierte string a datetime </entry>
	<entry> to_datetime('05 Dec 2000 13', 'DD Mon YYYY HH') </entry>
       </row>
       <row>
	<entry> to_date(text, text) </entry>
	<entry> date </entry>
	<entry> convierte string a date </entry>
	<entry> to_date('05 Dec 2000', 'DD Mon YYYY') </entry>
       </row>
       <row>
	<entry> to_timestamp(text, text) </entry>
	<entry> date </entry>
	<entry> convierte string a timestamp </entry>
	<entry> to_timestamp('05 Dec 2000', 'DD Mon YYYY') </entry>
       </row>
       <row>
	<entry> to_number(text, text) </entry>
	<entry> numeric </entry>
	<entry> convierte string a numeric </entry>
	<entry> to_number('12,454.8-', '99G999D9S') </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>

   <para>
    Para todas las funciones de formato, el segundo argumento es format-picture. 
   </para>

   <para>
    <table tocentry="1">
     <title>Format-pictures para date/time to_char() versión.</title>
     <tgroup cols="2">
      <thead>
       <row>
	<entry>Format-picture</entry>
	<entry>Descripción</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry> HH </entry>
	<entry> hora del día(01-12) </entry>
       </row>
       <row>
	<entry> HH12 </entry>
	<entry> hora del día(01-12) </entry>
       </row>       
       <row>
	<entry> MI </entry>
	<entry> minuto (00-59) </entry>
       </row>   
       <row>
	<entry> SS </entry>
	<entry> segundos (00-59) </entry>
       </row>
       <row>
	<entry> SSSS </entry>
	<entry> segundos pasados la medianoche(0-86399) </entry>
       </row>
       <row>
	<entry> Y,YYY </entry>
	<entry> año(4 o mas dígitos) con coma </entry>
       </row>
       <row>
	<entry> YYYY </entry>
	<entry> año(4 o mas dígitos)  </entry>
       </row>
       <row>
	<entry> YYY </entry>
	<entry> últimos 3 dígitos del año</entry>
       </row>
       <row>
	<entry> YY </entry>
	<entry> últimos 2 dígitos del año</entry>
       </row>
       <row>
	<entry> Y </entry>
	<entry> último dígito del año</entry>
       </row>
       <row>
	<entry> MONTH </entry>
	<entry> nombre completo del mes(9-letras) - todos los caracteres en mayúsculas </entry>
       </row>
       <row>
	<entry> Month </entry>
	<entry> nombre completo del mes(9-letras) - el primer carácter en mayúsculas</entry>
       </row>
       <row>
	<entry> month </entry>
	<entry> nombre completo del mes(9-letras) - todos los caracteres en minúsculas</entry>
       </row>
       <row>
	<entry> MON </entry>
	<entry> nombre abreviado del mes(3-letras) -todos los caracteres en mayúsculas </entry>
       </row>
       <row>
	<entry> Mon </entry>
	<entry> nombre abreviado del mes(3-letras) - el primer carácter en mayúsculas</entry>
       </row>
       <row>
	<entry> mon </entry>
	<entry> nombre abreviado del mes(3-letras) - todos los caracteres en minúsculas</entry>
       </row>
       <row>
	<entry> MM </entry>
	<entry> mes (01-12) </entry>
       </row>
       <row>
	<entry> DAY </entry>
	<entry> nombre completo del día(9-letters) - todos los caracteres en mayúsculas</entry>
       </row>
       <row>
	<entry> Day </entry>
	<entry> nombre completo del día(9-letters) - el primer carácter en mayúsculas</entry>
       </row>
       <row>
	<entry> day </entry>
	<entry> nombre completo del día(9-letters) - todos los caracteres en minúsculas</entry>
       </row>
       <row>
	<entry> DY </entry>
	<entry> nombre abreviado del día(3-letters) - todos los caracteres en mayúsculas</entry>
       </row>
       <row>
	<entry> Dy </entry>
	<entry> nombre abreviado del día(3-letters) - el primer carácter en mayúsculas</entry>
       </row>
       <row>
	<entry> dy </entry>
	<entry> nombre abreviado del día(3-letters) - todos los caracteres en minúsculas</entry>
       </row>
       <row>
	<entry> DDD </entry>
	<entry> día del año(001-366) </entry>
       </row>
       <row>
	<entry> DD </entry>
	<entry> día del mes(01-31)  </entry>
       </row>
       <row>
	<entry> D </entry>
	<entry> día de la semana(1-7; SUN=1) </entry>
       </row>
       <row>
	<entry> W </entry>
	<entry> semana del mes </entry>
       </row> 
       <row>
	<entry> WW </entry>
	<entry> número de la semana en el año</entry>
       </row>
       <row>
	<entry> CC </entry>
	<entry> centuria (2-digits) </entry>
       </row>
       <row>
	<entry> J </entry>
	<entry> día juliano(dias desde Enero 1, 4712 BC)  </entry>
       </row>
       <row>
	<entry> Q </entry>
	<entry> quarter </entry>
       </row>
       <row>
	<entry> RM </entry>
	<entry> mes en númeral romano(I-XII; I=ENE) </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>

   <para>
    Todos los format-pictures permiten usar sufijos (postfix / prefix). El sufijo es valido para una near format-picture. El 'FX' es solo prefijo global.
   </para>

   <para>
    <table tocentry="1">
     <title>Suffixes para format-pictures para date/time to_char() version.</title>
     <tgroup cols="3">
      <thead>
       <row>
	<entry>Sufijo</entry>
	<entry>Descripción</entry>
	<entry>Ejemplo</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry> FM </entry>
	<entry> modo rellenado- prefix </entry>
	<entry> FMMonth </entry>
       </row>
       <row>
	<entry> TH </entry>
	<entry> numero ordinal superior - postfix </entry>
	<entry> DDTH </entry>
       </row>	
       <row>
	<entry> th </entry>
	<entry> numero ordinal inferior - postfix </entry>
	<entry> DDTH </entry>
       </row>
       <row>
	<entry> FX </entry>
	<entry> FX - (Fixed format) conmutador global de  format-picture . 
	 The TO_DATETIME / TO_DATE salta los espacios en blanco si esta opción no es usada. Debe ser usada como primer item en formt-picture. </entry>
	<entry> FX Month DD Day </entry>
       </row>	
       <row>
	<entry> SP </entry>
	<entry> spell mode (not implement now)</entry>
	<entry> DDSP </entry>
       </row>       
      </tbody>
     </tgroup>
    </table>
   </para>

   <para>
     '\' - debe ser usado como doble \\, ejemplo '\\HH\\MI\\SS' 
   </para>
   <para>
     '"' - el texto entre comillas es saltado y no retocado. 
     Si quieres escribir ' " ' a la salida debes usar \\", ejemplo ' \\"YYYY Month\\" '. .
   </para>
   <para>
     text - el to_char()de PostgreSQL soporta texto sin '"', pero el texto entre las comillas es mas rápido y tienes la seguridad que el texto no será interpretado como keyword (format-picture), ejemplo '"Hello Year: "YYYY'. .  
   </para>
   
   <para>
    <table tocentry="1">
     <title>Format-pictures para number (int/float/numeric) to_char() version.</title>
     <tgroup cols="2">
      <thead>
       <row>
	<entry>Format-picture</entry>
	<entry>Descripción</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry> 9 </entry>
	<entry> valor retornado con el número especificado de dígitos y si no estan disponibles usa espacios en blanco</entry>
       </row>
       <row>
	<entry> 0 </entry>
	<entry> como 9, pero en lugar de espacios en blanco usa ceros</entry>
       </row>
       <row>
	<entry> . (period) </entry>
	<entry> punto decimal</entry>
       </row>       
       <row>
	<entry> , (comma) </entry>
	<entry> separador de grupo (miles) </entry>
       </row>
       <row>
	<entry> PR </entry>
	<entry> retorna el valor negativo en angle brackets </entry>
       </row>
       <row>
	<entry> S </entry>
	<entry> retorna el valor negativo con el signo menos (usa locales) </entry>
       </row>
       <row>
	<entry> L </entry>
	<entry> símbolo monetario (usa locales)  </entry>
       </row>
       <row>
	<entry> D </entry>
	<entry> punto decimal (usa locales) </entry>
       </row>
       <row>
	<entry> G </entry>
	<entry> separador de grupos (usa locales) </entry>
       </row>
       <row>
	<entry> MI </entry>
	<entry> retorna el signo menos en la posición especificada (si número < 0) </entry>
       </row>
       <row>
	<entry> PL </entry>
	<entry> retorna el signo mas en la posición especificada (si número > 0) - PostgreSQL extension </entry>
       </row>
       <row>
	<entry> SG </entry>
	<entry> retorna el signo mas/menos en la posición especificada - PostgreSQL extension </entry>
       </row>
       <row>
	<entry> RN </entry>
	<entry> retorna el número como número romano(número debe ser entre1 y 3999)  </entry>
       </row>
       <row>
	<entry> TH or th </entry>
	<entry> convierte el número a número ordinal (no convertir números menores que cero y números decimales) - PostgreSQL extension </entry>
       </row>
       <row>
	<entry> V </entry>
	<entry> arg1 * (10 ^ n); - retorna un valor multiplicado por 10^n (donde 'n' es número de '9's despues de 'V'). El to_char() no soporta el uso de 'V' y punto decimal juntos, ejemplo "99.9V99". </entry>
       </row>
       <row>
	<entry> EEEE </entry>
	<entry> numeros cientificos . ahora no soportados. </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>

   <para>
      Note: Un signo formateado via 'SG', 'PL' o 'MI' is not anchor in number;
      to_char(-12, 'S9999') produce: <ProgramListing> '  -12' </ProgramListing>, 
      but to_char(-12, 'MI9999') produce: <ProgramListing> '-  12' </ProgramListing>. 
      Oracle no permite usar 'MI' delante de  '9', en Oracle tiene que ser siempre despues de '9'.
   </para>   

   <para>
    <table tocentry="1">
     <title> El to_char() en ejemplos. </title>
     <tgroup cols="2">
      <thead>
       <row>
	<entry>Input</entry>
	<entry>Output</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry> to_char(now(), 'Day, HH12:MI:SS') </entry>
        <entry><ProgramListing> 'Tuesday  , 05:39:18' </ProgramListing></entry>
       </row>   
       <row>
        <entry> to_char(now(), 'FMDay, HH12:MI:SS') </entry>
        <entry><ProgramListing> 'Tuesday, 05:39:18' </ProgramListing></entry>
       </row>          
       <row>
        <entry> to_char( -0.1, '99.99') </entry>
        <entry><ProgramListing> ' -.10' </ProgramListing></entry>
       </row>
       <row>
        <entry> to_char( -0.1, 'FM9.99') </entry>
        <entry><ProgramListing> '-.1' </ProgramListing></entry>
       </row>
       <row>
        <entry> to_char( 0.1, '0.9') </entry>
        <entry><ProgramListing> ' 0.1' </ProgramListing></entry>
       </row>
       <row>
        <entry> to_char( 12, '9990999.9') </entry>
        <entry><ProgramListing> '    0012.0' </ProgramListing></entry>
       </row>
       <row>
        <entry> to_char( 12, 'FM9990999.9') </entry>
        <entry><ProgramListing> '0012' </ProgramListing></entry>
       </row>
       <row>
        <entry> to_char( 485, '999') </entry>
        <entry><ProgramListing> ' 485' </ProgramListing></entry>
       </row>
       <row>
        <entry> to_char( -485, '999') </entry>
        <entry><ProgramListing> '-485' </ProgramListing></entry>
       </row>
       <row>
        <entry> to_char( 485, '9 9 9') </entry>
        <entry><ProgramListing> ' 4 8 5' </ProgramListing></entry>
       </row>
       <row>
        <entry> to_char( 1485,	'9,999') </entry>	
        <entry><ProgramListing> ' 1,485' </ProgramListing></entry>
       </row>
       <row>
        <entry> to_char( 1485,	'9G999') </entry>
        <entry><ProgramListing> ' 1 485' </ProgramListing></entry>
       </row>
       <row>
        <entry> to_char( 148.5, '999.999') </entry>
        <entry><ProgramListing> ' 148.500' </ProgramListing></entry>
       </row>
       <row>
        <entry> to_char( 148.5, '999D999') </entry>
        <entry><ProgramListing> ' 148,500' </ProgramListing></entry>	 
       </row>
       <row>
        <entry> to_char( 3148.5,'9G999D999') </entry>
        <entry><ProgramListing> ' 3 148,500' </ProgramListing></entry>
       </row>
       <row>
        <entry> to_char( -485,	'999S') </entry>
        <entry><ProgramListing> '485-'	</ProgramListing></entry>
       </row>
       <row>		
        <entry> to_char( -485,	'999MI') </entry>
        <entry><ProgramListing> '485-'	</ProgramListing></entry>	
       </row>
       <row>
        <entry> to_char( 485,	'999MI') </entry>
        <entry><ProgramListing> '485' </ProgramListing></entry>		
       </row>
       <row>
        <entry> to_char( 485,	'PL999') </entry>
        <entry><ProgramListing> '+485'	</ProgramListing></entry>	
       </row>
       <row>		
        <entry> to_char( 485,	'SG999') </entry>
        <entry><ProgramListing> '+485'	</ProgramListing></entry>	
       </row>
       <row>
        <entry> to_char( -485,	'SG999') </entry>
        <entry><ProgramListing> '-485'	</ProgramListing></entry>	
       </row>
       <row>
        <entry> to_char( -485,	'9SG99') </entry>
        <entry><ProgramListing> '4-85'	</ProgramListing></entry>	
       </row>
       <row>
        <entry> to_char( -485,	'999PR') </entry>
        <entry><ProgramListing> '<485>' </ProgramListing></entry>		
       </row>
       <row>
        <entry> to_char( 485,	'L999')	</entry>
        <entry><ProgramListing> 'DM 485' </ProgramListing></entry>	 
       </row>
       <row>
        <entry> to_char( 485,	'RN') </entry>		
        <entry><ProgramListing> '        CDLXXXV' </ProgramListing></entry>
       </row>
       <row>
        <entry> to_char( 485,	'FMRN')	</entry>	
        <entry><ProgramListing> 'CDLXXXV' </ProgramListing></entry>
       </row>
       <row>
        <entry> to_char( 5.2,	'FMRN')	</entry>
        <entry><ProgramListing> 'V' </ProgramListing></entry>		
       </row>
       <row>
        <entry> to_char( 482,	'999th') </entry>
        <entry><ProgramListing> ' 482nd' </ProgramListing></entry>				
       </row>
       <row>
        <entry> to_char( 485,	'"Good number:"999') </entry>
        <entry><ProgramListing> 'Good number: 485' </ProgramListing></entry>
       </row>
       <row>
        <entry> to_char( 485.8, '"Pre-decimal:"999" Post-decimal:" .999') </entry>
        <entry><ProgramListing> 'Pre-decimal: 485 Post-decimal: .800' </ProgramListing></entry>
       </row>
       <row>
        <entry> to_char( 12, '99V999') </entry>		
        <entry><ProgramListing> ' 12000' </ProgramListing></entry>
       </row>
       <row>
        <entry> to_char( 12.4, '99V999') </entry>
        <entry><ProgramListing> ' 12400' </ProgramListing></entry>
       </row>
       <row>		
        <entry> to_char( 12.45, '99V9') </entry>
        <entry><ProgramListing> ' 125' </ProgramListing></entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>

  </sect1>



  <sect1>
   <title>Funciones Geométricas</title>

   <para>
    Los tipos geométricos point, box, lseg, line, path, polygon, and circle tienen un gran conjunto de funciones nativas soportadas.
   </para>

   <para>
    <table tocentry="1">
     <title>Funciones Geométricas</title>
     <tgroup cols="4">
      <thead>
       <row>
	<entry>Funciones</entry>
	<entry>Retorna</entry>
	<entry>Descripcion</entry>
	<entry>Ejemplo</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry> area(box) </entry>
	<entry> float8 </entry>
	<entry> área del rectangulo </entry>
	<entry> area('((0,0),(1,1))'::box) </entry>
       </row>
       <row>
	<entry> area(circle) </entry>
	<entry> float8 </entry>
	<entry> área del circulo </entry>
	<entry> area('((0,0),2.0)'::circle) </entry>
       </row>
       <row>
	<entry> box(box,box) </entry>
	<entry> box </entry>
	<entry> rectangulo de intersección de rectangulos </entry>
	<entry> box('((0,0),(1,1))','((0.5,0.5),(2,2))') </entry>
       </row>
       <row>
	<entry> center(box) </entry>
	<entry> point </entry>
	<entry> centro del objeto </entry>
	<entry> center('((0,0),(1,2))'::box) </entry>
       </row>
       <row>
	<entry> center(circle) </entry>
	<entry> point </entry>
	<entry> centro del objeto </entry>
	<entry> center('((0,0),2.0)'::circle) </entry>
       </row>
       <row>
	<entry> diameter(circle) </entry>
	<entry> float8 </entry>
	<entry> diametro del circulo </entry>
	<entry> diameter('((0,0),2.0)'::circle) </entry>
       </row>
       <row>
	<entry> height(box) </entry>
	<entry> float8 </entry>
	<entry> tamaño vertical del rectangulo </entry>
	<entry> height('((0,0),(1,1))'::box) </entry>
       </row>
       <row>
	<entry> isclosed(path) </entry>
	<entry> bool </entry>
	<entry> ruta cerrada ?  </entry>
	<entry> isclosed('((0,0),(1,1),(2,0))'::path) </entry>
       </row>
       <row>
	<entry> isopen(path) </entry>
	<entry> bool </entry>
	<entry> ruta abierta ? </entry>
	<entry> isopen('[(0,0),(1,1),(2,0)]'::path) </entry>
       </row>
       <row>
	<entry> length(lseg) </entry>
	<entry> float8 </entry>
	<entry> longitud de la linea segmento </entry>
	<entry> length('((-1,0),(1,0))'::lseg) </entry>
       </row>
       <row>
	<entry> length(path) </entry>
	<entry> float8 </entry>
	<entry> longitud de la ruta </entry>
	<entry> length('((0,0),(1,1),(2,0))'::path) </entry>
       </row>
       <row>
	<entry> pclose(path) </entry>
	<entry> path </entry>
	<entry> convierte path a closed </entry>
	<entry> popen('[(0,0),(1,1),(2,0)]'::path) </entry>
       </row>
       <row>
	<entry> point(lseg,lseg) </entry>
	<entry> point </entry>
	<entry> intersección  </entry>
	<entry> point('((-1,0),(1,0))'::lseg,'((-2,-2),(2,2))'::lseg) </entry>
       </row>
       <row>
	<entry> points(path) </entry>
	<entry> int4 </entry>
	<entry> número de puntos</entry>
	<entry> points('[(0,0),(1,1),(2,0)]'::path) </entry>
       </row>
       <row>
	<entry> popen(path) </entry>
	<entry> path </entry>
	<entry> convierte path a open </entry>
	<entry> popen('((0,0),(1,1),(2,0))'::path) </entry>
       </row>
       <row>
	<entry> radius(circle) </entry>
	<entry> float8 </entry>
	<entry> radio del círculo </entry>
	<entry> radius('((0,0),2.0)'::circle) </entry>
       </row>
       <row>
	<entry> width(box) </entry>
	<entry> float8 </entry>
	<entry> tamaño horizontal </entry>
	<entry> width('((0,0),(1,1))'::box) </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>

   <para>
    <table tocentry="1">
     <title> Funciones de conversión de tipos Geométricos
</title>
     <tgroup cols="4">
      <thead>
       <row>
	<entry>Funciones</entry>
	<entry>Retorna</entry>
	<entry>Descripcion</entry>
	<entry>Ejemplo</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry> box(circle) </entry>
	<entry> box </entry>
	<entry> convierte circulo a rectangulo </entry>
	<entry> box('((0,0),2.0)'::circle) </entry>
       </row>
       <row>
	<entry> box(point,point) </entry>
	<entry> box </entry>
	<entry> convierte puntos a rectangulo </entry>
	<entry> box('(0,0)'::point,'(1,1)'::point) </entry>
       </row>
       <row>
	<entry> box(polygon) </entry>
	<entry> box </entry>
	<entry> convierte poligono a rectangulo </entry>
	<entry> box('((0,0),(1,1),(2,0))'::polygon) </entry>
       </row>
       <row>
	<entry> circle(box) </entry>
	<entry> circle </entry>
	<entry> convierte a circulo </entry>
	<entry> circle('((0,0),(1,1))'::box) </entry>
       </row>
       <row>
	<entry> circle(point,float8) </entry>
	<entry> circle </entry>
	<entry> convierte a circulo </entry>
	<entry> circle('(0,0)'::point,2.0) </entry>
       </row>
       <row>
	<entry> lseg(box) </entry>
	<entry> lseg </entry>
	<entry> convierte diagonal a lseg </entry>
	<entry> lseg('((-1,0),(1,0))'::box) </entry>
       </row>
       <row>
	<entry> lseg(point,point) </entry>
	<entry> lseg </entry>
	<entry> convierte a lseg </entry>
	<entry> lseg('(-1,0)'::point,'(1,0)'::point) </entry>
       </row>
       <row>
	<entry> path(polygon) </entry>
	<entry> point </entry>
	<entry> convierte a path </entry>
	<entry> path('((0,0),(1,1),(2,0))'::polygon) </entry>
       </row>
       <row>
	<entry> point(circle) </entry>
	<entry> point </entry>
	<entry> convierte a punto (centro) </entry>
	<entry> point('((0,0),2.0)'::circle) </entry>
       </row>
       <row>
	<entry> point(lseg,lseg) </entry>
	<entry> point </entry>
	<entry> convierte a punto (intersección) </entry>
	<entry> point('((-1,0),(1,0))'::lseg, '((-2,-2),(2,2))'::lseg) </entry>
       </row>
       <row>
	<entry> point(polygon) </entry>
	<entry> point </entry>
	<entry> centro de poligono </entry>
	<entry> point('((0,0),(1,1),(2,0))'::polygon) </entry>
       </row>
       <row>
	<entry> polygon(box) </entry>
	<entry> polygon </entry>
	<entry> convierte a poligono con 12 puntos </entry>
	<entry> polygon('((0,0),(1,1))'::box) </entry>
       </row>
       <row>
	<entry> polygon(circle) </entry>
	<entry> polygon </entry>
	<entry> convierte a poligono con 12 puntos </entry>
	<entry> polygon('((0,0),2.0)'::circle) </entry>
       </row>
       <row>
	<entry> polygon(<replaceable class="parameter">npts</replaceable>,circle) </entry>
	<entry> polygon </entry>
	<entry> convierte a poligono <replaceable class="parameter">npts</replaceable>  </entry>
	<entry> polygon(12,'((0,0),2.0)'::circle) </entry>
       </row>
       <row>
	<entry> polygon(path) </entry>
	<entry> polygon </entry>
	<entry> convierte a polygon </entry>
	<entry> polygon('((0,0),(1,1),(2,0))'::path) </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>

   <para>
    <table tocentry="1">
     <title>Funciones de Actualización Geométrica
</title>
     <tgroup cols="4">
      <thead>
       <row>
	<entry>Funciones</entry>
	<entry>Retorna</entry>
	<entry>Descripcion</entry>
	<entry>Ejemplo</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry> isoldpath(path) </entry>
	<entry> path </entry>
	<entry> test path for pre-v6.1 form </entry>
	<entry> isoldpath('(1,3,0,0,1,1,2,0)'::path) </entry>
       </row>
       <row>
	<entry> revertpoly(polygon) </entry>
	<entry> polygon </entry>
	<entry> convierte pre-v6.1 polygon </entry>
	<entry> revertpoly('((0,0),(1,1),(2,0))'::polygon) </entry>
       </row>
       <row>
	<entry> upgradepath(path) </entry>
	<entry> path </entry>
	<entry> convierte pre-v6.1 path </entry>
	<entry> upgradepath('(1,3,0,0,1,1,2,0)'::path) </entry>
       </row>
       <row>
	<entry> upgradepoly(polygon) </entry>
	<entry> polygon </entry>
	<entry> convierte pre-v6.1 polygon </entry>
	<entry> upgradepoly('(0,1,2,0,1,0)'::polygon) </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
  </sect1>

  <sect1>
   <title id="cidr-funcs">Funciones PostgresIP V4 </title>

   <para>
    <table tocentry="1">
     <title>Funciones<productname>Postgres</productname>IP V4 </title>
     <tgroup cols="4">
      <thead>
       <row>
	<entry>Funciones</entry>
	<entry>Retorna</entry>
	<entry>Descripcion</entry>
	<entry>Ejemplo</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry> broadcast(cidr) </entry>
	<entry> text </entry>
	<entry> contruye la dirección broadcast como texto</entry>
	<entry> broadcast('192.168.1.5/24') </entry>
       </row>
       <row>
	<entry> broadcast(inet) </entry>
	<entry> text </entry>
	<entry> contruye la dirección broadcast como texto</entry>
	<entry> broadcast('192.168.1.5/24') </entry>
       </row>
       <row>
	<entry> host(inet) </entry>
	<entry> text </entry>
	<entry> extrae la dirección host como texto</entry>
	<entry> host('192.168.1.5/24') </entry>
       </row>
       <row>
	<entry> masklen(cidr) </entry>
	<entry> int4 </entry>
	<entry> calcula la longitud del netmask </entry>
	<entry> masklen('192.168.1.5/24') </entry>
       </row>
       <row>
	<entry> masklen(inet) </entry>
	<entry> int4 </entry>
	<entry> calcula la longitud del netmask </entry>
	<entry> masklen('192.168.1.5/24') </entry>
       </row>
       <row>
	<entry> netmask(inet) </entry>
	<entry> text </entry>
	<entry> contruye el netmask como texto</entry>
	<entry> netmask('192.168.1.5/24') </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>

  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"./reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->
