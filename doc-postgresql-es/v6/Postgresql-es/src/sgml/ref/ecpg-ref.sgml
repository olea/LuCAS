<!--
$Header: /home/cvs/lucas/doc-postgresql-es/v6/Postgresql-es/src/sgml/ref/ecpg-ref.sgml,v 1.5 2001/04/21 22:12:33 olea Exp $
Postgres documentation
-->

<refentry id="APP-ECPG">
 <refmeta>
  <refentrytitle id="app-ecpg-title">
   <application>ecpg</application>
  </refentrytitle>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>
 <refnamediv>
  <refname>
   <application>ecpg</application>
  </refname>
  <refpurpose>
   Embedded SQL C preprocessor
(preprocesador C incorporado en SQL)
  </refpurpose>
 </refnamediv>
 <refsynopsisdiv>
  <refsynopsisdivinfo>
   <date>1999-07-20</date>
  </refsynopsisdivinfo>
  <synopsis>
ecpg [ -v ] [ -t ] [ -I include-path ] [ -o outfile ]  file1 [ file2 ] [ ... ]
  </synopsis>

  <refsect2 id="R2-APP-ECPG-1">
   <refsect2info>
    <date>1999-07-20</date>
   </refsect2info>
   <title>
    Inputs
   </title>
   <para>
    <application>ecpg</application> acepta los siguiente argumentos en 
    línea de comandos:

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">file</replaceable></term>
      <listitem>
       <para>
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </refsect2>

  <refsect2 id="R2-APP-ECPG-2">
   <refsect2info>
    <date>1998-11-05</date>
   </refsect2info>
   <title>
    Outputs
   </title>
   <para>
    <application>ecpg</application> creará un fichero o 
    escribirá en <filename>stdout</filename> (salida estándar).

    <variablelist>
     <varlistentry>
      <term><computeroutput>
       </computeroutput></term>
      <listitem>
       <para>
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </refsect2>
 </refsynopsisdiv>

 <refsect1 id="R1-APP-ECPG-1">
  <refsect1info>
   <date>1998-11-05</date>
  </refsect1info>
  <title>
   Descripción
  </title>
  <para>
<!--
.TH ECPG UNIX 11/28/98 PostgreSQL \fIPostgreSQL\fP
.SH NAME
ecpg - preprocesador C / PostgreSQL embebido en SQL
.SH SYNOPSIS
.\" \fBecpg\fR [-v ] [-t] [-I include-path ] [-o outfile ]  file1 [ file2 ] [ ... ]
\fBecpg\fR [-v ] [-t] [-I include-path ] [-o outfile ]  file1 [ file2 ] [ ... ]
.SH DESCRIPTION
.B \fIecpg\fP
es un preprocesador para C / PostgreSQL embebido en SQL. Permite 
el desarrollo de programs en lenguaje C con código SQL embebido.
.PP
.B \fIecpg\fP
últimamente intenta ser lo más compatible posible con el estándar          
ANSI SQL-2 y paquetes comerciales ESQL/C existentes.                                               
.SH OPTIONS
.B \fIecpg\fP
interpreta los flags siguientes cuando es invocado                
desde la línea de comandos:
.PP
.PD 0
.TP 10
.BI \-v 
Muestra información de versión. 
.PD
.TP
.B \-t
Inhibe el modo off auto-transaction.
.PD
.TP
.PD
.TP
.B \-I include-path
Especifica caminos a include adicionales. Por defecto son \.,
/usr/local/include, el path a include de PostgreSQL, que se define en tiempo de compilación
 (default: /usr/local/pgsql/lib), /usr/include
.PD
.TP
.B \-o
Especifica que ecpg debe escribir todas sus salidas a un fichero.
Si no se da esta opción, la salida se escribe a foo.c
(si al fichero de entrada se le nombró como foo.pgc.)
Si al fichero de entrada se le llamó foo.bar, al de salida se le 
llamará foo.bar.c. 
.PD
.TP
.B file1, file2...
Los ficheros que se van a procesar.
.\" 
.SH INSTALLATION
El
.B \fIecpg\fP
preprocesador se construye durante la instalación de PostgreSQL. Los binarios y 
librerías se instalan en subdirectorios PGBASE (por ejemplo, /usr/local/pgsql/... ) 
.
.SH PREPROCESAMIENTO PARA COMPILACION
.B \fIecpg\fP
.\" (-d ) (-o file) file.pgc ( 2> ecpf.log)
(-o file) file.pgc 
.LP
.\" El flag opcional \-d activa la depuración (debugging) y 2> ecpg.log
.\" redirige la salida del debug.  La extensión .pgc es una manera  
.\" arbitraria de denotar la fuente ecpg.
La extensión .pgc es una manera arbitraria de denotar la fuente de ecpg.
.SH COMPILANDO Y ENLAZANDO
Asumiendo que los binarios \fIPostgreSQL\fP están en /usr/local/pgsql:
.LP
gcc -g -i /usr/local/pgsql/include (-o file) file.c 
-L /usr/local/pgsql/lib -lecpg -lpq
.SH GRAMATICA DE ECPG 
.LP
.SH LIBRERIAS
.LP
El preprocesador pondrá dos directivas a la fuente:
.LP
\fI#include <ecpgtype.h>\fP y \fI#include <ecpglib.h>\fP
.SH DECLARACION DE VARIABLES  
Las variables declaradas dentro del código fuente de ecpg deben estar precedidas con:
.LP
EXEC SQL BEGIN DECLARE SECTION;  
.LP        
Del mismo modo, las secciones de declaración de variables deben terminar con:
.LP
EXEC SQL END DECLARE SECTION;
.LP        
NOTA: Antes de la versión 2.1.0, cada variable debía ser declarada  
en una línea separada.  A partir de la versión 2.1.0 múltiples variables pueden 
ser declaradas en una única línea:
.LP
char  foo(16), bar(16);
.LP       
.SH MANEJO DE ERRORES
El área de comunicación SQL se define con:
.LP
EXEC SQL INCLUDE sqlca;
.LP
NOTA: Las minúsculas en `sqlca'.  Mientras se puede seguir la convención SQL, 
usando mayúsculas para, por ejemplo,  separar SQL embebido  
de las declaraciones en C, sqlca (que incluye el fichero de cabecera sqlca.h)  
DEBE ir en minúsculas.  Esto es así porque el prefijo EXEC SQL
indica que este INCLUDE será examinado por ecpg.
ecpg es sensible a mayúsculas y minúsculas (SQLCA.h no será encontrado). 
EXEC SQL INCLUDE puede ser usado para incluir otros ficheros de cabecera 
siempre y cuando se tengan en cuenta las mayúsculas y minúsculas.
.LP
El comando sqlprint se utiliza con la declaración EXEC SQL WHENEVER
para activar el manejo de errores a lo largo del programa:
.LP
EXEC SQL WHENEVER sqlerror sqlprint;
.LP
EXEC SQL WHENEVER not found sqlprint;
.LP
POR FAVOR, TENGA EN CUENTA que esto *no* es un ejemplo exhaustivo del uso de 
la declaración EXEC SQL WHENEVER.  Se pueden encontrar más ejemplos de su uso 
en manuales de SQL (por ejemplo, `The LAN TIMES Guide to SQL' de
Groff y Weinberg.)
.LP
.SH CONEXION AL SERVIDOR DE BASES DE DATOS
Antes de la versión 2.1.0 el nombre de la base de datos se ponía con comillas simples:
.RS
EXEC SQL CONNECT 'test1';
.RE
.LP
A partir de la versión 2.1.0, la sintaxis se ha simplificado:
.LP
.RS
EXEC SQL CONNECT test1;
.RE
(no se rodea con comillas el nombre de la base de datos).
.LP
Especificar un servidor y puerto en la declaración de conexión es también posible
a partir de la versión 6.4. de PostgreSQL. La sintaxis es:
.LP
.RS
dbname[@server][:port]
.RE
.LP
or
.LP
.RS
<tcp|unix>:postgresql://server[:port][/dbname][?options]
.RE
.SH CONSULTAS
.LP
.SS Crear tabla:
.LP
EXEC SQL CREATE TABLE foo (number int4, ascii char(16));  
.RS
EXEC SQL CREATE UNIQUE index num1 on foo(number); 
.RE
EXEC SQL COMMIT;
.LP 
.SS Insertar:
.LP
EXEC SQL INSERT INTO foo (number, ascii)
.RS
VALUES (9999, 'doodad');
.RE
EXEC SQL COMMIT;
.LP
.SS Borrar:
.LP
EXEC SQL DELETE FROM foo
.RS
WHERE number = 9999;   
.RE
EXEC SQL COMMIT;
.LP
.SS Select simple:
.LP
EXEC SQL SELECT foo INTO :FooBar FROM table1
.RS
WHERE ascii = 'doodad';  
.RE
.LP
.SS Select usando cursores:
.LP
EXEC SQL DECLARE foo_bar CURSOR FOR     
.RS
SELECT number, ascii FROM foo    
.RS
ORDER BY ascii;
.RE
.RE
EXEC SQL FETCH foo_bar INTO :FooBar, DooDad;
.LP
...
EXEC SQL CLOSE foo_bar;
.RS
EXEC SQL COMMIT;
.RE
.LP
.SS Actualizaciones:
.LP
EXEC SQL UPDATE foo
.RS
SET ascii = 'foobar'
.RE
.RS
WHERE number = 9999;
.RE
EXEC SQL COMMIT;
.LP
.SH BUGS
.LP
The is no EXEC SQL PREPARE statement.
.LP
La definición de la estructura completa DEBE ser listada
dentro de la sección de declaración.
.LP
Vea el fichero TODO en las fuentes para enterarse de algunas carencias.
.LP
.SH "VALORES DEVUELTOS"
.LP
ecpg devuelve 0 al shell si todo ha ido bien, -1
cuando hay errores.
.LP
.SH "VEA TAMBIEN"
.PD 0
.TP
\fIcc\fP(1), \fIpgintro\fP(l), \fIcommit\fP(l), \fIdelete\fP(l)
.TP
\fIfetch\fP(l), \fIselect\fP(l), \fIsql\fP(l) , \fIupdate\fP(l)
.PD
.SH FILES
.PD 0
.TP
.B /usr/src/pgsql/postgresql-${ver}/src/interfaces...
 ./ecpg/include.......fuentes de \fIecpg\fP header files.
 ./ecpg/lib...........fuentes de \fIecpg\fP libraries.
 ./ecpg/preproc.......fuentes de \fIecpg\fP header files.
 ./ecpg/test..........fuentes de \fIecpg\fP libraries.
 (test contiene ejemplos de sintaxis para ecpg SQL-C.)
.PD
.TP
.B /usr/local/pgsql/bin 
\fIPostgreSQL\fP binaries including \fIecpg\fP.
.PD
.TP
.B /usr/local/pgsql/include 
\fIPostgreSQL\fP headers including \fIecpglib.h\fP \fIecpgtype.h\fP 
and \fIsqlca.h\fP.
.PD
.TP
.B /usr/local/pgsql/lib 
\fIPostgreSQL\fP libraries including \fIlibecpg.a\fP and 
\fIlibecpg.so\fP.
.SH AUTHORS
Linus Tolke \fI<linus@epact.se>\fP
- autor original de ECPG (up to version 0.2).
.br
.PP
Michael Meskes \fI<meskes@debian.org>\fP
- autor actual y encargado de mantener ECPG.
.br
.PP
Thomas Good \fI<tomg@q8.nrnet.org>\fP
- autor de esta revisión del man para ecpg.
.br
.zZ
-->

  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->
