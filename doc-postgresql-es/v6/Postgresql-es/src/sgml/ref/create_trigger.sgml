<!--
$Header: /home/cvs/lucas/doc-postgresql-es/v6/Postgresql-es/src/sgml/ref/create_trigger.sgml,v 1.5 2001/04/21 22:12:33 olea Exp $
Postgres documentation
-->

<refentry id="SQL-CREATETRIGGER">
 <refmeta>
  <refentrytitle id="SQL-CREATETRIGGER-TITLE">
   CREATE TRIGGER
  </refentrytitle>
  <refmiscinfo>SQL - Elementos del lenguaje</refmiscinfo>
 </refmeta>
 <refnamediv>
  <refname>
   CREATE TRIGGER
  </refname>
  <refpurpose>
   Crea un nuevo disparador
  </refpurpose>
 </refnamediv>
 <refsynopsisdiv>
  <refsynopsisdivinfo>
   <date>1999-07-20</date>
  </refsynopsisdivinfo>
  <synopsis>
CREATE TRIGGER <replaceable class="PARAMETER">name</replaceable>
  { BEFORE | AFTER } { <replaceable class="PARAMETER">event</replaceable>
  [OR ...] } ON <replaceable class="PARAMETER">table</replaceable>
  FOR EACH { ROW | STATEMENT } EXECUTE PROCEDURE
  <replaceable class="PARAMETER">ER">func</replaceable>BLE>
  ( <replaceable class="PARAMETER">arguments</replaceable> )</synopsis>
  
  <refsect2 id="R2-SQL-CREATETRIGGER-1">
   <refsect2info>
    <date>1998-09-21</date>
   </refsect2info>
   <title>
    Entradas
   </title>
   <para>

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">name</replaceable></term>
      <listitem>
       <para>
	El nombre de un disparador existente.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable class="parameter">table</replaceable></term>
      <listitem>
       <para>
	El nombre de una tabla.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable class="parameter">event</replaceable></term>
      <listitem>
       <para>
        Uno entre INSERT, DELETE o UPDATE.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable class="parameter">funcname</replaceable></term>
      <listitem>
       <para>
        Una función suministrada por el usuario.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </refsect2>

  <refsect2 id="R2-SQL-CREATETRIGGER-2">
   <refsect2info>
    <date>1998-09-21</date>
   </refsect2info>
   <title>
    Salidas
   </title>
   <para>

    <variablelist>
     <varlistentry>
      <term><computeroutput>
	CREATE
       </computeroutput></term>
      <listitem>
       <para>
        Se devuelve este mensaje si el disparador se ha creado con éxito.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </refsect2>
 </refsynopsisdiv>
 
 <refsect1 id="R1-SQL-CREATETRIGGER-1">
  <refsect1info>
   <date>1998-09-21</date>
  </refsect1info>
  <title>
   Descripción
  </title>

  <para>
   <command>CREATE TRIGGER</command> introducir  un nuevo disparador en 
   la base de datos actual. El disparador se asociar  con la relación
   <replaceable class="parameter">relname</replaceable> y ejecutar  la
   función especificada <replaceable class="parameter">funcname</replaceable>.
  </para>

  <para>
   Se puede especificar que el disparador se dispare de cualquiera de
   estas dos formas: antes (BEFORE) de que la operación sea intentada en
   un registro (antes de que las restricciones se comprueben y
   <command>INSERT</command>, <command>UPDATE</command> o
   <command>DELETE</command> sean intentados) o después (AFTER) de que la
   operación haya sido intentada (por ejemplo después de que las
   restricciones sean comprobadas y de que <command>INSERT</command>,
   <command>UPDATE</command> o <command>DELETE</command> hayan sido
   completados).
   Si el disparador se pone en marcha antes del evento, éste puede saltar
   la operación para el registro actual o cambiar el registro que estaba
   insert ndose (sólo para las operaciones <command>INSERT</command> y
   <command>UPDATE</command>).
   Si el disparador se dispara después del evento, todos los cambios,
   incluyendo la última inserción, actualización o borrado, son "visibles"
   para el disparador.
  </para>

  <para>
   Refiérase a los cap¡tulos de SPI y Triggers en la gu¡a
   <citetitle>PostgreSQL Programmer's Guide</citetitle> para m s
   información.
  </para>

  <refsect2 id="R2-SQL-CREATETRIGGER-3">
   <refsect2info>
    <date>1998-09-21</date>
   </refsect2info>
   <title>
    Notas
   </title>
   <para>
    <command>CREATE TRIGGER</command> es una extensión del lenguaje
    <productname>Postgres</productname>.
   </para>
   <para>
    Sólo el propietario relacionado puede crear un disparador en esta
    relación.
   </para>
   <para>
    Hasta la versión actual (v6.4), las sentencias de disparadores no
    est n implementadas.
   </para>
   <para>
    Refiérase a <command>DROP TRIGGER</command> para obtener información
    sobre como borrar disparadores.
   </para>   
  </refsect2>
 </refsect1>

 <refsect1 id="R1-SQL-CREATETRIGGER-2">
  <title>
   Uso
  </title>
  <para>
   Comprueba si el código de distribuidor especificado existe en la
   tabla de distribuidores antes de añadir o actualizar una fila en los
   films de la tabla:

   <programlisting>
CREATE TRIGGER if_dist_exists
    BEFORE INSERT OR UPDATE ON films FOR EACH ROW
    EXECUTE PROCEDURE check_primary_key ('did', 'distributors', 'did');
   </programlisting>
  </para>
  <para>
   Antes de cancelar un distribuidor o de actualizar su código, borra cada
   referencia en los films de la tabla:
   <programlisting>
CREATE TRIGGER if_film_exists 
    BEFORE DELETE OR UPDATE ON distributors FOR EACH ROW
    EXECUTE PROCEDURE check_foreign_key (1, 'CASCADE', 'did', 'films', 'did');
   </programlisting>
  </para>
 </refsect1>

 <refsect1 id="R1-SQL-CREATETRIGGER-3">
  <title>
   Compatibilidad
  </title>
  
  <refsect2 id="R2-SQL-CREATETRIGGER-4">
   <refsect2info>
    <date>1998-09-21</date>
   </refsect2info>
   <title>
    SQL92
   </title>

   <para>
    No hay <command>CREATE TRIGGER</command> en <acronym>SQL92</acronym>.
   </para>

   <para>
    El segundo ejemplo explicado ateriormente puede implementarse también
    usando una restricción de FOREIGN KEY (clave for nea) como en:

    <programlisting>
CREATE TABLE distributors (
    did      DECIMAL(3),
    name     VARCHAR(40),
    CONSTRAINT if_film_exists
    FOREIGN KEY(did) REFERENCES films
    ON UPDATE CASCADE ON DELETE CASCADE  
);
    </programlisting>
   </para>

   <para>
    En cualquier caso, las claves foráneas todavía no están implementadas
    (hasta la versión 6.5) en <productname>Postgres</productname>.
   </para>
  </refsect2>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->
