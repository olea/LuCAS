<!--
$Header: /home/cvs/lucas/doc-postgresql-es/v6/Postgresql-es/src/sgml/ref/create_language.sgml,v 1.3 2001/04/21 21:57:14 olea Exp $
Postgres documentation
-->

<refentry id="SQL-CREATELANGUAGE">
 <refmeta>
  <refentrytitle id="sql-createlanguage-title">
   CREATE LANGUAGE
  </refentrytitle>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
 <refnamediv>
  <refname>
   CREATE LANGUAGE
  </refname>
  <refpurpose>
   Define un nuevo lenguaje para funciones
  </refpurpose>
 </refnamediv>
 <refsynopsisdiv>
  <refsynopsisdivinfo>
   <date>1999-07-20</date>
  </refsynopsisdivinfo>
  <synopsis>
CREATE [ TRUSTED ] PROCEDURAL LANGUAGE '<replaceable class="parameter">langname</replaceable>'
    HANDLER <replaceable class="parameter">call_handler</replaceable>
    LANCOMPILER '<replaceable class="parameter">comment</replaceable>'
  </synopsis>
  
  <refsect2 id="R2-SQL-CREATELANGUAGE-1">
   <refsect2info>
    <date>1998-09-09</date>
   </refsect2info>
   <title>
    Entradas 
   </title>
   <para>

    <variablelist>
     <varlistentry>
      <term>TRUSTED</term>
      <listitem>
       <para>
	<function> TRUSTED</function> especifica que el manipulador para el lenguaje
        es seguro; es decir, que no ofrece a un usuario no privilegiado nuevas
	funcionalidades sobrepasando las restricciones de acceso. Si esta palabra
	es omitida entonces al registrar el lenguaje, sólo usuarios con privilegio
	de superusuario <productname>Postgres</productname>
	podrán utilizar este lenguaje para crear
	nuevas funciones (como el lenguaje 'C').
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">langname</replaceable></term>
      <listitem>
       <para>   
	El nombre del nuevo lenguaje procedimental.
	No se diferencian mayúsculas de minúsculas en el nombre del 
	lenguaje. Un lenguaje procedimental no puede redefinir uno
	de los lenguajes incorporados de <productname>Postgres</productname>.
	<productname>Postgres</productname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>HANDLER <replaceable class="parameter">call_handler</replaceable></term>
      <listitem>
       <para>
	<replaceable class="parameter">call_handler</replaceable> es el nombre
	de una funcion previamente registrada que será llamada para ejecutar
	los procedimientos PL.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">comment</replaceable></term>
      <listitem>
       <para>
	El argumento <function>LANCOMPILER</function> es la cadena que
	será insertadoa en el atributo
	<literal>LANCOMPILER</literal> de la nueva entrada 
	<filename>pg_language</filename> . Actualmente
	<productname>Postgres</productname> no utiliza este atributo
	para ningún fin.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
   
  </refsect2>
  
  <refsect2 id="R2-SQL-CREATELANGUAGE-2">
   <refsect2info>
    <date>1998-09-09</date>
   </refsect2info>
   <title>
    Salidas
   </title>
   <para>

    <variablelist>
     <varlistentry>
      <term><computeroutput>
CREATE
       </computeroutput></term>
      <listitem>
       <para>
	Este mensage es devuelto si el lenguaje es creado con
	éxito.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><computeroutput>
ERROR:  PL handler function <replaceable class="parameter">funcname</replaceable>() doesn't exist
       </computeroutput></term>
      <listitem>
       <para>
	Este error es devuelto si la función
	<replaceable class="parameter">funcname</replaceable>()
	no es encontrada.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </refsect2>
 </refsynopsisdiv>

 <refsect1 id="R1-SQL-CREATELANGUAGE-1">
  <refsect1info>
   <date>1998-09-09</date>
  </refsect1info>
  <title>
   Descripción
  </title>
  <para>
   Utilizando <command>CREATE LANGUAGE</command>, un usuario 
   <productname>Postgres</productname> puede registrar un 
   nuevo lenguaje en <productname>Postgres</productname>. 
   A continuación, las funciones y procedimientos "trigger"
   pueden ser definidos en este nuevo lenguaje.
   El usuario debe tener privilegios de superusuario
   <productname>Postgres</productname>
   para registrar un nuevo lenguaje.
  </para>

  <refsect2 id="R2-SQL-CREATELANGUAGE-3">
   <refsect2info>
    <date>1998-09-09</date>
   </refsect2info>
   <title>
    Escritura de manipuladores PL
   </title>
   <para>
    El manipulador de llamadas para un lenguaje procedimental debe ser
    escrito en un lenguaje compilado como 'C' y registrado
    en 
    <productname>Postgres</productname> como una función sin
    argumentos y devolviendo el tipo 
    <type>opaque</type>, un contenedor para tipos no definidos
    o especificados...
    Esto evita que el manipulador de llamadas sea llamado directamente
    como una función desde consultas.
   </para>
   <para>
    Sin embargo, los argumentos deben ser suministrados en la
    llamada cuando una funcion PL o procedimiento trigger en
    el lenguaje ofrecido por el manipulador sea ejecutado.
    <itemizedlist>
     <listitem>
      <para>
       Cuando es llamado por el gestor de triggers, el único
       argumento es el ID del objeto tomada de la entrada de 
       procedimientos
       <filename>pg_proc</filename>.
       Toda la demás información del gestor de triggers es
       encontrada en el puntero global 
       <structname>CurrentTriggerData</structname> .
      </para>
     </listitem>
     <listitem>
      <para>
       Cuando es llamado desde el gestor de funciones, los
       argumentos son el ID del objeto de la entrada 
       <filename>pg_proc</filename> del procedimiento, el número
       de argumentos entregados a la funcion PL, los argumentos en
       una estructura <structname>FmgrValues</structname> y un
       puntero a un booleano donde la función informa si el
       valor de retorno es el valor NULL de SQL.
      </para>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    Es responsabilidad del manipulador de llamadas  obtener la entrada
    <filename>pg_proc</filename> y analizar el argumento y
    tipos de retorno del procedimiento llamado. La cláusula AS
    del <command>CREATE FUNCTION</command> del procedimiento
    estará basada en el atributo <literal>prosrc</literal> de
    la tabla <filename>pg_proc</filename>. Esto puede ser el
    texto fuente en el lenguaje procedimental mismo (como en
    PL/Tcl), una ruta a un fichero o cualquier otra cosa que
    le indique al handler que hacer en detalle.
   </para>
  </refsect2>
   
  <refsect2 id="R2-SQL-CREATELANGUAGE-4">
   <refsect2info>
    <date>1998-09-09</date>
   </refsect2info>
   <title>
    Notas
   </title>
   <para>
    Utilice <command>CREATE FUNCTION</command>
    para crear una función.
   </para>
   <para>
    Utilice <command>DROP LANGUAGE</command>  para eliminar lenguajes
    de procedimiento.
   </para>
   <para>
    Remítase a la tabla <filename>pg_language</filename>
    para más información:
    <programlisting>
     <computeroutput>
Table    = pg_language
+--------------------------+--------------------------+-------+
|          Field           |          Type            | Length|
+--------------------------+--------------------------+-------+
| lanname                  | name                     |    32 |
| lancompiler              | text                     |   var |
+--------------------------+--------------------------+-------+

lanname |lancompiler   
--------+--------------
internal|n/a           
lisp    |/usr/ucb/liszt
C       |/bin/cc       
sql     |postgres
     </computeroutput>
    </programlisting>
   </para>

   <para>
    Ya que el manipulador (call handler) para un lenguaje de procedimientos
    debe ser registrado en <productname>Postgres</productname> en
    el lenguaje 'C', hereda todas las capacidades y restricciones
    de las funciones de 'C'.
   </para>

   <para> 
    Actualmente, las definiciones para un lenguaje de procedimientos
    no pueden ser modificadas una vez que han sido creadas.
   </para>
  </refsect2>
 </refsect1>

 <refsect1 id="R1-SQL-CREATELANGUAGE-6">
  <title>
   Uso
  </title>
  <para>
   Esta es una plantilla para un manipulador en 'C':
   <programlisting>
#include "executor/spi.h"
#include "commands/trigger.h"
#include "utils/elog.h"
#include "fmgr.h"        /* for FmgrValues struct */
#include "access/heapam.h"
#include "utils/syscache.h"
#include "catalog/pg_proc.h"
#include "catalog/pg_type.h"

Datum
plsample_call_handler(
     Oid       prooid,
     int       pronargs,
     FmgrValues     *proargs,
     bool      *isNull)
{
     Datum          retval;
     TriggerData    *trigdata;

     if (CurrentTriggerData == NULL) {
          /*
           * Llamado como una función
           */

          retval = ...
     } else {
          /*
           * Llamado como un procedimiento "trigger"
           */
          trigdata = CurrentTriggerData;
          CurrentTriggerData = NULL;

          retval = ...
     }

     *isNull = false;
     return retval;
}
   </programlisting>
  </para>

  <para>
   Solamente unos pocos miles de líneas de código tienen que
   ser añadidas en vez de los puntos para completar el 'PL call handler'
   Vea <command>CREATE FUNCTION</command> para información sobre como
   compilarlo en un módulo cargable.
  </para>
  <para>
   Los siguientes comandos entonces registran el lenguje de
   procedimientos de muestra:
   <programlisting>
CREATE FUNCTION plsample_call_handler () RETURNS opaque
    AS '/usr/local/pgsql/lib/plsample.so'
    LANGUAGE 'C';
CREATE PROCEDURAL LANGUAGE 'plsample'
    HANDLER plsample_call_handler
    LANCOMPILER 'PL/Sample';
   </programlisting>
  </para>
 </refsect1>

 <refsect1 id="R1-SQL-CREATELANGUAGE-7">
  <title>
   Compatibilidad
  </title>

  <refsect2 id="R2-SQL-CREATELANGUAGE-5">
   <refsect2info>
    <date>1998-09-09</date>
   </refsect2info>
   <title>
    SQL92
   </title>

   <para>
    <command>CREATE LANGUAGE</command>
    es una extensión de <productname>Postgres</productname>.
    No existe una sentencia <command>CREATE LANGUAGE</command> en
    <acronym>SQL92</acronym>.
   </para>
  </refsect2>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->

