<!--
$Header: /home/cvs/lucas/doc-postgresql-es/v6/Postgresql-es/src/sgml/ref/create_operator.sgml,v 1.3 2001/04/21 21:57:14 olea Exp $
Postgres documentation
-->

<refentry id="SQL-CREATEOPERATOR">
 <refmeta>
  <refentrytitle id="sql-createoperator-title">
   CREATE OPERATOR
  </refentrytitle>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
 <refnamediv>
  <refname>
   CREATE OPERATOR
  </refname>
  <refpurpose>
   Define un nuevo operador de usuario
  </refpurpose>
  </refnamediv>
 <refsynopsisdiv>
  <refsynopsisdivinfo>
   <date>1999-07-20</date>
  </refsynopsisdivinfo>
  <synopsis>
CREATE OPERATOR <replaceable>name</replaceable> ( PROCEDURE = <replaceable class="parameter">func_name</replaceable>
     [, LEFTARG = <replaceable class="parameter">type1</replaceable> ] [, RIGHTARG = <replaceable class="parameter">type2</replaceable> ]
     [, COMMUTATOR = <replaceable class="parameter">com_op</replaceable> ] [, NEGATOR = <replaceable class="parameter">neg_op</replaceable> ]
     [, RESTRICT = <replaceable class="parameter">res_proc</replaceable> ] [, JOIN = <replaceable class="parameter">join_proc</replaceable> ]
     [, HASHES ] [, SORT1 = <replaceable class="parameter">left_sort_op</replaceable> ] [, SORT2 = <replaceable class="parameter">right_sort_op</replaceable> ] )
  </synopsis>
  
  <refsect2 id="R2-SQL-CREATEOPERATOR-1">
   <refsect2info>
    <date>1999-04-14</date>
   </refsect2info>
   <title>
    Entradas
   </title>
   <para>

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">name</replaceable></term>
      <listitem>
       <para>
        El operador a definir. Véanse más abajo los caracteres permitidos.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable class="parameter">func_name</replaceable></term>
      <listitem>
       <para>
        La función utilizada para implementar este operador.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable class="parameter">type1</replaceable></term>
      <listitem>
       <para>
	El tipo de la parte izquierda del operador, si procede. Esta opción
	debería ser omitida para un operador unario por la derecha.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable class="parameter">type2</replaceable></term>
      <listitem>
       <para>
 	El tipo para la parte derecha del operador, si procede. Esta opción
	debería ser omitida para un operador unario por la izquierda.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable class="parameter">com_op</replaceable></term>
      <listitem>
       <para>
	El commutador para este operador.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable class="parameter">neg_op</replaceable></term>
      <listitem>
       <para>
	El negador para este operador.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable class="parameter">res_proc</replaceable></term>
      <listitem>
       <para>
	La función estimadora de restricción selectiva para este operador.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable class="parameter">join_proc</replaceable></term>
      <listitem>
       <para>
	***********The join selectivity estimator function for this operator.
	***********La función estimador de ?????
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>HASHES</term>
      <listitem>
       <para>
Indica que este operador soporta un algoritmo "hash-join".
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable class="parameter">left_sort_op</replaceable></term>
      <listitem>
       <para>
	Operador que ordena el tipo de dato de la parte izquierda
	de este operador.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable class="parameter">right_sort_op</replaceable></term>
      <listitem>
       <para>
	Operador que ordena el tipo de dato de la parte derecha
	de este operador.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </refsect2>

  <refsect2 id="R2-SQL-CREATEOPERATOR-2">
   <refsect2info>
    <date>1999-04-14</date>
   </refsect2info>
   <title>
    Salidas
   </title>
   <para>
    <variablelist>
     <varlistentry>
      <term><computeroutput>
CREATE
       </computeroutput></term>
      <listitem>
       <para>
	Mensaje devuelto si el operador es creado con éxito.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </refsect2>
 </refsynopsisdiv>

 <refsect1 id="R1-SQL-CREATEOPERATOR-1">
  <refsect1info>
   <date>1999-04-14</date>
  </refsect1info>
  <title>
   Description
  </title>
  <para>
   <command>CREATE OPERATOR</command>  define un nuevo operador,
   <replaceable class="parameter">name</replaceable>.
   El usuario que define el operador se convierte en su propietario.
  </para>
  <para>
   El operador <replaceable class="parameter">name</replaceable>
   es una secuencia de hasta treinta y dos (32) caracteres con cualquiera
   combinación de lo siguiente:
   <literallayout>
+ - * / &lt; &gt; = ~ ! @ # % ^ & | ` ? $ : 
   </literallayout>
   <note>
    <para>
     No se permite ningún caracter alfabético en un nombre de operador.
     Esto permite a <productname>Postgres</productname> analizar la
     entrada SQL en elementos sin requerir espacion entre cada elemento.
     </para>
   </note>   
  </para>
  <para>
   El operador "!=" es convertido a "&lt;&gt;" en la entrada, por lo
   que son en consecuencia equivalentes.
  </para>
  <para>
   Por lo menos uno de LEFTARG o RIGHTARG deben ser definidos. Para
   operadores binarios, ambos deberían ser definidos. Para operadores
   unarios por la derecha, solamente LEFTARG debería ser definido,
   mientras que en operadores unarios por la derecha solamente RIGHTARG
   debería ser definido.
  </para>
  <para>
   También, el procedimiento 
   <replaceable class="parameter">func_name</replaceable> debe
   haber sido previamente definido utilizando
   <command>CREATE FUNCTION</command> y debe se definido para aceptar el
   número correcto de argumentos (bien uno o dos).
  </para>
  <para>
   El operador commutador debería ser identificado si existe uno, para
   que <productname>Postgres</productname> pudiese invertir el orden de
   los operandos si lo desea.
   Por ejemplo, el operador area-menor-que,
    &lt;&lt;&lt;, debería probablemente tener un operador conmutador
   area-mayor-que&gt;&gt;&gt;.
   De esta forma, el optimizador de consultas podría convertir libremente:

   <programlisting>
"0,0,1,1"::box  &gt;&gt;&gt; MYBOXES.description
   </programlisting>

   a

   <programlisting>
MYBOXES.description &lt;&lt;&lt; "0,0,1,1"::box
   </programlisting>
  </para>
  <para>
   Esto permite la ejecución de código para utiliar siempre la última
   representación y simplifica algo el optimizador.
  </para>
  <para>
   De forma similar, si existe un operador negador entonces debería ser
   identificado.
   Supongamos que un operador, area-igual, ===, existe, y también un
   operador area-no-igual, !==.
   El negador permite al optimizador simpificar
   <programlisting>
NOT MYBOXES.description === "0,0,1,1"::box
   </programlisting>
   a 
   <programlisting>
MYBOXES.description !== "0,0,1,1"::box
   </programlisting>
  </para>
  <para>
   Si el nombre de un operador commutador es suministrado,
   <productname>Postgres</productname>
   lo busca en el catálogo. Si es encontrado e no tiene aún un
   commutador él mismo, entonces la entrada del commutador es
   actualizada para tener el recien creado operador como su
   commutador. Esto se aplica al negador, también. 
  </para>
  <para>
   Esto es para permitir la definición de dos operadores que
   son commutadores de los negadores de cada uno de los otros.
   El primer operador debería der definido sin un commutador
   o negador (como sea apropiado). Cuando el segundo operador
   es definido, se debe nombrar el primero como el commutador
   o negador. El primero será actualizado como un efecto lateral.
   (En Postgres 6.5, esto también funciona para simplemente que
   ambos operadores se refieran al otro).

  </para>
  <para>
   Los siguientes tres especificadores están presentes para auxiliar
   al optimizador de consultas al realizar uniones ("joins").
   <productname>Postgres</productname> siempre puede
   evaluar una unión (i.e., procesando una cláusula con dos variables
   de tuplas separadas por un operador que retorno un booleano)
   por substitución iterativa [WONG76].
   Además,<productname>Postgres</productname>
   es capaz de utilizar un algoritmo "hash-join" siguiendo las
   líneas de [SHAP86]; sin embargo, debe saber si esta estrategia
   es aplicable. Es algoritmo "hash-join" actual es solamente correcto
   para operadores que representan tests de igualdad; además la
   igualdad del tipo de dato debe significar igualdad a nivel de bits
   de la representación del tipo. (Por ejemplo, un tipo de dato que
   contiene bits no utilizados que no tienen repercusión para tests
   de igualdad podría no ser usado en el "hash-join").
   El indicador HASHES indica al optimizador de consultas que un
   hash join poude ser utilizado de forma segura por este operador.
   </para>
  <para>
   De forma parecida, los dos operadores de orden indican al optimizador
   de consultas si la estrategia mezclar-ordenar es utilizable y que
   operadores deberían ser utilizados para ordenar las clases de los
   dos operadores. Los operadores de orden deberían ser suministrados
   solamente para un operador de igualdad, y deberían referirse a
   operadores menor-que para los tipos de la parte izquierda y derecha
   respectivamente.
  </para>
  <para>
   Si otras estrategias de unión son consideradas prácticas,
   <productname>Postgres</productname>
   cambiará el optimizador en tiempo de ejecución para utilizarlas
   y requerirán especificación adicional cuando un operador sea
   definido. Afortunadamente, la comunidad investigadora inventa
   nuevas estrategias de unión infrecuentemente, y la generalidad
   añadida de estrategias definidas por el usuario no merece la
   complejidad resultante.
  </para>
  <para>
   Las dos últimas piezas de la especificación están presentes
   para que el optimizador pueda estimar los tamaños de los
   resultados. Si una cláusula de la forma:
   <programlisting>
MYBOXES.description &lt;&lt;&lt; "0,0,1,1"::box
   </programlisting>
   está presente in la cualificación,
   entonces<productname>Postgres</productname> puede tener que estimar
   la fracción de instancias en MYBOXES que satisfacen la cláusula. 
   La función
   <replaceable class="parameter">res_proc</replaceable>
   debe ser una función registrada (lo que significa que ya está definida
   utilizando
   <command>CREATE FUNCTION</command>), acepta argumentos del tipo
   correcto y devuelve un numero en punto flotante.
   El optimizador simplemente llama a esta función, pasandole el
   parámetro "0,0,1,1" y multiplica el resultado por el tamaño de
   la relación para obtener el deseado numero de instancias estimado.
  </para>
  <para>
   Cuando ambos operandos del operador contienen variables de instancia,
   el optimizador debe estimar el tamaño de la unión resultante. La
   función join_proc retornara otro numero decimal que será multiplicado
   por las cardinalidades de las dos clases envueltas en el cómputo
   del tamaño esperado.
  </para>
  <para>
   La diferencia entre la función
   <programlisting>
my_procedure_1 (MYBOXES.description, "0,0,1,1"::box)
   </programlisting>
   y el operador
   <programlisting>
MYBOXES.description === "0,0,1,1"::box
   </programlisting>
   es que<productname>Postgres</productname>
   intenta optimizar operadores y puede decidir utilizar un índice
   para restringir el espacio de búsqueda cuando aparecen operadores.
   Sin embargo, no se intenta optimizar funciones, y son ejecutadas
   mediante fuerza bruta. Además, las funciones pueden tener cualquier
   número de argumentos mientras que los operadores están restringidos
   a uno o dos.
  </para>
  
  <refsect2 id="R2-SQL-CREATEOPERATOR-3">
   <refsect2info>
    <date>1999-04-14</date>
   </refsect2info>
   <title>
    Notes
   </title>
   <para>
    Refiérase al capítulo sobre operadores en ls
    <citetitle>PostgreSQL User's Guide</citetitle>
    para más información.
    Refiérase a <command>DROP OPERATOR</command> para borrar
    operadores definidos por el usuario de una base de datos.
   </para>
  </refsect2>
 </refsect1>
  
 <refsect1 id="R1-SQL-CREATEOPERATOR-2">
  <title>
   Utilización
   Usage
  </title>
  <para>El siguiente comando define un nuevo operador, area-igualdad, para
   el tipo de dato BOX.
  </para>
  <programlisting>
CREATE OPERATOR === (
   LEFTARG = box,
   RIGHTARG = box,
   PROCEDURE = area_equal_procedure,
   COMMUTATOR = ===,
   NEGATOR = !==,
   RESTRICT = area_restriction_procedure,
   JOIN = area_join_procedure,
   HASHES,
   SORT1 = <<<,
   SORT2 = <<<
);
  </programlisting>  
 </refsect1>
 
 <refsect1 id="R1-SQL-CREATEOPERATOR-3">
  <title>
   Compatibility
  </title>
  
  <refsect2 id="R2-SQL-CREATEOPERATOR-4">
   <refsect2info>
    <date>1999-04-14</date>
   </refsect2info>
   <title>
    SQL92
   </title>

   <para>
    <command>CREATE OPERATOR</command>
    is a <productname>Postgres</productname> extension.
    There is no <command>CREATE OPERATOR</command>
    statement in <acronym>SQL92</acronym>.
   </para>
  </refsect2>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->

