 <chapter id="advanced">
  <title>Características Avanzadas de <acronym>SQL</acronym> en <productname>Postgres</productname></title>

  <para>
   Habiendo cubierto los aspectos básicos de 
   <productname>Postgre</productname> <acronym>SQL</acronym>para acceder a los datos, discutiremos ahora 
	aquellas características de 
   <productname>Postgres</productname> que los distinguen de los gestores de bases de datos convecionales. 
	Estas características incluyen herencia, time travel (viaje en el tiempo) y valores no-atómicos de 
	datos (atributos basados en vectores y conjuntos). Los ejemplos de esta sección pueden encontrarse 
	también en 
   <filename>advance.sql</filename> en el directorio del tutorial. (Consulte el 
	 <xref linkend="QUERY"> para ver la forma de utilizarlo). 
  </para>

  <sect1>
   <title>Herencia</title>

   <para>
    Creemos dos clases. La clase capitals contiene las capitales de los estados, 
	las cuales son también ciudades. Naturalmente, la clase capitals debería 
	heredar de cities. 

    <programlisting>
CREATE TABLE cities (
    name            text,
    population      float,
    altitude        int     -- (in ft)
);

CREATE TABLE capitals (
    state           char(2)
) INHERITS (cities);
    </programlisting>

    En este caso, una instancia de capitals   <firstterm>hereda</firstterm>  todos los atributos 
	(name, population y altitude) de su padre, cities. El tipo del atributo name (nombre) es 
    <type>text</type>, un tipo nativo de <productname>Postgres</productname>
    para cadenas ASCII de longitud variable. El tipo del atributo population (población) es 
    <type>float</type>, un tipo de datos, también nativo de <productname>Postgres</productname>
    , para números de punto flotante de doble precisión. Las clase capitals tiene un 
	atributo extra, state, que muestra a qué estado pertenecen. En
     <productname>Postgres</productname>,
    una clase puede heredar de ninguna o varias otras clases, y una consulta puede hacer referencia 
	tanto a todas las instancias de una clase como a todas las instancias de una clase y sus 
	descendientes.
    <note>
     <para>
      La jerarquía de la herencia es un gráfico acíclico dirigido.
     </para>
    </note>

    Por ejemplo, la siguiente consulta encuentra todas aquellas ciudades que están 
	situadas a un altura de 500 o más pies:
     
    <programlisting>
SELECT name, altitude
    FROM cities
    WHERE altitude &gt; 500;

+----------+----------+
|name      | altitude |
+----------+----------+
|Las Vegas | 2174     |
+----------+----------+
|Mariposa  | 1953     |
+----------+----------+
    </programlisting>         
   </para>

   <para>
    Por otro lado, para encontrar los nombres de todas las ciudades, incluídas las 
	capitales estatales, que estén situadas a una altitud de 500 o más pies, la consulta es:

    <programlisting>
SELECT c.name, c.altitude
    FROM cities* c
    WHERE c.altitude > 500;
    </programlisting>

    which returns:
     
    <programlisting>
+----------+----------+
|name      | altitude |
+----------+----------+
|Las Vegas | 2174     |
+----------+----------+
|Mariposa  | 1953     |
+----------+----------+
|Madison   | 845      |
+----------+----------+
    </programlisting>

    Aquí el <quote>*</quote> después de cities indica que la consulta debe realizarse 
	sobre cities y todas las clases que estén por debajo de ella en la jerarquía de la 
	herencia. Muchos de los comandos que ya hemos discutido (<command>select</command>,
    <command>and>up</command>and> and <command>delete</command>)
    brindan soporte a esta notación de  <quote>*</quote> al igual que otros como
    <command>alter</command>.
   </para>
  </sect1>

  <sect1>
   <title>Valores No-Atómicos</title>

   <para>
    Uno de los principios del modelo relacional es que los atributos de una relación son atómicos 
	<productname>Postgres</productname> no posee esta restricción; los atributos pueden contener 
	sub-valores  a los que puede accederse desde el lenguaje de consulta. Por ejemplo, se pueden 
	crear atributos que sean vectores de alguno de los tipos base.
   </para>

   <sect2>
    <title>Vectores</title>

    <para>
     <productname>Postgres</productname> permite que los atributos de una instancia sean 
	definidos como vectores multidimensionales de longitud fija o variable. Puede crear 
	vectores de cualquiera de los tipos base o de tipos definidos por el usuario. Para 
	ilustrar su uso, creemos primero una clase con vectores de tipos base.

     <programlisting>
CREATE TABLE SAL_EMP (
    name            text,
    pay_by_quarter  int4[],
    schedule        text[][]
);
     </programlisting>
    </para>

    <para>
     La consulta de arriba creará una clase llamada SAL_EMP con una cadena del tipo 
	<firstterm>text</firstterm>  (name),un vector unidimensional del tipo 
	<firstterm>int4</firstterm>
     (pay_by_quarter), el cual representa el salario trimestral del empleado y un vector 
	bidimensional del tipo  <firstterm>text</firstterm>
     (schedule),  que representa la agenda semanal del empleado. Ahora realizamos algunos 
	<firstterm>INSERTS</firstterm>s; note que cuando agregamos valores a un vector, 
	encerramos los valores entre llaves y los separamos mediante comas. Si usted conoce 
	<firstterm>C</firstterm>,
     esto no es distinto a la sintaxis para inicializar estructuras. 

     <programlisting>
INSERT INTO SAL_EMP
    VALUES ('Bill',
    '{10000, 10000, 10000, 10000}',
    '{{"meeting", "lunch"}, {}}');

INSERT INTO SAL_EMP
    VALUES ('Carol',
    '{20000, 25000, 25000, 25000}',
    '{{"talk", "consult"}, {"meeting"}}');
     </programlisting>

     <productname>Postgres</productname>  utiliza de forma predeterminada la convención 
	de vectores "basados en uno" -- es decir, un vector de n elementos comienza con 
	vector[1] y termina con vector[n]. Ahora podemos ejecutar algunas consultas sobre 
	SAL_EMP. Primero mostramos como acceder a un solo elemento del vector por vez. Esta 
	consulta devuelve los nombres de los empleados cuyos pagos han cambiado en el segundo 
	trimestre: 
     <programlisting>
SELECT name
    FROM SAL_EMP
    WHERE SAL_EMP.pay_by_quarter[1] &lt;&gt;
    SAL_EMP.pay_by_quarter[2];

+------+
|name  |
+------+
|Carol |
+------+
     </programlisting>
    </para>

    <para>
     La siguiente consulta recupera el pago del tercer trimestre de todos los empleados: 
     
     <programlisting>
SELECT SAL_EMP.pay_by_quarter[3] FROM SAL_EMP;


+---------------+
|pay_by_quarter |
+---------------+
|10000          |
+---------------+
|25000          |
+---------------+
     </programlisting>
    </para>

    <para>
     También podemos acceder a cualquier porción de un vector, o subvectores. 
	Esta consulta recupera el primer item de la agenda de Bill para los primeros dos días de la semana. 

     <programlisting>
SELECT SAL_EMP.schedule[1:2][1:1]
    FROM SAL_EMP
    WHERE SAL_EMP.name = 'Bill';

+-------------------+
|schedule           |
+-------------------+
|{{"meeting"},{""}} |
+-------------------+
     </programlisting>
    </para>
   </sect2>
  </sect1>

  <sect1>
   <title>Time Travel (Viaje en el tiempo)</title>

   <para>
    Al momento de salir la versión 6.2 de <productname>Postgres</productname> v6.2, 
	<emphasis>la característica de viaje en el tiempo (time travel) ya no está soportada</emphasis>. 
	Existen varias razones para esto: impacto sobre el rendimiento, el tamaño de almacenamiento, y 
	un archivo pg_time que crece hasta el infinito en poco tiempo. 
   </para>

   <para>
    En cambio, dispone de nuevas características como los disparadores (triggers) que permiten imitar el comportamiento 
	del viaje en el tiempo cuando se desee, sin incurrir en sobrecarga  
	cuando no se necesita (en general, la mayor parte del tiempo). 
	Vea los ejemplos en el directorio  <filename>contrib</filename> para mayor información.
   </para>

   <note>
    <title>Time travel ha sido descartado:</title>
    <para>
     : El texto restante en esta sección se conserva solamente hasta que pueda ser reescrito 
	ajustándose al contexto de las nuevas técnicas que permiten obtener los mismos resultados. 
	¿Voluntarios? - thomas 12-01-1998. 
    </para>
   </note>

   <para>
    <productname>Postgres</productname> soporta la idea del viaje en el tiempo. Esto permite a 
	un usuario correr consultas históricas. Por ejemplo, para encontrar la población actual de 
	la ciudad de Mariposa, usted debería realizar la siguiente consulta: 

    <programlisting>
SELECT * FROM cities WHERE name = 'Mariposa';

+---------+------------+----------+
|name     | population | altitude |
+---------+------------+----------+
|Mariposa | 1320       | 1953     |
+---------+------------+----------+
    </programlisting>

    <productname>Postgres</productname> automáticamente encontrará la versión del registro de Mariposa 
	válida para este momento. Usted también podría especificar un intervalo de tiempo. Por ejemplo, 
	para ver la población pasada y presente de la ciudad de Mariposa, usted correría la siguiente consulta: 

    <programlisting>
SELECT name, population
    FROM cities['epoch', 'now']
    WHERE name = 'Mariposa';
</programlisting>

    donde "epoch" indica el comienzo del reloj del sistema. 

    <note>
     <para>
      En los sistemas Unix, esto siempre es la medianoche del 1 de enero de 1970, GMT. 
     </para>
    </note>
   </para>

   <para>
    Si ha realizado todos los ejemplos hasta ahora, la consulta anterior devolverá: 

    <programlisting>
+---------+------------+
|name     | population |
+---------+------------+
|Mariposa | 1200       |
+---------+------------+
|Mariposa | 1320       |
+---------+------------+
    </programlisting>
   </para>

   <para>
    El valor predeterminado para el comienzo del intervalo de tiempo es el menor valor
	 que pueda representar el sistema, mientras que el valor predeterminado para el final 
	del intervalo es la hora actual. Por lo tanto, el intervalo de tiempo utilizado en la 
	consulta anterior podría haberse abreviado como  ``[,].''
   </para>
  </sect1>

  <sect1>
   <title>Más características avanzadas</title>

   <para>
    <productname>Postgres</productname> posee muchas características que no se han visto en este 
	tutorial, el cual ha sido orientado hacia usuarios nuevos de 
    <acronym>SQL</acronym>.
    Las mencionadas características se discuten tanto en la Guía del Usuario como en la del Programador. 
   </para>

  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"./reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->
