.\" This is -*-nroff-*-
.\" XXX standard disclaimer belongs here....
.\" $Header: /home/cvs/lucas/doc-postgresql-es/v6/Postgresql-es/src/sgml/catalogs.sgml,v 1.6 2001/09/01 14:50:44 santamarta Exp $
.TH "SYSTEM CATALOGS" INTRO 03/13/94 PostgreSQL PostgreSQL
.SH "Section 7 - System Catalogs"
.de LS
.PP
.if n .ta 5 +13 +13
.if t .ta 0.5i +1.3i +1.3i
.in 0
.nf
..
.de LE
.fi
.in
..
.SH "DESCRIPTION"
En esta sección listamos cada uno de los atributos de los catálogos del sistema, y definimos sus
significados
.SH "CLASS/TYPE SYSTEM CATALOGS"
Estos catálogos forman el núcleo de la extensibilidad del sistema:
.LS
	\fBname\fP	\fBshared/local\fP	\fBdescription\fP
	pg_aggregate	local	                funciones agragadas
	pg_am		local			métodos de acceso
	pg_amop		local			operadores utilizables con métodos de acceso específicos 
	pg_amproc	local			procedimientos usados con métodos de acceso específicos
	pg_attribute	local			atributos de las clases
	pg_class	local			clases
	pg_index	local			índices
	pg_inherits	local			jerarquía de herencia de las clases
	pg_language	local			lenguajes de implementación de procedimientos
	pg_opclass	local			clases de operadores 
	pg_operator	local			operadores del lenguaje de consultas
	pg_proc		local			procedimientos (funciones)
	pg_type		local			tipos de datos
.LE
.SH "ENTITIES"
Estos catálogos tratan de la identificación de las entidades conocidas a través del sitio:
.LS
	\fBname\fP	\fBshared/local\fP	\fBdescription\fP
	pg_database	compartido		bases de datos actuales
	pg_group	compartido		grupos de usuarios
	pg_shadow	compartido		usuarios válidos
.LE
.SH "RULE SYSTEM CATALOGS"
.LS
	\fBname\fP	\fBshared/local\fP	\fBdescription\fP
	pg_listener	local			procesos esperando sus desencadenantes
	pg_prs2plans	local			instancias de procedimientos de sistema
	pg_prs2rule	local			instancias de reglas de sistema
	pg_prs2stub	local			``stubs'' del sistema de instancias
	pg_rewrite	local			información de reescritura del sistema
.LE
.SH "LARGE OBJECT CATALOGS"
.PP
Estos catálogos son específicos del sistema de archivos de Inversión y de objetos grandes en general
.LS
	\fBname\fP	\fBshared/local\fP	\fBdescription\fP
	pg_lobj		local			descripción de un objeto grande
	pg_naming	local			mapeado del espacio de nombres de Inversion 
	pg_platter	local			// OJO jukebox platter inventory
	pg_plmap	local			// OJO jukebox platter extent map
.LE
.SH "INTERNAL CATALOGS"
.PP
Estos catálogos son para las clases internas que no se almacenan en los 'heap' normales, y a los 
que no puede acceserse por medios normales (el intento de hacerlo provoca un error).
.LS
	\fBname\fP	\fBshared/local\fP	\fBdescription\fP
	pg_log		compartido		registro de transacciones commit/rollback 
	pg_magic	compartido		constantes mágicas
	pg_time		compartido		tiempos de commit/rollback
	pg_variable	compartido		valores de variables especiales
.LE
.PP
Existen otras clases definidas con nombre \*(lqpg_\*(rq.
Junto a los que terminan en \*(lqind\*(rq (indices secundarios), son todos obsoletos o 
desanconsejados por otros motivos.
.SH "CLASS/TYPE SYSTEM CATALOGS"
.PP
Los siguientes catálogos se refieren a las clases y tipos del sistema.
.nf M
/*
 * agregados
 *
 * ver DEFINE AGGREGATE para una explicación de las funciones de trancisión
 */
pg_aggregate
    NameData      aggname	/* nombre de agregado (p.ej. "count") */
    oid         aggowner	/* identificación del creador */
    regproc     aggtransfn1	/* primera función de trancisión */
    regproc     aggtransfn2	/* segunda función de trancisión */
    regproc     aggfinalfn	/* función final */
    oid         aggbasetype	/* tipo de dato sobre el que opera el agregado */
    oid         aggtranstype1	/* tipo devuelto por aggtransfn1 */
    oid         aggtranstype2	/* tipo devuelto por aggtransfn2 */
    oid         aggfinaltype	/* tipo devuelto por aggfinalfn */
    text        agginitval1	/* formato externo del valor inicial (de comienzo) de aggtransfn1 */
    text        agginitval2	/* formato externo del valor inicial (de comienzo) de aggtransfn2 */
.fi
.nf M
pg_am
    NameData    amname          /* nombre del método de acceso */
    oid         amowner         /* identificador del creador */
    int2        amstrategies    /* NUMERO total de estrategias por las cuales puede recorrerse/
                                   buscar este AM */
    int2        amsupport       /* NUMERO total de funciones de apoyo que usa este AM */
    int2        amorderstrategy /* si este AM tiene un modo e ordenación, el numero de estrategia 
                                 * del operador de ordenación. Cero si AM no está ordenado */
    regproc     amgettuple      /* función "siguiente tupla válida" */
    regproc     aminsert        /* función "insertar esta tupla" */
    regproc     amdelete        /* función "eliminar esta tupla" */
    regproc     amgetattr       /* - desaconsejado */
    regproc     amsetlock       /* - desaconsejado */
    regproc     amsettid        /* - desaconsejado */
    regproc     amfreetuple     /* - desaconsejado */
    regproc     ambeginscan     /* función "comenzar nueva exploración" */
    regproc     amrescan        /* función "reiniciar esta exploración" */
    regproc     amendscan       /* función "terminar esta exploración" */
    regproc     ammarkpos       /* función "marcar posición de la exploración actual" */
    regproc     amrestrpos      /* función "restablecer la posición de exploración marcadan" */
    regproc     amopen          /* - desaconsejado */
    regproc     amclose         /* - desaconsejado */
    regproc     ambuild         /* función "construir nuevo indice" */
    regproc     amcreate        /* - desaconsejado */
    regproc     amdestroy       /* - desaconsejado */
    regproc     amcostestimate  /* coste estimado de una exploración de índice */

.fi
.nf M
pg_amop
    oid         amopid		/* método de acceso con el que puede usarse este operador */
    oid         amopclaid	/* clase de operador con la que puede usarse este operador */
    oid         amopopr		/* el operador */
    int2        amopstrategy	/* numero de estrategia tranversal/de busqueda al que se aplica
				   este operador */
.fi
.nf M
pg_amproc
    oid         amid		/* metodo de acceso con el que se asocia este procedimiento */
    oid         amopclaid	/* clase de operador con la que puede usarse este operador */
    oid         amproc		/* el  procedimiento */
    int2        amprocnum	/* numero de funciones de apoyo al que se aplica este operador */
.fi
.nf M
pg_class
     NameData     relname	/* nombre de clase */
     oid        relowner	/* ientificador del propietario */
     oid        relam		/* método de acceso */
     int4       relpages	/* numero de páginas de 8KB */
     int4       reltuples	/* numero de instancias */
     abstime    relexpires	/* tiempo tras el cual las intancias se eliminan del almacenamiento 
                                   no definitivo. */
     reltime    relpreserved	/* inervalo de tiempo tras el cual las instancias son eliminadas 
                                   del almacenamiento no definitivo */
     bool       relhasindex	/* ¿tiene la clase un indice secundario? */
     bool       relisshared	/* ¿la clase es local o compartida? */
     char       relkind		/* tipo de relación:
				   i=indice
				   r=relacion (montón)
				   s=especial
				   u=no catalogado (temporaral) */
     char       relarch		/* modo de archivo:
				   h=pesado
				   l=ligero
			   	   n=ninguno */
     int2       relnatts	/* numero actual de atributos no pertenecientes al sistema */
     int2       relsmgr		/* metodo de almacenamiento:
			   	  0=disco magnático
			   	  1=sony WORM jukebox
			          2=memoria princiapal */
     int2vector relkey		/* - no usado */
     oidvector  relkeyop	/* - no usado */
     aclitem    relacl[1]	/* lista de control de acceso */
.fi
.nf M
pg_attribute
    oid         attrelid	/* clase que contiene este atributo */
    NameData      attname	/* nombre del atributo */
    oid         atttypid	/* tipo del atributo */
    oid         attdefrel	/* - desaconsejado */
    int4        attnvals	/* - desaconsejado */
    oid         atttyparg	/* - desaconsejado */
    int2        attlen		/* longitud del atributo, en bytes-1=variable */
    int2        attnum		/* numero del atributo
			   		>0=atributo de usuario
			   		<0=atributo de sistema */
    int2        attbound	/* - desaconsejado */
    bool        attbyval	/* ¿tipo pasado por valor? */
    bool        attcanindex	/* - desaconsejado */
    oid         attproc		/* - desaconsejado */
    int4        attnelems	/* numero de dimensiones de la matriz */
    int4        attcacheoff	/* caché de desplazamiento en la tupla */
    bool        attisset	/* ¿tiene el atributo un valor asignado? */
.fi
.nf M
pg_inherits
    oid         inhrel		/* clase hija */
    oid         inhparent	/* clase padre */
    int4        inhseqno	/* - desaconsejado */
.fi
.nf M
    oid         indexrelid	/* oid de la clase índice secundario */
    oid         indrelid	/* oid de la clase pila indexada */
    oid         indproc		/* function to compute index key from
				   attribute(s) in heap
				   0=not a functional index */
    int2vector  indkey		/* attribute numbers of key attribute(s) */
    oidvector   indclass	/* opclass of each key */
    bool        indisclustered	/* is the index clustered? - unused */
    bool        indisarchived	/* is the index archival?  - unused */
    text        indpred	/* query plan for partial index predicate */
.fi
.nf M
pg_type
    NameData      typname	/* type name */
    oid         typowner	/* usesysid of owner */
    int2        typlen		/* length in internal form -1=variable-length */
    int2        typprtlen	/* length in external form */
    bool        typbyval	/* type passed by value? */
    char        typtype		/* kind of type:
			   		c=catalog (composite)
			   		b=base */
    bool        typisdefined	/* defined or still a shell? */
    char        typdelim	/* delimiter for array external form */
    oid         typrelid	/* class (if composite) */
    oid         typelem		/* type of each array element */
    regproc     typinput	/* external-internal conversion	function */ 
    regproc     typoutput	/* internal-external conversion function */
    regproc     typreceive	/* client-server conversion function */
    regproc     typsend		/* server-client conversion function */
    text        typdefault	/* default value */
.fi
.nf M
pg_operator
    NameData      oprname	/* operator name */
    oid         oprowner	/* usesysid of owner */
    int2        oprprec		/* - deprecated */
    char        oprkind		/* kind of operator:
			   		b=binary
			   		l=left unary
			   		r=right unary */
    bool        oprisleft	/* is operator left/right associative? */
    bool        oprcanhash	/* is operator usable for hashjoin? */
    oid         oprleft		/* left operand type */
    oid         oprright	/* right operand type */
    oid         oprresult	/* result type */
    oid         oprcom		/* commutator operator */
    oid         oprnegate	/* negator operator */
    oid         oprlsortop	/* sort operator for left operand */
    oid         oprrsortop	/* sort operator for right operand */
    regproc     oprcode		/* function implementing this operator */
    regproc     oprrest		/* function to calculate operator
			   	restriction selectivity */
    regproc     oprjoin		/* function to calculate operator join selectivity */
.fi
.nf M
pg_opclass
    NameData      opcname	/* operator class name */
.fi
.nf M
pg_proc
    NameData    proname		/* function name */
    oid         proowner	/* usesysid of owner */
    oid         prolang		/* function implementation language */
    bool        proisinh	/* - deprecated */
    bool        proistrusted	/* run in server or untrusted function process? */
    bool        proiscachable	/* can the function return values be cached? */
    int2        pronargs	/* # of arguments */
    bool        proretset	/* does the function return a set?
				   - unused */
    oid         prorettype	/* return type */
    oidvector   proargtypes	/* argument types */
    int4        probyte_pct	/* % of argument size (in bytes) that needs to be examined in order to
				   compute the function */ 
    int4        properbyte_cpu	/* sensitivity of the function's running time to the size of its
				   inputs */
    int4        propercall_cpu	/* overhead of the function's invocation (regardless of input
				   size) */
    int4        prooutin_ratio	/* size of the function's output as a
				   percentage of the size of the input */
    text        prosrc		/* function definition:
			   INTERNAL function: actual C name of function
			   C function: currently, this field is unused
			   SQL function: text of query(s)
			   PL function: text in procedural language */
    bytea       probin		/* path to object file (C functions only) */
.fi
.nf M
pg_language
    NameData      lanname	/* language name */
    text        lancompiler	/* - deprecated */
.fi
.SH "ENTITIES"
.nf M
pg_database
    NameData      datname		/* database name */
    oid         datdba		/* usesysid of database administrator */
    text        datpath		/* directory of database under
				   $PGDATA */ 
.fi
.nf M
pg_group
    NameData      groname	/* group name */
    int2        grosysid	/* group's UNIX group id */
    int2        grolist[1]	/* list of usesysids of group members */
.fi
.nf M
pg_shadow
    NameData      usename		/* user's name */
    int2        usesysid	/* user's UNIX user id */
    bool        usecreatedb	/* can user create databases? */
    bool        usetrace	/* can user set trace flags? */
    bool        usesuper	/* can user be POSTGRES superuser? */
    bool        usecatupd	/* can user update catalogs? */
.fi
.SH "RULE SYSTEM CATALOGS"
.nf M
pg_listener
    NameData      relname	/* class for which asynchronous 
			   notification is desired */
    int4        listenerpid	/* process id of server corresponding
				   to a frontend program waiting for
				   asynchronous notification */
    int4        notification	/* whether an event notification for
				   this process id still pending */

.fi
.nf M
pg_prs2rule
    NameData      prs2name	/* rule name */
    char        prs2eventtype	/* rule event type:
				   R=retrieve
				   U=update (replace)
				   A=append
				   D=delete */
    oid         prs2eventrel	/* class to which event applies */
    int2        prs2eventattr	/* attribute to which event applies */
    float8      necessary	/* - deprecated */
    float8      sufficient	/* - deprecated */
    text        prs2text	/* text of original rule definition */
.fi
.nf M
pg_prs2plans
    oid         prs2ruleid	/* prs2rule instance for which this
				   plan is used */
    int2        prs2planno	/* plan number (one rule may invoke
				   multiple plans) */
    text        prs2code	/* external representation of the plan */
.fi
.nf M
pg_prs2stub
    oid         prs2relid	/* class to which this rule applies */
    bool        prs2islast	/* is this the last stub fragment? */
    int4        prs2no		/* stub fragment number */
    stub        prs2stub	/* stub fragment */
.fi
.nf M
pg_rewrite
    NameData      rulename	/* rule name */
    char        ev_type	/* event type:
			   RETRIEVE, REPLACE, APPEND, DELETE
			   codes are parser-dependent (!?) */
    oid         ev_class	/* class to which this rule applies */
    int2        ev_attr	/* attribute to which this rule applies */
    bool        is_instead	/* is this an "instead" rule? */
    text        ev_qual	/* qualification with which to modify
			   (rewrite) the plan that triggered this
			   rule */
    text        action	/* parse tree of action */
.fi
.SH "LARGE OBJECT CATALOGS"
.nf M
pg_lobj
    oid         ourid		/* 'ourid' from pg_naming that
				   identifies this object in the
				   Inversion file system namespace */
    int4        objtype		/* storage type code:
				   0=Inversion
				   1=Unix
				   2=External
				   3=Jaquith */
    bytea       object_descripto/* opaque object-handle structure */
.fi
.nf M
pg_naming
    NameData      filename	/* filename component */
    oid         ourid		/* random oid used to identify this
				   instance in other instances (can't
				   use the actual oid for obscure
				   reasons */
    oid         parentid	/* pg_naming instance of parent
				   Inversion file system directory */
.fi
.nf M
pg_platter
     NameData     plname		/* platter name */
     int4       plstart		/* the highest OCCUPIED extent */
.fi
.nf M
pg_plmap
     oid        plid		/* platter (in pg_platter) on which
				   this extent (of blocks) resides */
     oid        pldbid		/* database of the class to which this
				   extent (of blocks) belongs */
     oid        plrelid		/* class to which this extend (of
				   blocks) belongs */
     int4       plblkno		/* starting block number within the
				   class */ 
     int4       ploffset	/* offset within the platter at which
				   this extent begins */
     int4       plextentsz	/* length of this extent */
.fi
