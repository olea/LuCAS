 <chapter id="syntax">
  <title>Sintaxis SQL</title>

  <abstract>
   <para>
    Una descripción de la sintaxis general de SQL.
   </para>
  </abstract>

  <para>
   <acronym>SQL</acronym> manipula un conjunto de datos. El lenguaje esta compuesto por varias 
	<firstterm>palabras clave</firstterm>. Se permite expresiones aritméticas y procedimentales. 
	Nosotros trataremos estos temas en este capítulo; en los sucesivos capítulos incluiremos 
	detalles de los tipos de datos, funciones, y operadores.  
  </para>

  <sect1>
   <title>Palabras Clave</title>

   <para>
    <acronym>SQL92</acronym> define <firstterm>Palabras Clave</firstterm> 
    para el lenguaje que tienen un significado especifico. Algunas palabras están 
    <firstterm>reservadas</firstterm>, lo cual indica que su aparición esta restringida sólo en 
	ciertos contextos. Otras Palabras clave
    <firstterm>no están restringidas</firstterm>, , lo cual indica que en ciertos contextos 
	tienen un significado especifico pero no es obligatorio. 
   </para>

   <para>
    <productname>Postgres</productname> implementa un subconjunto extendido de los lenguajes 
    <acronym>SQL92</acronym> y <acronym>SQL3</acronym> lenguajes.Algunos elementos del lenguaje 
	no están tan restringidos en esta implementación como en el lenguajes estándar, en parte 
	debido a las características extendidas de <productname>Postgres</productname>. 
   </para>

   <para>
    Información sobre las palabras clave de  <acronym>SQL92</acronym> y <acronym>SQL3</acronym> 
	son derivadas de <xref linkend="DATE97" endterm="DATE97">.
   </para>

   <sect2>
    <title>Palabras clave reservadas</title>

    <para>
     <acronym>SQL92</acronym> y <acronym>SQL3</acronym> tienen  
     <firstterm>Palabras clave reservadas</firstterm> las cuales no están permitidas ni como 
	identificador ni para cualquier uso distinto de señales fundamentales en declaraciones 
	<acronym>SQL</acronym> .
     <productname>Postgres</productname> tiene palabras clave adicionales con las mismas 
	restricciones. En particular, estas palabras clave no están permitidas para nombre 
	de tablas o campos, aunque en algunos casos están permitidas para ser etiquetas de columna 
	(pe. en la cláusula AS). 
    </para>

    <tip>
     <para>
      Cualquier cadena puede ser especificada como un identificador si va entre doble comillas 
	 (<quote>como esa</quote>). Se debe tener cuidado desde tanto un identificador será sensible
	 a las mayúsculas / minúsculas y contendrá espacios en blanco u otro caracteres especiales.
     </para>
    </tip>

    <para>
     Las siguientes palabras reservadas de <productname>Postgres</productname>
     no son palabras reservadas de  <acronym>SQL92</acronym>
     ni de <acronym>SQL3</acronym> Estas están permitidas para ser etiquetas de columna, pero no identificadores: 

     <programlisting>
ABORT ANALYZE 
BINARY 
CLUSTER CONSTRAINT COPY
DO 
EXPLAIN EXTEND
LISTEN LOAD LOCK 
MOVE 
NEW NONE NOTIFY 
RESET 
SETOF SHOW
UNLISTEN UNTIL 
VACUUM VERBOSE
     </programlisting>
    </para>

    <para>
     Las siguientes palabras reservadas de <productname>Postgres</productname>
	son también palabras reservadas de <acronym>SQL92</acronym> 
     o <acronym>SQL3</acronym> y está permitido que estén presente como etiqueta de columna 
	pero no como identificador:

     <programlisting>
CASE COALESCE CROSS CURRENT CURRENT_USER 
DEC DECIMAL 
ELSE END
FALSE FOREIGN 
GLOBAL GROUP 
LOCAL
NULLIF NUMERIC 
ORDER 
POSITION PRECISION 
SESSION_USER 
TABLE THEN TRANSACTION TRUE
USER 
WHEN
     </programlisting>

     Las siguientes palabras reservadas de <productname>Postgres</productname>
     también son palabras reservadas de  <acronym>SQL92</acronym> 
     o <acronym>SQL3</acronym> :

     <programlisting>
ADD ALL ALTER AND ANY AS ASC
BEGIN BETWEEN BOTH BY
CASCADE CAST CHAR CHARACTER CHECK CLOSE
 COLLATE COLUMN COMMIT CONSTRAINT CREATE
 CURRENT_DATE CURRENT_TIME CURRENT_TIMESTAMP 
 CURSOR
DECLARE DEFAULT DELETE DESC DISTINCT DROP
EXECUTE EXISTS EXTRACT
FETCH FLOAT FOR FROM FULL
GRANT 
HAVING
IN INNER INSERT INTERVAL INTO IS
JOIN 
LEADING LEFT LIKE LOCAL
NAMES NATIONAL NATURAL NCHAR NO NOT NULL 
ON OR OUTER
PARTIAL PRIMARY PRIVILEGES PROCEDURE PUBLIC
REFERENCES REVOKE RIGHT ROLLBACK
SELECT SET SUBSTRING
TO TRAILING TRIM 
UNION UNIQUE UPDATE USING
VALUES VARCHAR VARYING VIEW
WHERE WITH WORK 
     </programlisting>
    </para>

    <para>
     Las siguientes palabras reservadas de <acronym>SQL92</acronym> no son palabras clave 
	reservadas de <productname>Postgres</productname> pero si se usan como nombre de función 
	se traducen siempre por la función
     <function>length</function>:

     <programlisting>
CHAR_LENGTH CHARACTER_LENGTH
     </programlisting>
    </para>

    <para>
     Las siguientes palabras reservadas de <acronym>SQL92</acronym> o <acronym>SQL3</acronym>no son palabras 
	clave reservadas de<productname>Postgres</productname> pero si se usan como nombre de tipo se traducen 
	siempre en un tipo alternativo/nativo: 

     <programlisting>
BOOLEAN DOUBLE FLOAT INT INTEGER INTERVAL REAL SMALLINT
     </programlisting>
    </para>

    <para>
     Las siguientes palabras clave reservadas tanto de <acronym>SQL92</acronym>
     o <acronym>SQL3</acronym> no son palabras clave en <productname>Postgres</productname>.
     Esto hace que su uso no sea valido en <productname>Postgres</productname>en el momento 
	de la escritura (v6.5) pero serán palabras reservadas en el futuro: 

     <note>
      <para>
       Algunas de estas palabras clave representan funciones en  <acronym>SQL92</acronym>.
       Estas funciones están definidas en <productname>Postgres</productname>,pero el interprete 
		no considera los nombre como palabras clave y las permite en otros contextos.

      </para>
     </note>

     <programlisting>
ALLOCATE ARE ASSERTION AT AUTHORIZATION AVG 
BIT BIT_LENGTH
CASCADED CATALOG COLLATION CONNECT CONNECTION
 CONTINUE CONVERT CORRESPONDING COUNT
DATE DEALLOCATE DEC DESCRIBE DESCRIPTOR
 DIAGNOSTICS DISCONNECT DOMAIN 
ESCAPE EXCEPT EXCEPTION EXEC EXTERNAL 
FIRST FOUND
GET GO GOTO 
IDENTITY INDICATOR INPUT INTERSECT
LAST LOWER 
MAX MIN MODULE 
OCTET_LENGTH OPEN OUTPUT OVERLAPS 
PREPARE PRESERVE 
ROWS
SCHEMA SECTION SESSION SIZE SOME 
 SQL SQLCODE SQLERROR SQLSTATE SUM SYSTEM_USER
TEMPORARY TRANSLATE TRANSLATION 
UNKNOWN UPPER USAGE
VALUE 
WHENEVER WRITE
     </programlisting>
    </para>
   </sect2>

   <sect2>
    <title>Palabras clave no-reservadas</title>

    <para>
     <acronym>SQL92</acronym> y <acronym>SQL3</acronym> tienen 
     <firstterm>Palabras clave no-reservadas</firstterm> which have
     a prescribed meaning in the language but which are also allowed
     as identifiers.
     <productname>Postgres</productname> que tienen un significado 
	preestablecida en el lenguaje pero también se puede utilizar como identificadores. 
	Postgres tiene palabras clave adicionales con la misma restricción de uso. En particular, 
	estas palabras clave se pueden usar como nombre de columnas o tablas. 
    </para>

    <para>
     Las siguientes palabras clave no-reservadas de <productname>Postgres</productname>
     no son palabras clave no-reservadas de  <acronym>SQL92</acronym>
     ni <acronym>SQL3</acronym> :

     <programlisting>
ACCESS AFTER AGGREGATE 
BACKWARD BEFORE 
CACHE CREATEDB CREATEUSER CYCLE
DATABASE DELIMITERS 
EACH ENCODING EXCLUSIVE
FORWARD FUNCTION 
HANDLER
INCREMENT INDEX INHERITS INSENSITIVE INSTEAD ISNULL
LANCOMPILER LOCATION 
MAXVALUE MINVALUE MODE
NOCREATEDB NOCREATEUSER NOTHING NOTNULL 
OIDS OPERATOR 
PASSWORD PROCEDURAL
RECIPE RENAME RETURNS ROW RULE
SEQUENCE SERIAL SHARE START STATEMENT STDIN STDOUT 
TRUSTED 
VALID VERSION
     </programlisting>
    </para>

    <para>
     Las siguientes palabras clave no-reservadas de <productname>Postgres</productname>
     son palabras clave reservadas de <acronym>SQL92</acronym>
     o <acronym>SQL3</acronym> :

     <programlisting>
ABSOLUTE ACTION
CONSTRAINTS
DAY DEFERRABLE DEFERRED 
HOUR
IMMEDIATE INITIALLY INSENSITIVE ISOLATION 
KEY 
LANGUAGE LEVEL 
MATCH MINUTE MONTH
NEXT 
OF ONLY OPTION 
PENDANT PRIOR PRIVILEGES 
READ RELATIVE RESTRICT 
SCROLL SECOND
TIME TIMESTAMP TIMEZONE_HOUR TIMEZONE_MINUTE TRIGGER 
YEAR
ZONE
     </programlisting>
    </para>

    <para>
     Las siguientes palabras clave no-reservadas de <productname>Postgres</productname>
      también son palabras clave no-reservadasde  <acronym>SQL92</acronym>
     o <acronym>SQL3</acronym> :

     <programlisting>
COMMITTED SERIALIZABLE TYPE
     </programlisting>
    </para>

    <para>
     Las siguientes palabras clave no-reservadas tanto de <acronym>SQL92</acronym>
     o <acronym>SQL3</acronym> no son palabras clave de ninguna clase en 
	<productname>Postgres</productname>:

     <programlisting>
ADA
C CATALOG_NAME CHARACTER_SET_CATALOG CHARACTER_SET_NAME 
 CHARACTER_SET_SCHEMA CLASS_ORIGIN COBOL COLLATION_CATALOG
 COLLATION_NAME COLLATION_SCHEMA COLUMN_NAME
 COMMAND_FUNCTION CONDITION_NUMBER
 CONNECTION_NAME CONSTRAINT_CATALOG CONSTRAINT_NAME
 CONSTRAINT_SCHEMA CURSOR_NAME
DATA DATE_TIME_INTERVAL_CODE DATE_TIME_INTERVAL_PRECISION
 DYNAMIC_FUNCTION
FORTRAN
LENGTH
MESSAGE_LENGTH MESSAGE_OCTET_LENGTH MORE MUMPS
NAME NULLABLE NUMBER
PAD PASCAL PLI
REPEATABLE RETURNED_LENGTH RETURNED_OCTET_LENGTH
 RETURNED_SQLSTATE ROW_COUNT
SCALE SCHEMA_NAME SERVER_NAME SPACE SUBCLASS_ORIGIN
TABLE_NAME
UNCOMMITTED UNNAMED
     </programlisting>
    </para>
   </sect2>
  </sect1>

  <sect1>
   <title>Comentarios</title>

   <para>
    Un <firstterm>Comentario</firstterm>
    es una secuencia arbitraria de carácteres precedido 
	por un doble guión hasta final de linea. También está soportado la doble barra pe.: 

    <programlisting>
-- This is a standard SQL comment
// And this is another supported comment style, like C++
    </programlisting>

También soportamos el bloque de comentarios al estilo C pe.: 

    <programlisting>
/* multi
   line
   comment
 */
    </programlisting>
   </para>
  </sect1>

  <sect1>
   <title>Nombres</title>

   <para>
    El nombre en SQL es una secuencia de caracteres alfanuméricos menor que NAMEDATALEN, 
	comenzando por un carácter alfanumérico. Por defecto, NAMEDATALEN esta definido a 32, 
	pero en el momento que montar el sistema, NAMEDATALEN puede cambiarse cambiando el 
	<literal>#define</literal> en
    src/backend/include/postgres.h.
    Subrayado ("_") esta considerado como un carácter alfabético. 
   </para>

   <para>
    En algunos contextos, los nombre pueden contener otros caracteres si están
	 entrecomillados por doble comillas. Por ejemplo, nombres de tablas o campos
	 pueden contener otros caracteres no validos como los espacios, ampersand (&), etc. 
	usando esta técnica. 
   </para>
  </sect1>

  <sect1>
   <title>Constantes</title>

   <para>
    Hay tres <firstterm>tres tipos implícitos de constantes</firstterm>
    usadas <productname>Postgres</productname>: cadenas, enteros y números de coma flotante. 
	Las Constantes también pueden ser especificadas con un tipo explícito, el cual puede una 
	representación más adecuada y una manejo más eficiente. Las constantes implícitas se 
	describen más abajo; las constantes explícitas se tratarán más adelante. 
   </para>

   <sect2>
    <title>Constantes tipo Cadenas</title>

    <para>
     <firstterm>Las cadenas</firstterm>
     son secuencias arbitrarias de caracteres ASCII limitadas por comillas 
	simples (" ' ", pe. <literal>'Esto es una cadena'</literal>)SQL92 permite que las 
	comillas simples puedan estar incluidos en una cadena tecleando dos comillas simples 
	adyacentes (pe. <literal>'Dianne''s horse'</literal>).
     En <productname>Postgres</productname> las comillas simples deben estar precedidas 
	por una contra barra ("\", pe.. 
     <literal>'Dianne\'s horse'</literal>). para incluir una contra barra en una constante 
	de tipo cadena, teclear dos contra barras. Los caracteres no imprimibles también deben 
	incluir en la cadena precedidos de una contra barra (pe<literal>'\<replaceable>tab</replaceable>'</literal>).
    </para>

   </sect2>

   <sect2>
    <title>Constantes tipo Entero</title>

    <para>
     <firstterm>Las constantes tipo entero</firstterm>son una colección de dígitos ASCII  
	sin punto decimal. Los rangos de valores validos van desde -2147483648 al +2147483647. 
	Esto variará dependiendo del sistema operativo y la máquina host. 
    </para>

    <para>
     Destacar que el entero más largo puede ser especificado para <type>int8</type>
	 utilizando una notación de cadena<acronym>SQL92</acronym> o una notación del tipo 
     <productname>Postgres</productname>:

     <programlisting>
int8 '4000000000'  -- string style
'4000000000'::int8 -- Postgres (historical) style
     </programlisting>
    </para>
   </sect2>

   <sect2>
    <title>Constantes tipo Punto Flotante</title>

    <para>
     <firstterm>Floating point constants</firstterm>
     consta de una parte entera , un punto decimal, y una parte decimal  o 
	la notación científica con el siguiente formato: 

     <synopsis>
{<replaceable>dig</replaceable>}.{<replaceable>dig</replaceable>} [e [+-] {<replaceable>dig</replaceable>}]
     </synopsis>

     Donde <replaceable>dig</replaceable> is one or more digits.
     You must include at least one <replaceable>dig</replaceable> es uno o más dígitos. Usted puede incluir 
	como mínimo un dig después del periodo y después de [+-] si esas opciones. Un exponente sin mantisa 
	tiene una mantisa insertada a 1. No debe haber ningún carácter extra incluido en la cadena. 
    </para>

    <para>
     Una constante de tipo punto flotante es del tipo 
     <type>float8</type>. Para<type>float4</type> se puede especificar explícitamente usando 
	la notación de cadena de <acronym>SQL92</acronym>o notación de tipo  
     <productname>Postgres</productname>:

     <programlisting>
float4 '1.23'  -- string style
'1.23'::float4 -- Postgres (historical) style
     </programlisting>
    </para>
   </sect2>

   <sect2>
    <title>Constantes Postgres de tipos definido por el usuario</title>

    <para>
     Una constante de un tipo 
     <emphasis>arbitrario</emphasis>
     puede ser usando utilizando alguna de las siguientes notaciones: 

     <synopsis>
<replaceable>type</replaceable> '<replaceable>string</replaceable>'
'<replaceable>string</replaceable>'::<replaceable>type</replaceable>
CAST '<replaceable>string</replaceable>' AS <replaceable>type</replaceable>
     </synopsis>

     El valor de dentro de la cadena se pasa como entrada a rutina de conversión para el tipo llamado 
     <replaceable>type</replaceable>. El resultado es una constante del tipo indicado. La tipología puede 
	omitirse si no hay ambigüedad sobre el tipo de constate que debe ser, en este caso este está 
	automáticamente forzado. 
    </para>
   </sect2>

   <sect2>
    <title>Constantes de tipo Array</title>

    <para>
     <firstterm>Las constantes de tipo Array</firstterm>
     de cualquier tipo Postgres, incluidos otras arrays, constantes de cadena, etc. 
	El formato general de cualquier constante array es el siguiente:

     <synopsis>
{<replaceable>val1</replaceable><replaceable>delim</replaceable><replaceable>val2</replaceable><replaceable>delim</replaceable>}
     </synopsis>

     Donde <replaceable>delim</replaceable>
     es el delimitador para el tipo almacenado en la clase <literal>pg_type</literal>. 
	(Para los tipos preconstruidos, es el carácter coma. Un ejemplo de constante de tipo array es:  
     

     <programlisting>
{{1,2,3},{4,5,6},{7,8,9}}
     </programlisting>

     Esta constante es de dos dimensiones, una array de 3 por 3 consiste en tres subarrays de enteros.
    </para>

    <para>
     Un elemento de una array individual puede y debe estar entre marcas delimitadoras siempre que 
	sea posible para evitar problemas de ambigüedad con respecto a espacios en blanco iniciales. 


    </para>
   </sect2>
  </sect1>

  <sect1>
   <title>Campos y Columnas</title>

   <sect2>
    <title>Campos</title>

    <para>
     Un <firstterm>Campo</firstterm>
     es cualquier atributo de una clase dada o uno de lo siguiente: 

     <variablelist>
      <varlistentry>
       <term>oid</term>
       <listitem>
	<para>
	 el identificador único de la instancia que añade Postgres a 
	todas las instancias automáticamente. Los Oids no son reutilizable y tienen una longitud de 32 bits. 
	</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>xmin</term>
       <listitem>
	<para>
	 El identificador de la transacción insertada. 
	</para>
       </listitem>
      </varlistentry>

      <varlistentry>
      <term>xmax</term>
       <listitem>
	<para>
	 El identificador de la transacción borrada. 
	</para>
       </listitem>
      </varlistentry>

      <varlistentry>
      <term>cmin</term>
       <listitem>
	<para>
	 El identificador del comando dentro de la transacción. 
	</para>
       </listitem>
      </varlistentry>

      <varlistentry>
      <term>cmax</term>
       <listitem>
	<para>
	 El identificador del comando borrado.
	</para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>

    <para>
     Para más información de estos campos consultar 
     <xref linkend="STON87a" endterm="STON87a">.
     El tiempo está representado internamente como una instancia del tipo dato
	 <literal>abstime</literal>. Los identificadores de las transacciones y 
	comandos son de 32 bits.  Las transacciones se asignan secuencialmente empezando por 512. 

    </para>
   </sect2>

   <sect2>
    <title>Columnas</title>

    <para>
     Una <firstterm>columna</firstterm> se construye de esta forma: 

     <synopsis>
<replaceable>instance</replaceable>{.<replaceable>composite_field</replaceable>}.<replaceable>field</replaceable> `['<replaceable>number</replaceable>`]'
     </synopsis>

     Una<replaceable>instance</replaceable>
     identifica una clase concreta y podemos entenderla como un particularización de las 
	instancias de esta clase. Cada nombre de variable es una variable instancia, un sustituto 
	de la clase definida por el significado de la cláusula FROM, o la palabra clave NEW o  
	CURRENT. NEW y CURRENT sólo pueden aparecer en una tramo de la acción de la regla, 
	mientras otras variables de instancia pueden usarse en cualquier declaración SQL. 
     <replaceable>composite_field</replaceable>
     un campo de uno de los tipos compuestos de Postgres, mientras que los sucesivos campos 
	direccionan los atributos de la clase/es que evalúa los campo compuesto.  Finalmente 
     <replaceable>field</replaceable>
     es un campo normal (tipo base) de la última clase/s direccionada. Si 
     <replaceable>field</replaceable>
     es de tipo <literal>array</literal>,
     entonces el designador opcional <replaceable>number</replaceable>
     indica el elemento especifico del array. Si no se indica el número, entonces se devolverán 
	todos los elementos del array. 
    </para>
   </sect2>
  </sect1>

  <sect1>
   <title>Operadores</title>

   <para>
    Cualquier operador predefinido o definido por el usuario puede usarse en SQL. 
	Para la lista de operadores predefinidos consultar 
    <xref linkend="operators" endterm="operators-title">.
    Para la lista de los operadores definidos por el usuario consultar su administrador de sistema 
	o ejecuta la consulta sobre la clase <literal>pg_operator</literal> class. Los paréntesis pueden usarse para agrupar 
	arbitrariamente los operadores en expresiones.  
   </para>
  </sect1>

  <sect1>
   <title>Expresiones</title>

   <para>
    <acronym>SQL92</acronym> permite <firstterm>expresiones</firstterm>
    para transformar datos en tablas.Las expresiones pueden contener operadores 
    (ver <xref linkend="operators" endterm="operators-title">
    para más detalles) y funciones 
    (<xref linkend="functions" endterm="functions-title"> tiene más información). 
   </para>

   <para>
    Una expresión es una de las siguientes: 
  
    <simplelist>
     <member>( a_expr )</member>
     <member>constantes</member>
     <member>atributos</member>
     <member><replaceable>a_expr</replaceable> <replaceable>binary_operator</replaceable> <replaceable>a_expr</replaceable></member>
     <member><replaceable>a_expr</replaceable> <replaceable>right_unary_operator</replaceable></member>
     <member><replaceable>left_unary_operator</replaceable> <replaceable>a_expr</replaceable></member>
     <member>parametros</member>
     <member>expresiones funcionales</member>
     <member>expresiones de agregación</member>
    </simplelist>
   </para>

   <para>
    Nosotros ya hemos hablado de las constantes y atributos. Las tres clases de 
	expresiones de operadores son respectivamente operadores binarios (infijo),  
	unarios por la derecha (sufijo) y unarios por la izquierda (prefijo). 
	Las siguientes secciones hablan de la distintas opciones. 
   </para>

   <sect2>
    <title>Parámetros</title>

    <para>
     Un <firstterm>Parámetro</firstterm>
     se usa para indicar un parámetro en una función SQL. Típicamente este es el 
	uso de la definición de la declaración de la función SQL. La forma con paréntesis es: 

     <synopsis>
$<replaceable class="parameter">number</replaceable>
     </synopsis>
    </para>

    <para>
     Por ejemplo, consideramos la definición de la función, 
     <function>dept</function>, como

     <programlisting>
CREATE FUNCTION dept (name)
	RETURNS dept
	AS 'select * from 
	    dept where name=$1'
	LANGUAGE 'sql';
     </programlisting>
    </para>
   </sect2>

   <sect2>
    <title>Expresiones Funcionales</title>

    <para>
     Una <firstterm>Expresión Funcional</firstterm>
     es el nombre de una función legal SQL, seguida por sus lista de argumentos entre paréntesis: 

     <synopsis>
<replaceable>function</replaceable> (<replaceable>a_expr</replaceable> [, <replaceable>a_expr</replaceable> ... ] )
     </synopsis>
    </para>

    <para>
     Por ejemplo, el siguiente calcula la raíz cuadrada del salario de un empleado: 

     <programlisting>
sqrt(emp.salary)
     </programlisting>
    </para>
   </sect2>

   <sect2>
    <title>Expresiones de Agregación</title>

    <para>
     Una <firstterm>expresión de agregación</firstterm> representa la aplicación de una 
	función de agregación a través de las filas seleccionadas por la consulta. 
	Una función de agregación reduce múltiples entradas a un solo valor de salida, 
	como la suma o la media de la entrada. La sintaxis de la expresión de agregación es la siguiente: 
  
    <simplelist>
     <member><replaceable>aggregate_name</replaceable> (<replaceable>expression</replaceable>)</member>
     <member><replaceable>aggregate_name</replaceable> (ALL <replaceable>expression</replaceable>)</member>
     <member><replaceable>aggregate_name</replaceable> (DISTINCT <replaceable>expression</replaceable>)</member>
     <member><replaceable>aggregate_name</replaceable> ( * )</member>
    </simplelist>

     Donde <replaceable>aggregate_name</replaceable> es la agregación previamente definida, y 
	<replaceable>expression</replaceable>es cualquier expresión que no contenga a su vez ninguna 
	expresión de agregación. 
    </para>

    <para>
     La primera forma de expresión de agregación  llama a la agregación a través de todas las 
	filas de entrada la expresión devuelve un valor no nulo. La segunda forma es similar a la primera, 
	pero ALL es por defecto. La tercera forma llama a la agregación para todas las filas de entrada 
	con valores distintos entre si y no nulo. La última forma llama a la agregación para cada una de 
	las filas de entrada sean con valor nulo o no; si no se especifica un valor específico de entrada, 
	generalmente sólo es útil para la agregación count(). 

    </para>

    <para>
      Por ejemplo, count(*) devuelve el número total de filas de entrada; 
	count(f1)	devuelve el número de filas de entrada donde f1 no es nulo; 
	count(distinct f1) devuelve el número de distintos valores no nulos de f1. 
    </para>
   </sect2>

   <sect2>
    <title>Lista Objetivo</title>

    <para>
     Una <firstterm>Lista Objetivo</firstterm>
     es una lista de uno o más elementos separados por comas y entre paréntesis, cada una debe ser de la forma: 

     <synopsis>
<replaceable>a_expr</replaceable> [ AS <replaceable>result_attname</replaceable> ]
     </synopsis>

     Donde <replaceable>result_attname</replaceable>
     es el nombre del atributo que ha sido creado (o el nombre del atributo que ya existía en el caso de una 
	sentencia de actualización.) Si 
     <replaceable>result_attname</replaceable>
     no está presente, entonces  
     <replaceable>a_expr</replaceable>
     debe contener sólo un nombre de atributo el cual se asumirá como el nombre del campo resultado. 
	Sólo se usa el nombrado por defecto en <productname>Postgres</productname> si 
     <replaceable>a_expr</replaceable>
     es un atributo. 
    </para>
   </sect2>

   <sect2>
    <title>Calificadores</title>

    <para>
     Un <firstterm>calificador</firstterm>
     consiste en cualquier número de cláusulas conectadas por operadores lógicos: 
  

     <simplelist>
      <member>NOT</member>
      <member>AND</member>
      <member>OR</member>
     </simplelist>

     Una cláusula es un <replaceable>a_expr</replaceable>
     que se evalúa como un <literal>boolean</literal> sobre el conjunto de instancias. 
    </para>
   </sect2>

   <sect2>
    <title>Lista From</title>

    <para>
     La <firstterm>Lista From</firstterm>
     es una lista de <firstterm>expresiones from</firstterm>.
     separadas por comas. Cada "expresión from " es de esta forma: 

     <synopsis>
[ <replaceable>class_reference</replaceable> ] <replaceable>instance_variable</replaceable>
	{, [ <replaceable>class_ref</replaceable> ] <replaceable>instance_variable</replaceable>... }
     </synopsis>

     Donde <replaceable>class_reference</replaceable>
     es de la forma 

     <synopsis>
<replaceable>class_name</replaceable> [ * ]
     </synopsis>

     La "expresión from" define una o más variables instancia sobre el rango que la 
	clase indica en <replaceable>class_reference</replaceable>.
     Uno también puede requerir la variable instancia sobre el rango de todas la clases
	 que están por debajo de las clases indicadas en la jerarquía de herencia  especificando
	 el designador asterisco ("*"). 
    </para>
   </sect2>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"./reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/CATALOG"
sgml-local-ecat-files:nil
End:
-->
