<Chapter id="inherit">
 <Title>Herencia</Title>

 <Para>
  Creemos dos clases. La clase <classname>capitals</classname> contiene las capitales de
  los estados que son también ciudades. Naturalmente, la clase
  <classname>capitals</classname> debe heredar de <classname>cities</classname>.

  <ProgramListing>
CREATE TABLE cities (
    name            text,
    population      float,
    altitude        int     -- (in ft)
);

CREATE TABLE capitals (
    state           char(2)
) INHERITS (cities);
  </ProgramListing>

   En este caso, una instancia de <classname>capitals</classname> <FirstTerm>hereda
   (inherits)</FirstTerm> todos los atributos (name, population,
   altitude) de la clase <classname>cities</classname>. El tipo del atributo name es
   <Type>text</Type>, un tipo de dato nativo de
   <ProductName>Postgres</ProductName> para cadenas ASCII de longitud
   variable. El tipo del atributo population es <Type>float</Type>, un
   tipo datos, también nativo, para números de punto flotante de doble
   precisión.
   Además <classname>capitals</classname> tiene un atributo extra, state, que muestra el
   estado al que pertenece. En <ProductName>Postgres</ProductName> una
   clase puede heredar de ninguna o varias otras clases, y una consulta
   puede hacer referencia tanto a todas las instancias de una clase como
   a todas las instancias de sus descendientes.

   <Note>
    <Para>
     En realidad, la jerarquía de la herencia es un gráfico
     dirigido y acíclico.
    </Para>
   </Note>

   Por ejemplo, la siguiente consulta encuentra todas las ciudades
   situadas a una altitud de 500 pies o más:

   <ProgramListing>
SELECT name, altitude
    FROM cities
    WHERE altitude > 500;

+----------+----------+
|name      | altitude |
+----------+----------+
|Las Vegas | 2174     |
+----------+----------+
|Mariposa  | 1953     |
+----------+----------+
   </ProgramListing>
  </Para>

  <Para>
   Por otro lado, para encontrar los nombres de todas las ciudades,
   incluyendo las capitales de estado, que están localizadas
   a un altitud por encima de los 500 pies, la consulta sería:

   <ProgramListing>
SELECT c.name, c.altitude
    FROM cities* c
    WHERE c.altitude > 500;
   </ProgramListing>

Lo que devuelve lo siguiente:

   <ProgramListing>
+----------+----------+
|name      | altitude |
+----------+----------+
|Las Vegas | 2174     |
+----------+----------+
|Mariposa  | 1953     |
+----------+----------+
|Madison   | 845      |
+----------+----------+
   </ProgramListing>

   Aquí, el <Quote>*</Quote> después de <classname>cities</classname> indica que la consulta
   debe realizarse sobre <classname>cities</classname> y todas las clases que estén
   por debajo de ella en la jerarquía de herencia. Muchas de las 
   órdenes que ya hemos analizado (<Command>SELECT</Command>,
   <Command>UPDATE</Command> y <Command>DELETE</Command>) permiten
   la utilización de <Quote>*</Quote>, así como otros, como pueden ser
   <Command>ALTER TABLE</Command>.
  </Para>
 </Chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"./reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->
