<!--
$Header: /home/cvs/lucas/doc-postgresql-es/v7/src/sgml/manage-ag.sgml,v 1.3 2002/06/05 19:13:46 emaldonadog Exp $
-->

<chapter id="managing-databases">
 <title>Gestionando bases de datos</title>

 <para>
  Una base de datos es un conjunto de objetos SQL (<quote>objetos de
  base de datos</quote>); cada objeto de base de datos (tablas,
  funciones, etc) pertenece a una y sólo una base de datos. Una
  aplicación que conecta con el servidor de base de datos especifica
  en su solicitud de conexión el nombre de la base de datos con la que
  se quiere conectar. No es posible acceder a más de una base de datos
  por cada conexión. (Pero una aplicación no tiene restricciones en el
  número de conexiones que abre con la misma u otras bases de datos)
 </para>

 <note>
  <para>
   <acronym>SQL</> lo denomina <quote>catálogos</> de base de datos,
     pero no hay diferencia en la práctica.
  </para>
 </note>

 <para>
  Para crear o borrar bases de datos, el <application>postmaster</>
  de <productname>Postgres</> debe estar arrancado y corriendo (vea
  <xref linkend="postmaster-start">).
 </para>

 <sect1 id="manage-ag-createdb">
  <title>Creación de una base de datos</title>

  <para>
   Las bases de datos se crean con el comando
   <command>CREATE DATABASE</command>:
<synopsis>
CREATE DATABASE <replaceable>nombrebd</>
</synopsis>
   donde <replaceable>nombrebd</> puede escogerse libremente. (Dependiendo
	 de la implementación, pueden prohibirse ciertos caracteres que se
	 consideren especiales para el sistema operativo subyacente. Habrá
	 comprobaciones en tiempo de ejecución para ello.) El usuario actual
	 se convierte automáticamente en el propietario de la base de datos y
	 tiene el privilegio de borrarla más adelante (lo que borrará todos
	 sus objetos, incluidos los que tienen diferente propietario).
  </para>

  <para>
   La creación de bases de datos es una operación restringida. Vea <xref
   linkend="user-attributes"> como conceder permiso.
  </para>

  <formalpara>
   <title>Inicialización</title>
   <para>
	  Ya que se necesita estar conectado al servidor de bases de datos para
		ejecutar el comando <command>CREATE DATABASE</command>, la cuestión es
		cómo se crea la <emphasis>primera</> base de datos. La primera base de
		datos es creada siempre por el comando <command>initdb</> cuando se
		inicializa el área de almacenamiento de datos. (Vea
    <xref linkend="creating-cluster">.) Esta base de datos se llamará
    <literal>template1</> y no se puede borrar. Por lo tanto para crear
		la primera base de datos <quote>real</> nos podemos conectar a
    <literal>template1</>.
   </para>
  </formalpara>

  <para>
   El nombre <quote>template1</quote> no es accidental: Cuando se crea una
	 base de datos, la base de datos "template" (plantilla) es clonada. Esto
	 significa que cualquier cambio que se haga en <literal>template1</> se
	 propaga a todas las bases de datos creadas posteriormente. Esto 
	 implica que no se debería utilizar la base de datos template para el 
	 trabajo real, pero utilizada adecuadamente esta característica puede
	 ser conveniente.
  </para>

  <para>
	 Como utilidad adicional, hay también un programa que se puede ejecutar
	 desde el shell para crear bases de datos nuevas,
   <filename>createdb</>.

<synopsis>
createdb <replaceable class="parameter">nombre</replaceable>
</synopsis>

   <filename>createdb</> no hace magia. Conecta con la base de datos
	 template1 y ejecuta el comando <command>CREATE DATABASE</>, 
	 exactamente como se ha descrito arriba. Utiliza el programa
	 <application>psql</> internamente. La página de ayuda de createdb
	 contiene los detalles de la invocación. En particular, createdb sin
	 argumentos creará una base de datos con el nombre del usuario actual,
	 lo cual puede ser o no lo que se desea.
  </para>

  <sect2>
   <title>Ubicaciones alternativas</title>

   <para>
		Es posible crear una base de datos en un lugar diferente al por 
		defecto. Recuerde que todos los accesos se realizan a través del
		servidor de bases de datos, por lo que la ubicación especificada
		debe estar accesible por el servidor.
   </para>

   <para>
		Las ubicaciones alternativas se indican mediante una variable de
		entorno que da el camino absoluto al directorio de almacenamiento
		deseado. Esta variable de entorno debe haber sido definida antes de
		arrancar el servidor. Se puede utilizar cualquier nombre de variable
		para especificar la localización alternativa, aunque se recomienda
		utilizar el prefijo <literal>PGDATA</> para impedir confusión y
		conflicto con otras variables.
   </para>

   <para>
		Para crear la variable en el entorno del proceso servidor antes se debe
		cerrar el servidor, definir la variable, inicializar el area de datos y
		finalmente rearrancar el servidor. (Vea
    <xref linkend="postmaster-shutdown"> y 
		<xref linkend="postmaster-start">.) Para asignar una variable de entorno
		teclee
    <informalexample>
<programlisting>
PGDATA2=/home/postgres/data
export PGDATA2
</programlisting>
    </informalexample>
    en shells Bourne, o
    <informalexample>
<programlisting>
setenv PGDATA2 /home/postgres/data
</programlisting>
    </informalexample>
    en csh o tcsh. Debe asegurarse de que esta variable de entorno esté
		siempre definida en el entorno del servidor, de otra forma no se podrá
		acceder a esa base de datos. Se recomienda asignarla en algún tipo de
		script de arranque del servidor.
   </para>

   <para>
		Para crear un área de almacenamiento en <envar>PGDATA2</>, asegúrese de
		que ya exista <filename>/home/postgres</filename> y de que sea escribible
		por la cuenta de usuario que ejecuta el servidor (vea 
		<xref linkend="postgres-user">). Después, desde la línea de comando, 
		escriba
    <informalexample>
<programlisting>
initlocation PGDATA2
</programlisting>
    </informalexample>
    Después ya se puede rearrancar el servidor.
   </para>

   <para>
		Para crear una base de datos en la nueva localización, utilice el comando
<synopsis>
CREATE DATABASE <replaceable>nombre</> WITH LOCATION = '
<replaceable>lugar</>'
</synopsis>
    donde <replaceable>lugar</> es la variable de entorno que se ha usado,
    <envar>PGDATA2</> es este ejemplo. El comando <command>createdb</>
		tiene la opción <option>-D</> para este propósito.
   </para>

   <para>
		Se pueden acceder y eliminar las bases de dados en ubicaciones alternativas
		igual que cualquier otra base de datos.
   </para>

   <note>
    <para>
		 También es posible especificar caminos absolutos directamente en el
		 comando <command>CREATE DATABASE</> sin definir variables de entorno.
		 Esto no está permitido por defecto porque es un riesgo de seguridad.
		 Para permitirlo, se debe compilar <productname>Postgres</> con la
		 macro de preprocesador <literal>ALLOW_ABSOLUTE_DBPATHS</> definida.
		 Una forma de hacerlo es ejecutar la fase de compilación así:
     <userinput>gmake CPPFLAGS=-DALLOW_ABSOLUTE_DBPATHS all</>.
    </para>
   </note>

  </sect2>
 </sect1>

 <sect1 id="manage-ag-accessdb">
  <title>Accediendo a una base de datos</title>

  <para>
	 Una vez que se ha generado una base de datos, se puede acceder así:

   <itemizedlist spacing="compact" mark="bullet">
    <listitem>
     <para>
      ejecutar el programa monitor de <productname>Postgres</productname>
      (<application>psql</application>) que permite interactivamente
			introducir, editar y ejecutar comandos <acronym>SQL</acronym>.
     </para>
    </listitem>

    <listitem>
     <para>
			escribir un programa C utilizando la librería de subrutinas
			<literal>libpq</literal>. Esto permite enviar comandos
			<acronym>SQL</acronym> desde C y recibir respuestas y mensajes de
			estado en el programa. Esta interfaz se describe en la
      <citetitle>Guia del programador de PostgreSQL</citetitle>.
     </para>
    </listitem>
   </itemizedlist>

	 Usted podría querer arrancar <application>psql</application>, 
	 para probar los ejemplos de este manual. Puede activarse para la base
	 de datos <replaceable class="parameter">nombrebd</replaceable> 
	 tecleando el comando:

<programlisting>
psql <replaceable class="parameter">nombrebd</replaceable>
</programlisting>

	 Será saludado con el siguiente mensaje:

<programlisting>
Welcome to psql, the PostgreSQL interactive terminal.

Type:  \copyright for distribution terms
       \h for help with SQL commands
       \? for help on internal slash commands
       \g or terminate with semicolon to execute query
       \q to quit


Bienvenido a psql, el terminal interactivo de PostgreSQL

Teclee: \copyright para los términos de distribución
        \h para ayuda con comando SQL
				\? para ayuda con los comandos internos de contrabarra ("\")
				\g o termine con punto y coma (";") para ejecutar el query
				\q para salir

<replaceable>nombrebd</replaceable>=&gt;
</programlisting>
   </para>

   <para>
		Este prompt indica que el terminal está escuchándonos y se pueden
		teclear comandos <acronym>SQL</acronym> en un espacio de trabajo 
		mantenido por el monitor.
    El programa <application>psql</application> responde a códigos de escape
		que comienzan por el carácter contrabarra ("\"). Por ejemplo se puede
		obtener ayuda sobre la sintaxis de varios comandos
		<acronym>SQL</acronym> de <productname>Postgres</productname> 
		tecleando:

    <programlisting>
<replaceable>nombrebd</replaceable>=> \h
    </programlisting>

		Una vez que se ha terminado de introducir la consulta, se pueden pasar
		sus contenidos al servidor de <productname>Postgres</productname>
		tecleando:

    <programlisting>
<replaceable>nombrebd</replaceable>=> \g
    </programlisting>

		Esto le dice al servidor que procese el comando. Si se ha terminado
		la query con punto y coma (";") no se necesita "\g".
    <application>psql</application> procesará automáticamente las querys
		terminadas con punto y coma. Para leer comandos de un fichero, en vez de
		introducirlos interactivamente, teclee:

    <programlisting>
<replaceable>nombrebd</replaceable>=> \i <replaceable class="parameter">nombre_fichero</replaceable>
    </programlisting>

    Para salir de <application>psql</application> y volver a Linux, teclee:

    <programlisting>
<replaceable>nombrebd</replaceable>=&gt; \q
    </programlisting>

    y <application>psql</application> se cerrará y nos devolverá al intérprete
		de comandos. (Para más códigos de escape, teclee "\h" en el monitor.)
		Se pueden utilizar libremente espacios, tabuladores y saltos de línea en
		los comandos <acronym>SQL</acronym>. Los comentarios de una sola línea
		se indican con dos guiones ("<literal>--</literal>"). Cualquier cosa 
		después de los guiones y hasta fin de línea se ignora. Los comentarios
		para varias línea y comentarios dentro de una línea, se indican con
    "<literal>/* ... */</literal>", una convención tomada de
    <productname>Ingres</productname>.
   </para>
 </sect1>
     
 <sect1 id="manage-ag-dropdb">
  <title>Destrucción de una base de datos</title>

  <para>
   Las bases de datos de eliminan con <command>DROP DATABASE</command>:
<synopsis>
DROP DATABASE <replaceable>nombrebd</>
</synopsis>
	 Sólo el propietario de la base de datos (el usuario que la creó)
	 puede eliminarla. La eliminación borra todos los objetos contenidos
	 en la base de datos. Esta destrucción no puede ser deshecha.
  </para>

  <para>
	 No se puede ejecutar el comando <command>DROP DATABASE</command>
	 mientras se está conectado a esa base de datos. Se puede estar
	 conectado a cualquier otra base de datos, incluida "template1",
	 lo que sería la única opción para eliminar la última base de datos
	 de un espacio determinado.
  </para>

  <para>
	 Como utilidad, también existe un programa de shell para eliminar
	 bases de datos:
<synopsis>
dropdb <replaceable class="parameter">nombrebd</replaceable>
</synopsis>
   (A diferencia de <command>createdb</>, no existe la opción por defecto
	 de borrar la base de datos con el nombre del usuario actual.)
  </para>
 </sect1>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode:sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"./reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/lib/sgml/catalog")
sgml-local-ecat-files:nil
End:
-->
