<!--
$Header: /home/cvs/lucas/doc-postgresql-es/v7/src/sgml/REF/select.sgml,v 1.2 2001/10/11 21:46:27 rssantos Exp $
Postgres documentation
-->

<refentry id="SQL-SELECT">
 <refmeta>
  <refentrytitle id="sql-select-title">
   SELECT
  </refentrytitle>
  <refmiscinfo>SQL - Declaraciones del lenguaje</refmiscinfo>
 </refmeta>
 <refnamediv>
  <refname>
   SELECT
  </refname>
  <refpurpose>
	Recupera registros desde una tabla o vista.
  </refpurpose></refnamediv>
 <refsynopsisdiv>
  <refsynopsisdivinfo>
   <date>1999-07-20</date>
  </refsynopsisdivinfo>
  <synopsis>
SELECT [ ALL | DISTINCT [ ON ( <replaceable class="PARAMETER">expression</replaceable> [, ...] ) ] ]
    <replaceable class="PARAMETER">expression</replaceable> [ AS <replaceable class="PARAMETER">name</replaceable> ] [, ...]
    [ INTO [ TEMPORARY | TEMP ] [ TABLE ] <replaceable class="PARAMETER">new_table</replaceable> ]
    [ FROM <replaceable class="PARAMETER">table</replaceable> [ <replaceable class="PARAMETER">alias</replaceable> ] [, ...] ]
    [ WHERE <replaceable class="PARAMETER">condition</replaceable> ]
    [ GROUP BY <replaceable class="PARAMETER">column</replaceable> [, ...] ]
    [ HAVING <replaceable class="PARAMETER">condition</replaceable> [, ...] ]
    [ { UNION [ ALL ] | INTERSECT | EXCEPT } <replaceable class="PARAMETER">select</replaceable> ]
    [ ORDER BY <replaceable class="PARAMETER">column</replaceable> [ ASC | DESC | USING <replaceable class="PARAMETER">operator</replaceable> ] [, ...] ]
    [ FOR UPDATE [ OF <replaceable class="PARAMETER">class_name</replaceable> [, ...] ] ]
    LIMIT { <replaceable class="PARAMETER">count</replaceable> | ALL } [ { OFFSET | , } <replaceable class="PARAMETER">start</replaceable> ]
  </synopsis>
  
  <refsect2 id="R2-SQL-SELECT-1">
   <refsect2info>
    <date>1998-09-24</date>
   </refsect2info>
   <title>
    Inputs
   </title>

   <para>
    <variablelist>
     <varlistentry>
      <term><replaceable class="PARAMETER">expression</replaceable></term>
      <listitem>
       <para>
	El nombre de una columna de la tabla o una expresión.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry>
      <term><replaceable class="PARAMETER">name</replaceable></term>
      <listitem>
       <para>
	Especifica otro nombre para una columna o una expresión que 	utilice la cláusula AS. Este nombre se utiliza principalmente 	como etiqueta para la columna de salid. El nombre no puede ser utilizado 	en las cláusulas WHERE, GROUP BY o HAVING. Sin embargo, puede ser 	referenciado en cláusulas ORDER BY.
       </para>
      </listitem>
     </varlistentry>
     
    <varlistentry>
     <term>TEMPORARY</term>
     <term>TEMP</term>
     <listitem>
      <para>
	La tabla se crea solamente para esta sesión, y es 	automáticamente descartada al finalizar la misma.
      </para>
     </listitem>
    </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_table</replaceable></term>
      <listitem>
       <para>
	Si se utiliza la cláusula INTO TABLE, el resultado de la consulta 	se almacenará en otra tabla con el nombre indicado. 
	La tabla objetivo 
	(<replaceable class="parameter">new_table</replaceable>)
	será creada automáticamente y no deberá existir 	previamente a la utilización de este comando. Consulte el comando 
	<command>SELECT INTO</command> para más información.

	<note>
	 <para>
	  La declaración <command>CREATE TABLE AS</command> 	  	  también creará una nueva tabla a partir de la consulta.
	 </para>
	</note>
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry>
      <term><replaceable class="PARAMETER">table</replaceable></term>
      <listitem>
       <para>
	El nombre de una tabla existente a la que se refiere la	cláusula 	FROM.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry>
      <term><replaceable class="PARAMETER">alias</replaceable></term>
      <listitem>
       <para>
	Un nombre alternativo para la tabla precedente 
	<replaceable class="PARAMETER">table</replaceable>.
	Se utiliza para abreviar o eliminar ambigüedades en uniones dentro de 	una misma tabla.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry>
      <term><replaceable class="PARAMETER">condition</replaceable></term>
      <listitem>
       <para>
	Una expresión booleana que da como resultado verdadero o falso 	(true or false). Consulte la cláusula WHERE.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">column</replaceable></term>
      <listitem>
       <para>
	El nombre de una columna de la tabla.	
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry>
      <term><replaceable class="PARAMETER">select</replaceable></term>
      <listitem>
       <para>
	Una declaración de selección (select) exceptuando la 	cláusula ORDER BY.
	   </para>
      </listitem>
     </varlistentry>
     
    </variablelist>
   </para>
  </refsect2>
  
  <refsect2 id="R2-SQL-SELECT-2">
   <refsect2info>
    <date>24-09-1998</date>
   </refsect2info>
   <title>
    Outputs
   </title>
   <para>

    <variablelist>
     <varlistentry>
      <term>Registros</term>
      <listitem>
       <para>
	El conjunto completo de registros (filas) que resultan de la 	especificación de la consulta.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>
       <returnvalue><replaceable>count</replaceable></returnvalue>
      </term>
      <listitem>
       <para>
	La cantidad de registros (filas) devueltos por la consulta.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </refsect2>
 </refsynopsisdiv>

 <refsect1 id="R1-SQL-SELECT-1">
  <refsect1info>
   <date>24-09-1998</date>
  </refsect1info>
  <title>
   Descripción
  </title>
  <para>
   <command>SELECT</command> devuelve registros de una o más tablas. 	Los candidatos a ser seleccionados son aquellos registros que cumplen la 	condición especificada con WHERE; si se omite WHERE, se retornan 	todos los registros.

   (Consulte <xref linkend="sql-where" endterm="sql-where-title">.)
  </para>

  <para>
   <command>DISTINCT</command> elimina registros duplicados del resultado.
   <command>ALL</command> (predeterminado) devolverá todos los 	registros, que cumplan con la consulta, incluyendo los duplicados.
  </para>

  <para>
   <command>DISTINCT ON</command> elimina los registros que cumplen con 	todas las expresiones especificadas, manteniendo solamente el primer 	registro de cada conjunto de duplicados. Note que no se puede 	predecir cuál será "el primer registro" a menos que se 	utilice <command>ORDER BY</command> para asegurar que el registro 	eseado es el que efectivamente aparece primero. Por ejemplo:

   <programlisting>
        SELECT DISTINCT ON (location) location, time, report
        FROM weatherReports
        ORDER BY location, time DESC;
   </programlisting>
	recuperea el reporte de tiempo (weather report) más reciente para 	cada locación (location). Pero si no se hubiera utilizado ORDER 	BY para forzar el orden descendente de los valores de fecha para cada 	locación, se hubiesen recuperado reportes de una fecha 	impredecible para cada locación.
  </para>

  <para>
	La cláusula GROUP BY permite al usuario dividir una tabla 	conceptualmente en grupos.

   (Consulte <xref linkend="sql-groupby" endterm="sql-groupby-title">.)
  </para>

  <para>
	La cláusula HAVING especifica una tabla con grupos derivada de 	la eliminación de grupos del resultado de la cláusula 	previamente especificada.

   (Consulte <xref linkend="sql-having" endterm="sql-having-title">.)
  </para>
   
  <para>
	La cláusula ORDER BY permite al usuario especificar si quiere los 	registros ordenados de manera ascendente o descendente utilizando los 	operadores de modo ASC y DESC.

   (Consulte <xref linkend="sql-orderby-title" endterm="sql-orderby-title">.)
  </para>
   
  <para>
	El operador UNION permite permite que el resultado sea una 	colección de registros devueltos por las consultas involucradas.

   (Consulte <xref linkend="sql-union" endterm="sql-union-title">.)
  </para>
   
  <para>
	El operador INTERSECT le da los registros comunes a ambas consultas.

   (Consulte <xref linkend="sql-intersect" endterm="sql-intersect-title">.)
  </para>
   
  <para>
	El operador EXCEPT le da los registros devueltos por la primera consulta 	que no se encuentran en la segunda consulta.

   (Consulte <xref linkend="sql-except" endterm="sql-except-title">.)
  </para>
   
  <para>
	La cláusula FOR UPDATE permite a SELECT realizar un bloqueo 	exclusivo de los registros seleccionados.
  </para>
   
  <para>
	La cláusula LIMIT permite devolver al usuario un subconjunto de 	los registros producidos por la consulta.

   (Consulte <xref linkend="sql-limit" endterm="sql-limit-title">.)
  </para>

  <para>
	Usted debe tener permiso de realizar SELECT sobre una tabla para poder 	leer sus valores.

   	(Consulte las declaraciones 	<command>GRANT</command>/<command>REVOKE</command>).
  </para>
   
  <refsect2 id="SQL-WHERE">
   <refsect2info>
    <date>24-09-1998</date>
   </refsect2info>
   <title id="sql-where-title">
    Cláusula WHERE 
   </title>

   <para>
	La condición opcional WHERE tiene la forma general:

    
    <synopsis>
WHERE <replaceable class="PARAMETER">boolean_expr</replaceable>
    </synopsis>
    
    <replaceable class="PARAMETER">boolean_expr</replaceable>
	puede consistir de cualquier expresión cuyo resultado sea un 	valor booleano. En muchos casos, esta expresión será:

    <synopsis>
     <replaceable class="PARAMETER">expr</replaceable> <replaceable class="PARAMETER">cond_op</replaceable> <replaceable class="PARAMETER">expr</replaceable>
    </synopsis>

    o

    <synopsis>
     <replaceable class="PARAMETER">log_op</replaceable> <replaceable class="PARAMETER">expr</replaceable>
    </synopsis>


    donde <replaceable class="PARAMETER">cond_op</replaceable>
	puede ser uno de: =, &lt;, &lt;=, &gt;, &gt;= or &lt;&gt;,
	un operador condicional como ALL, ANY, IN, LIKE o operador definido 	localmente,
	y <replaceable class="PARAMETER">log_op</replaceable> puede ser uno de: 	AND, OR, NOT.
	La comparación devuelve TRUE (verdadero) o FALSE (falso) y todas 	las instancias serán descartadas si la expresión resulta 	falsa.
   </para>
  </refsect2>
  
  <refsect2 id="SQL-GROUPBY">
   <refsect2info>
    <date>1998-09-24</date>
   </refsect2info>
   <title id="sql-groupby-title">
    Cláusula GROUP BY 
   </title>
   <para>
	GROUP BY especifica una tabla con grupos derivada de la 	aplicación de esta cláusula:

    <synopsis>
	GROUP BY <replaceable class="PARAMETER">column</replaceable> [, ...]
    </synopsis>
   </para>

   <para>
	GROUP BY condensará en una sola fila todos aquellos registros que 	compartan los mismos valores para las columnas agrupadas. Las funciones 	de agregación, si las hubiera, son computadas a través de 	todas las filas que conforman cada grupo, produciendo un valor separado 	por cada uno de los grupos (mientras que sin GROUP BY, una 	función de agregación produce un solo valor computado a 	través de todas las filas seleccionadas). Cuando GROUP BY 	está presente, no es válido hacer referencia a columnas no 	agrupadas excepto dentro de funciones de agregación, ya que 	habría más de un posible valor de retorno para una columna 	no agrupada.
   </para>
  </refsect2>

  <refsect2 id="SQL-HAVING">
   <refsect2info>
    <date>24-09-1998</date>
   </refsect2info>
   <title id="sql-having-title">
    Cláusula HAVING 
   </title>
   <para>
	La condición opcional HAVING tiene la forma general:
    
    <synopsis>
HAVING <replaceable class="PARAMETER">cond_expr</replaceable>
    </synopsis>

	donde <replaceable class="PARAMETER">cond_expr</replaceable> cumple las 	mismas condiciones que las especificadas para WHERE. 
   </para>
    
   <para>
    HAVING especifica una tabla con grupos derivada de la eliminación 	de grupos, del resultado de la cláusula previamente especificada, 	que no cumplen con <replaceable 	class="PARAMETER">cond_expr</replaceable>.</para>

   <para>
	Cada columna referenciada en 
    <replaceable class="PARAMETER">cond_expr</replaceable> 
	debe referirse precisamente (sin ambigüedades) a una columna de grupo, a 	menos que la referencia aparezca dentro de una función de 	agregación.
   </para>
  </refsect2>
  
  <refsect2 id="SQL-ORDERBY">
   <refsect2info>
    <date>24-09-1998</date>
   </refsect2info>
   <title id="sql-orderby-title">
    Cláusula ORDER BY 
   </title>
   <para>
    <synopsis>
ORDER BY <replaceable class="PARAMETER">column</replaceable> [ ASC | DESC ] [, ...]
    </synopsis></para>
    
   <para>
    <replaceable class="PARAMETER">column</replaceable> puede ser tanto el 	nombre de una columna como un número ordinal.
   </para>

   <para>
	Los números ordinales hacen referencia a la posición (de 	izquierda a derecha) de la columna. Esta característica hace 	posible definir un orden basado en una columna que no tiene un nombre 	adecuado.
	Esto nunca es absolutamente necesario ya que siempre es posible asignar 	un nombre a una columna calculada utilizando la cláusula AS, 	por ej.:	
    <programlisting>
	SELECT title, date_prod + 1 AS newlen FROM films ORDER BY newlen;
    </programlisting>
   </para>
    
   <para>
	A partir de la versión 6.4 de PostgreSQL, es también 	posible ordenar, con ORDER BY, según expresiones arbitrarias, 	incluyendo campos que no aparecen en el resultado de SELECT.
	Por lo tanto, la siguiente declaración es legal:

    <programlisting>
	SELECT name FROM distributors ORDER BY code;
    </programlisting>
   </para>
    
   <para>
	Opcionalmente una puede agregar la palabra clave DESC (descendente) o 	ASC (ascendente) luego del nombre de cada columna en la cláusula 	ORDER BY. Si no se especifica, se asume ASC de forma predeterminada. 	Alternativamente, puede indicarse un nombre de operador de orden 	específico. ASC es equivalente a USING '&lt;' y DESC es 	equivalente a USING '&gt;'.
   </para>

  </refsect2>
  
  <refsect2 id="SQL-UNION">
   <refsect2info>
    <date>24-09-1998</date>
   </refsect2info>
   <title id="sql-union-title">
    Cláusula UNION 
   </title>
   <para>
    <synopsis>
<replaceable class="PARAMETER">table_query</replaceable> UNION [ ALL ] <replaceable class="PARAMETER">table_query</replaceable>
    [ ORDER BY <replaceable class="PARAMETER">column</replaceable> [ ASC | DESC ] [, ...] ]
    </synopsis>

    donde
    <replaceable class="PARAMETER">table_query</replaceable>
	especifica cualquier declaración SELECT sin la cláusula 	ORDER BY.
   </para>
    
   <para>
	El operador UNION permite que el resultado sea una colección de 	registros devueltos por las consultas involucradas.
	Los dos SELECTs que representan los dos operandos directos de la UNION 	deben producir el mismo número de columnas, y las columnas 	correspondientes deben ser de tipos de datos compatibles.
   </para>
    
   <para>
	De forma predeterminada, el resultado de UNION no contiene registros 	duplicados a menos que se especifique la cláusula ALL.
   </para>
    
   <para>
	Si se utilizan varios operadores UNION en la misma declaración 	SELECT se evalúan de izquierda a derecha.
	Note que la palabra clave ALL no es global, siendo aplicada solamente al 	par de tablas de resultado actual.
   </para>

  </refsect2>

  <refsect2 id="SQL-INTERSECT">
   <refsect2info>
    <date>24-09-1998</date>
   </refsect2info>
   <title id="sql-intersect-title">
    Cláusula INTERSECT 
   </title>
   <para>
    <synopsis>
<replaceable class="PARAMETER">table_query</replaceable> INTERSECT <replaceable class="PARAMETER">table_query</replaceable>
    [ ORDER BY <replaceable class="PARAMETER">column</replaceable> [ ASC | DESC ] [, ...] ]
    </synopsis>
    
    donde
    <replaceable class="PARAMETER">table_query</replaceable>
	especifica cualquier expresión SELECT sin la cláusula 	ORDER BY.
   </para>

   <para>
	El operador INTERSECT le da los registros comunes a ambas consultas.	
	Los dos SELECTs que representan los operandos directos de la 	intersección deben producir el mismo número de columnas, 
	y las columnas correspondientes deben ser de tipos de datos compatibles.
   </para>
    
   <para>
	Si se utilizan varios operadores INTERSECT en la misma 	declaración SELECT se evalúan de izquierda a derecha, a 	menos que se utilicen paréntesis para modificar esto.
   </para>
  </refsect2>

  <refsect2 id="SQL-EXCEPT">
   <refsect2info>
    <date>24-09-1998</date>
   </refsect2info>
   <title id="sql-except-title">
    Cláusula EXCEPT 
   </title>
   <para>
    <synopsis>
<replaceable class="PARAMETER">table_query</replaceable> EXCEPT <replaceable class="PARAMETER">table_query</replaceable>
     [ ORDER BY <replaceable class="PARAMETER">column</replaceable> [ ASC | DESC ] [, ...] ]
    </synopsis>
    
    donde
    <replaceable class="PARAMETER">table_query</replaceable>
	especifica cualquier expresión SELECT sin la cláusula
	ORDER BY. 
   </para>

   <para>
	El operador EXCEPT le da los registros devueltos por la primera consulta 	pero no por la segunda.
	Los dos SELECTs que representan los operandos directos de la 	intersección deben producir el mismo número de columnas, 
	y las columnas correspondientes deben ser de tipos de datos compatibles.
   </para>

   <para>
	Si se utilizan varios operadores INTERSECT en la misma 	declaración SELECT se evalúan de izquierda a derecha, a 	menos que se utilicen paréntesis para modificar esto.
   </para>

  </refsect2>

  <refsect2 id="SQL-LIMIT">
   <refsect2info>
    <date>20-02-2000</date>
   </refsect2info>
   <title id="sql-limit-title">
    Cláusula LIMIT 
   </title>
   <para>
    <synopsis>
    LIMIT { <replaceable class="PARAMETER">count</replaceable> | ALL } [ { OFFSET | , } <replaceable class="PARAMETER">start</replaceable> ]
    OFFSET <replaceable class="PARAMETER">start</replaceable>
    </synopsis>
    
    donde
    <replaceable class="PARAMETER">count</replaceable> 
	especifica el máximo número de registros a devolver y	
    <replaceable class="PARAMETER">start</replaceable> 
	especifica el número de registros a saltear antes de empezar a 	devolver registros.
   </para>

   <para>
	LIMIT le permite recuperar sólo una porción de los 	registros que se generan por el resto de la consulta. Si se especifica 	un número límite, no se devolverán más 	registros que esa cantidad. Si se da un valor de desplazamiento, esa 	cantidad de registros será salteada antes de comenzar a devolver 	registros.
   </para>

   <para>
	Cuando se utiliza LIMIT es una buena idea utilizar la cláusula 	ORDER BY para colocar los registros del resultado en un orden 	único. De otra forma obtendrá un subconjunto impredecible 
	de los registros de la consulta --- tal vez esté buscando los 	registros del décimo al vigésimo, ¿pero del décimo 	al vigésimo en qué orden? Usted no conoce el orden a menos 	que utilice ORDER BY.
   </para>

   <para>
	Ya en Postgres 7.0, el optimizador de consultas toma en cuenta a LIMIT 	cuando genera un plan de consulta, así que es muy factible que 	usted obtenga diferentes planes (abarcando diferentes criterios de 	ordenamiento de registros) dependiendo de los valores dados a LIMIT y 	OFFSET. Por lo tanto, utilizar diferentes valores para LIMIT/OFFSET para 	seleccionar diferentes subconjuntos del resultado de una consulta, 
	<emphasis>provocará resultados inconsistentes</emphasis> a menos
	que usted se asegura un resultado predecible ordenando con ORDER BY. 	Esto no es un bug; es una consecuencia inherente al hecho de que SQL no
	establece ningún compromiso de entregar los resultados de una 	consulta en un orden en particular a menos que se utilice ORDER BY para
	especificar un criterio de orden explícitamente.
   </para>
  </refsect2>
 </refsect1>

 <refsect1 id="R1-SQL-SELECT-2">
  <title>
   Uso
  </title>

  <para>
	Para unir la tabla <literal>films</literal> con la tabla
    <literal>distributors</literal>:

   <programlisting>
SELECT f.title, f.did, d.name, f.date_prod, f.kind
    FROM distributors d, films f
    WHERE f.did = d.did

title                    |did|name            | date_prod|kind
-------------------------+---+----------------+----------+----------
The Third Man            |101|British Lion    |1949-12-23|Drama
The African Queen        |101|British Lion    |1951-08-11|Romantic
Une Femme est une Femme  |102|Jean Luc Godard |1961-03-12|Romantic
Vertigo                  |103|Paramount       |1958-11-14|Action
Becket                   |103|Paramount       |1964-02-03|Drama
48 Hrs                   |103|Paramount       |1982-10-22|Action
War and Peace            |104|Mosfilm         |1967-02-12|Drama
West Side Story          |105|United Artists  |1961-01-03|Musical
Bananas                  |105|United Artists  |1971-07-13|Comedy
Yojimbo                  |106|Toho            |1961-06-16|Drama
There's a Girl in my Soup|107|Columbia        |1970-06-11|Comedy
Taxi Driver              |107|Columbia        |1975-05-15|Action
Absence of Malice        |107|Columbia        |1981-11-15|Action
Storia di una donna      |108|Westward        |1970-08-15|Romantic
The King and I           |109|20th Century Fox|1956-08-11|Musical
Das Boot                 |110|Bavaria Atelier |1981-11-11|Drama
Bed Knobs and Broomsticks|111|Walt Disney     |          |Musical
   </programlisting>
  </para>

  <para>
	Para sumar la columna <literal>len</literal> (duración) de todos 	los filmes y agrupar los resultados según 	la columna <literal>kind</literal> (tipo):

   <programlisting>
SELECT kind, SUM(len) AS total FROM films GROUP BY kind;

    kind      |total
    ----------+------
    Action    | 07:34
    Comedy    | 02:58
    Drama     | 14:28
    Musical   | 06:42
    Romantic  | 04:38
   </programlisting>
  </para>

  <para>
	Para sumar la columna <literal>len</literal> de todos los filmes, 	agrupar los resultados según la columna <literal>kind</literal> y 	mostrar los totales de esos grupos que sean menores a 5 horas:

   <programlisting>
SELECT kind, SUM(len) AS total
    FROM films
    GROUP BY kind
    HAVING SUM(len) < INTERVAL '5 hour';

    kind      |total
    ----------+------
    Comedy    | 02:58
    Romantic  | 04:38
   </programlisting>
  </para>

  <para>
	Los siguientes dos ejemplos muestran maneras idénticas de ordenar 	los resultados individuales de acuerdo con los contenidos de la segunda 
	columna (<literal>name</literal>):

   <programlisting>
SELECT * FROM distributors ORDER BY name;
SELECT * FROM distributors ORDER BY 2;

    did|name
    ---+----------------
    109|20th Century Fox
    110|Bavaria Atelier
    101|British Lion
    107|Columbia
    102|Jean Luc Godard
    113|Luso films
    104|Mosfilm
    103|Paramount
    106|Toho
    105|United Artists
    111|Walt Disney
    112|Warner Bros.
    108|Westward
   </programlisting>
  </para>

  <para>
	Este ejemplo muestra cómo obtener la union de las tablas
   <literal>distributors</literal> y <literal>actors</literal>, 
	restringiendo los resultados a aquellos que comienzan con la letra W en 	cada tabla. No se quieren duplicados, así que la palabra clave 	ALL se omite.

   <programlisting>
    --        distributors:                actors:
    --        did|name                     id|name
    --        ---+------------             --+--------------
    --        108|Westward                  1|Woody Allen
    --        111|Walt Disney               2|Warren Beatty
    --        112|Warner Bros.              3|Walter Matthau
    --        ...                           ...

SELECT distributors.name
    FROM   distributors
    WHERE  distributors.name LIKE 'W%'
UNION
SELECT actors.name
    FROM   actors
    WHERE  actors.name LIKE 'W%'

name
--------------
Walt Disney
Walter Matthau
Warner Bros.
Warren Beatty
Westward
Woody Allen
   </programlisting>
  </para>
 </refsect1>
 
 <refsect1 id="R1-SQL-SELECT-3">
  <title>
   Compatibilidad
  </title>
  
  <refsect2 id="R2-SQL-SELECT-4">
   <refsect2info>
    <date>1998-09-24</date>
   </refsect2info>
   <title>
    <acronym>Extensiones</acronym>
   </title>

   <para>
<productname>Postgres</productname> permite omitir la cláusula
<command>FROM</command> de una consulta. Esta característica fue conservada del lenguaje original de consulta PostQuel:

  <programlisting>
SELECT distributors.* WHERE name = 'Westwood';

    did|name
    ---+----------------
    108|Westward
  </programlisting>
   </para>
  </refsect2>

  <refsect2 id="R2-SQL-SELECT-5">
   <refsect2info>
    <date>24-09-1998</date>
   </refsect2info>
   <title>
    <acronym>SQL92</acronym>
   </title>
   <para>
   </para>
   
   <refsect3 id="R3-SQL-SELECT-1">
    <refsect3info>
     <date>1998-04-15</date>
    </refsect3info>
    <title>
     Cláusula SELECT 
    </title>
    <para>
	En el estándar <acronym>SQL92</acronym>, la palabra clave  	opcional "AS" es totalmente prescindible y puede ser omitida sin afectar 	el significado. 
	El analizador sintáctico de <productname>Postgres</productname> 	requiere la presencia de esta palabra cuando se renombran columnas 	debido a las características de extensibilidad de tipos que 	pueden llevar a interpretaciones ambiguas en este contexto.
	</para>
     
    <para>
	 DISTINCT ON no es parte de <acronym>SQL92</acronym>.
     Tampoco los son LIMIT y OFFSET.
    </para>
   </refsect3>

   <refsect3 id="R3-SQL-UNION-1">
    <refsect3info>
     <date>24-09-1998</date>
    </refsect3info>
    <title>
     Cláusula UNION
    </title>
    <para>
     La sintaxis de <acronym>SQL92</acronym> para UNION admite una 	 	 cláusula adicional CORRESPONDING BY:

     <synopsis> 
<replaceable class="PARAMETER">table_query</replaceable> UNION [ALL]
    [CORRESPONDING [BY (<replaceable class="PARAMETER">column</replaceable> [,...])]]
    <replaceable class="PARAMETER">table_query</replaceable>
     </synopsis></para>

    <para>
     La cláusula CORRESPONDING BY no es soportada por 
     <productname>Postgres</productname>.
    </para>
   </refsect3>
   
  </refsect2>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->
