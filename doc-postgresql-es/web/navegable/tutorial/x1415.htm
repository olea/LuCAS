<HTML
><HEAD
><TITLE
>Valores No-Atómicos</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.54"><LINK
REL="HOME"
TITLE="PostgreSQL Tutorial"
HREF="tutorial.htm"><LINK
REL="UP"
TITLE="Características Avanzadas de SQL en Postgres"
HREF="advanced.htm"><LINK
REL="PREVIOUS"
TITLE="Características Avanzadas de SQL en Postgres"
HREF="advanced.htm"><LINK
REL="NEXT"
TITLE="Time Travel (Viaje en el tiempo)"
HREF="x1437.htm"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>PostgreSQL Tutorial</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="advanced.htm"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 6. Características Avanzadas de <SPAN
CLASS="ACRONYM"
>SQL</SPAN
> en <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="x1437.htm"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="AEN1415"
>Valores No-Atómicos</A
></H1
><P
>    Uno de los principios del modelo relacional es que los atributos de una relación son atómicos 
	<SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
> no posee esta restricción; los atributos pueden contener 
	sub-valores que pueden ser accesados desde el lenguaje de consulta. Por ejemplo, usted puede 
	crear atributos que sean vectores de alguno de los tipos base.
   </P
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="AEN1419"
>Vectores</A
></H2
><P
>     <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
> permite que los atributos de una instancia sean 
	definidos como vectores multidimensionales de longitud fija o variable. Puede crear 
	vectores de cualquiera de los tipos base o de tipos definidos por el usuario. Para 
	ilustrar su uso, creemos primero una clase con vectores de tipos base.

     <PRE
CLASS="PROGRAMLISTING"
>CREATE TABLE SAL_EMP (
    name            text,
    pay_by_quarter  int4[],
    schedule        text[][]
);
     </PRE
>
    </P
><P
>     La consulta de arriba creará una clase llamada SAL_EMP con una cadena del tipo 
	<I
CLASS="FIRSTTERM"
>text</I
>  (name),un vector unidimensional del tipo 
	<I
CLASS="FIRSTTERM"
>int4</I
>
     (pay_by_quarter), el cual representa el salario trimestral del empleado y un vector 
	bidimensional del tipo  <I
CLASS="FIRSTTERM"
>text</I
>
     (schedule),  que representa la agenda semanal del empleado. Ahora realizamos algunos 
	<I
CLASS="FIRSTTERM"
>INSERTS</I
>s; note que cuando agregamos valores a un vector, 
	encerramos los valores entre llaves y los separamos mediante comas. Si usted conoce 
	<I
CLASS="FIRSTTERM"
>C</I
>,
     esto no es distinto a la sintaxis para inicializar estructuras. 

     <PRE
CLASS="PROGRAMLISTING"
>INSERT INTO SAL_EMP
    VALUES ('Bill',
    '{10000, 10000, 10000, 10000}',
    '{{"meeting", "lunch"}, {}}');

INSERT INTO SAL_EMP
    VALUES ('Carol',
    '{20000, 25000, 25000, 25000}',
    '{{"talk", "consult"}, {"meeting"}}');
     </PRE
>

     <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
>  utiliza de forma predeterminada la convención 
	de vectores "basados en uno" -- es decir, un vector de n elementos comienza con 
	vector[1] y termina con vector[n]. Ahora podemos ejecutar algunas consultas sobre 
	SAL_EMP. Primero mostramos como acceder a un solo elemento del vector por vez. Esta 
	consulta devuelve los nombres de los empleados cuyos pagos han cambiado en el segundo 
	trimestre: 
     <PRE
CLASS="PROGRAMLISTING"
>SELECT name
    FROM SAL_EMP
    WHERE SAL_EMP.pay_by_quarter[1] &lt;&gt;
    SAL_EMP.pay_by_quarter[2];

+------+
|name  |
+------+
|Carol |
+------+
     </PRE
>
    </P
><P
>     La siguiente consulta recupera el pago del tercer trimestre de todos los empleados: 
     
     <PRE
CLASS="PROGRAMLISTING"
>SELECT SAL_EMP.pay_by_quarter[3] FROM SAL_EMP;


+---------------+
|pay_by_quarter |
+---------------+
|10000          |
+---------------+
|25000          |
+---------------+
     </PRE
>
    </P
><P
>     También podemos acceder a cualquier porción de un vector, o subvectores. 
	Esta consulta recupera el primer item de la agenda de Bill para los primeros dos días de la semana. 

     <PRE
CLASS="PROGRAMLISTING"
>SELECT SAL_EMP.schedule[1:2][1:1]
    FROM SAL_EMP
    WHERE SAL_EMP.name = 'Bill';

+-------------------+
|schedule           |
+-------------------+
|{{"meeting"},{""}} |
+-------------------+
     </PRE
>
    </P
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="advanced.htm"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="tutorial.htm"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="x1437.htm"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Características Avanzadas de <SPAN
CLASS="ACRONYM"
>SQL</SPAN
> en <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="advanced.htm"
>Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Time Travel (Viaje en el tiempo)</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>