<HTML
><HEAD
><TITLE
>   CREATE INDEX
  </TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.54"><LINK
REL="HOME"
TITLE="Manual del usuario de PostgreSQL"
HREF="user.htm"><LINK
REL="UP"
TITLE="Instrucciones SQL"
HREF="sql-commands.htm"><LINK
REL="PREVIOUS"
TITLE="   CREATE GROUP
  "
HREF="sql-creategroup.htm"><LINK
REL="NEXT"
TITLE="   CREATE LANGUAGE
  "
HREF="sql-createlanguage.htm"></HEAD
><BODY
CLASS="REFENTRY"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>Manual del usuario de PostgreSQL</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="sql-creategroup.htm"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="sql-createlanguage.htm"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><H1
><A
NAME="SQL-CREATEINDEX"
>CREATE INDEX</A
></H1
><DIV
CLASS="REFNAMEDIV"
><A
NAME="AEN5338"
></A
><H2
>Name</H2
>   CREATE INDEX
  &nbsp;--&nbsp;   Constructs a secondary index
  </DIV
><DIV
CLASS="REFSYNOPSISDIV"
><A
NAME="AEN5341"
></A
><H2
>Synopsis</H2
><PRE
CLASS="SYNOPSIS"
>CREATE [ UNIQUE ] INDEX <TT
CLASS="REPLACEABLE"
><I
>index_name</I
></TT
> ON <TT
CLASS="REPLACEABLE"
><I
>table</I
></TT
>
    [ USING <TT
CLASS="REPLACEABLE"
><I
>acc_name</I
></TT
> ] ( <TT
CLASS="REPLACEABLE"
><I
>column</I
></TT
> [ <TT
CLASS="REPLACEABLE"
><I
>ops_name</I
></TT
>] [, ...] )
CREATE [ UNIQUE ] INDEX <TT
CLASS="REPLACEABLE"
><I
>index_name</I
></TT
> ON <TT
CLASS="REPLACEABLE"
><I
>table</I
></TT
>
    [ USING <TT
CLASS="REPLACEABLE"
><I
>acc_name</I
></TT
> ] ( <TT
CLASS="REPLACEABLE"
><I
>func_name</I
></TT
>( <TT
CLASS="REPLACEABLE"
><I
>r"&#62;col</I
></TT
>le&#62; [, ... ]) <TT
CLASS="REPLACEABLE"
><I
>ops_name</I
></TT
> )
  </PRE
><DIV
CLASS="REFSECT2"
><A
NAME="R2-SQL-CREATEINDEX-1"
></A
><H3
>    Inputs
   </H3
><P
>&#13;    <P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
>UNIQUE</DT
><DD
><P
>	Causes the system to check for
	duplicate values in the table when the index is created (if data
	already exist) and each time data is added. Attempts to
	insert or update non-duplicate data will generate an
	error.
       </P
></DD
><DT
><TT
CLASS="REPLACEABLE"
><I
>index_name</I
></TT
></DT
><DD
><P
>	The name of the index to be created.
       </P
></DD
><DT
><TT
CLASS="REPLACEABLE"
><I
>table</I
></TT
></DT
><DD
><P
>	The name of the table to be indexed.
       </P
></DD
><DT
><TT
CLASS="REPLACEABLE"
><I
>acc_name</I
></TT
></DT
><DD
><P
>	the name of the access method which is to be used for
	the index. The default access method is BTREE.
	Postgres provides three access methods for secondary indexes:

	<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
>BTREE</DT
><DD
><P
>	    an implementation of the Lehman-Yao
	    high-concurrency btrees.
	   </P
></DD
><DT
>RTREE</DT
><DD
><P
>implements standard rtrees using Guttman's
	    quadratic split algorithm.
	   </P
></DD
><DT
>HASH</DT
><DD
><P
>	    an implementation of Litwin's linear hashing.
	   </P
></DD
></DL
></DIV
>
       </P
></DD
><DT
><TT
CLASS="REPLACEABLE"
><I
>column</I
></TT
></DT
><DD
><P
>	The name of a column of the table.
       </P
></DD
><DT
><TT
CLASS="REPLACEABLE"
><I
>ops_name</I
></TT
></DT
><DD
><P
>	An associated operator class. See below for details.
       </P
></DD
><DT
><TT
CLASS="REPLACEABLE"
><I
>func_name</I
></TT
></DT
><DD
><P
>	A user-defined function, which returns a value that can
	be indexed.
       </P
></DD
></DL
></DIV
>
   </P
></DIV
><DIV
CLASS="REFSECT2"
><A
NAME="R2-SQL-CREATEINDEX-2"
></A
><H3
>    Outputs
   </H3
><P
>&#13;    <P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
><TT
CLASS="COMPUTEROUTPUT"
>CREATE
       </TT
></DT
><DD
><P
>	The message returned if the index is successfully created.
       </P
></DD
><DT
><TT
CLASS="COMPUTEROUTPUT"
>ERROR: Cannot create index: 'index_name' already exists.
       </TT
></DT
><DD
><P
>	This error occurs if it is impossible to create the index.
       </P
></DD
></DL
></DIV
>
   </P
></DIV
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="R1-SQL-CREATEINDEX-1"
></A
><H2
>   Description
  </H2
><P
>   <B
CLASS="COMMAND"
>CREATE INDEX</B
> constructs an index 
   <TT
CLASS="REPLACEABLE"
><I
>index_name</I
></TT
>
   on the specified <TT
CLASS="REPLACEABLE"
><I
>table</I
></TT
>.

   <DIV
CLASS="TIP"
><BLOCKQUOTE
CLASS="TIP"
><P
><B
>Tip: </B
>     Indexes are primarily used to enhance database performance.
     But inappropriate use will result in slower performance.
    </P
></BLOCKQUOTE
></DIV
>
  </P
><P
>   In the first syntax shown above, the key fields for the
   index are specified as column names; a column may also have
   an associated operator class. An operator class is used
   to specify the operators to be used for a particular
   index. For example, a btree index on four-byte integers
   would use the <TT
CLASS="LITERAL"
>int4_ops</TT
> class;
   this operator class includes
   comparison functions for four-byte integers. The default
   operator class is the appropriate operator class for that
   field type.
  </P
><P
>   In the second syntax shown above, an index is defined
   on the result of a user-defined function
   <TT
CLASS="REPLACEABLE"
><I
>func_name</I
></TT
> applied
   to one or more attributes of a single class.
   These <I
CLASS="FIRSTTERM"
>functional indices</I
>
   can be used to obtain fast access to data
   based on operators that would normally require some
   transformation to apply them to the base data.
  </P
><P
>   Postgres provides btree, rtree and hash access methods for
   secondary indices.  The btree access method is an implementation of
   the Lehman-Yao high-concurrency btrees.  The rtree access method
   implements standard rtrees using Guttman's quadratic split algorithm.
   The hash access method is an implementation of Litwin's linear
   hashing.  We mention the algorithms used solely to indicate that all
   of these access methods are fully dynamic and do not have to be
   optimized periodically (as is the case with, for example, static hash
   access methods).
  </P
><DIV
CLASS="REFSECT2"
><A
NAME="R2-SQL-CREATEINDEX-3"
></A
><H3
>    Notes
   </H3
><P
>    The Postgres query optimizer will consider using btree indices in a scan
    whenever an indexed attribute is involved in a comparison using one of:

    &lt;, &lt;=, =, &gt;=, &gt;
   </P
><P
>    Both box classes support indices on the <TT
CLASS="LITERAL"
>box</TT
> data 
    type in <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
>.
    The difference between them is that <TT
CLASS="LITERAL"
>bigbox_ops</TT
>
    scales box coordinates down, to avoid floating point exceptions from
    doing multiplication, addition, and subtraction on very large
    floating-point coordinates.  If the field on which your rectangles lie
    is about 20,000 units square or larger, you should use
    <TT
CLASS="LITERAL"
>bigbox_ops</TT
>.
    The <TT
CLASS="LITERAL"
>poly_ops</TT
> operator class supports rtree
    indices on <TT
CLASS="LITERAL"
>polygon</TT
> data.
   </P
><P
>    The <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
>
    query optimizer will consider using an rtree index whenever
    an indexed attribute is involved in a comparison using one of:

    &lt;&lt;, &amp;&lt;, &amp;&gt;, &gt;&gt;, @, ~=, &amp;&amp;
   </P
><P
>    The <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
>
    query optimizer will consider using a hash index whenever
    an indexed attribute is involved in a comparison using
    the <TT
CLASS="LITERAL"
>=</TT
> operator.
   </P
><P
>    Currently, only the BTREE access method supports multi-column
    indexes. Up to 7 keys may be specified.
   </P
><P
>    Use <A
HREF="sql-dropindex.htm#SQL-DROPINDEX-TITLE"
><I
>DROP INDEX</I
></A
>
    to remove an index.
   </P
><P
>    The <TT
CLASS="LITERAL"
>int24_ops</TT
>
    operator class is useful for constructing indices on int2 data, and
    doing comparisons against int4 data in query qualifications.
    Similarly, <TT
CLASS="LITERAL"
>int42_ops</TT
>
    support indices on int4 data that is to be compared against int2 data
    in queries.
   </P
><P
>    The following select list returns all ops_names:

    <PRE
CLASS="PROGRAMLISTING"
>SELECT am.amname AS acc_name,
       opc.opcname AS ops_name,
       opr.oprname AS ops_comp
    FROM pg_am am, pg_amop amop,
         pg_opclass opc, pg_operator opr
    WHERE amop.amopid = am.oid AND
          amop.amopclaid = opc.oid AND
          amop.amopopr = opr.oid
    ORDER BY acc_name, ops_name, ops_comp
    </PRE
>
   </P
></DIV
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="R1-SQL-CREATEINDEX-2"
></A
><H2
>   Usage
  </H2
><P
>To create a btree index on the field <TT
CLASS="LITERAL"
>title</TT
>
   in the table <TT
CLASS="LITERAL"
>films</TT
>:
  </P
><PRE
CLASS="PROGRAMLISTING"
>CREATE UNIQUE INDEX title_idx
    ON films (title);
  </PRE
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="R1-SQL-CREATEINDEX-3"
></A
><H2
>   Compatibility
  </H2
><DIV
CLASS="REFSECT2"
><A
NAME="R2-SQL-CREATEINDEX-4"
></A
><H3
>    SQL92
   </H3
><P
>    CREATE INDEX is a <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
> language extension.
   </P
><P
>    There is no <B
CLASS="COMMAND"
>CREATE INDEX</B
> command in SQL92.
   </P
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="sql-creategroup.htm"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="user.htm"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="sql-createlanguage.htm"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>CREATE GROUP</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="sql-commands.htm"
>Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>CREATE LANGUAGE</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>