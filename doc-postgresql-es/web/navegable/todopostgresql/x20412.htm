<HTML
><HEAD
><TITLE
>Asynchronous Notification</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.54"><LINK
REL="HOME"
TITLE="PostgreSQL"
HREF="postgres.htm"><LINK
REL="UP"
TITLE="libpq"
HREF="libpq-chapter.htm"><LINK
REL="PREVIOUS"
TITLE="Fast Path"
HREF="x20400.htm"><LINK
REL="NEXT"
TITLE="Functions Associated with the COPY Command"
HREF="x20448.htm"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>PostgreSQL</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="x20400.htm"
>Anterior</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Capítulo 46. libpq</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="x20448.htm"
>Siguiente</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="AEN20412"
>Asynchronous Notification</A
></H1
><P
><SPAN
CLASS="PRODUCTNAME"
>PostgreSQL</SPAN
> supports asynchronous notification via the
LISTEN and NOTIFY commands.  A backend registers its interest in a particular
notification condition with the LISTEN command (and can stop listening
with the UNLISTEN command).  All backends listening on a
particular condition will be notified asynchronously when a NOTIFY of that
condition name is executed by any backend.  No additional information is
passed from the notifier to the listener.  Thus, typically, any actual data
that needs to be communicated is transferred through a database relation.
Commonly the condition name is the same as the associated relation, but it is
not necessary for there to be any associated relation.</P
><P
><TT
CLASS="FILENAME"
>libpq</TT
> applications submit LISTEN and UNLISTEN
commands as ordinary SQL queries.  Subsequently, arrival of NOTIFY
messages can be detected by calling PQnotifies().

<P
></P
><UL
><LI
><P
><TT
CLASS="FUNCTION"
>PQnotifies</TT
>
          Returns  the next notification from a list of unhandled
          notification messages received from the backend.  Returns NULL if
          there are no pending notifications.  Once a notification is
	  returned from PQnotifies, it is considered handled and will be
	  removed from the list of notifications.
<PRE
CLASS="SYNOPSIS"
>PGnotify* PQnotifies(PGconn *conn);

typedef struct pgNotify {
    char relname[NAMEDATALEN];       /* name of relation
                                      * containing data */
    int  be_pid;                     /* process id of backend */
} PGnotify;</PRE
>
After processing a PGnotify object returned by <TT
CLASS="FUNCTION"
>PQnotifies</TT
>,
be sure to free it with <TT
CLASS="FUNCTION"
>free()</TT
> to avoid a memory leak.</P
><DIV
CLASS="NOTE"
><BLOCKQUOTE
CLASS="NOTE"
><P
><B
>Nota: </B
> In <SPAN
CLASS="PRODUCTNAME"
>PostgreSQL</SPAN
> 6.4 and later,
 the <TT
CLASS="LITERAL"
>be_pid</TT
> is the notifying backend's,
 whereas in earlier versions it was always your own backend's <SPAN
CLASS="ACRONYM"
>PID</SPAN
>.</P
></BLOCKQUOTE
></DIV
></LI
></UL
></P
><P
>The  second  sample program gives an example of the use
of asynchronous notification.</P
><P
><TT
CLASS="FUNCTION"
>PQnotifies()</TT
> does not actually read backend data; it just
returns messages previously absorbed by another <SPAN
CLASS="APPLICATION"
>libpq</SPAN
>
function.  In prior releases of <SPAN
CLASS="APPLICATION"
>libpq</SPAN
>, the only way
to ensure timely receipt of NOTIFY messages was to constantly submit queries,
even empty ones, and then check <TT
CLASS="FUNCTION"
>PQnotifies()</TT
> after each
<TT
CLASS="FUNCTION"
>PQexec()</TT
>.  While this still works, it is
deprecated as a waste of processing power.</P
><P
>A better way to check for NOTIFY
messages when you have no useful queries to make is to call
<TT
CLASS="FUNCTION"
>PQconsumeInput()</TT
>, then check <TT
CLASS="FUNCTION"
>PQnotifies()</TT
>.
You can use <TT
CLASS="FUNCTION"
>select</TT
>(2) to wait for backend data to
arrive, thereby using no <SPAN
CLASS="ACRONYM"
>CPU</SPAN
> power unless there is something
to do.  Note that this will work OK whether you use <TT
CLASS="FUNCTION"
>PQsendQuery</TT
>/
<TT
CLASS="FUNCTION"
>PQgetResult</TT
> or simply <TT
CLASS="FUNCTION"
>PQexec</TT
> for
queries.  You should, however, remember to check <TT
CLASS="FUNCTION"
>PQnotifies()</TT
>
after each <TT
CLASS="FUNCTION"
>PQgetResult</TT
> or <TT
CLASS="FUNCTION"
>PQexec</TT
> to see
if any notifications came in during the processing of the query.</P
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="x20400.htm"
>Anterior</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="postgres.htm"
>Inicio</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="x20448.htm"
>Siguiente</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Fast Path</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="libpq-chapter.htm"
>Subir</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Functions Associated with the COPY Command</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>