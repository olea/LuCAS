<HTML
><HEAD
><TITLE
>libpq C++ Binding</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.54"><LINK
REL="HOME"
TITLE="PostgreSQL"
HREF="postgres.htm"><LINK
REL="UP"
TITLE="Interfaces"
HREF="part-interfaces.htm"><LINK
REL="PREVIOUS"
TITLE="Sample Programs"
HREF="x20603.htm"><LINK
REL="NEXT"
TITLE="libpq++ Classes"
HREF="x20695.htm"></HEAD
><BODY
CLASS="CHAPTER"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>PostgreSQL</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="x20603.htm"
>Anterior</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="x20695.htm"
>Siguiente</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="CHAPTER"
><H1
><A
NAME="LIBPQPLUSPLUS"
>Capítulo 47. libpq C++ Binding</A
></H1
><DIV
CLASS="TOC"
><DL
><DT
><B
>Tabla de contenidos</B
></DT
><DT
><A
HREF="libpqplusplus.htm#AEN20636"
>Control and Initialization</A
></DT
><DT
><A
HREF="x20695.htm"
>libpq++ Classes</A
></DT
><DT
><A
HREF="x20705.htm"
>Database Connection Functions</A
></DT
><DT
><A
HREF="x20735.htm"
>Query Execution Functions</A
></DT
><DT
><A
HREF="x20836.htm"
>Asynchronous Notification</A
></DT
><DT
><A
HREF="x20859.htm"
>Functions Associated with the COPY Command</A
></DT
></DL
></DIV
><P
>   <TT
CLASS="FILENAME"
>libpq++</TT
> is the C++ API to 
   <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
>.
   <TT
CLASS="FILENAME"
>libpq++</TT
>  is a set of classes which allow
   client programs to connect to the 
   <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
> backend server. These connections
   come in two forms: a Database Class and a Large Object class.
  </P
><P
>   The Database Class is intended for manipulating a database. You can
   send all sorts of SQL queries to the <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
> 
   backend server and retrieve the responses of the server.
  </P
><P
>   The Large Object Class is intended for manipulating a large object
   in a database. Although a Large Object instance can send normal
   queries to the <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
> backend server 
   it is only intended for simple
   queries that do not return any data. A large object should be seen
   as a file stream. In the future it should behave much like the C++ file
   streams
   <TT
CLASS="LITERAL"
>cin</TT
>,
   <TT
CLASS="LITERAL"
>cout</TT
>
   and
   <TT
CLASS="LITERAL"
>cerr</TT
>.
  </P
><P
>   This chapter is based on the documentation
   for the <TT
CLASS="FILENAME"
>libpq</TT
> C library.  Three
   short programs are listed at the end of this section as examples of
   <TT
CLASS="FILENAME"
>libpq++</TT
> programming 
   (though not necessarily of good programming).
   There are several examples of <TT
CLASS="FILENAME"
>libpq++</TT
> 
   applications in
   <TT
CLASS="FILENAME"
>src/libpq++/examples</TT
>, including the source
   code for the three examples in this chapter.
  </P
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="AEN20636"
>Control and Initialization</A
></H1
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="AEN20638"
>Environment Variables</A
></H2
><P
>     The following environment variables can be used to set up default
     values for an environment and to avoid hard-coding database names into
     an application program:
     <DIV
CLASS="NOTE"
><BLOCKQUOTE
CLASS="NOTE"
><P
><B
>Nota: </B
>       Refer to the <A
HREF="libpq-envars.htm"
><I
>libpq</I
></A
> for a complete
       list of available connection options.
      </P
></BLOCKQUOTE
></DIV
>
    </P
><P
>     The following environment variables can be used to select default
     connection parameter values, which will be used by PQconnectdb or
     PQsetdbLogin if no value is directly specified by the calling code.
     These are useful to avoid hard-coding database names into simple
     application programs.
     <DIV
CLASS="NOTE"
><BLOCKQUOTE
CLASS="NOTE"
><P
><B
>Nota: </B
>       <TT
CLASS="FILENAME"
>libpq++</TT
> uses only environment variables or PQconnectdb
       conninfo style strings.
      </P
></BLOCKQUOTE
></DIV
>
	  
     <P
></P
><UL
><LI
><P
>	<TT
CLASS="ENVAR"
>PGHOST</TT
> sets the default server name.
	If a non-zero-length string is specified, TCP/IP communication is used.
	Without a host name, libpq will connect using a local Unix domain socket.
       </P
></LI
><LI
><P
>	<TT
CLASS="ENVAR"
>PGPORT</TT
>  sets the default port or local Unix domain socket
	file extension for communicating with the <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
>
	backend.
       </P
></LI
><LI
><P
>	<TT
CLASS="ENVAR"
>PGDATABASE</TT
>  sets the default 
	<SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
> database name.
       </P
></LI
><LI
><P
>	<TT
CLASS="ENVAR"
>PGUSER</TT
>
	sets the username used to connect to the database and for authentication.
       </P
></LI
><LI
><P
>	<TT
CLASS="ENVAR"
>PGPASSWORD</TT
>
	sets the password used if the backend demands password authentication.
       </P
></LI
><LI
><P
>	<TT
CLASS="ENVAR"
>PGREALM</TT
> sets the Kerberos realm to  use  with  
	<SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
>,
	if  it is different from the local realm.  If
	<TT
CLASS="ENVAR"
>PGREALM</TT
> is set, <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
> 
	applications  will  attempt
	authentication  with  servers for this realm and use
	separate ticket files to avoid conflicts with  local
	ticket  files.   This  environment  variable is only
	used if Kerberos authentication is selected by the backend.
       </P
></LI
><LI
><P
>	<TT
CLASS="ENVAR"
>PGOPTIONS</TT
> sets additional runtime  options  for  
	the <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
> backend.
       </P
></LI
><LI
><P
>	<TT
CLASS="ENVAR"
>PGTTY</TT
> sets the file or tty on which  debugging  
	messages from the backend server are displayed.
       </P
></LI
></UL
>
    </P
><P
>     The following environment variables can be used to specify user-level default
     behavior for every Postgres session:
	  
     <P
></P
><UL
><LI
><P
>	<TT
CLASS="ENVAR"
>PGDATESTYLE</TT
>
	sets the default style of date/time representation.
       </P
></LI
><LI
><P
>	<TT
CLASS="ENVAR"
>PGTZ</TT
>
	sets the default time zone.
       </P
></LI
></UL
>
    </P
><P
>     The following environment variables can be used to specify default internal
     behavior for every Postgres session:
     
     <P
></P
><UL
><LI
><P
>	<TT
CLASS="ENVAR"
>PGGEQO</TT
>
	sets the default mode for the genetic optimizer.
       </P
></LI
></UL
>
    </P
><P
>     Refer to the <B
CLASS="COMMAND"
>SET</B
> <SPAN
CLASS="ACRONYM"
>SQL</SPAN
> command
     for information on correct values for these environment variables.
    </P
></DIV
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="x20603.htm"
>Anterior</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="postgres.htm"
>Inicio</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="x20695.htm"
>Siguiente</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Sample Programs</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="part-interfaces.htm"
>Subir</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>libpq++ Classes</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>