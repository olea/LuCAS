<HTML
><HEAD
><TITLE
>Query Execution Functions</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.54"><LINK
REL="HOME"
TITLE="PostgreSQL"
HREF="postgres.htm"><LINK
REL="UP"
TITLE="libpq C++ Binding"
HREF="libpqplusplus.htm"><LINK
REL="PREVIOUS"
TITLE="Database Connection Functions"
HREF="x20705.htm"><LINK
REL="NEXT"
TITLE="Asynchronous Notification"
HREF="x20836.htm"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>PostgreSQL</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="x20705.htm"
>Anterior</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Capítulo 47. libpq C++ Binding</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="x20836.htm"
>Siguiente</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="AEN20735"
>Query Execution Functions</A
></H1
><P
>  
    <P
></P
><UL
><LI
><P
>       <TT
CLASS="FUNCTION"
>Exec</TT
>
       Sends a query to the backend server.  It's probably more desirable to
       use one of the next two functions.
       <PRE
CLASS="SYNOPSIS"
>	ExecStatusType PgConnection::Exec(const char* query)
       </PRE
>
       Returns the result of the query. The following status results can be expected:
       
       <P
></P
><TABLE
BORDER="0"
><TBODY
><TR
><TD
>	 PGRES_EMPTY_QUERY
	</TD
></TR
><TR
><TD
>	 PGRES_COMMAND_OK, if the query was a command
	</TD
></TR
><TR
><TD
>	 PGRES_TUPLES_OK, if the query successfully returned tuples
	</TD
></TR
><TR
><TD
>	 PGRES_COPY_OUT
	</TD
></TR
><TR
><TD
>	 PGRES_COPY_IN
	</TD
></TR
><TR
><TD
>	 PGRES_BAD_RESPONSE, if an unexpected response was received
	</TD
></TR
><TR
><TD
>	 PGRES_NONFATAL_ERROR
	</TD
></TR
><TR
><TD
>	 PGRES_FATAL_ERROR
	</TD
></TR
></TBODY
></TABLE
><P
></P
>
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>ExecCommandOk</TT
>
       Sends a command query to the backend server.
       <PRE
CLASS="SYNOPSIS"
>	int PgConnection::ExecCommandOk(const char *query)
       </PRE
>
       Returns TRUE if the command query succeeds.
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>ExecTuplesOk</TT
>
       Sends a command query to the backend server.
       <PRE
CLASS="SYNOPSIS"
>	int PgConnection::ExecTuplesOk(const char *query)
       </PRE
>
       Returns TRUE if the command query succeeds.
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>ErrorMessage</TT
>
       Returns the last error message text.
       <PRE
CLASS="SYNOPSIS"
>	const char *PgConnection::ErrorMessage()
       </PRE
>
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>Tuples</TT
>
       Returns the number of tuples (instances) in the query result. 
       <PRE
CLASS="SYNOPSIS"
>	int PgDatabase::Tuples()
       </PRE
>
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>Fields</TT
>
       Returns the number of fields (attributes) in each tuple of the query result. 
       <PRE
CLASS="SYNOPSIS"
>	int PgDatabase::Fields()
       </PRE
>
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>FieldName</TT
>
       Returns the field (attribute) name associated with the given field index. 
       Field indices start at 0. 
       <PRE
CLASS="SYNOPSIS"
>	const char *PgDatabase::FieldName(int field_num)
       </PRE
>
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>FieldNum</TT
>
       PQfnumber Returns the field (attribute) index associated with 
       the given field name. 
       <PRE
CLASS="SYNOPSIS"
>	int PgDatabase::FieldNum(const char* field_name)
       </PRE
>
       -1 is returned if the given name does not match any field.
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>FieldType</TT
>
       Returns the field type associated with the given field index. The 
       integer returned is an internal coding of the type. Field indices
       start at 0. 
       <PRE
CLASS="SYNOPSIS"
>	Oid PgDatabase::FieldType(int field_num)
       </PRE
>
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>FieldType</TT
>
       Returns the field type associated with the given field name. The 
       integer returned is an internal coding of the type. Field indices
       start at 0. 
       <PRE
CLASS="SYNOPSIS"
>	Oid PgDatabase::FieldType(const char* field_name)
       </PRE
>
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>FieldSize</TT
>
       Returns the size in bytes of the field associated with the given 
       field index. Field indices start at 0. 
       <PRE
CLASS="SYNOPSIS"
>	short PgDatabase::FieldSize(int field_num)
       </PRE
>
       Returns the space allocated for this field in a database tuple given
       the field number. In other words the size of the server's binary 
       representation of the data type. -1 is returned if the field is 
       variable size.
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>FieldSize</TT
>
       Returns the size in bytes of the field associated with the given 
       field index. Field indices start at 0. 
       <PRE
CLASS="SYNOPSIS"
>	short PgDatabase::FieldSize(const char *field_name)
       </PRE
>
       Returns the space allocated for this field in a database tuple given
       the field name. In other words the size of the server's binary 
       representation of the data type. -1 is returned if the field is 
       variable size.
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>GetValue</TT
>
       Returns a single field (attribute) value of one tuple of a PGresult. 
       Tuple and field indices start at 0. 
       <PRE
CLASS="SYNOPSIS"
>	const char *PgDatabase::GetValue(int tup_num, int field_num)
       </PRE
>
       For most queries, the value returned by GetValue is a null-terminated 
       ASCII string representation of the attribute value. But if BinaryTuples() 
       is TRUE, the value returned by GetValue is the binary representation 
       of the type in the internal format of the backend server (but not including 
       the size word, if the field is variable-length). It is then the programmer's 
       responsibility to cast and convert the data to the correct C type. The 
       pointer returned by GetValue points to storage that is part of the 
       PGresult structure. One should not modify it, and one must explicitly 
       copy the value into other storage if it is to be used past the lifetime 
       of the PGresult structure itself.  BinaryTuples() is not yet implemented.
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>GetValue</TT
>
       Returns a single field (attribute) value of one tuple of a PGresult. 
       Tuple and field indices start at 0. 
       <PRE
CLASS="SYNOPSIS"
>	const char *PgDatabase::GetValue(int tup_num, const char *field_name)
       </PRE
>
       For most queries, the value returned by GetValue is a null-terminated 
       ASCII string representation of the attribute value. But if BinaryTuples() 
       is TRUE, the value returned by GetValue is the binary representation 
       of the type in the internal format of the backend server (but not including 
       the size word, if the field is variable-length). It is then the programmer's 
       responsibility to cast and convert the data to the correct C type. The 
       pointer returned by GetValue points to storage that is part of the 
       PGresult structure. One should not modify it, and one must explicitly 
       copy the value into other storage if it is to be used past the lifetime 
       of the PGresult structure itself.  BinaryTuples() is not yet implemented.
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>GetLength</TT
>
       Returns the length of a field (attribute) in bytes. Tuple and field 
       indices start at 0. 
       <PRE
CLASS="SYNOPSIS"
>	int PgDatabase::GetLength(int tup_num, int field_num)
       </PRE
>
       This is the actual data length for the particular data value, that 
       is the size of the object pointed to by GetValue. Note that for
       ASCII-represented values, this size has little to do with the binary 
       size reported by PQfsize.
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>GetLength</TT
>
       Returns the length of a field (attribute) in bytes. Tuple and field 
       indices start at 0. 
       <PRE
CLASS="SYNOPSIS"
>	int PgDatabase::GetLength(int tup_num, const char* field_name)
       </PRE
>
       This is the actual data length for the particular data value, that 
       is the size of the object pointed to by GetValue. Note that for
       ASCII-represented values, this size has little to do with the binary 
       size reported by PQfsize.
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>DisplayTuples</TT
>
       Prints out all the tuples and, optionally, the attribute names to the 
       specified output stream. 
       <PRE
CLASS="SYNOPSIS"
>	void PgDatabase::DisplayTuples(FILE *out = 0, int fillAlign = 1, 
	const char* fieldSep = "|",int printHeader = 1, int quiet = 0)
       </PRE
>
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>PrintTuples</TT
>
       Prints out all the tuples and, optionally, the attribute names to the 
       specified output stream. 
       <PRE
CLASS="SYNOPSIS"
>	void PgDatabase::PrintTuples(FILE *out = 0, int printAttName = 1, 
	int terseOutput = 0, int width = 0) 
       </PRE
>
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>GetLine</TT
>
       <PRE
CLASS="SYNOPSIS"
>	int PgDatabase::GetLine(char* string, int length)
       </PRE
>
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>PutLine</TT
>
       <PRE
CLASS="SYNOPSIS"
>	void PgDatabase::PutLine(const char* string)
       </PRE
>
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>OidStatus</TT
>
       <PRE
CLASS="SYNOPSIS"
>	const char *PgDatabase::OidStatus()
       </PRE
>
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>EndCopy</TT
>
       <PRE
CLASS="SYNOPSIS"
>	int PgDatabase::EndCopy()
       </PRE
>
      </P
></LI
></UL
>
   </P
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="x20705.htm"
>Anterior</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="postgres.htm"
>Inicio</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="x20836.htm"
>Siguiente</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Database Connection Functions</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="libpqplusplus.htm"
>Subir</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Asynchronous Notification</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>