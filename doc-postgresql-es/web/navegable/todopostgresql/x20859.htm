<HTML
><HEAD
><TITLE
>Functions Associated with the COPY Command</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.54"><LINK
REL="HOME"
TITLE="PostgreSQL"
HREF="postgres.htm"><LINK
REL="UP"
TITLE="libpq C++ Binding"
HREF="libpqplusplus.htm"><LINK
REL="PREVIOUS"
TITLE="Asynchronous Notification"
HREF="x20836.htm"><LINK
REL="NEXT"
TITLE="pgtcl"
HREF="pgtcl.htm"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>PostgreSQL</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="x20836.htm"
>Anterior</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Capítulo 47. libpq C++ Binding</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="pgtcl.htm"
>Siguiente</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="AEN20859"
>Functions Associated with the COPY Command</A
></H1
><P
>    The <B
CLASS="COMMAND"
>copy</B
> command in <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
> 
    has options to read from or write to the network
    connection used by <TT
CLASS="FILENAME"
>libpq++</TT
>.  
    Therefore, functions are necessary to
    access this network connection directly so applications may take full
    advantage of this capability.
    
    <P
></P
><UL
><LI
><P
>       <TT
CLASS="FUNCTION"
>PgDatabase::GetLine</TT
>
       reads a newline-terminated line of characters (transmitted by the
       backend server) into a buffer 
       <TT
CLASS="REPLACEABLE"
><I
>string</I
></TT
>
       of size <TT
CLASS="REPLACEABLE"
><I
>length</I
></TT
>.
       <PRE
CLASS="SYNOPSIS"
>	int PgDatabase::GetLine(char* string, int length)
       </PRE
>
      </P
><P
>       Like the Unix system routine
       <TT
CLASS="FUNCTION"
>fgets (3)</TT
>,
       this routine copies up to 
       <TT
CLASS="LITERAL"
><TT
CLASS="REPLACEABLE"
><I
>length</I
></TT
>-1</TT
>
       characters into 
       <TT
CLASS="REPLACEABLE"
><I
>string</I
></TT
>.
       It is like 
       <TT
CLASS="FUNCTION"
>gets (3)</TT
>,
       however, in that it converts the terminating newline into a null
       character.
      </P
><P
>       <TT
CLASS="FUNCTION"
>PgDatabase::GetLine</TT
>
       returns EOF at end of file, 0 if the entire line has been read, and 1 if the
       buffer is full but the terminating newline has not yet been read.
      </P
><P
>       Notice that the application must check to see if a new line consists
       of a single period ("."), which indicates that the backend
       server has finished sending the results of the 
       <B
CLASS="COMMAND"
>copy</B
>.
       Therefore, if the application ever expects to receive lines
       that are more than
       <TT
CLASS="LITERAL"
><TT
CLASS="REPLACEABLE"
><I
>length</I
></TT
>-1</TT
>
       characters long, the application must be sure to check the return
       value of <TT
CLASS="FUNCTION"
>PgDatabase::GetLine</TT
> very carefully.
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>PgDatabase::PutLine</TT
>
       Sends a null-terminated <TT
CLASS="REPLACEABLE"
><I
>string</I
></TT
>
       to the backend server.
       <PRE
CLASS="SYNOPSIS"
>	void PgDatabase::PutLine(char* string)
       </PRE
>
      </P
><P
>       The application must explicitly send a single period character (".")
       to indicate to the backend that it has finished sending its data.
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>PgDatabase::EndCopy</TT
>
       syncs with the backend.
       <PRE
CLASS="SYNOPSIS"
>	int PgDatabase::EndCopy()
       </PRE
>
       This function waits until the backend has
       finished processing the <B
CLASS="COMMAND"
>copy</B
>.
       It should either be issued when the
       last string has been sent to the backend using
       <TT
CLASS="FUNCTION"
>PgDatabase::PutLine</TT
>
       or when the last string has been received from the backend using
       <TT
CLASS="FUNCTION"
>PgDatabase::GetLine</TT
>.
       It must be issued or the backend may get <SPAN
CLASS="QUOTE"
>"out of sync"</SPAN
> with
       the frontend.  Upon return from this function, the backend is ready to
       receive the next query.
      </P
><P
>       The return value is 0 on successful completion, nonzero otherwise.
      </P
></LI
></UL
>
   </P
><P
>    As an example:
    
    <PRE
CLASS="PROGRAMLISTING"
>PgDatabase data;
data.Exec("create table foo (a int4, b char(16), d float8)");
data.Exec("copy foo from stdin");
data.putline("3\etHello World\et4.5\en");
data.putline("4\etGoodbye World\et7.11\en");
&amp;...
data.putline(".\en");
data.endcopy();
    </PRE
>
   </P
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="x20836.htm"
>Anterior</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="postgres.htm"
>Inicio</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="pgtcl.htm"
>Siguiente</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Asynchronous Notification</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="libpqplusplus.htm"
>Subir</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>pgtcl</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>