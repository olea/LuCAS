<HTML
><HEAD
><TITLE
>libpq</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.54"><LINK
REL="HOME"
TITLE="PostgreSQL"
HREF="postgres.htm"><LINK
REL="UP"
TITLE="Interfaces"
HREF="part-interfaces.htm"><LINK
REL="PREVIOUS"
HREF="r19861.htm"><LINK
REL="NEXT"
TITLE="Query Execution Functions"
HREF="x20100.htm"></HEAD
><BODY
CLASS="CHAPTER"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>PostgreSQL</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="r19861.htm"
>Anterior</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="x20100.htm"
>Siguiente</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="CHAPTER"
><H1
><A
NAME="LIBPQ-CHAPTER"
>Capítulo 46. libpq</A
></H1
><DIV
CLASS="TOC"
><DL
><DT
><B
>Tabla de contenidos</B
></DT
><DT
><A
HREF="libpq-chapter.htm#AEN19895"
>Database Connection Functions</A
></DT
><DT
><A
HREF="x20100.htm"
>Query Execution Functions</A
></DT
><DT
><A
HREF="x20253.htm"
>Asynchronous Query Processing</A
></DT
><DT
><A
HREF="x20400.htm"
>Fast Path</A
></DT
><DT
><A
HREF="x20412.htm"
>Asynchronous Notification</A
></DT
><DT
><A
HREF="x20448.htm"
>Functions Associated with the COPY Command</A
></DT
><DT
><A
HREF="x20521.htm"
><SPAN
CLASS="APPLICATION"
>libpq</SPAN
> Tracing Functions</A
></DT
><DT
><A
HREF="x20534.htm"
><SPAN
CLASS="APPLICATION"
>libpq</SPAN
> Control Functions</A
></DT
><DT
><A
HREF="libpq-envars.htm"
>Environment Variables</A
></DT
><DT
><A
HREF="x20603.htm"
>Sample Programs</A
></DT
></DL
></DIV
><P
>   <TT
CLASS="FILENAME"
>libpq</TT
> is the <SPAN
CLASS="ACRONYM"
>C</SPAN
>
   application programmer's interface to
   <SPAN
CLASS="PRODUCTNAME"
>PostgreSQL</SPAN
>.  <TT
CLASS="FILENAME"
>libpq</TT
> is a set
   of library routines that allow client programs to pass queries to the
   <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
> backend server and to receive the
   results of these queries.  <TT
CLASS="FILENAME"
>libpq</TT
> is also the
   underlying engine for several other <SPAN
CLASS="PRODUCTNAME"
>PostgreSQL</SPAN
>
   application interfaces, including <TT
CLASS="FILENAME"
>libpq++</TT
> (C++),
   <TT
CLASS="FILENAME"
>libpgtcl</TT
> (Tcl), <SPAN
CLASS="PRODUCTNAME"
>Perl</SPAN
>, and
   <TT
CLASS="FILENAME"
>ecpg</TT
>.  So some aspects of libpq's behavior will be
   important to you if you use one of those packages.
  </P
><P
>   Three short programs are included at the end of this section to show how
   to write programs that use <TT
CLASS="FILENAME"
>libpq</TT
>.  There are several
   complete examples of <TT
CLASS="FILENAME"
>libpq</TT
> applications in the
   following directories:

   <PRE
CLASS="PROGRAMLISTING"
>../src/test/regress
../src/test/examples
../src/bin/psql
   </PRE
>
  </P
><P
>   Frontend programs which use <TT
CLASS="FILENAME"
>libpq</TT
> must include the
   header file <TT
CLASS="FILENAME"
>libpq-fe.h</TT
> and must link with the
   <TT
CLASS="FILENAME"
>libpq</TT
> library.
  </P
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="AEN19895"
>Database Connection Functions</A
></H1
><P
>    The following routines deal with making a connection to
    a <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
> backend server.  The application
    program can have several backend connections open at one time.
    (One reason to do that is to access more than one database.)
    Each connection is represented by a PGconn object which is obtained
    from PQconnectdb() or PQsetdbLogin().  Note that these functions
    will always return a non-null object pointer, unless perhaps
    there is too little memory even to allocate the PGconn object.
    The  PQstatus function should be called
    to check whether  a  connection  was  successfully made
    before queries are sent via the connection object.

    <P
></P
><UL
><LI
><P
>       <TT
CLASS="FUNCTION"
>PQconnectdb</TT
> 
       Makes a new connection to the database server.
       <PRE
CLASS="SYNOPSIS"
>PGconn *PQconnectdb(const char *conninfo)
       </PRE
>

   This routine opens a new database connection using the parameters taken
   from the string <TT
CLASS="LITERAL"
>conninfo</TT
>.  Unlike PQsetdbLogin() below,
   the parameter set can be extended without changing the function signature,
   so use either of this routine or the non-blocking analogues PQconnectStart
   / PQconnectPoll is prefered for application programming.  The passed string
   can be empty to use all default parameters, or it can contain one or more
   parameter settings separated by whitespace.
   </P
><P
>   Each parameter setting is in the form <TT
CLASS="LITERAL"
>keyword = value</TT
>.
   (To write a null value or a value containing
   spaces, surround it with single quotes, e.g.,
   <TT
CLASS="LITERAL"
>keyword = 'a value'</TT
>.
   Single quotes within the value must be written as <TT
CLASS="LITERAL"
>\'</TT
>.
   Spaces around the equal sign are optional.)  The currently recognized
   parameter keywords are:

   <P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
><TT
CLASS="LITERAL"
>host</TT
></DT
><DD
><P
>      Name of host to connect to. If a non-zero-length string is
	   specified, TCP/IP
      communication is used.  Using this parameter causes a hostname look-up.
      See hostaddr.
     </P
></DD
><DT
><TT
CLASS="LITERAL"
>hostaddr</TT
></DT
><DD
><P
>      IP address of host to connect to. This should be in standard
      numbers-and-dots form, as used by the BSD functions inet_aton et al. If
      a non-zero-length string is specified, TCP/IP communication is used.
     </P
><P
>      Using hostaddr instead of host allows the application to avoid a host
      name look-up, which may be important in applications with time
      constraints. However, Kerberos authentication requires the host
      name. The following therefore applies. If host is specified without
      hostaddr, a hostname look-up is forced. If hostaddr is specified without
      host, the value for hostaddr gives the remote address; if Kerberos is
      used, this causes a reverse name query. If both host and hostaddr are
      specified, the value for hostaddr gives the remote address; the value
      for host is ignored, unless Kerberos is used, in which case that value
      is used for Kerberos authentication. Note that authentication is likely
      to fail if libpq is passed a host name which is not the name of the
      machine at hostaddr.
     </P
><P
>      Without both a host name and host address, libpq will connect using a
      local Unix domain socket.
     </P
></DD
><DT
><TT
CLASS="LITERAL"
>port</TT
></DT
><DD
><P
>      Port number to connect to at the server host,
      or socket filename extension for Unix-domain connections.
     </P
></DD
><DT
><TT
CLASS="LITERAL"
>dbname</TT
></DT
><DD
><P
>      The database name.
     </P
></DD
><DT
><TT
CLASS="LITERAL"
>user</TT
></DT
><DD
><P
>      User name to connect as.
     </P
></DD
><DT
><TT
CLASS="LITERAL"
>password</TT
></DT
><DD
><P
>      Password to be used if the server demands password authentication.
     </P
></DD
><DT
><TT
CLASS="LITERAL"
>options</TT
></DT
><DD
><P
>       Trace/debug options to be sent to the server.
      </P
></DD
><DT
><TT
CLASS="LITERAL"
>tty</TT
></DT
><DD
><P
>      A file or tty for optional debug output from the backend.
     </P
></DD
></DL
></DIV
>

   If  any  parameter is unspecified, then the corresponding
   environment variable (see "Environment Variables" section)
   is checked. If the  environment  variable is not set either,
   then hardwired defaults are used.
   The return value is a pointer to an abstract struct
   representing the connection to the backend.
   </P
><P
>    This function is not thread-safe.
   </P
></LI
><LI
><P
>   <TT
CLASS="FUNCTION"
>PQsetdbLogin</TT
>
       Makes a new connection to the database server.
<PRE
CLASS="SYNOPSIS"
>PGconn *PQsetdbLogin(const char *pghost,
                     const char *pgport,
                     const char *pgoptions,
                     const char *pgtty,
                     const char *dbName,
                     const char *login,
                     const char *pwd)</PRE
>

   This is the predecessor of <TT
CLASS="FUNCTION"
>PQconnectdb</TT
> with a fixed number
   of parameters but the same functionality.   
   </P
><P
>    This function is not thread-safe.
   </P
></LI
><LI
><P
>   <TT
CLASS="FUNCTION"
>PQsetdb</TT
> Makes a new connection to the database server.
<PRE
CLASS="SYNOPSIS"
>PGconn *PQsetdb(char *pghost,
                char *pgport,
                char *pgoptions,
                char *pgtty,
                char *dbName)</PRE
>
   This is a macro that calls <TT
CLASS="FUNCTION"
>PQsetdbLogin()</TT
> with null pointers
   for the login and pwd parameters.  It is provided primarily
   for backward compatibility with old programs.
   </P
></LI
><LI
><P
>   <TT
CLASS="FUNCTION"
>PQconnectStart</TT
>
   <TT
CLASS="FUNCTION"
>PQconnectPoll</TT
>
   Make a connection to the database server in a non-blocking manner.
<PRE
CLASS="SYNOPSIS"
>PGconn *PQconnectStart(const char *conninfo)</PRE
>
<PRE
CLASS="SYNOPSIS"
>PostgresPollingStatusType *PQconnectPoll(PQconn *conn)</PRE
>
   These two routines are used to open a connection to a database server such
   that your application's thread of execution is not blocked on remote I/O
   whilst doing so.
  </P
><P
>   The database connection is made using the parameters taken from the string
   <TT
CLASS="LITERAL"
>conninfo</TT
>, passed to PQconnectStart. This string is in
   the same format as described above for PQconnectdb.
  </P
><P
>   Neither PQconnectStart nor PQconnectPoll will block, as long as a number of
   restrictions are met:
   <P
></P
><UL
><LI
><P
>      The hostaddr and host parameters are used appropriately to ensure that
      name and reverse name queries are not made. See the documentation of
      these parameters under PQconnectdb above for details.
     </P
></LI
><LI
><P
>      If you call PQtrace, ensure that the stream object into which you trace
      will not block.
     </P
></LI
><LI
><P
>      You ensure for yourself that the socket is in the appropriate state
      before calling PQconnectPoll, as described below.
     </P
></LI
></UL
>
  </P
><P
>   To begin, call <TT
CLASS="LITERAL"
>conn=PQconnectStart("&lt;connection_info_string&gt;")</TT
>.
   If conn is NULL, then libpq has been unable to allocate a new PGconn
   structure. Otherwise, a valid PGconn pointer is returned (though not yet
   representing a valid connection to the database). On return from
   PQconnectStart, call status=PQstatus(conn). If status equals
   CONNECTION_BAD, PQconnectStart has failed.
  </P
><P
>   If PQconnectStart succeeds, the next stage is to poll libpq so that it may
   proceed with the connection sequence.  Loop thus: Consider a connection
   'inactive' by default. If PQconnectPoll last returned PGRES_POLLING_ACTIVE,
   consider it 'active' instead. If PQconnectPoll(conn) last returned
   PGRES_POLLING_READING, perform a select for reading on PQsocket(conn). If
   it last returned PGRES_POLLING_WRITING, perform a select for writing on
   PQsocket(conn). If you have yet to call PQconnectPoll, i.e. after the call
   to PQconnectStart, behave as if it last returned PGRES_POLLING_WRITING.  If
   the select shows that the socket is ready, consider it 'active'. If it has
   been decided that this connection is 'active', call PQconnectPoll(conn)
   again. If this call returns PGRES_POLLING_FAILED, the connection procedure
   has failed.  If this call returns PGRES_POLLING_OK, the connection has been
   successfully made.
  </P
><P
>    Note that the use of select() to ensure that the socket is ready is merely
    a (likely) example; those with other facilities available, such as a
    poll() call, may of course use that instead.
  </P
><P
>    At any time during connection, the status of the connection may be
    checked, by calling PQstatus. If this is CONNECTION_BAD, then the
    connection procedure has failed; if this is CONNECTION_OK, then the
    connection is ready.  Either of these states should be equally detectable
    from the return value of PQconnectPoll, as above. Other states may be
    shown during (and only during) an asynchronous connection procedure. These
    indicate the current stage of the connection procedure, and may be useful
    to provide feedback to the user for example. These statuses may include:
    <P
></P
><UL
><LI
><P
>      CONNECTION_STARTED: Waiting for connection to be made.
      </P
></LI
><LI
><P
>      CONNECTION_MADE: Connection OK; waiting to send.
      </P
></LI
><LI
><P
>      CONNECTION_AWAITING_RESPONSE: Waiting for a response from the postmaster.
      </P
></LI
><LI
><P
>      CONNECTION_AUTH_OK: Received authentication; waiting for backend startup.
      </P
></LI
><LI
><P
>      CONNECTION_SETENV: Negotiating environment.
      </P
></LI
></UL
>

    Note that, although these constants will remain (in order to maintain
    compatibility) an application should never rely upon these appearing in a
    particular order, or at all, or on the status always being one of these
    documented values. An application may do something like this:
<PRE
CLASS="PROGRAMLISTING"
>    switch(PQstatus(conn))
    {
        case CONNECTION_STARTED:
            feedback = "Connecting...";
	    break;

        case CONNECTION_MADE:
            feedback = "Connected to server...";
            break;
.
.
.
        default:
	    feedback = "Connecting...";
    }</PRE
>
  </P
><P
>   Note that if PQconnectStart returns a non-NULL pointer, you must call
   PQfinish when you are finished with it, in order to dispose of
   the structure and any associated memory blocks. This must be done even if a
   call to PQconnectStart or PQconnectPoll failed.
  </P
><P
>   PQconnectPoll will currently block if libpq is compiled with USE_SSL
   defined. This restriction may be removed in the future.
  </P
><P
>   PQconnectPoll will currently block under Windows, unless libpq is compiled
   with WIN32_NON_BLOCKING_CONNECTIONS defined. This code has not yet been
   tested under Windows, and so it is currently off by default. This may be
   changed in the future.
  </P
><P
>   These functions leave the socket in a non-blocking state as if 
   <TT
CLASS="FUNCTION"
>PQsetnonblocking</TT
> had been called.
  </P
><P
>   These functions are not thread-safe.
  </P
></LI
><LI
><P
>   <TT
CLASS="FUNCTION"
>PQconndefaults</TT
> Returns the default connection options.
<PRE
CLASS="SYNOPSIS"
>PQconninfoOption *PQconndefaults(void)

struct PQconninfoOption
{
    char   *keyword;   /* The keyword of the option */
    char   *envvar;    /* Fallback environment variable name */
    char   *compiled;  /* Fallback compiled in default value */
    char   *val;       /* Option's value */
    char   *label;     /* Label for field in connect dialog */
    char   *dispchar;  /* Character to display for this field
                          in a connect dialog. Values are:
                          ""        Display entered value as is
                          "*"       Password field - hide value
                          "D"       Debug options - don't
                                    create a field by default */
    int     dispsize;  /* Field size in characters for dialog */
}</PRE
>
   Returns the address of the connection options structure.  This may
   be used to determine all possible PQconnectdb options and their
   current default values.  The return value points to an array of
   PQconninfoOption structs, which ends with an entry having a NULL
   keyword pointer.  Note that the default values ("val" fields)
   will depend on environment variables and other context.
   Callers must treat the connection options data as read-only.
   </P
><P
>    This function is not thread-safe.
   </P
></LI
><LI
><P
>   <TT
CLASS="FUNCTION"
>PQfinish</TT
>
   Close  the  connection to the backend.  Also frees
   memory used by the PGconn object.
<PRE
CLASS="SYNOPSIS"
>void PQfinish(PGconn *conn)</PRE
>
   Note that even if the backend connection attempt fails (as
   indicated by PQstatus), the application should call PQfinish
   to free the memory used by the PGconn object.
   The PGconn pointer should not be used after PQfinish has been called.
   </P
></LI
><LI
><P
>   <TT
CLASS="FUNCTION"
>PQreset</TT
>
   Reset the communication  port  with  the  backend.
<PRE
CLASS="SYNOPSIS"
>void PQreset(PGconn *conn)</PRE
>
   This function will close the connection
   to the backend and attempt to  reestablish  a  new
   connection to the same postmaster, using all the same
   parameters previously used.  This may be useful for
   error recovery if a working connection is lost.
   </P
></LI
><LI
><P
>   <TT
CLASS="FUNCTION"
>PQresetStart</TT
>
   <TT
CLASS="FUNCTION"
>PQresetPoll</TT
>
   Reset the communication  port  with  the  backend, in a non-blocking manner.
<PRE
CLASS="SYNOPSIS"
>int PQresetStart(PGconn *conn);</PRE
>
<PRE
CLASS="SYNOPSIS"
>PostgresPollingStatusType PQresetPoll(PGconn *conn);</PRE
>
    These functions will close the connection to the backend and attempt to
    reestablish a new connection to the same postmaster, using all the same
    parameters previously used. This may be useful for error recovery if a
    working connection is lost. They differ from PQreset (above) in that they
    act in a non-blocking manner. These functions suffer from the same
    restrictions as PQconnectStart and PQconnectPoll.
   </P
><P
>    Call PQresetStart. If it returns 0, the reset has failed. If it returns 1,
    poll the reset using PQresetPoll in exactly the same way as you would
    create the connection using PQconnectPoll.
   </P
></LI
></UL
></P
><P
>libpq application programmers should be careful to
maintain the PGconn abstraction.  Use the accessor functions below to get
at the contents of PGconn.  Avoid directly referencing the fields of the
PGconn structure because they are subject to change in the future.
(Beginning in <SPAN
CLASS="PRODUCTNAME"
>PostgreSQL</SPAN
> release 6.4, the
definition of struct PGconn is not even provided in <TT
CLASS="FILENAME"
>libpq-fe.h</TT
>.
If you have old code that accesses PGconn fields directly, you can keep using it
by including <TT
CLASS="FILENAME"
>libpq-int.h</TT
> too, but you are encouraged to fix the code
soon.)
<P
></P
><UL
><LI
><P
><TT
CLASS="FUNCTION"
>PQdb</TT
>  
         Returns the database name of the connection.
<PRE
CLASS="SYNOPSIS"
>char *PQdb(const PGconn *conn)</PRE
>
PQdb and the next several functions return the values established
at connection.  These values are fixed for the life of the PGconn
object.</P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQuser</TT
>
         Returns the user name of the connection.
<PRE
CLASS="SYNOPSIS"
>char *PQuser(const PGconn *conn)</PRE
></P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQpass</TT
>
         Returns the password of the connection.
<PRE
CLASS="SYNOPSIS"
>char *PQpass(const PGconn *conn)</PRE
></P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQhost</TT
>
         Returns the server host name of the connection.
<PRE
CLASS="SYNOPSIS"
>char *PQhost(const PGconn *conn)</PRE
></P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQport</TT
>
         Returns the port of the connection.
<PRE
CLASS="SYNOPSIS"
>char *PQport(const PGconn *conn)</PRE
></P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQtty</TT
>
         Returns the debug tty of the connection.
<PRE
CLASS="SYNOPSIS"
>char *PQtty(const PGconn *conn)</PRE
></P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQoptions</TT
>
       Returns the backend options used in  the  connection.
<PRE
CLASS="SYNOPSIS"
>char *PQoptions(const PGconn *conn)</PRE
></P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQstatus</TT
>
         Returns the status of the connection. 
<PRE
CLASS="SYNOPSIS"
>ConnStatusType PQstatus(const PGconn *conn)</PRE
></P
><P
>       The status can be one of a number of values.
       However, only two of these are
       seen outside of an asynchronous connection procedure -
       <TT
CLASS="LITERAL"
>CONNECTION_OK</TT
> or
       <TT
CLASS="LITERAL"
>CONNECTION_BAD</TT
>. A good
       connection to the database has the status CONNECTION_OK.
       A failed connection
       attempt is signaled by status
       <TT
CLASS="LITERAL"
>CONNECTION_BAD</TT
>.
       Ordinarily, an OK status will remain so until
       <TT
CLASS="FUNCTION"
>PQfinish</TT
>, but a
       communications failure might result in the status changing to
       <TT
CLASS="LITERAL"
>CONNECTION_BAD</TT
> prematurely.
       In that case the application
       could try to recover by calling <TT
CLASS="FUNCTION"
>PQreset</TT
>.
      </P
><P
>       See the entry for PQconnectStart and PQconnectPoll with regards
       to other status codes
       that might be seen.
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>PQerrorMessage</TT
>
       Returns the error message most recently generated by
       an operation on the connection.
       <PRE
CLASS="SYNOPSIS"
>char *PQerrorMessage(const PGconn* conn);
       </PRE
>
      </P
><P
>       Nearly all libpq functions will set
       <TT
CLASS="FUNCTION"
>PQerrorMessage</TT
> if they fail.
       Note that by libpq convention, a non-empty
       <TT
CLASS="FUNCTION"
>PQerrorMessage</TT
> will
       include a trailing newline.
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>PQbackendPID</TT
>
       Returns the process <SPAN
CLASS="ACRONYM"
>ID</SPAN
> of the backend server 
      handling this connection.
       <PRE
CLASS="SYNOPSIS"
>int PQbackendPID(const PGconn *conn);
       </PRE
>
       The backend <SPAN
CLASS="ACRONYM"
>PID</SPAN
> is useful for debugging
       purposes and for comparison
       to NOTIFY messages (which include the <SPAN
CLASS="ACRONYM"
>PID</SPAN
> of
       the notifying backend).
       Note that the <SPAN
CLASS="ACRONYM"
>PID</SPAN
> belongs to a process
       executing on the database
       server host, not the local host!
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>PQsetenvStart</TT
>
       <TT
CLASS="FUNCTION"
>PQsetenvPoll</TT
>
       <TT
CLASS="FUNCTION"
>PQsetenvAbort</TT
>
       Perform an environment negotiation.
       <PRE
CLASS="SYNOPSIS"
>PGsetenvHandle *PQsetenvStart(PGconn *conn)
       </PRE
>

       <PRE
CLASS="SYNOPSIS"
>PostgresPollingStatusType *PQsetenvPoll(PGsetenvHandle handle)
       </PRE
>
       <PRE
CLASS="SYNOPSIS"
>void PQsetenvAbort(PGsetenvHandle handle)
       </PRE
>
       These two routines can be used to re-perform the environment negotiation
       that occurs during the opening of a connection to a database
       server. I have
       no idea why this might be useful (XXX anyone?) but it might prove useful
       for users to be able to reconfigure their character encodings 
       on-the-fly, for example.
      </P
><P
>       These functions will not block, subject to the restrictions applied to
       PQconnectStart and PQconnectPoll.
      </P
><P
>       To begin, call handle=PQsetenvStart(conn), where conn is an open connection
       to the database server. If handle is NULL, then libpq has been unable to
       allocate a new PGsetenvHandle structure. Otherwise, a valid handle is
       returned. This handle is intended to be opaque - you may only use it to
       call other functions in libpq (PQsetenvPoll, for example).
      </P
><P
>       Poll the procedure using PQsetenvPoll, in exactly the same way as you would
       create a connection using PQconnectPoll.
      </P
><P
>       The procedure may be aborted at any time by calling PQsetenvAbort(handle).
      </P
><P
>       These functions are not thread-safe.
      </P
></LI
><LI
><P
>       <TT
CLASS="FUNCTION"
>PQsetenv</TT
>
       Perform an environment negotiation.
       <PRE
CLASS="SYNOPSIS"
>int PQsetenv(PGconn *conn)
       </PRE
>
       This function performs the same duties as PQsetenvStart and
       PQsetenvPoll, but
       blocks to do so. It returns 1 on success and 0 on failure.
      </P
></LI
></UL
>
   </P
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="r19861.htm"
>Anterior</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="postgres.htm"
>Inicio</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="x20100.htm"
>Siguiente</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="part-interfaces.htm"
>Subir</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Query Execution Functions</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>