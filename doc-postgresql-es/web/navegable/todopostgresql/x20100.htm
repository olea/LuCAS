<HTML
><HEAD
><TITLE
>Query Execution Functions</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.54"><LINK
REL="HOME"
TITLE="PostgreSQL"
HREF="postgres.htm"><LINK
REL="UP"
TITLE="libpq"
HREF="libpq-chapter.htm"><LINK
REL="PREVIOUS"
TITLE="libpq"
HREF="libpq-chapter.htm"><LINK
REL="NEXT"
TITLE="Asynchronous Query Processing"
HREF="x20253.htm"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>PostgreSQL</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="libpq-chapter.htm"
>Anterior</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Capítulo 46. libpq</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="x20253.htm"
>Siguiente</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="AEN20100"
>Query Execution Functions</A
></H1
><P
>Once a connection to a database server has been successfully
established, the functions described here are used to perform
SQL queries and commands.
<P
></P
><UL
><LI
><P
><TT
CLASS="FUNCTION"
>PQexec</TT
>
          Submit a query to <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
>
          and wait for the result.
<PRE
CLASS="SYNOPSIS"
>PGresult *PQexec(PGconn *conn,
                 const char *query);</PRE
>
          Returns  a  PGresult pointer or possibly a NULL pointer.
          A non-NULL pointer will generally be returned except in
          out-of-memory conditions or serious errors such as inability
          to send the query to the backend.
          If a NULL is returned, it
	  should be treated like a PGRES_FATAL_ERROR result.  Use
	  PQerrorMessage to get more information about the error.</P
></LI
></UL
></P
><P
>The <TT
CLASS="FUNCTION"
>PGresult</TT
> structure encapsulates the query result
returned by the backend.
<TT
CLASS="FILENAME"
>libpq</TT
> application programmers should be careful to
maintain the PGresult abstraction.  Use the accessor functions below to get
at the contents of PGresult.  Avoid directly referencing the fields of the
PGresult structure because they are subject to change in the future.
(Beginning in <SPAN
CLASS="PRODUCTNAME"
>Postgres</SPAN
> release 6.4, the
definition of struct PGresult is not even provided in libpq-fe.h.  If you
have old code that accesses PGresult fields directly, you can keep using it
by including libpq-int.h too, but you are encouraged to fix the code
soon.)

<P
></P
><UL
><LI
><P
><TT
CLASS="FUNCTION"
>PQresultStatus</TT
>
          Returns the result status of the query.
<PRE
CLASS="SYNOPSIS"
>ExecStatusType PQresultStatus(const PGresult *res)</PRE
>
PQresultStatus can return one of the following values:
<P
></P
><UL
><LI
><P
><TT
CLASS="LITERAL"
>PGRES_EMPTY_QUERY</TT
> -- The string sent to the backend was empty.</P
></LI
><LI
><P
><TT
CLASS="LITERAL"
>PGRES_COMMAND_OK</TT
> -- Successful completion of a command returning no data</P
></LI
><LI
><P
><TT
CLASS="LITERAL"
>PGRES_TUPLES_OK</TT
> -- The query successfully executed</P
></LI
><LI
><P
><TT
CLASS="LITERAL"
>PGRES_COPY_OUT</TT
> -- Copy Out (from server) data transfer started</P
></LI
><LI
><P
><TT
CLASS="LITERAL"
>PGRES_COPY_IN</TT
> -- Copy In (to server) data transfer started</P
></LI
><LI
><P
><TT
CLASS="LITERAL"
>PGRES_BAD_RESPONSE</TT
> -- The server's response was not understood</P
></LI
><LI
><P
><TT
CLASS="LITERAL"
>PGRES_NONFATAL_ERROR</TT
></P
></LI
><LI
><P
><TT
CLASS="LITERAL"
>PGRES_FATAL_ERROR</TT
></P
></LI
></UL
>

If  the result status is <TT
CLASS="LITERAL"
>PGRES_TUPLES_OK</TT
>, then the
routines described below can be  used  to  retrieve  the
tuples returned by the query.  Note that a SELECT that
happens to retrieve zero tuples still shows <TT
CLASS="LITERAL"
>PGRES_TUPLES_OK</TT
>.
<TT
CLASS="LITERAL"
>PGRES_COMMAND_OK</TT
> is for commands that can never return tuples
(INSERT, UPDATE, etc.). A response of <TT
CLASS="LITERAL"
>PGRES_EMPTY_QUERY</TT
> often
exposes a bug in the client software.</P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQresStatus</TT
>
	Converts the enumerated type returned by PQresultStatus into
	a string constant describing the status code.
<PRE
CLASS="SYNOPSIS"
>char *PQresStatus(ExecStatusType status);</PRE
></P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQresultErrorMessage</TT
>
returns the error message associated with the query, or an empty string
if there was no error.
<PRE
CLASS="SYNOPSIS"
>char *PQresultErrorMessage(const PGresult *res);</PRE
>
Immediately following a <TT
CLASS="FUNCTION"
>PQexec</TT
> or <TT
CLASS="FUNCTION"
>PQgetResult</TT
>
call, <TT
CLASS="FUNCTION"
>PQerrorMessage</TT
> (on the connection) will return the same
string as <TT
CLASS="FUNCTION"
>PQresultErrorMessage</TT
> (on the result).  However, a
PGresult will retain its error message
until destroyed, whereas the connection's error message will change when
subsequent operations are done.  Use <TT
CLASS="FUNCTION"
>PQresultErrorMessage</TT
> when you want to
know the status associated with a particular PGresult; use <TT
CLASS="FUNCTION"
>PQerrorMessage</TT
>
when you want to know the status from the latest operation on the connection.</P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQntuples</TT
>
          Returns the number of tuples (instances)
          in the query result.
<PRE
CLASS="SYNOPSIS"
>int PQntuples(const PGresult *res);</PRE
></P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQnfields</TT
>
          Returns   the   number    of    fields
          (attributes) in each tuple of the query result.
<PRE
CLASS="SYNOPSIS"
>int PQnfields(const PGresult *res);</PRE
></P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQbinaryTuples</TT
>
          Returns 1 if the PGresult contains binary tuple data,
	  0 if it contains ASCII data.
<PRE
CLASS="SYNOPSIS"
>int PQbinaryTuples(const PGresult *res);</PRE
>
Currently, binary tuple data can only be returned by a query that
extracts data from a <SPAN
CLASS="ACRONYM"
>BINARY</SPAN
> cursor.</P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQfname</TT
>
 Returns the field (attribute) name associated with the given field  index.
 Field  indices start at 0.
<PRE
CLASS="SYNOPSIS"
>char *PQfname(const PGresult *res,
                    int field_index);</PRE
></P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQfnumber</TT
>
            Returns  the  field  (attribute)  index
          associated with the given field name.
<PRE
CLASS="SYNOPSIS"
>int PQfnumber(const PGresult *res,
              const char *field_name);</PRE
></P
><P
>        -1 is returned if the given name does not match any field.</P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQftype</TT
>
            Returns the field type associated with the
          given  field  index.  The  integer  returned is an
          internal coding of the type.  Field indices  start
          at 0.
<PRE
CLASS="SYNOPSIS"
>Oid PQftype(const PGresult *res,
            int field_num);</PRE
>
You can query the system table <TT
CLASS="LITERAL"
>pg_type</TT
> to obtain
the name and properties of the various datatypes. The <SPAN
CLASS="ACRONYM"
>OID</SPAN
>s
of the built-in datatypes are defined in <TT
CLASS="FILENAME"
>src/include/catalog/pg_type.h</TT
>
in the source tree.</P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQfsize</TT
>
          Returns  the  size  in bytes of the field
          associated with the given field index.
          Field indices start at 0.
<PRE
CLASS="SYNOPSIS"
>int PQfsize(const PGresult *res,
            int field_index);</PRE
>
	PQfsize returns the space allocated for this field in a database
	tuple, in other words the size of the server's binary representation
	of the data type.  -1 is returned if the field is variable size.</P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQfmod</TT
>
          Returns  the type-specific modification data of the field
          associated with the given field index.
          Field indices start at 0.
<PRE
CLASS="SYNOPSIS"
>int PQfmod(const PGresult *res,
           int field_index);</PRE
></P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQgetvalue</TT
>
            Returns a single field  (attribute)  value of one tuple
	    of a PGresult.
	    Tuple and field indices start at 0.
<PRE
CLASS="SYNOPSIS"
>char* PQgetvalue(const PGresult *res,
                 int tup_num,
                 int field_num);</PRE
>
For most queries, the value returned by <TT
CLASS="FUNCTION"
>PQgetvalue</TT
>
is a null-terminated <SPAN
CLASS="ACRONYM"
>ASCII</SPAN
> string  representation
of the attribute value.  But if <TT
CLASS="FUNCTION"
>PQbinaryTuples()</TT
> is 1,
the  value  returned  by <TT
CLASS="FUNCTION"
>PQgetvalue</TT
>  is  the  binary
representation of the
type in the internal format of the backend server
(but not including the size word, if the field is variable-length).
It  is then the programmer's responsibility to cast and
convert the data to the correct C type.  The pointer
returned  by  <TT
CLASS="FUNCTION"
>PQgetvalue</TT
> points to storage that is
part of the PGresult structure.  One should not modify it,
and one must explicitly 
copy the value into other storage if it is to
be used past the lifetime of the  PGresult  structure itself.</P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQgetlength</TT
>
          Returns   the   length  of  a  field (attribute) in bytes.
          Tuple and field indices start at 0.
<PRE
CLASS="SYNOPSIS"
>int PQgetlength(const PGresult *res,
                int tup_num,
                int field_num);</PRE
>
This is the actual data length for the particular data value, that is the
size of the object pointed to by PQgetvalue.  Note that for ASCII-represented
values, this size has little to do with the binary size reported by PQfsize.</P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQgetisnull</TT
>
           Tests a field for a NULL entry.
           Tuple and field indices start at 0.
<PRE
CLASS="SYNOPSIS"
>int PQgetisnull(const PGresult *res,
                int tup_num,
                int field_num);</PRE
>
            This function returns  1 if the field contains a NULL, 0 if
            it contains a non-null value.  (Note that PQgetvalue
            will return an empty string, not a null pointer, for a NULL
            field.)</P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQcmdStatus</TT
>
          Returns the command status string from the SQL command that
	  generated the PGresult.
<PRE
CLASS="SYNOPSIS"
>char * PQcmdStatus(const PGresult *res);</PRE
></P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQcmdTuples</TT
>
	  Returns the number of rows affected by the SQL command.
<PRE
CLASS="SYNOPSIS"
>char * PQcmdTuples(const PGresult *res);</PRE
>
          If the <SPAN
CLASS="ACRONYM"
>SQL</SPAN
> command that generated the
	  PGresult was INSERT, UPDATE or DELETE, this returns a
	  string containing the number of rows affected.  If the
          command was anything else, it returns the empty string.</P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQoidValue</TT
>
          Returns the object id of  the  tuple
          inserted,  if  the <SPAN
CLASS="ACRONYM"
>SQL</SPAN
> command was an INSERT.
          Otherwise, returns <TT
CLASS="LITERAL"
>InvalidOid</TT
>.
<PRE
CLASS="SYNOPSIS"
>Oid PQoidValue(const PGresult *res);</PRE
>
          The type <SPAN
CLASS="TYPE"
>Oid</SPAN
> and the constant <TT
CLASS="LITERAL"
>Invalid</TT
>
          will be defined if you include the <SPAN
CLASS="APPLICATION"
>libpq</SPAN
>
          header file. They will both be some integer type.</P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQoidStatus</TT
>
          Returns a string with the object id of  the  tuple
          inserted,  if  the <SPAN
CLASS="ACRONYM"
>SQL</SPAN
> command was an INSERT.
          Otherwise, returns an empty string.
<PRE
CLASS="SYNOPSIS"
>char * PQoidStatus(const PGresult *res);</PRE
>
The function is deprecated in favor of <TT
CLASS="FUNCTION"
>PQoidValue</TT
>
and is not thread-safe.</P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQprint</TT
>
          Prints out all the  tuples  and,  optionally,  the
          attribute  names  to  the specified output stream.
<PRE
CLASS="SYNOPSIS"
>void PQprint(FILE* fout,      /* output stream */
             const PGresult *res,
             const PQprintOpt *po);

struct {
    pqbool  header;      /* print output field headings and row count */
    pqbool  align;       /* fill align the fields */
    pqbool  standard;    /* old brain dead format */
    pqbool  html3;       /* output html tables */
    pqbool  expanded;    /* expand tables */
    pqbool  pager;       /* use pager for output if needed */
    char    *fieldSep;   /* field separator */
    char    *tableOpt;   /* insert to HTML &lt;table ...&gt; */
    char    *caption;    /* HTML &lt;caption&gt; */
    char    **fieldName; /* null terminated array of replacement field names */
} PQprintOpt;</PRE
>
This function was formerly used by <SPAN
CLASS="APPLICATION"
>psql</SPAN
>
to print query results, but this is no longer the case and this
function is no longer actively supported.</P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQclear</TT
>
          Frees  the  storage  associated with the PGresult.
          Every query result should be freed via PQclear  when
          it  is  no  longer needed.
<PRE
CLASS="SYNOPSIS"
>void PQclear(PQresult *res);</PRE
>
          You can keep a PGresult object around for as long as you
          need it; it does not go away when you issue a new query,
          nor even if you close the connection.  To get rid of it,
          you must call <TT
CLASS="FUNCTION"
>PQclear</TT
>.  Failure to do this will
          result in memory leaks in  the  frontend  application.</P
></LI
><LI
><P
><TT
CLASS="FUNCTION"
>PQmakeEmptyPGresult</TT
>
          Constructs an empty PGresult object with the given status.
<PRE
CLASS="SYNOPSIS"
>PGresult* PQmakeEmptyPGresult(PGconn *conn, ExecStatusType status);</PRE
>
This is libpq's internal routine to allocate and initialize an empty
PGresult object.  It is exported because some applications find it
useful to generate result objects (particularly objects with error
status) themselves.  If conn is not NULL and status indicates an error,
the connection's current errorMessage is copied into the PGresult.
Note that PQclear should eventually be called on the object, just
as with a PGresult returned by libpq itself.</P
></LI
></UL
></P
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="libpq-chapter.htm"
>Anterior</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="postgres.htm"
>Inicio</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="x20253.htm"
>Siguiente</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>libpq</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="libpq-chapter.htm"
>Subir</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Asynchronous Query Processing</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>