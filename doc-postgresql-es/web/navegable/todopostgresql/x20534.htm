<HTML
><HEAD
><TITLE
>libpq Control Functions</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.54"><LINK
REL="HOME"
TITLE="PostgreSQL"
HREF="postgres.htm"><LINK
REL="UP"
TITLE="libpq"
HREF="libpq-chapter.htm"><LINK
REL="PREVIOUS"
TITLE="libpq Tracing Functions"
HREF="x20521.htm"><LINK
REL="NEXT"
TITLE="Environment Variables"
HREF="libpq-envars.htm"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>PostgreSQL</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="x20521.htm"
>Anterior</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Capítulo 46. libpq</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="libpq-envars.htm"
>Siguiente</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="AEN20534"
><SPAN
CLASS="APPLICATION"
>libpq</SPAN
> Control Functions</A
></H1
><P
><P
></P
><UL
><LI
><P
><TT
CLASS="FUNCTION"
>PQsetNoticeProcessor</TT
>
Control reporting of notice and warning messages generated by libpq.
<PRE
CLASS="SYNOPSIS"
>typedef void (*PQnoticeProcessor) (void *arg, const char *message);

PQnoticeProcessor
PQsetNoticeProcessor(PGconn *conn,
                     PQnoticeProcessor proc,
                     void *arg);</PRE
></P
></LI
></UL
></P
><P
>By default, <SPAN
CLASS="APPLICATION"
>libpq</SPAN
> prints <SPAN
CLASS="QUOTE"
>"notice"</SPAN
> messages
from the backend as well as a few error messages that it generates by itself
on <TT
CLASS="FILENAME"
>stderr</TT
>.
This behavior can be overridden by supplying a callback function that
does something else with the messages.  The callback function is passed
the text of the error message (which includes a trailing newline), plus
a void pointer that is the same one passed to <TT
CLASS="FUNCTION"
>PQsetNoticeProcessor</TT
>.
(This pointer can be used to access application-specific state if needed.)
The default notice processor is simply
<PRE
CLASS="PROGRAMLISTING"
>static void
defaultNoticeProcessor(void * arg, const char * message)
{
    fprintf(stderr, "%s", message);
}</PRE
>
To use a special notice processor, call <TT
CLASS="FUNCTION"
>PQsetNoticeProcessor</TT
> just after
creation of a new PGconn object.</P
><P
>The return value is the pointer to the previous notice processor. If you supply a callback
function pointer of NULL, no action is taken, but the current pointer is returned.</P
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="x20521.htm"
>Anterior</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="postgres.htm"
>Inicio</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="libpq-envars.htm"
>Siguiente</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><SPAN
CLASS="APPLICATION"
>libpq</SPAN
> Tracing Functions</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="libpq-chapter.htm"
>Subir</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Environment Variables</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>