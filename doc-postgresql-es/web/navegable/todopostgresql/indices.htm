<!-- saved from url=(0022)http://internet.e-mail -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML>

<HEAD>

<TITLE>Indices y Claves</TITLE>

<META NAME="GENERATOR"
      CONTENT="Modular DocBook HTML Stylesheet version 1.18"><LINK
      REL="HOME"
      TITLE="PostgreSQL"
      HREF="postgres.htm">

<LINK REL="UP"
      TITLE="User's Guide"
      HREF="part-user.htm">

<LINK REL="PREVIOUS"
      TITLE="UNION Queries"
      HREF="x3447.htm">

<LINK REL="NEXT"
      TITLE="Partial Indices"
      HREF="partial-index.htm">

</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<DIV CLASS="NAVHEADER">

<TABLE WIDTH="100%"
       BORDER="0"
       CELLPADDING="0"
       CELLSPACING="0">

<TR>

<TH COLSPAN="3"
    ALIGN="center">PostgreSQL</TH>

</TR>

<TR>

<TD WIDTH="10%"
    ALIGN="left"
    VALIGN="bottom">

<A HREF="x3447.htm">Anterior</A>
</TD>

<TD WIDTH="80%"
    ALIGN="center"
    VALIGN="bottom">
</TD>

<TD WIDTH="10%"
    ALIGN="right"
    VALIGN="bottom">

<A HREF="partial-index.htm">Siguiente</A>

</TD>

</TR>

</TABLE>

<HR ALIGN="LEFT"
    WIDTH="100%">

</DIV>

<H1>

<A NAME="INDICES">Cap&iacute;tulo 7. Indices y Claves</A>

</H1>

<DIV CLASS="TOC">

<DL><DT>

<B>Tabla de Contenido</B>

</DT>

<DT>

<A HREF="indices.htm#KEYS">Claves</A>

</DT><DT>

<A HREF="partial-index.htm">Indices parciales</A>

</DT></DL>

</DIV>

<P>  Los &iacute;ndices se utilizan, principalmente, para mejorar
     la performance de una base de datos. Se definen sobre
     las columnas de la tabla que se utilicen en consultas 
     repetidamente. Su uso inapropiado resultará en un funcionamiento
     m&aacute;s lento, ya que los tiempos de actualización e 
     inserción se ven incrementados ante la presencia de &iacute;ndices.     

</P>

<P>  Dos tipos de &iacute;ndices pueden ser definidos:     
     
<P>

</P>

<UL>

<LI>

<P> <I CLASS="FIRSTTERM">Indice de valor</I>. Los campos clave para el
    son especificados como nombres de columna; una columna puede contener
    un operador de clase asociado. Un operador de clase permite especificar 
    los operadores a ser utilizados por un &iacute;ndice en particular. Por 
    ejemplo, un &iacute;ndice del tipo <I>btree</I> de enteros de cuatro
    bytes utilizaría la clase <TT CLASS="LITERAL">int4_ops</TT>; esta clase
    contiene funciones de comparación para enteros de cuatro bytes. La clase
    de operadores por defecto es la apropiada para cada tipo de campo.        

</P>

</LI>

<LI>

<P> <I CLASS="FIRSTTERM">Indice funcional</I>. El &iacute;ndice se define
    por el resultado de una función definida por el usuario aplicada a uno
    o más atributos de la clase individual. Estos &iacute;ndices funcionales
    pueden ser utilizados para obtener un acceso más veloz a información
    basada en operadores que normalmente requieren alguna transformación 
    para ser aplicados a la información de la base.

</P>

</LI>

</UL>


</P>

<P>Postgres provee accesos de tipo <I>btree</I> (&aacute;rbol-b), <I>rtree</I> 
   (&aacute;rbol-r) y <I>hash</I> (desmenuzamiento) para &iacute;ndices secundarios. El 
   acceso de tipo <I>btree</I> es una implementación de <I>btree</I> tipo Lehman-Yao de alta 
   concurrencia. El acceso de tipo <I>rtree</I> se implementa utilizando el algoritmo 
   de Guttman's. El m&eacute;todo <I>hash</I> es una implementaci&oacute;n del 
   m&eacute;todo de Litwin's. Se citan estos algoritmos &uacute;nicamente para 
   indicar que todos estos métodos de acceso son totalmente din&aacute;micos
   y no requieren ser optimizados peri&oacute;dicamente (como es el caso, por
   ejemplo, de los m&eacute;todos de acceso tipo <I>hash</I> est&aacute;ticos).
   
</P>

<P>El optimizador de consultas de Postgres considerar&aacute; utilizar 
   &iacute;ndices de tipo <I>btree</I> en una b&uacute;squeda cuando alguno de los
   atributos indexados esté involucrado en una comparación que utilice uno
   de los siguientes operadores: &lt;, &lt;=, =, &gt;=, &gt;.

</P>

<P>En <SPAN CLASS="PRODUCTNAME">Postgres</SPAN>, las dos clases de caja del tipo 
   de datos <TT CLASS="LITERAL">box</TT> soportan &iacute;ndices.
   La diferencia entre ellas radica en que <TT CLASS="LITERAL">bigbox_ops</TT>
   reduce las coordenadas de la caja para evitar excepciones de punto flotante
   originadas en multiplicaciones, sumas, y substracciones con coordenadas de 
   punto flotante demasiado grandes. Si el campo sobre el que se ubica su 
   rect&aacute;ngulo es de aproximadamente 20.000 unidades cuadradas o mayor, 
   deber&iacute;a utilizar <TT CLASS="LITERAL">bigbox_ops
   </TT>.

   La clase de operadores <TT CLASS="LITERAL">poly_ops</TT> brinda soporte para
   &iacute;ndices de tipo <I>rtree</I> en la información de <TT CLASS="LITERAL">
   polygon</TT>. 
</P>

<P>El optimizador de consultas de Postgres considerar&aacute; utilizar 
   &iacute;ndices de tipo <I>rtree</I> en una b&uacute;squeda cuando alguno de los
   atributos indexados esté involucrado en una comparación que utilice uno
   de los siguientes operadores: &lt;&lt;, &amp;&lt;, &amp;&gt;, &gt;&gt;, 
   @, ~=, &amp;&amp;.
</P>

<P>El optimizador de consultas de Postgres considerar&aacute; utilizar 
   &iacute;ndices de tipo <I>hash</I> en una b&uacute;squeda cuando alguno de los
   atributos indexados esté involucrado en una comparación que utilice el
   operador <TT CLASS="LITERAL">=</TT>.
</P>

<P>Actualmente, s&oacute;lo el acceso de tipo <I>BTREE</I> brinda soporte
   para &iacute;ndices multi-columna. Pueden especificarse hasta 7 claves.
</P>

<P>Utilice <A HREF="sql-dropindex.htm#SQL-DROPINDEX-TITLE">
   <I>DROP INDEX</I></A> para eliminar un &iacute;ndice.</P>

<P>La clase de operadores <TT CLASS="LITERAL">int24_ops</TT> resulta 
   &uacute;til para construir &iacute;ndices basados en datos de tipo int2,
   y realizar comparaciones con datos de tipo int4 en la calificaci&oacute;n
   de consultas. De manera similar, <TT CLASS="LITERAL">int42_ops</TT> brinda
   soporte para &iacute;ndices basados en datos de tipo int4 que ser&aacute;n
   comparados con datos de tipo int2 en las consultas.
</P>

<P>El siguiente comando lista todos los posibles valores para <TT>ops_names</TT>:

<PRE CLASS="PROGRAMLISTING">
SELECT am.amname AS acc_name,
       opc.opcname AS ops_name,
       opr.oprname AS ops_comp
    FROM pg_am am, pg_amop amop,
         pg_opclass opc, pg_operator opr
    WHERE amop.amopid = am.oid AND
          amop.amopclaid = opc.oid AND
          amop.amopopr = opr.oid
    ORDER BY acc_name, ops_name, ops_comp
</PRE>

</P>

<H1 CLASS="SECT1">

<A NAME="KEYS">Claves</A>

</H1>

<P>

<BLOCKQUOTE CLASS="NOTE">
<P><B>Autor: </B>Escrito por <A HREF="herouth@oumail.openu.ac.il"
   TARGET="_top">Herouth Maoz</A>. Este texto apareció originalmente 
   en la lista de correo de usuarios el 02-03-1998 en respuesta a la 
   pregunta: &quot;¿Cu&aacute;l es la diferencia entre las limitaciones de 
   PRIMARY KEY y las de UNIQUE?&quot;
</P>
</BLOCKQUOTE>

</P>

<P>    
<PRE CLASS="PROGRAMLISTING">
Subject: Re: [QUESTIONS] PRIMARY KEY | UNIQUE

        Cu&aacute;l es la diferencia entre:

              PRIMARY KEY(fields,...) and
              UNIQUE (fields,...)

       - ¿Es un alias?
       - ¿Si PRIMARY KEY ya es, por s&iacute; mismo, &uacute;nico,
         por qué existe entonces otra clave llamada UNIQUE?
</PRE>
</P>


<P>Una clave principal es un campo (o combinaci&oacute;n de m&aacute;s de un campo) 
   utilizado para identificar un registro espec&iacute;fico. Por ejemplo, el 
   n&uacute;mero de seguro social que identifica a una persona.
</P>
    
<P>Una combinación UNIQUE de campos no tiene nada que ver con la 
   identificación del registro. Es simplemente una limitaci&oacute;n para mantener
   la integridad. Por ejemplo, yo tengo una colecci&oacute;n de enlaces. Cada 
   colecci&oacute;n se identifica mediante un n&uacute;mero &uacute;nico, el cual 
   es la clave principal. Esta clave es la que se utiliza en las relaciones.
</P>

<P>Sin embargo, mi aplicaci&oacute;n requiere que cada colecci&oacute;n tenga
   una nombre &uacute;nico. ¿Por qu&eacute;? Para que cualquier persona que quiera
   modificar una colecci&oacute;n pueda identificarla. Es mucho m&aacute;s 
   dif&iacute;cil saber, si usted tiene dos colecciones con el nombre "Ciencias
   Naturales", que la marcada con el n&uacute;mero 24433 es la que necesita, y
   la marcada con el n&uacute;mero 29882 no lo es.
<P>

<P>Entonces, el usuario selecciona la colecci&oacute;n por su nombre. Nos 
   aseguramos por consiguiente que, dentro de la base de datos, los 
   nombres son &uacute;nicos. Sin embargo, ninguna otra tabla en la base de 
   datos se refiere a la colecci&oacute;n por su nombre. Eso ser&iacute;a 
   muy ineficiente.

   M&aacute;s aun, a pesar de ser &uacute;nico, ¡el nombre no define realmente
   a la colecci&oacute;n! Por ejemplo, si alguien decide cambiar el nombre de
   la colecci&oacute;n de "Ciencias Naturales" a "Biolog&iacute;a", seguir&aacute;
   siendo la misma colecci&oacute;n, solo que con un nombre diferente. Mientras
   el nombre siga siendo &uacute;nico esto est&aacute; bien.
</P>

<P>Entonces:

<P>

</P>

<UL>

<LI>

<P>       Clave Principal:
<P>
</P>

<UL COMPACT="COMPACT">

<LI STYLE="list-style-type: disc">

<P>	  Se utiliza para la identificaci&oacute;n de los registros y para 
          referirse a ellas.
</P>

</LI>

<LI STYLE="list-style-type: disc">

<P>	  Es imposible (o muy dif&iacute;cil) de actualizar.
</P>

</LI>
<LI STYLE="list-style-type: disc">

<P>	  No deben aceptar NULLs.
</P>

</LI>

</UL>

</P>

</LI>

<LI>

<P>       Campo(s) &uacute;nico(s):

<P>

</P>

<UL COMPACT="COMPACT">

<LI STYLE="list-style-type: disc">

<P>	  Se utilizan como una forma alternativa de acceso a los registros.
</P>

</LI>

<LI STYLE="list-style-type: disc">

<P>	  Son actualizables, siempre y cuando se mantengan &uacute;nicos.
</P>

</LI>

<LI STYLE="list-style-type: disc">

<P>	  Aceptan NULLs.
</P>

</LI>

</UL>

</P>

</LI>

</UL>

</P>

<P>En cuanto a por qu&eacute; no se definen claves no-&uacute;nicas
   en la sintaxis est&aacute;ndar de <SPAN CLASS="ACRONYM">SQL</SPAN>; 
   bueno, usted debe entender que los &iacute;ndices dependen de las
   implementaciones. <SPAN CLASS="ACRONYM">SQL</SPAN> no define la 
   implementaci&oacute;n, simplemente las relaciones entre los datos en
   la base. <SPAN CLASS="PRODUCTNAME">Postgres</SPAN> no permite &iacute;ndices
   no-&uacute;nicos, pero los &iacute;ndices utilizados para fortalecer a 
   <SPAN CLASS="ACRONYM">SQL</SPAN> son siempre &uacute;nicos.
</P>

<P>As&iacute;, usted podr&iacute;a consultar una tabla mediante una combinaci&oacute;n
   de sus columnas, a pesar de no poder tener un &iacute;ndice
   basado en ellas. Los &iacute;ndices son meramente una ayuda para
   la implementaci&oacute;n que cada <SPAN CLASS="ACRONYM">RDBMS</SPAN> le
   ofrece a fin de que las consultas que se realizan con m&aacute;s frecuencia
   sean m&aacute;s eficientes. Algunos <SPAN CLASS="ACRONYM">RDBMS</SPAN> podr&aacute;n
   ofrecerle ayudas adicionales, como mantener una clave en la memoria principal.
   Tendr&aacute;n alg&uacute;n comando especial, por ejemplo:

<PRE CLASS="PROGRAMLISTING">

   CREATE MEMSTORE ON &lt;table&gt; COLUMNS &lt;cols&gt;

</PRE>

   (este no es un comando real, simplemente un ejemplo). 

</P>

<P> De hecho, cuando usted crea una clave principal o una combinaci&oacute;n
    &uacute;nica de campos, en ninguna parte de la especificaci&oacute;n de 
    <SPAN CLASS="ACRONYM">SQL</SPAN> se dice que se crea un &iacute;ndice,
    ni que la recuperaci&oacute;n de datos utilizando la clave sea m&aacute;s
    eficiente que realizar un recorrido secuencial.
</P>

<P> Entonces, si usted desea utilizar una combinaci&oacute;n de campos que 
    no sea &uacute;nica como clave secundaria, en realidad no necesita 
    especificar nada - ¡simplemente empiece a recuperar datos a trav&eacute;s
    de esa combinaci&oacute;n! Sin embargo, si usted desea que esa 
    recuperaci&oacute;n de datos sea eficiente, deber&aacute; acudir a los
    medios que le ofrece su <SPAN CLASS="ACRONYM">RDBMS</SPAN> - ya se trate de 
    un &iacute;ndice, un comando MEMSTORE imaginario, o un <SPAN CLASS="ACRONYM">
    RDBMS</SPAN> inteligente que construya &iacute;ndices sin su conocimiento
    fundament&aacute;ndose en el hecho de que usted ya ha realizado varias consultas
    basadas en una combinaci&oacute;n espec&iacute;fica de claves... (Un sistema
    que aprende de la experiencia).
</P>

<DIV CLASS="NAVFOOTER">

<HR ALIGN="LEFT"
    WIDTH="100%">

<TABLE WIDTH="100%"
       BORDER="0"
       CELLPADDING="0"
       CELLSPACING="0">

<TR>

<TD WIDTH="33%"
    ALIGN="left"
    VALIGN="top">

    <A HREF="x3447.htm">Anterior</A>

</TD>

<TD WIDTH="34%"
    ALIGN="center"
    VALIGN="top">

    <A HREF="postgres.htm">Inicio</A>

</TD>

<TD WIDTH="33%"
    ALIGN="right"
    VALIGN="top">

   <A HREF="partial-index.htm">Siguiente</A>

</TD>

</TR>

<TR>

<TD WIDTH="33%"
    ALIGN="left"
    VALIGN="top">

    Consultas con UNION 

</TD>

<TD WIDTH="34%"
    ALIGN="center"
    VALIGN="top">

   <A HREF="part-user.htm">Arriba</A>

</TD>

<TD WIDTH="33%"
    ALIGN="right"
    VALIGN="top">

    Indices parciales</TD>

</TR>

</TABLE>

</DIV>

</BODY>

</HTML>