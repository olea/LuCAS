.\" Copyright (c) 1993 Luigi P. Bai (lpb@softint.com) July 28, 1993
.\" Portions Copyright 1993 Giorgio Ciucci <giorgio@crcc.it>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified 1993-07-28, Rik Faith <faith@cs.unc.edu>
.\" Modified 1993-11-28, Giorgio Ciucci <giorgio@crcc.it>
.\" Modified 1997-01-31, Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2001-02-18, Andries Brouwer <aeb@cwi.nl>
.\" Modified 2002-01-05, 2004-05-27, 2004-06-17,
.\"    Michael Kerrisk <mtk-manpages@gmx.net>
.\" Modified 2004-10-11, aeb
.\" Modified, Nov 2004, Michael Kerrisk <mtk-manpages@gmx.net>
.\"	Language and formatting clean-ups
.\"	Updated shmid_ds structure definitions
.\"	Added information on SHM_DEST and SHM_LOCKED flags
.\"	Noted that CAP_IPC_LOCK is not required for SHM_UNLOCK 
.\"		since kernel 2.6.9
.\" Modified, 2004-11-25, mtk, notes on 2.6.9 RLIMIT_MEMLOCK changes
.\"
.TH SHMCTL 2 2004-11-10 "Linux 2.6.9" "Linux Programmer's Manual"
.SH NAME
shmctl \- shared memory control
.SH SYNOPSIS
.ad l
.B #include <sys/ipc.h>
.sp
.B #include <sys/shm.h>
.sp
.BI "int shmctl(int " shmid ", int " cmd ", struct shmid_ds *" buf );
.ad b
.SH DESCRIPTION
.BR shmctl ()
allows the caller to obtain information about a shared memory segment,
set the owner, group, and permissions of a segment,
or destroy a segment.
.PP
The
.I buf
argument is a pointer to a \fIshmid_ds\fP structure,
defined in <sys/shm.h> as follows:
.PP
.in +4n
.nf
struct shmid_ds {
    struct ipc_perm shm_perm;    /* Ownership and permissions */
    size_t          shm_segsz;   /* Size of segment (bytes) */
    time_t          shm_atime;   /* Last attach time */
    time_t          shm_dtime;   /* Last detach time */
    time_t          shm_ctime;   /* Last change time */
    pid_t           shm_cpid;    /* PID of creator */
    pid_t           shm_lpid;    /* PID of last stmat()/shmdt() */
    shmatt_t        shm_nattch;  /* No. of current attaches */
    ...
};
.fi
.in -4n
.PP
The
.I ipc_perm
structure is defined in <sys/ipc.h> as follows
(the highlighted fields are settable using
.BR IPC_SET ):
.PP
.in +4n
.nf
struct ipc_perm {
    key_t key;            /* Key supplied to shmget() */
    uid_t \fBuid\fP;            /* Effective UID of owner */
    gid_t \fBgid\fP;            /* Effective GID of owner */
    uid_t cuid;           /* Effective UID of creator */
    gid_t cgid;           /* Effective GID of creator */
    unsigned short \fBmode\fP;  /* \fBPermissions\fP + SHM_DEST and
                             SHM_LOCKED flags */
    unsigned short seq;   /* Sequence number */
};
.fi
.in -4n
.PP
Valid values for
.I cmd
are:
.br
.TP 12
.B IPC_STAT
Copy information from the kernel data structure associated with
.I shmid
into the
.I shmid_ds
structure pointed to by \fIbuf\fP.
The caller must have read permission on the
shared memory segment.
.TP
.B IPC_SET
Write the values of some members of the
.I shmid_ds
structure pointed to by
.I arg.buf
to the kernel data structure associated with this shared memory segment,
updating also its
.I shm_ctime
member.
The following fields can be changed:
\fIshm_perms.uid\fP, \fIshm_perms.gid\fP,
and (the least significant 9 bits of) \fIshm_perms.mode\fP.
The effective UID of the calling process must match the owner
.RI ( shm_perm.uid )
or creator
.RI ( shm_perm.cuid )
of the shared memory segment, or the caller must be privileged.
.TP
.B IPC_RMID
Mark the segment to be destroyed.
The segment will only actually be destroyed
after the last process detaches it (i.e., when the
.I shm_nattch
member of the associated structure
.I shmid_ds
is zero).
The caller must be the owner or creator, or be privileged.
If a segment has been marked for destruction, then the (non-standard)
.B SHM_DEST
flag of the
.I shm_perm.mode
field in the associated data structure retrieved by
.B IPC_STAT
will be set.
.PP
The caller \fImust\fP ensure that a segment is eventually destroyed;
otherwise its pages that were faulted in will remain in memory or swap.
.SS "Linux additions"
A privileged caller can prevent or allow swapping of a shared
memory segment with the following \fIcmd\fP values:
.br
.TP 12
.B SHM_LOCK
Prevent swapping of the shared memory segment. The caller must fault in
any pages that are required to be present after locking is enabled.
If a segment has been locked, then the (non-standard)
.B SHM_LOCKED
flag of the
.I shm_perm.mode
field in the associated data structure retrieved by
.B IPC_STAT
will be set.
.TP
.B SHM_UNLOCK
Unlock the segment, allowing it to be swapped out.
.PP
The
.BR IPC_INFO ,
.BR SHM_STAT
and
.B SHM_INFO
control calls are used by the
.BR ipcs (8)
program to provide information on allocated resources.
.SH "RETURN VALUE"
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP 11
.B EACCES
\fBIPC_STAT\fP or \fBSHM_STAT\fP is requested and
\fIshm_perm.modes\fP does not allow read access for
.IR shmid ,
and the calling process does not have the
.BR CAP_IPC_OWNER
capability.
.TP
.B EFAULT
The argument
.I cmd
has value
.B IPC_SET
or
.B IPC_STAT
but the address pointed to by
.I buf
isn't accessible.
.TP
.B EIDRM
\fIshmid\fP points to a removed identifier.
.TP
.B EINVAL
\fIshmid\fP is not a valid identifier, or \fIcmd\fP
is not a valid command.
.TP
.B ENOMEM
(In kernels since 2.6.9),
.B SHM_LOCK
was specified and the size of the to-be-locked segment would mean 
that the total bytes in locked shared memory segments would exceed
the limit for the real user ID of the calling process.
This limit is defined by the
.BR RLIMIT_MEMLOCK
soft resource limit (see
.BR setrlimit (2)).
.TP
.B EOVERFLOW
\fBIPC_STAT\fP is attempted, and the gid or uid value
is too large to be stored in the structure pointed to by
.IR buf .
.TP
.B EPERM
\fBIPC_SET\fP or \fBIPC_RMID\fP is attempted, and the
effective user ID of the calling process is not that of the creator
(found in
.IR shm_perm.cuid ),
or the owner
(found in
.IR shm_perm.uid ),
and the process was not privileged (Linux: did not have the
.B CAP_SYS_ADMIN
capability).

Or (in kernels before 2.6.9),
.B SHM_LOCK
or
.B SHM_UNLOCK
was specified, but the process was not privileged
(Linux: did not have the
.B CAP_IPC_LOCK
capability).
(Since Linux 2.6.9, this error can also occur if the
.BR RLIMIT_MEMLOCK
is 0 and the caller is not privileged.)
.SH NOTE
Various fields in a \fIstruct shmid_ds\fP were shorts under Linux 2.2
and have become longs under Linux 2.4. To take advantage of this,
a recompilation under glibc-2.1.91 or later should suffice.
(The kernel distinguishes old and new calls by an IPC_64 flag in
.IR cmd .)
.SH "CONFORMING TO"
SVr4, SVID.  SVr4 documents additional error conditions EINVAL,
ENOENT, ENOSPC, ENOMEM, EEXIST.  Neither SVr4 nor SVID documents
an EIDRM error condition.
.SH "SEE ALSO"
.BR mlock (2),
.BR setrlimit (2),
.BR shmget (2),
.BR shmop (2),
.BR capabilities (7)
