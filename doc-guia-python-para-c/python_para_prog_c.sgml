<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
 
 <article lang="es" id="index">
 <articleinfo>
         <title>INTRODUCCION A PYTHON PARA PROGRAMADORES EN C</title>
         <pubdate>V0.10 - 07/07/2002</pubdate>
         <author>
                 <firstname>Diego</firstname>
                 <surname>Bravo Estrada</surname>
         </author>
 
         <revhistory>
                 <revision>
                 <revnumber>0.10</revnumber>
                 <date>2002-07-07</date>
                 <authorinitials>dbe</authorinitials>
                 <revremark>
                        Iniciamos esta guía.
                 </revremark>
                 </revision>
         </revhistory>


         <abstract>
         <para>

El título lo dice todo. Sin embargo es menester confesar una terrible advertencia: yo no soy ni 
siquiera remotamente un experto en Python. Si bien puedo mencionar una moderadamente larga 
convivencia con C, mi experiencia con Python se resume a sólo unos días. De hecho, la idea de 
confeccionar este documento obedece a mi deseo de aprender Python, y de hacerlo de un modo 
más entretenido que la clásica lectura del tutorial. Así que el lector puede esperar algunas 
imprecisiones e incluso algunas desorientaciones, pues es seguro que mi estilo de hacer las cosas 
(ala "C") debe todavía cambiar a un nivel más profundo para internarme en el "espíritu de Python". Python tiene una excelente documentación (ver en www.python.org/doc) y este 
texto apenas "araña" en lo más esencial.

         </para>
         </abstract>
</articleinfo>
<sect1><title>
1 Cuestiones de principio
</title>
<sect2><title>
1-A Ambiente Linux/Unix
</title>
<para>
En C, Ud. normalmente crea un archivo de texto con extensión ".c" (source file). Este archivo es 
compilado para generar un "objeto" (.o) o un ejecutable. Para esto el desarrollador invoca al 
compilador mediante un comando como "cc source.c" (en lugar de cc puede ser gcc, CL, etc.) 
Luego, el "ejecutable" se puede "ejecutar" invocándo su nombre en el sistema operativo.
</para>
<para>

En Python Ud. no necesita compilar (aunque hay una posibilidad de "compilar", que no conozco 
bien). Por el contrario, sus programas normalmente son interpretados cada vez que se ejecutan. El 
encargado de hacer todo esto es el intérprete de Python:
</para>
<para>
<screen>
$ python programa.py
</screen>

</para>
</sect2>
<sect2><title>
1-B Ambiente Windows
</title>
<para>
Lo más probable es que Ud. disponga de un entorno de desarrollo visual integrado. En este caso 
Ud. Sólo escribe el programa y el sistema se encarga de compilarlo, así como de ejecutarlo. En el 
caso de Windows, la distribución de Python viene con una aplicación que simplemente genera una 
ventana para lanzar comandos Python "Python IDLE (GUI)". Sin embargo, Ud. también puede 
crear archivos Python (con extensión .py) y ejecutarlos desde una ventana DOS:
</para>
<para>
<screen>
C:\PRUEBA> edit programa.py
C:\PRUEBA> python programa.py
</screen>
</para>
<para>

O Mejor:
</para>
<para>

<screen>
C:\PRUEBA> notepad programa.py
</screen>
</para>
<para>

Para que esto funcione, es necesario que el ejecutable de Python esté configurado en el "path". 
Para esto, normalmente Ud. deberá añadir una línea como la que sigue al archivo 
C:\AUTOEXEC.BAT:
</para>
<para>

set path=%path%;C:\python22
</para>
<para>

La ruta exacta dependerá de dónde se ha instalado Python.

</para>
</sect2>
</sect1>
<sect1><title>
2 Programas triviales
</title>
<sect2><title>
2-A Programa mínimo: "Hola Mundo!"
</title>
<para>

El clásico ejemplo de K&amp;R es algo parecido a lo siguiente:
</para>
<para>

<screen>
#include &lt;stdio.h&gt;

int main()
{
printf("Hola Mundo!\n");
return 0;
}
</screen>
</para>
<para>

Tratemos de hacer un equivalente en Python:
</para>
<para>

<screen>
print "Hola Mundo!\n"
</screen>

</para>
<para>

Comentarios:
</para>
<itemizedlist>

<listitem><para>1 No hemos necesitado incluir ningún tipo de archivo cabecera para invocar a "print". Esto es así 
porque "print" es una palabra reservada de Python a diferencia de C, donde "printf" es una función 
de la librería estándar. Como se sabe, las funciones C deben ser declaradas antes de su uso. Más 
adelante veremos casos donde sí requeriremos una directiva algo parecida al "#include".</para></listitem>

<listitem><para>2 No hemos necesitado crear ninguna función "main" para nuestro código. Esto nos evita además 
el retorno de un valor al sistema operativo, que en este caso no resulta de mucha utilidad.</para></listitem>

<listitem><para>3 No se debe terminar las instrucciones con punto y coma como en C.</para></listitem>

<listitem><para>4 En ejemplos subsecuentes omitiré el "tipo" de la función "main()" y el valor de retorno al sistema 
operativo por cuestiones didácticas y ahorro de teclas.</para></listitem>
</itemizedlist>
</sect2>
<sect2><title>

2-B Imprimiendo más texto simple
</title>
<para>

El siguiente programa intenta imprimir un gran texto mediante la concatenación de strings:
</para>
<para>

<screen>
#include &lt;stdio.h&gt;

main()
{
printf("\nEsta es una línea de texto.\nAhora empieza otra, la cual"
" continua.\n     Finalmente otra línea que empieza dejando 5 
espacios\n");
</screen>
}
</para>
<para>

Su equivalente Python resulta bastante práctico:
</para>
<para>

<screen>
print """
Esta es una línea de texto.
Ahora empieza otra, la cual continua.
     Finalmente otra línea que empieza dejando 5 espacios
"""
</screen>
</para>
<para>

Comentarios
</para>
<itemizedlist>

<listitem><para>1 Esto se puede hacer de varias maneras en Python. Las "triples comillas" que hemos empleado, 
efectivamente permiten imprimir literalmente el contenido encerrado. Una secuencia como "\n" se 
imprime literalmente como "\n" y no como un salto de línea. En ocasiones este comportamiento no 
es deseable, para lo cual se puede usar algo como:

<screen>
print "\nEsta es una línea de texto,\nAhora empieza otra, la cual\
 continua.\n     Finalmente otra línea que empieza dejando \
5 espacios"
</screen>
</para></listitem>
<listitem><para>2 Las comillas dobles y las simples son casi intercambiables. Lo anterior es equivalente a:
</para>
<para>

<screen>
print '\nEsta es una línea de texto,\nAhora empieza otra, la cual\
 continua.\n     Finalmente otra línea que empieza dejando \
5 espacios'
</screen>
</para>
<para>

o a:
</para>
<para>

<screen>
print '''
Esta es una línea de texto.
Ahora empieza otra, la cual continua.
     Finalmente otra línea que empieza dejando 5 espacios
'''
</screen>
</para></listitem>
</itemizedlist>
</sect2>
<sect2><title>

2-C Efectuando algunos cálculos
</title>
<para>

El siguiente programa calcula la hipotenusa a partir de los catetos:
</para>
<para>

<screen>
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

main()
{
double c1,c2,h;

c1=8;
c2=15;
h=sqrt(c1*c1+c2*c2);

printf("La hipotenusa es: %g\n",h);
}
</screen>
</para>
<para>

Ahora en python:
</para>
<para>

<screen>
import math

c1=8 ; c2=15

h=math.sqrt(c1**2+c2**2)

print "La hipotenuza es: ",h
</screen>
</para>
<para>

Comentarios
</para>
<itemizedlist>

<listitem><para>1 Hemos "importado" el módulo "math" de modo análogo a la "inclusión" del header "math.h" 
(Nótese que la importación realmente no "incluye" nada, son mecanismos totalmente distintos.) 
Esto nos permite invocar a una serie de rutinas matemáticas, como "sqrt()". 
La invocación es vía el módulo "math" que define a dicha función. Otro módulo (con cualquier 
otro propósito) podría implementar también una función con el mismo nombre, y no habría ningún 
conflicto (como sí puede ocurrir con C.)</para></listitem>

<listitem><para>2 Las variables que hemos empleado no han sido declaradas con tipo alguno. En particular, puesto 
que les hemos asignado valores enteros, su tipo será "entero". Para un cálculo matemático 
hubiera sido quizá más conveniente usar decimales (variables float.) Esto se conseguiría muy 
fácilmente intercambiando la asignación de "c1" y "c2" por:
</para>
<para>

<screen>
c1=8. ; c2=15.
</screen>
</para></listitem>

<listitem><para>3 Para elevar a una potencia, podemos emplear el operador "**" (que en C tendría  el significado 
de puntero a puntero.)</para></listitem>

<listitem><para>4 Para imprimir la variable junto a la cadena, hemos usado el separador "coma" (,).</para></listitem>

</itemizedlist>
</sect2>
<sect2><title>

2-D Leer desde el teclado
</title>
<para>
</para>
<para>

El siguiente programa C lee un número y calcula su cuadrado.
</para>
<para>

<screen>
#include &lt;stdio.h&gt;

main()
{
int a;

printf("Escriba un numero entero: ");
scanf("%d",&amp;a);
printf("El cuadrado de %d es %d\n",a,a*a);
}
</screen>
</para>
<para>

Ahora en Python:
</para>
<para>

<screen>
txt=raw_input("Escriba un numero entero: ")
n=int(txt)
print "El cuadrado de",n,"es",n*n
</screen>
</para>
<para>

Comentarios

</para>
<itemizedlist>
<listitem><para>1 raw_input es una función que permite leer texto de la "entrada estándar" (generalmente el 
teclado.) Esta función pertenece a una categoría especial (funciones built-in) que no requiere la 
importación de ningún módulo para su uso.</para></listitem>

<listitem><para>2 raw_input puede recibir un texto como argumento (como en el ejemplo) el cual funge de "prompt" 
para el usuario.</para></listitem>

<listitem><para>3 La función built-in "int()" permite obtener un valor entero a partir del texto suministrado. Es similar 
al "atoi" de C, aunque cuando recibe un número decimal, lo trunca comportándose como un "cast" 
al tipo "int". Esta función además puede recibir un segundo argumento correspondiendo a la base 
de numeración empleada en la representación del número. Por ejemplo, a partir de:
</para>
<para>

<screen>
print int("1101",2)
</screen>
</para>
<para>

Obtenemos "13" en pantalla.
</para></listitem>
</itemizedlist>
</sect2>
</sect1>

<sect1>
<title>
3 Comparaciones y loops
</title>
<sect2><title>

3-A Toma de decisiones
</title>
<para>

El siguiente programa permite resolver una ecuación de segundo grado en C:
</para>
<para>

<screen>
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

main()
{
double a,b,c,disc,s;

printf("Introduzca coeficiente a > "); scanf("%lf",&amp;a);
printf("Introduzca coeficiente b > "); scanf("%lf",&amp;b);
printf("Introduzca coeficiente c > "); scanf("%lf",&amp;c);

disc=b*b-4*a*c;

if(disc>=0)
        {
        s=sqrt(disc);
        printf("x1=%g   x2=%g\n",(-b+s)/(2*a),(-b-s)/(2*a) );
        }
else
        {
        s=sqrt(-disc);
        printf("x1=%g+%g i   x2=%g+%g i\n",-b/(2*a) , s/(2*a) , -b/(2*a) , 
-s/(2*a) );
        }
}
</screen>
</para>
<para>

Ahora la primera solución python:
</para>
<para>

<screen>
a=float(raw_input("Introduzca coeficiente a > "))
b=float(raw_input("Introduzca coeficiente b > "))
c=float(raw_input("Introduzca coeficiente c > "))

disc=b*b-4*a*c

if disc >= 0 :
        s=disc**0.5
        print "x1=",(-b+s)/(2*a),"   x2=",(-b-s)/(2*a) 

else:
        s=(-disc)**0.5
        print "x1=",-b/(2*a),"+", s/(2*a)," i   x2=",-b/(2*a),"+", -
s/(2*a)," i"
</screen>
</para>
<para>

Comentarios:
</para>
<itemizedlist>

<listitem><para>1 Los bloques de código se definen por el "sangrado" o "identación" del texto con respecto al inicio 
de la línea. No se usarán llaves o equivalentes.</para></listitem>

<listitem><para>2 La palabra reservada "if" requiere de una expresión que retorne un valor (seguida de "dos 
puntos" como en el ejemplo.) Al igual que en C, si esta expresión no es cero o nula o vacía, 
entonces se ejecuta el bloque que continua. El bloque "else :" tiene el mismo significado que en C.</para></listitem>

<listitem><para>3 El mismo programa se pudo escribir haciendo uso del módulo "cmath" (complex math) de Python 
del siguiente modo:
</para>
<para>

<screen>
import cmath

a=float(raw_input("Introduzca coeficiente a > "))
b=float(raw_input("Introduzca coeficiente b > "))
c=float(raw_input("Introduzca coeficiente c > "))

disc=b*b-4*a*c
s=cmath.sqrt(disc)
print "x1=",(-b+s)/(2*a),"   x2=",(-b-s)/(2*a)
</screen></para></listitem>
<listitem><para>4 Sólo hay un tipo de datos para representar decimales (float) a diferencia de C, donde podemos 
encontrar diversas variantes (float, double, long double.) Ni en Python ni en C se define el rango 
exacto que pueden adoptar estos números, quedando esto a criterio del implementador.</para></listitem>
</itemizedlist>

</sect2>
<sect2><title>

3-B Tabla de multiplicar
</title>
<para>

Vamos a generar la tabla de multiplicar enteros hasta el 12. En el colegio yo sólo llegue al 10.
</para>
<para>

<screen>
#include &lt;stdio.h&gt;

main()
{
int z,j;

for(z=1;z<=12;z++)
        {
        for(j=1;j<12;j++)
                printf ("%d ",z*j);
        printf("\n");
        }
}
</screen>
</para>
<para>

Tratemos ahora de hacerlo con Python, pero al estilo del C:
</para>
<para>

<screen>
z=1
while z<=12 :
        j=1
        while j<=12 :
                print z*j ,
                j=j+1
        print
        z=z+1
</screen>
</para>
<para>

Comentarios

</para>
<itemizedlist>
<listitem><para>1 El loop while permite ejecutar bloques mientras la comparación resulte exitosa.</para></listitem>

<listitem><para>2 El anidamiento se hace mediante el sangrado o identación</para></listitem>

<listitem><para>3 Para imprimir sin terminar con un salto de línea, se termina el "print" con una coma como en el 
ejemplo</para></listitem>

<listitem><para>4 No disponemos del operador "++", lo cual simplifica el lenguaje</para></listitem>

<listitem><para>5 Aunque existe la palabra reservada "for", su empleo no es apropiado para el caso que estamos 
presentando si sólo deseamos limitarnos a "traducir" desde el C.</para></listitem>

<listitem><para>6 Un programador Python no hubiera implementado el programa como hice yo. Quizá hubiera 
usado range() (ver más adelante)
</para></listitem>
</itemizedlist>
</sect2>
<sect2><title>

3-C Adivinanzas y números aleatorios
</title>
<para>

El siguiente programa reta al usuario a adivinar un número aleatorio:
</para>
<para>

<screen>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

main()
{
int intentos,edad,x;

printf("Adivina mi edad, que no es mayor a 80 años\n");
edad=rand()%80+1;

intentos=1;

while (1)
        {
printf("Cual es mi edad? ");
        scanf("%d",&amp;x);
        if (x&gt;edad)
                printf ("Mi edad es menor\n");
        else if(x&gt;edad)
                printf ("Mi edad es mayor\n");
        else 
                {
                printf( "Acertaste en %d intentos.\n",intentos);
                break;
                }
        intentos=++;
        }
printf("Adios!\n");
}
</screen>
</para>
<para>

En Python:
</para>
<para>

<screen>
import random

print "Adivina mi edad, que no es mayor a 80 años"
edad=int(random.random()*80)+1

intentos=1

while 1:
        x=int(raw_input("Cual es mi edad? "))
        if x&gt;edad :
                print "Mi edad es menor"
        elif x&lt;edad :
                print "Mi edad es mayor"
        else :
                print "Acertaste en",intentos,"intentos."
                break
        intentos=intentos+1
print "Adios!"
</screen>
</para>
<para>


Comentarios:
</para>
<itemizedlist>

<listitem><para>1 Hemos creado un "loop infinito" usando "1" como argumento para while. Como en C, un valor 
distinto de cero se considera "verdadero".</para></listitem>

<listitem><para>2 La construcción "elif" es equivalente a "else if"</para></listitem>

<listitem><para>3 "break" aquí se comporta exactamente como en C: termina el loop.</para></listitem>

<listitem><para>4 El módulo "random" permite obtener un número aleatorio real en el rango [0,1></para></listitem>

</itemizedlist>
</sect2>
</sect1>

<sect1>
<title>
4 Funciones
</title>
<sect2><title>

4-A Definiendo e invocando funciones
</title>
<para>

Como no estoy con deseos de ser original, voy a implementar la famosa función que calcula el 
factorial de un entero. En C:
</para>
<para>

<screen>
#include &lt;stdio.h&gt;

long factorial(int);

main()
{
int x;

printf("Escriba el número:");
scanf("%d",&amp;x);
printf("El factorial de %ld es %ld\n",x,factorial(x));
}

long factorial(int n)
{
long f=1;

while(--n > 1)
        f*=n;

return f;
}
</screen>
</para>
<para>

Ahora la versión Python:
</para>
<para>

<screen>
def factorial(n):
        f=1L
        while n>1:
                f=f*n
                n=n-1
        return f

x=int(raw_input("Escriba el número:"))
print "El factorial de",x,"es",factorial(x)
</screen>
</para>
<para>

Comentarios:
</para>
<itemizedlist>

<listitem><para>1 La palabra reservada "def" permite definir funciones. Estas se deberán definir previamente a su 
uso. Observe la lista de parámetros formales seguida de un "dos puntos" (:)</para></listitem>

<listitem><para>2 Al igual que en C, las funciones pueden retornar un valor con "return".</para></listitem>

<listitem><para>3 En Python no existen equivalentes exactos para los tipos enteros "short", "int", "long" de C. Por el 
contrario, existen los enteros "planos" (plain integer) que están en el rango [ -2147483648 ; 
2147483647] y los enteros "largos" (long integer) que NO TIENEN LIMITE. Estos últimos se 
pueden inicializar con el sufijo "L" como se ve en el ejemplo anterior para la variable "f". Al igual 
que en C, una operación que involucra operandos de tipo distinto, promueve automáticamente al 
tipo de mayor capacidad. Así que en nuestro ejemplo, el factorial de Python debería tener una 
capacidad de cálculo ilimitada! (será cierto?)</para></listitem>
</itemizedlist>
</sect2>
<sect2><title>

4-B Invocando a funciones definidas en otro archivo
</title>
<para>

En el ejemplo anterior en C, la definición de la función "factorial()" se pudo escribir en un archivo 
distinto del de la función "main()". No habría ningún cambio adicional que hacer, excepto por la 
compilación y enlace de dos módulos. ¿Cómo hacer esto en Python?
</para>
<para>

La definición de la función la podemos almacenar en un archivo llamado "prueba.py" (o como se 
desee.) Con esto estamos construyendo un módulo llamado "prueba". Para que nuestro programa 
pueda acceder a este módulo, simplemente lo "importaremos" con la palabra reservada "import". 
Luego, sus funciones serán accesibles mediante el nombre del módulo:
</para>
<para>

<screen>
import prueba

x=int(raw_input("Escriba el número:"))
print "El factorial de",x,"es",prueba.factorial(x)
</screen>
</para>
<para>

Comentarios
</para>
<itemizedlist>

<listitem><para>1 Observe que hemos usado "prueba.factorial(x)" y no "factorial(x)"</para></listitem>

<listitem><para>2 Si se desea, se puede asignar un nombre alternativo a esta función:

<screen>
fact=prueba.factorial
print "El factorial de",x,"es",fact(x)
</screen></para></listitem>

<listitem><para>3 Los módulos, además de funciones, pueden contener instrucciones que se ejecutarán por única 
vez cuando se importa el módulo.</para></listitem>

<listitem><para>4 No es imprescindible (pero sí acostumbrado) importar los módulos al inicio del archivo</para></listitem>

<listitem><para>5 Otra forma importar corresponde a la sintaxis "from nombre_modulo import funcion,funcion...". 
Esto permite importar funciones directamente al "espacio de nombres" local. En otras palabras, 
esto permite hacer referencia a las funciones sin necesidad de especificar el nombre del módulo:
</para>
<para>

<screen>
from prueba import factorial

x=int(raw_input("Escriba el número:"))
print "El factorial de",x,"es",factorial(x)
</screen></para></listitem>
<listitem><para>6 Si se especifica un asterisco (*) en lugar de la lista de funciones, entonces se importan todas éstas.</para></listitem>

</itemizedlist>
</sect2>
</sect1>

<sect1>
<title>
5 Cadenas de texto y caracteres
</title>
<sect2><title>
5-A Palindromos
</title>
<para>

Una palabra es palíndroma si se lee igual de izquierda a derecha y viceversa.
</para>
<para>

<screen>
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

main()
{
int longitud,z,flag;
char palabra[256];

printf("La palabra:");
scanf("%s",palabra);

longitud=strlen(palabra);
if(longitud<2)
        printf("Esto está demasiado fácil\n");
else
        {
        flag=1;        /* Asumimos que sí es palíndromo */
        for(z=0;z&lt;longitud/2;z++)
                if(palabra[z]!=palabra[longitud-1-z])
                        {
                        flag=0;
                        break;
                        }
        if(flag==1)
                printf("Es palíndromo\n");
        else
                printf("No es palíndromo\n");
        }
}
</screen>
</para>
<para>

Ahora en Python:
</para>
<para>

<screen>
palabra=raw_input("La palabra:")

longitud=len(palabra)
if longitud<2 :
        print "Esto está demasiado fácil"
else :
        flag=1        # Asumimos que sí es palíndromo
        z=0
        while z&lt;longitud/2 :
                if palabra[z] != palabra[longitud-1-z] :
                        flag=0
                        break
                z=z+1
        if flag==1 :
                print "Es palíndromo"
        else :
                print "No es palíndromo"
</screen>
</para>
<para>

Comentarios
</para>
<itemizedlist>

<listitem><para>1 Los elementos de un string pueden ser accedidos mediante la sintaxis string[indice] al igual que 
en C.</para></listitem>

<listitem><para>2 La longitud de un string (así como de otros tipos "secuenciales" de Python) puede ser obtenida 
mediante la función built-in "len()".</para></listitem>

<listitem><para>3 No hemos tenido necesidad de asignar un área estática (como un array.) La memoria de los 
strings se reserva en tanto se necesita.</para></listitem>
</itemizedlist>
</sect2>
<sect2><title>

5-B Palindromos nuevamente
</title>
<para>

Otra forma de hacer lo mismo:
</para>
<para>

<screen>
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

main()
{
int longitud,z;
char palabra[256],invertida[256];

printf("La palabra:");
scanf("%s",palabra);

longitud=strlen(palabra);
if(longitud&lt;2)
        printf("Esto está demasiado fácil\n");
else
        {
        for(z=0;z&lt;longitud;z++)
                invertida[z]=palabra[longitud-1-z];
        invertida[z]='\0';

        if(strcmp(palabra,invertida)==0)
                printf("Es palíndromo\n");
        else
                printf("No es palíndromo\n");
        }
}
</screen>
</para>
<para>

Ahora en Python:
</para>
<para>

<screen>
palabra=raw_input("La palabra:")

longitud=len(palabra)
if longitud&lt;2 :
        print "Esto está demasiado fácil"
else :
        invertida=""
        z=0
        while z&lt;longitud :
                invertida=invertida+palabra[longitud-1-z]
                z=z+1
        if invertida==palabra :
                print "Es palíndromo"
        else :
                print "No es palíndromo"
</screen>
</para>
<para>

Comentarios
</para>
<itemizedlist>

<listitem><para>1 El operador "+" permite concatenar un string con otro. Dos strings se pueden compara con "==".</para></listitem>
</itemizedlist>
</sect2>

<sect2><title>
5-C Word counting
</title>
<para>

Contar caracteres, palabras y líneas de un texto. Esto lee desde la entrada estándar (normalmente 
el teclado), aunque puede leer desde un archivo con la sintaxis "python programa.py &lt; archivo".
</para>
<para>

<screen>
#include &lt;stdio.h&gt;

main()
{
int palabra;
int ncar, npal,nlin;
char c;

palabra=0;
ncar=npal=nlin=0;

/* Finalizar con EOF */
while((c=getchar())!=EOF)
{
ncar++;
if(c==' ' || c=='\n' || c=='\t')
                palabra=0;
else if(palabra==0)
        {
        npal++;
        palabra=1;
        }
if(c=='\n')
        nlin++;
}

printf("%d %d %d\n",ncar,npal,nlin);
}
</screen>

</para>
<para>

Versión Python:
</para>
<para>

Esta versión opera perfectamente en Linux. En windows he tenido el problema de no poder 
finalizar la entrada de texto desde el teclado (leer desde un archivo sí funciona bien.) Se supone 
que con Ctrl-Z debería señalarse el EOF, pero no funciona bien. Si alguien sabe por qué, por favor 
escríbame.
</para>
<para>

<screen>
import sys

palabra=0
ncar,npal,nlin=0,0,0

c=sys.stdin.read(1)

while (c)!="" :
        ncar=ncar+1
        if c==" " or c=="\n" or c=="\t" :
                palabra=0
        elif palabra==0 :
                npal=npal+1
                palabra=1
        if c=="\n" :
                nlin=nlin+1
        c=sys.stdin.read(1)

print "FIN DEL PROGRAMA",ncar,npal,nlin
</screen>

</para>
<para>

Comentarios
</para>
<itemizedlist>

<listitem><para>1 El módulo "sys" proporciona acceso a una serie de objetos que permiten la interacción con el 
sistema operativo. En nuestro caso, hemos empleado el objeto "sys.stdin" que corresponde al flujo 
de entrada estándar. Hemos hecho uso de su método "read()". Otro método similar es "readline()".</para></listitem>

<listitem><para>2 La asignación de tres variables a tres valores se hizo con el operador =. En realidad lo que 
hicimos fue igualar una "triada" con otra "triada": (a,b,c)=(d,e,f)</para></listitem>

</itemizedlist>
</sect2>
</sect1>

<sect1>
<title>
6 Acceso a archivos
</title>
<sect2><title>
6-A Imprimir líneas de texto numeradas
</title>
<para>

Se vuelca a la pantalla (stdout) las líneas de texto de un archivo cuyo nombre se proporciona como 
primer argumento. Además, si el archivo no existe o no se puede leer, se devuelve un valor de 
retorno de "1", caso contrario, ser retorna 0.
</para>
<para>

<screen>
#include &lt;stdio.h&gt;

#define MX 512

int main(int argc,char **argv)
{
FILE *fp;
char L[MX];
int z=1;

if(argc!=2)
        return 1;

fp=fopen(argv[1],"r");
if(fp==NULL)
        return 1;
while(fgets(L,MX,fp))
        printf("%d %s",z++,L);
return 0;
}
</screen>

</para>
<para>

Versión Python:
</para>
<para>


<screen>
import sys
 
if len(sys.argv)!=2 :
        sys.exit(1)
 
try :
        f=open(sys.argv[1],'r')
except IOError :
        print "No pudo abrir argv[1]"
        sys.exit(1)
 
z=1
l="x"
while l!="":
        l=f.readline()
        print z,l
        z=z+1
sys.exit(0)
</screen>
</para>
<para>

Comentarios
</para>
<itemizedlist>

<listitem><para>1 La "lista" argv contiene los parámetros pasados al programa desde la línea de comando</para></listitem>

<listitem><para>2 El intento fallido de apertura de un archivo no retornará un puntero nulo, sino una excepción. Si el 
programa hará algo útil en estos casos (como retornar "1") entonces debemos capturarla. Para 
esto, rodeamos el código que potencialmente generará las excepciones en un bloque try : ... 
except. Deberíamos además especificar el tipo de excepción que se quiere capturar (como IOError) 
aunque no es imprescindible.</para></listitem>

<listitem><para>3 El programa se podría mejorar (tanto en la versión C como en la versión python) verificando que 
la lectura de las líneas no arroja errores.</para></listitem>

</itemizedlist>
</sect2>
</sect1>

<sect1>
<title>
7 Arrays
</title>
<para>
Los arrays son una estructura elemental del lenguaje C que permite almacenar datos 
secuencialmente. Tiene diversas limitaciones como un tamaño fijo y la imposibilidad de "insertar" 
elementos (sin sobreescribir al actual), pero su velocidad es inigualable. Formemos un array de 
números y obtengamos su promedio.
</para>
<para>

<screen>
#include &lt;stdio.h&gt;

main()
{
double N[100],x;
int z=0,j;

printf("Introduzca los numeros que desee. EOF para terminar\n");

for(;;)
        {
        if(scanf("%lf",&amp;x)!=1)
                break;
        N[z++]=x;
        }
x=0;
for(j=0;j&lt;z;j++)
        x+=N[j];
printf("Promedio: %lf\n",x/z);
}
</screen>
</para>
<para>

Observaciones
</para>
<itemizedlist>

<listitem><para>1 El programa fallaría si el usuario introdujera más de 100 números</para></listitem>

<listitem><para>2 Se ha aprovechado que scanf retorna el número de elementos asignados para terminar el loop. 
De otro modo hubieramos tenido que leer línea a línea o seleccionar un valor especial para 
terminar el ingreso de datos.</para></listitem>
</itemizedlist>
<para>

Versión Python
</para>
<para>
 
<screen>
N=[]
z=0
 
print "Introduzca los números que desee. EOF para terminar\n"
 
try:
        while 1:
                x=float(raw_input())
                N=N+[x]
except:
        pass
 
x=0
for elemento in N:
        x=x+elemento
print "Promedio: ",x/len(N)
</screen>
</para>
<para>

Observaciones
</para>
<itemizedlist>

<listitem><para>1 Obsérvese que hemos definido una "lista" llamada "N". Esta es llenada mediante el operador de 
concatenación "+" (N=N+[x]) con el elemento (numérico de punto flotante) x.</para></listitem>

<listitem><para>2 La función float permite hacer un "cast" al texto retornado por raw_input</para></listitem>

<listitem><para>3 La directiva except esta vez no ha sido acompañada por el nombre de la excepción. Esto - como 
se dijo - es opcional. Lo cierto es que nunca recuerdo el nombre de las excepciones. Nótese que al no haber ninguna acción que realizar al darse
la excepción, hemos empleado la directiva "pass".</para></listitem>

<listitem><para>4 El loop for se puede establecer con cualquier lista tal como se muestra. Esta sintaxis es muy 
análoga a la del shell sh.</para></listitem>

<listitem><para>5 Es necesario inicializar la variable N a una lista vacía pues caso contrario la concatenación 
fallaría al no estar definido el tipo de N.</para></listitem>
</itemizedlist>
<para>

El siguiente ejemplo corresponde a un array más complejo. En este caso se almacenarán cadenas 
de texto que son introducidas por el usuario. Además, estas cadenas de texto serán almacenadas 
en memoria reservada dinámicamente mediante strdup.
</para>
<para>

<screen>
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

main()
{
char *cadena[100];
char L[256];
int z=0,j;

printf("Introduzca los textos que desee. Una linea en blanco para 
terminar\n");

for(;;)
        {
        fgets(L,256,stdin);
        L[strlen(L)-1]='\0';
        if(strlen(L)==0)
                break;
        cadena[z++]=strdup(L);
        }

for(j=0;j&lt;z;j++)
printf("texto[%d]: %s\n",j,cadena[j]);
}
</screen>

</para>
</sect1>

<sect1>
<title>

8 Listas de elementos
</title>
<para>
Antes de mostrar el equivalente python al programa anterior,
añadiremos más requisitos: 
Ahora deseamos almacenar un conjunto de textos en una estructura flexible, de tal suerte que 
podamos con facilidad:
</para>
<para>

- Recorrer los datos
- Insertar un dato en cualquier punto de la secuencia
- Eliminar un dato de cualquier punto de la secuencia 
</para>
<para>

En lenguaje C esto normalmente se traduce en el uso de listas enlazadas.
El siguiente programa, al igual que el anterior, solicita un conjunto
de textos que son almacenados dinámicamente conforme se van introduciendo.
Al terminar, insertaremos un texto fijo en la tercera posición (cosa
que no se puede hacer fácilmente con el anterior programa):
</para>
<para>

 
<screen>
/* Lee algunos textos . Inserta un texto fijo en la tercera posicion
   y los imprime */
 
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
 
struct Linea_Texto {
        char *texto;
        struct Linea_Texto *next;
        };
 
char L[256];
 
main()
{
struct Linea_Texto *lista=calloc(1,sizeof(struct Linea_Texto));
struct Linea_Texto *last=lista;
struct Linea_Texto *tmp1, *tmp2;
lista->texto=NULL;
 
printf("Introduzca algunas lineas de texto. Termine con EOF\n");
while(fgets(L,256,stdin))
        {
        last->texto=strdup(L);
        last->next=calloc(1,sizeof(struct Linea_Texto));
        last=last->next;
        last->texto=NULL;
        }
 
/* A modo de ejemplo, insertar un elemento en la tercera posicion */
tmp1=lista->next; /* la segunda posicion */
tmp2=tmp1->next; /* la tercera posicion */
 
tmp1->next=calloc(1,sizeof(struct Linea_Texto)); /* Nueva tercera posicion */
tmp1->next->texto=strdup("Tercer elemento insertado\n");
tmp1->next->next=tmp2; /* Apuntar a la antigua tercera posicion */
 
printf("Ud. Introdujo las siguientes lineas:\n");
while(lista->texto)
        {
        printf("%s",lista->texto);
        lista=lista->next;
        }
}
</screen>
</para>
<para>

Python proporciona las listas como un tipo de datos nativo. Lo anterior se pudo hacer con:
</para>
<para>

<screen>
print "Introduzca algunas lineas de texto. Termine con EOF\n"
lista=[]
try:
        while 1:
                p=raw_input("texto:")
                lista=lista+[p]
except:
        pass
 
# introducir un tercer elemento
lista=lista[0:2]+["Tercer elemento"]+lista[2:]
 
print "Ud. introdujo las siguientes lineas:"
for x in lista :
        print "Elemento: "+x
</screen>
</para>
<para>


Comentarios:
</para>
<itemizedlist>

<listitem><para>1 Obsérvese la sintaxis [a:b]. Cuando uno de estos no se especifica,
se asume respectivamente el inicio o el final de la lista. Nótese
que [a:b] se debe interpretar como los 
caracteres "Desde 'a' sin llegar hastaa 'b'", y
no "Desde a hasta b". Si nos atenemos a la sintaxis de C, el
rango [a:b] equivale a los elementos: L[a], L[a+1]...L[b-1]. Por
ejemplo, L[1:2] contendrá sólo un elemento, el segundo de la
lista (L[1]).</para></listitem>

<listitem><para>2 Las listas se pueden concatenar con el operador "+".</para></listitem>

<listitem><para>3 Las listas requieren concatenarse con otras listas, por eso
el nuevo elemento se tuvo que intoducir mediante una lista
unitaria:

<screen>
lista=lista[0:2]+["Tercer elemento"]+lista[2:]
</screen>

y no:

<screen>
lista=lista[0:2]+"Tercer elemento"+lista[2:]
</screen></para></listitem>
</itemizedlist>
</sect1>
<sect1>
<title>
9 Invocando al sistema operativo
</title>
<para>
A modo de ejemplo, haremos un programa que satisfaga los siguientes
requerimientos:
</para>
<para>
</para>
<itemizedlist>

<listitem><para>a) El programa requiere un argumento en la línea de comandos</para></listitem>
<listitem><para>b) Este argumento corresponde al nombre de un directorio que
será creado a partir del directorio actual</para></listitem>
<listitem><para>c) Dentro de este directorio se creará un archivo llamado "README"
con un mensaje cualquiera</para></listitem>
<listitem><para>d) Además copiaremos el ejecutable "/bin/date" a este directorio
usándo el comando del sistema "cp".</para></listitem>
<listitem><para>e) Si el directorio especificado ya existe, entonces abortar</para></listitem>
<listitem><para>f) Si el directorio especificado es ".", entonces se asume
el directorio actual (no se crea) y se prosigue</para></listitem>
<listitem><para>g) Si no se dan argumentos, el programa debe mostrar un mensaje
de ayuda</para></listitem>
</itemizedlist>
<para>

<screen>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
 
int main(int argc, char **argv)
{
FILE *fp;
 
if(argc!=2)
        {
        printf("Especifique el directorio a crear.\n");
        exit(2);
        }
if(strcmp(argv[1],".")!=0)
        {
        if(access(argv[1],F_OK)==0)
                {
                printf("El directorio %s ya existe.\n",argv[1]);
                exit(1);
                }
        if(mkdir(argv[1],0777)==-1)
                {
                printf("No se pudo crear directorio %s.\n",argv[1]);
                exit(1);
                }
        chdir(argv[1]);
        }
 
fp=fopen("README","w");
fprintf(fp,"%s","Un mensaje cualquiera\n");
fclose(fp);
system("/bin/cp /bin/date .");
exit(0);
}
</screen>

</para>
<para>

Ahora en Python:
</para>
<para>

<screen>
import sys,os
 
if len(sys.argv)!=2 :
        print "Especifique el directorio a crear."
        sys.exit(2)
 
if sys.argv[1]!="." :
        if os.access(sys.argv[1],os.F_OK):
                print "El directorio ",sys.argv[1],"ya existe."
                sys.exit(1)
        try :
                mk=os.mkdir(sys.argv[1])
        except :
                print "No se pudo crear directorio ",sys.argv[1]
                sys.exit(1)
        os.chdir(sys.argv[1])
 
fp=open("README","w")
fp.write("Un mensaje cualquiera\n")
fp.close()
os.system("/bin/cp /bin/date .")
</screen>

</para>
<para>

Comentarios
</para>
<itemizedlist>

<listitem><para>1 El módulo "os" permite acceder a funciones del sistema operativo</para></listitem>
<listitem><para>2 Tradicionalmente las funciones del sistema operativo en C retornan
-1 en caso de error. En Python retornan cero (0) por lo que el
test se facilita. En nuestro caso, el valor de retorno de access
fue sirvió directamente como valor lógico:
<screen>
        if os.access(sys.argv[1],os.F_OK):
</screen></para></listitem>

<listitem><para>3 El "fallo" en ciertas funciones da lugar a que el programa aborte.
Por ejemplo, si "mkdir" no puede crear un directorio, el programa
normalmente aborta (a diferencia de C en que sólo se retorna -1.) Para
evitar esto, es menester capturar la "excepción" generada (el fallo)
colocando la función que potencialmente fallará en un bloque
try... except. El lector deberá probar a eliminar el try...except e
intentar hacer fallar al mkdir.</para></listitem>

<listitem><para>4 La función os.system() es exactamente la misma que en C, y tiene
los mismos riesgos de seguridad conocidos.</para></listitem>

</itemizedlist>
</sect1>
</article>
