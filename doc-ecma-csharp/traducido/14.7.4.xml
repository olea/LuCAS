<?xml version="1.0"?>
<clause number="14.7.4" title="Operador de adición">
  <paragraph>Para una operación de la forma x + y, la resolución de operador binario (<hyperlink>14.2.4</hyperlink>) es aplicada para seleccionar una implementación de operador específica. Los operandos son convertidos a los tipos de parámetros del operador seleccionado, y el tipo del resultado es el tipo de retorno del operador. </paragraph>
  <paragraph>Los operadores predefinidos de de adición son listados a continuación. Para tipos numéricos y enumeraciones, los operadores predefinidos de adición computan la suma de los dos operandos. Cuando uno o ambos operandos son de tipo cadena, los operadores predefinidos de adición concatenan la representación de cadena de los operandos. <list><list_item> Adición de entero: <code_example><![CDATA[
int operator +(int x, int y);  
uint operator +(uint x, uint y);  
long operator +(long x, long y);  
ulong operator +(ulong x, ulong y);  
]]></code_example>En un contexto checado (checked), si la suma esta fuera de rango del tipo de resultado, una System.OverflowException es lanzada. En un contexto sin checar (unchecked), los sobreflujos no son reportados y cualquier bits de orden alto fuera del rango del tipo de resultado son descartados. </list_item><list_item> Adición de punto flotante: <code_example><![CDATA[
float operator +(float x, float y);  
double operator +(double x, double y);  
]]></code_example>La suma es computada de acuerdo a las reglas de la aritmética de IEEE 754. La siguiente tabla lista los resultados de todas las posibles combinaciones de valores no-cero finitos, ceros, infinitiso, y NaN's. En la table, x y y son valores finitos no cero, y z es el resultado de x + y- Si x y y tiene la misma magnitud pero signos opuestos, z es un cero positivo. Si x + y son muy grandes para representarse en el tipo destino, z es un infinito con el mismo signo que x + y. Si x + y es muy pequeño para ser representado en el tipo destino, z es un cero con el mismo signo de x + y. <table_line>y +0 <unicode>150</unicode>0 +<infinity/> <unicode>150</unicode><infinity/> NaN </table_line>
<table_line>x z x x +<infinity/> <unicode>150</unicode><infinity/> NaN </table_line>
<table_line>+0 y +0 +0 +<infinity/> <unicode>150</unicode><infinity/> NaN </table_line>
<table_line><unicode>150</unicode>0 y +0 <unicode>150</unicode>0 +<infinity/><unicode>150</unicode><infinity/> NaN </table_line>
<table_line>+<infinity/> +<infinity/> +<infinity/> +<infinity/> +<infinity/> NaN NaN </table_line>
<table_line><unicode>150</unicode><infinity/><unicode>150</unicode><infinity/><unicode>150</unicode><infinity/><unicode>150</unicode><infinity/> NaN <unicode>150</unicode><infinity/> NaN </table_line>
<table_line>NaN NaN NaN NaN NaN NaN NaN </table_line>
</list_item><list_item> Decimal addition: <code_example><![CDATA[
decimal operator +(decimal x, decimal y);  
]]></code_example>Si el valor resultante es muy grande para representarse en formato <keyword>decimal</keyword>, una System.OverflowException es lanzada. La escala del resultado, antes de cualquier redondeo, es la más larga de las escala de los dos operandos. La adición decimal es equivalente a usar el operador de adición de tipo System.Decimal. </list_item><list_item> Adición de enumeración. Cada tipo de  enumeración provee los siguientes operadores predefinidos, donde E es el tipo enumeración, y Y es el tipo fundamental de E: <code_example><![CDATA[
E operator +(E x, U y);  
E operator +(U x, E y);  
]]></code_example>Los operadores son evaluados exactamente como (E)((U)x + (U)y). </list_item><list_item> Concatenación de cadena: <code_example><![CDATA[
string operator +(string x, string y);  
string operator +(string x, object y);  
string operator +(object x, string y);  
]]></code_example>El operador binario + realiza concatenación de cadena cuando o los ambos operados son de tipo string. Si un operando de la concatenación de cadena es null, una cadena vacía es substituida. De otra forma, cualquier argumento no cadena es convertido a la su representación de cadena al invocar el método virtual ToString heredado del tipo object. Si ToString regresa null, una cadena vacia es substituida. <example>[Ejemplo: <code_example><![CDATA[
using System;  
class Test  
{  
   static void Main() {  
      string s = null;  
      Console.WriteLine("s = >" + s + "<"); // muestra s = ><  
      int i = 1;  
      Console.WriteLine("i = " + i);      // muestra i = 1  
      float f = 1.2300E+15F;  
      Console.WriteLine("f = " + f);      // muestra f = 1.23E+15  
      decimal d = 2.900m;  
      Console.WriteLine("d = " + d);      // muestra d = 2.900  
   }  
}  
]]></code_example>fin ejemplo]</example> El resultado del operador de concatenación de cadenas una cadena que consiste de los caracteres del operando izquierdo seguidos por los caracteres del operando derecho. El operador de concatenación de cadena nunca regresa un valor null. Una System.OutOfMemoryException puede ser lanzada si no hay suficiente espacio disponible para asignar la cadena resultante.</list_item><list_item> Combinación de delegado. Cada tipo delegado implícitamente provee el siguiente operador predefinido, donde D es el tipo delegado: <code_example><![CDATA[
D operator +(D x, D y);  
]]></code_example>El operador binario + realiza una combinación de delegado cuando ambos operandos son de algún tipo delegado D. (Si los operandos tienen tipos diferentes de delegados, un error en tiempo de compilación ocurre) Si el primer operando es null, el resultado de la operación es el valor del segundo operando (inclusive si también es null). De otra forma, si el segundo operando es null, entonces el resulta de la operación es el valor del primero operando. De otra forma, el resultado de la operación es una nueva instancia de delegado que, cuando se invoca, invoca al primer operando y luego invoca al segundo operando. <note>[Nota: Para los ejemplos de combinación de delegado, mire <hyperlink>14.7.5</hyperlink> y <hyperlink>22.3</hyperlink>. Debido a que System.Delegate no es un tipo delegado, el operador + no esta definido para él. fin nota]</note> </list_item></list></paragraph>
</clause>
<!-- Traducido por Mario Carrión, mario.carrion@gmail.com -->
