<?xml version="1.0"?>
<clause number="8.7" title="Clases" informative="true">
  <paragraph>Las clases definen nuevos tipos por referencia. Una clase puede heredar de otra case, 
  y puede implementar interfaces. </paragraph>
  <paragraph>Los miembros de la clase pueden ser constantes, campos, métodos, propiedades, contructores, 
    destructores, y tipos anidados. Cada miembro tiene una accesibilidad asociada (<hyperlink>10.5</hyperlink>), 
    que controla la regiones del programa que pueden acceder a los miembros de nuestra clase. Hay cinco
    posibles formas de accesibilidad. Éstas se sumarizan en la siguiente tabla. 
    
<table_line><keyword>public</keyword>:  Acceso no limitado </table_line>
<table_line><keyword>protected</keyword>: Acceso limitado a la propia clase o a tipos derivados
de la propia clase </table_line>
<table_line><keyword>internal</keyword>: Acceso limitado al propio programa </table_line>
<table_line><keyword>protected internal</keyword>: Acceso  restringido a este programa o a tipos derivados
  de la propia clase</table_line>
<table_line>private: Acceso limitado al tipo contenido </table_line>
</paragraph>
    <paragraph>El ejemplo <code_example><![CDATA[
using System;  
class MiClase  
{  
   public MiClase() {  
      Console.WriteLine("Constructor de la instancia");  
   }  
   public MiClase(int value) {  
      MiCampo = value;  
      Console.WriteLine("Constructor de la instancia");  
   }  
   ~MiClase() {  
      Console.WriteLine("Destructor");  
   }  
   public const int MiConst = 12;  
   public int MiCampo = 34;  
   public void MiMetodo(){  
      Console.WriteLine("MiClase.MiMetodo");  
   }  
   public int MiPropiedad {  
      get {  
         return MiCampo;  
      }  
      set {  
         MiCampo = value;  
      }  
   }  
   public int this[int i] {  
      get {  
         return 0;  
      }  
      set {  
         Console.WriteLine("this[{0}] = {1}", i, value);  
      }  
   }  
   public event EventHandler MiEvento;  
   public static MiClase operator+(MiClase a, MiClase b) {  
      return new MiClase(a.MiCampo + b.MiCampo);  
   }  
   internal class MiClaseAnidada  
   {}  
}  
]]></code_example>muestra una clase que contiene un miembro de cada tipo. El 
        ejemplo <code_example><![CDATA[
class Test  
{  
   static void Main() {  
      // Uso del constructor  
      MiClase a = new MiClase();  
      MiClase b = new MiClase(123);  
      // uso de constantes
      Console.WriteLine("MiConst = {0}", MiClase.MiConst);  
      // Uso de campos  
      a.MiCampo++;  
      Console.WriteLine("a.MiCampo = {0}", a.MiCampo);  
      // Uso de métodos  
      a.MiMetodo();  
      // Uso de propiedades  
      a.MiPropiedad++;  
      Console.WriteLine("a.MiPropiedad = {0}", a.MiPropiedad);  
      // Uso de indizadores 
      a[3] = a[1] = a[2];  
      Console.WriteLine("a[3] = {0}", a[3]);  
      // Uso de eventos  
      a.MyEvent += new EventHandler(MiManipulador);  
      // Uso de sobrecarga de operadores  
      MiClase c = a + b;  
   }  
   static void MiManipulador(object sender, EventArgs e) {  
      Console.WriteLine("Test.MiManipulador");  
   }  
   internal class MiClaseAnidada  
   {}  
}  
]]></code_example>muestra el uso de éstos miembros. </paragraph>
</clause>

<!-- Traducción Fabian Seoane fabian@fseoane.net --> 
