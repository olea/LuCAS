<?xml version="1.0"?>
<clause number="8.2.3" title="Tipo Arreglo" informative="true">
<paragraph>Los arreglos pueden ser de uno o de varias dimensiones. Están soportados arreglos tanto rectangulares como irregurlares.</paragraph>
<paragraph>Los arreglos unidimensionales son el tipo más común. El ejemplo <code_example><![CDATA[
using System;  
class Test  
{  
   static void Main() {  
      int[] arr = new int[5];  
        for (int i = 0; i < arr.Length; i++)  
      arr[i] = i * i;  
        for (int i = 0; i < arr.Length; i++)  
      Console.WriteLine("arr[{0}] = {1}", i, arr[i]);  
   }  
}  
]]></code_example>crea un arreglo de una única dimensión de valores <keyword>int</keyword>, inicializa los elementos del arreglo, y después los imprime por pantalla. La salida debería ser:<code_example><![CDATA[
arr[0] = 0  
arr[1] = 1  
arr[2] = 4  
arr[3] = 9  
arr[4] = 16  
]]></code_example></paragraph>
  <paragraph>El tipo int[] se ha usado en el ejemplo previo como un tipo
  arreglo. Los tipo arreglo se escriben usando un <non_terminal
  where="19.1">tipo-no-arreglo</non_terminal> seguido de uno o más especificadores de dimensión. El ejemplo <code_example><![CDATA[
class Test
{
   static void Main() {
      int[] a1;    // arreglo unidimensional de int 
      int[,] a2;    // arreglo bidimensional de int  
      int[,,] a3;   // arreglo tridimensional de int  
      int[][] j2;     // arreglo irregular: arreglo de (arreglo de int)  
      int[][][] j3;    // arreglo de (arreglo de (arreglo de int))  
   }  
}
]]></code_example> muestra una variedad de declaración de variables locales que usan arregloores con <keyword>int</keyword> como el elemento tipo</paragraph>
  <paragraph>Los arreglos son tipos por referencia, y por lo tanto la declaración de una variable arreglo únicamente crea espacio para una referencia al arreglo. Las instancias de los arreglos son creadas via inicializadores de arreglos o expresiones de asignación. El ejemplo <code_example><![CDATA[
class Test
{
   static void Main() {
      int[] a1 = new int[] {1, 2, 3};  
      int[,] a2 = new int[,] {{1, 2, 3}, {4, 5, 6}};  
      int[,,] a3 = new int[10, 20, 30];  
      int[][] j2 = new int[3][];  
      j2[0] = new int[] {1, 2, 3};  
      j2[1] = new int[] {1, 2, 3, 4, 5, 6};  
      j2[2] = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9};  
   }  
}  
]]></code_example>muestra una variedad de expresiones para crear arreglos. Las variables a1, a2 y a3 denotan arreglos rectangulares, y la variable j2 se refiere a un arreglo irregular. No debería de ser una sorpresa que estos términos hagan referencia a la forma de los arreglos. Los arreglos rectangulares siempre tienen una forma rectangular. Dadas la logitud de cad dimensión del arreglo, su forma queda totalmente determinada. Por ejemplo, la logitud de las dimensiones de a3 es 10, 20 y 30 respectivamente, y es fácil deducir que el arreglo contiene 10*20*30 elementos.</paragraph>
  <paragraph>A su vez, la variable j2 se refiere a un arreglo irregular, también llamado &quot;arreglo de arreglos&quot;. Más específicamente, j2 se refiere a un arreglo de un arreglo de <keyword>int</keyword>. Cada una de estas variables int[] se puede inicializar individualmente, y esto le permite al arreglo tomar una forma irregular. El ejemplo le da a cada arreglo int[] una longitud diferente. En concreto, la logitud de j2[0] es 3, la de j2[1] es 6 y la de j2[2] es 9.</paragraph>
  <paragraph><note>[Nota: En C++, un arreglo declarado como <keyword>int</keyword> x[3][5][7] se consideraría un arreglo de tres dimensiones, mientras que en C#, la sentencia int[][][] declara un tipo de arreglo irregular. Fin de la nota]</note></paragraph>
  <paragraph>El elemento tipo de un arreglo y su forma, así como el número de dimensioes que tiene son parte del tipo. Por otra parte, el tamaño de un arreglo no forma parte del tipo del arreglo. Este distinción la hace clara la propia sintaxis del lenguaje, pués la longitud de cada dimensión se especifica en la creación del arreglo más bien que en el tipo del arreglo. Por ejemplo <code_example><![CDATA[
int[,,] a3 = new int[10, 20, 30];  
]]></code_example>dice que se trata de un arreglo de tipo int[,,] y cre un array con expresión int[10, 20, 30].</paragraph>
  <paragraph>Para la declaración de variables locales y de campo, se permite un atajo de forma que no sea necesario reescribir el tipo de arreglo. El siguiente ejemplo <code_example><![CDATA[
int[] a1 = new int[] {1, 2, 3};  
]]></code_example>se puede escribir más brevemente como <code_example><![CDATA[
int[] a1 = {1, 2, 3};  
]]></code_example>sin cambiar la semántica del programa. </paragraph>
  <paragraph>El contexto en el que se incializa un arreglo como {1,2,3} determina el tipo de arreglo que se va a incializar. El ejemplo <code_example><![CDATA[
class Test  
{  
   static void Main() {  
      short[] a = {1, 2, 3};  
      int[] b = {1, 2, 3};  
      long[] c = {1, 2, 3};  
   }  
}  
]]></code_example>Muestra como el mismo arreglo puede ser utilizado para diferentes tipos de arreglos. Puesto que se requiere del contexto para determinar el tipo de array que se inicializa, no es posible utilizar una expresión de inicialización de arreglos en un contexto sin especificar explícitamente el tipo de arreglo con el que se está trabajando.</paragraph>
</clause>

	<!-- traducción Fabian Seoane, fseoane@wanadoo.es -->
