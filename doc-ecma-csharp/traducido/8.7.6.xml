<?xml version="1.0"?>
<clause number="8.7.6" title="Operadores" informative="true">
  <paragraph>Un operador es un miembro que define el significado de un operador
  de expresiones que puede ser aplicado a instancias de la clase. Es posible
  definir tres tipos de operadores: operadores unarios, operadores  binarios y operadores de conversión</paragraph>
  <paragraph>El siguiente ejemplo define un tipo Digito que representa un valor entre 0 y  9. <code_example><![CDATA[

using System;  

public struct Digito  
{  
   byte value;  
   public Digito(byte value) {  
      if (value < 0 || value > 9) throw new ArgumentException();  
      this.value = value;  
   }  
   public Digito(int value): this((byte) value) {}  
   public static implicit operator byte(Digito d) {  
      return d.value;  
   }  
   public static explicit operator Digito(byte b) {  
      return new Digito(b);  
   }  
   public static Digito operator+(Digito a, Digito b) {  
      return new Digito(a.value + b.value);  
   }  
   public static Digito operator-(Digito a, Digito b) {  
      return new Digito(a.value - b.value);  
   }  
   public static bool operator==(Digito a, Digito b) {  
      return a.value == b.value;  
   }  
   public static bool operator!=(Digito a, Digito b) {  
      return a.value != b.value;  
   }  
   public override bool Equals(object value) {  
      if (value == null) return false;  
      if (GetType() == value.GetType()) return this == (Digito)value;  
   return false;  }  
   public override int GetHashCode() {  
      return value.GetHashCode();  
   }  
   public override string ToString() {  
      return value.ToString();  
   }  
}  
class Test  
{  
   static void Main() {  
      Digito a = (Digito) 5;  
      Digito b = (Digito) 3;  
      Digito mas = a + b;  
      Digito menos = a - b;  
      bool equals = (a == b);  
      Console.WriteLine("{0} + {1} = {2}", a, b, mas);  
      Console.WriteLine("{0} - {1} = {2}", a, b, menos);  
      Console.WriteLine("{0} == {1} = {2}", a, b, equals);  
   }  
}  
]]></code_example></paragraph>
  <paragraph>El tipo define los siguientes operadores: 
  <list>
<list_item> Un operador de conversión implícita de Digito a <keyword>byte</keyword>. </list_item>
<list_item> Un operador de conversión explícita de <keyword>byte</keyword> a Digito. </list_item>
<list_item> Un operador de adición que suma dos valores Digito y devuelve un valor Digito. </list_item>
<list_item> Un operador de resta que le resta un valor Digito a otro, y devuelve un valor Digito. </list_item>
<list_item> Los operadores de igualdad (==) y desigualdad (!=) , los cuales comparan dos valores Digito. </list_item></list></paragraph>
</clause>


<!-- Traducción Fabian Seoane fabian@fseoane.net -->
