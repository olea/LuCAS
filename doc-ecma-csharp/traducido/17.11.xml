<?xml version="1.0"?>
<clause number="17.11" title="Constructores estáticos">
  <paragraph>Un constructor estático es un miembro que implementa acciones requeridas para inicializar la clase. Constructores estáticos son declarados usando declaraciones-de-constructores-estáticos: <grammar_production><name><non_terminal where="17.11">declaración-del-constructor-estático</non_terminal></name> : <rhs><non_terminal where="24.2">atributos</non_terminal><opt/><non_terminal where="17.11">modificadores-de-constructor-estático</non_terminal><non_terminal where="9.4.2">identificador</non_terminal><terminal>(</terminal><terminal>)</terminal><non_terminal where="17.11">cuerpo-del-constructor-estático</non_terminal></rhs></grammar_production><grammar_production><name><non_terminal where="17.11">modificadores-de-constructor-estático</non_terminal></name> : <rhs><keyword>extern</keyword><opt/><keyword>static</keyword></rhs><rhs><keyword>static</keyword><keyword>extern</keyword><opt/></rhs></grammar_production><grammar_production><name><non_terminal where="17.11">cuerpo-del-constructor-estático</non_terminal></name> : <rhs><non_terminal where="15.2">bloque</non_terminal></rhs><rhs><terminal>;</terminal></rhs></grammar_production></paragraph>
  <paragraph>Una <non_terminal where="17.11">declaración-del-constructor-estático</non_terminal> puede incluir un juego de atributos (<hyperlink>24</hyperlink>) y un modificador extern (<hyperlink>17.5.7</hyperlink>). </paragraph>
  <paragraph>El identificador de una <non_terminal where="17.11">declaración-del-constructor-estático</non_terminal> debe nombrar la clase en la cual los constructores estáticos están declarados. Si otro nombre es especificado, un error en tiempo de compilación ocurre. </paragraph>
  <paragraph>Cuando una declaración de constructor estático incluye un modificador extern, el constructor estático se dice que es un constructor estático externo. Debido a que una declaración de constructor estático no provee una implementación actual, su <non_terminal where="17.11">cuerpo-de-constructor-estático</non_terminal> consiste en un punto y coma. Para todas las otras declaraciones de constructores estáticos, el <non_terminal where="17.11">cuerpo-del-constructor-estático</non_terminal> consiste en un bloque, el cual especifica las sentencias a ejecutar en orden de inicializar la clase. Esto corresponde exactamente al <non_terminal where="17.5">cuerpo-del-método</non_terminal> de un método estático con un tipo de retorno <keyword>void</keyword> (<hyperlink>17.5.8</hyperlink>). </paragraph>
  <paragraph>Constructores estáticos no son heredados, y no pueden ser llamados directamente. </paragraph>
  <paragraph>El constructor estático para una clase se ejecuta al menos una vez en el dominio dado de la aplicación. La ejecución de un constructor estático es lanzado por el primero de los eventos siguientes que ocurra dentro de un dominio de aplicación: <list><list_item> Una instancia de clase es creada. </list_item><list_item> Uno de los miembros estáticos de la clase es referenciado. </list_item></list></paragraph>
  <paragraph>Si la clase contiene el método Main (<hyperlink>10.1</hyperlink>) en el cual la ejecución comienza, el constructor estático para esa clase se ejecuta antes que el llamado de método Main. Si una clase contiene algún campos estático con inicializador, esos inicializadores son ejecutados en orden textual inmediato antes de ejecutar el constructor estático. </paragraph>
  <paragraph>
    <example>[Ejemplo: El ejemplo <code_example><![CDATA[
using System;  
class Test  
{  
   static void Main() {  
      A.F();  
      B.F();  
   }  
}  
class A  
{  
   static A() {  
      Console.WriteLine("Init A");  
   }  
   public static void F() {  
      Console.WriteLine("A.F");  
   }  
}  
class B  
{  
   static B() {  
      Console.WriteLine("Init B");  
   }  
   public static void F() {  
      Console.WriteLine("B.F");  
   }  
}  
]]></code_example>debe producir la salida: <code_example><![CDATA[
Init A  
A.F  
Init B  
B.F  
]]></code_example>porque la ejecución del constructor estático de A es lanzado por la llamada de A.F, en la ejecución del constructor estático de B es lanzado por la llamada de B.F. fin ejemplo]</example>
  </paragraph>
  <paragraph>Es posible construir dependencias circulares que permitan campos estáticos con inicializadores de variables para ser observadas en su estado de valor por defecto. </paragraph>
  <paragraph>
    <example>[Ejemplo: El ejemplo <code_example><![CDATA[
using System;  
class A  
{  
   public static int X;  
   static A() { X = B.Y + 1;}  
}  
class B  
{  
   public static int Y = A.X + 1;  
   static B() {}  
   static void Main() {  
      Console.WriteLine("X = {0}, Y = {1}", A.X, B.Y);  
   }  
}  
]]></code_example>produce la salida <code_example><![CDATA[
X = 1, Y = 2  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>Al ejecutar el método Main, el sistema primero ejecuta el inicializador para B.Y, antes del constructor estático de B. </example>
  </paragraph>
  <paragraph>
    <example>El inicializador de Y causa que el constructor estático de A se ejecute porque el valor de A.X es referenciado. El constructor estático de A en turno prosigue a computar el valor de X, y haciendo eso captura el valor por defecto de Y, el cual es cero. A.X es de esta forma inicializado a 1. El proceso de ejecutar inicializadores campo estáticos entonces se completa, retornando al calculo del valor inicial de Y, el resultado del cual se convierte a 2. fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
