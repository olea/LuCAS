<?xml version="1.0"?>
<clause number="22.3" title="Invocación de Delegados">
  <paragraph>C# proporciona una sintáxis especial para la invocación de un delegado. Cuando una instancia de delegado no-nula cuya lista de invocación contiene una entrada, es invocada, lo que invoca al único método con el mismo número de argumentos que le fue dado, y retorna el mismo valor al que hace referencia le método. (ver <hyperlink>14.5.5.2</hyperlink> para información detallada sobre invocación de delegado.) Si una exception ocurre durante la invocación de tal delegado, y esa excepción no es capturada dentro del método que fue invocado, la búsqueda por una clausula de excepción catch continúa hasta el método que llamó al delegado, como si ese método hubiese llamado directamente al método al que se refiere el delegado. </paragraph>
  <paragraph>La invocación de una instancia de delegado cuya lista de invocación contiene multiples entradas, procede invocando cada uno de los métodos en la lista de invocación, sincronizadamente, en orden. A cada método así llamado se pasan el mismo conjunto de argumentos que le fueron dados a la instancia de delegado. Si tal invocación de delegado incluye parámetros por referencia (<hyperlink>17.5.1.2</hyperlink>), cada invocación al método ocurrirá con una referencia a la misma variable; cambios en esas variables por un método en la lista de invocación serán visibles a los métodos siguientes en la lista de invocación. Si la invocación del delegado incluye parámetros de salida o un valor de retorno, su valor final vendrá de la invocación del último delegado en la lista. Si una excepción ocurre durante el proceso de la invocación de tal delegado, y esa excepción no es capturada dentro del método que fue invocado, la búsqueda por una clausula de excepción catch continúa en el método que llamó al delegado, y cualquier método a continuación en la lista de invocación no es llamado. </paragraph>
  <paragraph>Intentar invocar una instancia de delegado cuyo valor es nulo resulta en una excepción de tipo System.NullReferenceException. </paragraph>
  <paragraph>
    <example>[Ejemplo: El siguiente ejemplo muestra como crear, combinar, remover, e invocar delegados: <code_example><![CDATA[
using System;  
delegate void D(int x);  
class Test  
{  
   public static void M1(int i) {  
      Console.WriteLine("Test.M1: " + i);  
   }  
   public static void M2(int i) {  
      Console.WriteLine("Test.M2: " + i);  
   }  
   public void M3(int i) {  
      Console.WriteLine("Test.M3: " + i);  
   }  
}  
class Demo  
{  
   static void Main() {   
      D cd1 = new D(Test.M1);  
      cd1(-1);  // call M1  
      D cd2 = new D(Test.M2);  
      cd2(-2);  // call M2  
      D cd3 = cd1 + cd2;  
      cd3(10);  // call M1 then M2  
      
      cd3 += cd1;  
      cd3(20);  // call M1, M2, then M1  
      Test t = new Test();  
      D cd4 = new D(t.M3);  
      cd3 += cd4;  
      cd3(30);  // call M1, M2, M1, then M3  
      cd3 -= cd1; // remove last M1  
      cd3(40);  // call M1, M2, then M3  
      cd3 -= cd4;  
      cd3(50);  // call M1 then M2  
      cd3 -= cd2;  
      cd3(60);  // call M1  
      cd3 -= cd2; // impossible removal is benign  
      cd3(60);  // call M1  
      cd3 -= cd1; // invocation list is empty  
      //  cd3(70);  // System.NullReferenceException thrown  
      cd3 -= cd1; // impossible removal is benign  
   }  
}  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>Como se muestra en la declaración cd3 += cd1;, un delegado puede estar presente en una lista de invocación multiples ocasiones. En ese caso, es simplemente invocado una vez por aparición. En una lista de invocación como esta, cuando una delegado es removido, la última aparición en la lista de invocación es la única removida en realidad. </example>
  </paragraph>
  <paragraph>
    <example>Inmediatamente anterior a la ejecución de la declaración final, cd3 -= cd1;, el delegado cd3 se refiere a una lista de invocación vacía. Intentar remover un delegado de una lista vacía (o remover un delegado no-existente de una lista no-vacía) no es un error. </example>
  </paragraph>
  <paragraph>
    <example>La salida producida es: <code_example><![CDATA[
Test.M1: -1  
Test.M2: -2  
Test.M1: 10  
Test.M2: 10  
Test.M1: 20  
Test.M2: 20  
Test.M1: 20  
Test.M1: 30  
Test.M2: 30  
Test.M1: 30  
Test.M3: 30  
Test.M1: 40  
Test.M2: 40  
Test.M3: 40  
Test.M1: 50  
Test.M2: 50  
Test.M1: 60  
Test.M1: 60  
]]></code_example>Fin Ejemplo]</example>
    <table_line/>
  </paragraph>
</clause>
