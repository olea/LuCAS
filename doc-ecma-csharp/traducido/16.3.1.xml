<?xml version="1.0"?>
<clause number="16.3.1" title="Directivas alias de using">
  <paragraph>Una <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal> introduce un identificador que sirve como alias de un espacio de nombres o tipo dentro de la unidad de compilación o cuerpo de espacio de nombres que lo contiene directamente. 
<grammar_production><name><non_terminal where="16.3.1">directiva-alias-de-using</non_terminal></name> : <rhs><keyword>using</keyword><non_terminal where="9.4.2">identificador</non_terminal><terminal>=</terminal><non_terminal where="10.8">nombre-de-tipo-o-de-espacio-de-nombres</non_terminal><terminal>;</terminal></rhs></grammar_production></paragraph>
  <paragraph>Dentro de declaraciones de miembros en una unidad de compilación o cuerpo de espacio de nombres que contiene una <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal>, el identificador introducido por la <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal> puede usarse para referenciar espacio de nombres o tipo dado. </paragraph>
  <paragraph>
    <example>[Ejemplo: Por ejemplo: <code_example><![CDATA[
namespace N1.N2  
{  
   class A {}  
}  
namespace N3  
{  
   using A = N1.N2.A;  
   class B: A {}  
}  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>Arriba, dentro de las declaraciones de miembros en el espacio de nombres N3, A es un alias de N1.N2.A, y por tanto la clase N3.B deriva de la clase N1.N2.A. El mismo efecto puede obtenerse creando un alias R para N1.N2 y referenciando R.A: <code_example><![CDATA[
namespace N3  
{  
   using R = N1.N2;  
   class B: R.A {}  
}  
]]></code_example>fin del ejemplo]</example>
  </paragraph>
  <paragraph>El identificador de una <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal> debe ser único dentro del espacio de declaraciones de la unidad de compilación o espacio de nombres que contiene directamente la <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal>. <example>[Ejemplo: Por ejemplo: <code_example><![CDATA[
namespace N3  
{  
   class A {}  
}  
namespace N3  
{  
   using A = N1.N2.A;    // Error, A ya existe
}  
]]></code_example></example></paragraph>
  <paragraph><example>Arriba, N3 ya contiene un miembro A, así que es un error en tiempo de compilación que una <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal> use ese identificador. fin del ejemplo]</example> De manera similar, es un error en tiempo de compilación que dos o más <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal> en la misma unidad de compilación o cuerpo de espacio de nombres declaren aliases con el mismo nombre. </paragraph>
  <paragraph>Una <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal> hace disponible un alias dentro de una unidad de compilación o cuerpo de espacio de nombres en particular, pero no contribuye ningún nuevo miembro al espacio de declaraciones subyacente. En otras palabras, una <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal> no es transitiva, sino que más bien afecta solamente a la unidad de compilación o cuerpo del espacio de nombres en la cual aparece. </paragraph>
  <paragraph>
    <example>[Ejemplo: En el ejemplo 
<code_example><![CDATA[
namespace N3  
{  
   using R = N1.N2;  
}  
namespace N3  
{  
   class B: R.A {}      // Error, R es desconocido
}  
]]></code_example>el alcance de la <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal> que introduce R solo se extiende a declaraciones de miembros en el cuerpo del espacio de nombres en el cual está contenido, así que R es desconocido en la segunda declaración de espacio de nombres. Sin embargo, ubicar la <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal> en la unidad de compilación contenedora ocasiona que el alias se vuelva disponible dentro de ambas declaraciones de espacio de nombres: <code_example><![CDATA[
using R = N1.N2;  
namespace N3  
{  
   class B: R.A {}  
}  
namespace N3  
{  
   class C: R.A {}  
}  
]]></code_example>fin del ejemplo]</example>
  </paragraph>
  <paragraph>Tal como los miembros regulares, los nombres introducidos por <non_terminal where="16.3.1">directivas-alias-de-using</non_terminal> son escondidos por miembros con nombres similares en alcances anidados. <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
using R = N1.N2;  
namespace N3  
{  
   class R {}  
   class B: R.A {}    // Error, R no tiene ningún miembro A  
}  
]]></code_example>la referencia a R.A en la declaración de B causa un error en tiempo de compilación porque R se refiere a N3.R, no a N1.N2. fin del ejemplo]</example> </paragraph>
  <paragraph>El orden en el cual las <non_terminal where="16.3.1">directivas-alias-de-using</non_terminal> se escriben no es significativo, y la resolución de los <non_terminal where="10.8">nombre-de-tipo-o-de-espacio-de-nombres</non_terminal> referenciados por una <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal> no están afectados por la <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal> en sí ni por ninguna otra <non_terminal where="16.3">directiva-using</non_terminal> en la unidad de compilación o cuerpo de espacio de nombres que la contiene directamente. En otras palabras, el <non_terminal where="10.8">nombre-de-tipo-o-de-espacio-de-nombres</non_terminal> de una  <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal> se resuelve como si la unidad de compilación o el cuerpo de espacio de nombres que la contiene directamente no tuviera <non_terminal where="16.3">directivas-using</non_terminal>. <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
namespace N1.N2 {}  
namespace N3  
{  
   using R1 = N1;   // OK  
   using R2 = N1.N2;   // OK  
   using R3 = R1.N2;   // Error, R1 desconocido  
}  
]]></code_example>la última <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal> resulta en un error en tiempo de compilación porque no está afectada por la primera <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal>. fin del ejemplo]</example> </paragraph>
  <paragraph>Una <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal> puede crear un alias para cualquier espacio de nombres o tipo, incluyendo el espacio de nombres donde esta aparece y cualquier espacio de nombres o tipo anidado dentro de ese espacio de nombres. </paragraph>
  <paragraph>Acceder a un espacio de nombres o tipo a través de un alias produce exactamente el mismo resultado que acceder ese espacio de nombres o tipo a través de su nombre declarado. <example>[Ejemplo: Por ejemplo, dado <code_example><![CDATA[
namespace N1.N2  
{  
   class A {}  
}  
namespace N3  
{  
   using R1 = N1;  
   using R2 = N1.N2;  
   class B  
   {  
      N1.N2.A a;    // se refiere a N1.N2.A  
      R1.N2.A b;    // se refiere a N1.N2.A  
      R2.A c;     // se refiere a N1.N2.A  
   }  
}  
]]></code_example>los nombres N1.N2.A, R1.N2.A, y R2.A son equivalentes y todos se refieren a la clase cuyo nombre completo es N1.N2.A. fin del ejemplo]</example> </paragraph>
</clause>
