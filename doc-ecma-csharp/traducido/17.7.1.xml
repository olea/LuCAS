<?xml version="1.0"?>
<clause number="17.7.1" title="Eventos tipo campo">
  <paragraph>Dentro del texto del programa de la clase o estructura que contiene la declaración de un evento, algunos eventos puede ser usados como campos. Para ser usados en esta forma, un evento no debe de ser abstracto o externo (extern), y no debe explicitamente incluir <non_terminal where="17.7">declaraciones-de-accesores-de-evento</non_terminal>. Como evento puede ser usado en cualquier contexto que permita un campo. El campo contiene un delegado (delegate) (<hyperlink>22</hyperlink>), el cual se refiere a la lista de manejadores de eventos que han sido agregados al evento. Si no hay manejadores de ventos agregados, el campo contiene nulo (null). </paragraph>
  <paragraph>
    <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
public delegate void EventHandler(object sender, EventArgs e);  
public class Button: Control  
{  
   public event EventHandler Click;  
   protected void OnClick(EventArgs e) {  
      if (Click != null) Click(this, e);  
   }  
   public void Reset() {  
      Click = null;  
   }  
}  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>Click es usado como un campo dentro de la clase Button. Como el ejemplo demuestra, el campo puede ser examinado, modificado, y usado como expresión de invocación de delegados. El método OnClickc en la clase Button &quot;cria&quot; el evento Click. Lo noción de criar un evento es precisamente equivalente a invocar el delegado representante por dicho evento, no hay constructor de lenguaje especiales para criar los eventos. Note que la invocación del delegado es precedida por el chequeo que asegura que el delegado es distinto a null. </example>
  </paragraph>
  <paragraph>
    <example>Fuera de la declaración de la clase Button, el miembro Click solo puede ser usado en la parte izquierda de los operadores += y -=, como en <code_example><![CDATA[
b.Click += new EventHandler(...);  
]]></code_example>el cual agrega un delegado a la lista de invocación del evento Click, y <code_example><![CDATA[
b.Click -= new EventHandler(...);  
]]></code_example>remueve un delegado de la lista de invocación del evento Click. fin ejemplo]</example>
  </paragraph>
  <paragraph>Cuando se compila un evento de tipo-campo, el compilador automáticamente crea almacenamiento para mantener el delegado, y crea accesor para el evento que agrega o remueve manejadores de eventos para el campo delegado. En orden de que sea libre-de-hilos, las operaciones de agregar o remover son hechas mientras se mantenga el candado (<hyperlink>15.12</hyperlink>) en el objeto contenedor para una evento de instancia, el tipo object (<hyperlink>14.5.11</hyperlink>) para un evento estático. </paragraph>
  <paragraph>
    <note>[Nota: De esta manera, una declaración de evento de instancia  de la forma: <code_example><![CDATA[
class X {  
   public event D Ev;  
}  
]]></code_example>puede ser compilada a algo equivalente como:: <code_example><![CDATA[
class X {  
   private D __Ev;  // campo que mantiene el delegado
   public event D Ev {  
      add {  
         lock(this) { __Ev = __Ev + value; }  
      }  
      remove {  
         lock(this) { __Ev = __Ev - value; }  
      }  
   }  
}  
]]></code_example></note>
  </paragraph>
  <paragraph>
    <note>Dentro de la clase X, referencias a Ev son compiladas en vez como una referencia del campo oculto __Ev. El nombre &quot;__Ev&quot; es arbitrario; el campo oculto puede tener cualquier nombre o ningún nombre. </note>
  </paragraph>
  <paragraph>
    <note>De forma similar, una declaración de evento estático de la forma: <code_example><![CDATA[
class X {  
   public static event D Ev;  
}  
]]></code_example>puede ser descompilada a algo equivalente como: <code_example><![CDATA[
class X {  
   private static D __Ev;  // mantiene el campo del delegado
   public static event D Ev {  
      add {  
         lock(typeof(X)) { __Ev = __Ev + value; }  
      }  
      remove {  
         lock(typeof(X)) { __Ev = __Ev - value; }  
      }  
   }  
}  
]]></code_example>fin nota]</note>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
