<?xml version="1.0"?>
<clause number="10.5.2" title="Dominios de accesibilidad">
  <paragraph>El dominio de accesibilidad de un miembro consiste en las secciones
  (posiblemente disjuntas) del texto del programa en el que el acceso a los
  miembros está permitido. Para los propósitos de definir el dominio de
  accesibilidad de un miembro, se dice que un miembro pertenece al nivel
  superior si no está declarado dentro de un tipo, y se dice que un miembro es
  anidado si si está declarado dentro de otro tipo. Además, el texto de un
  ensamblado se define como todo el código fuente contenido en todos los
  archivos que componen el ensamblado, y el texto de un tipo se define como todo
  el código fuente contenido entre los símbolos &quot;{&quot; y &quot;}&quot; en
  el <non_terminal where="17.1.3">cuerpo-de-la-clase</non_terminal>,
  <non_terminal where="18.1.3">cuerpo-de-la-estructura</non_terminal>, <non_terminal
  where="20.1.3">cuerpo-del-interfaz</non_terminal>, o <non_terminal
  where="21.1">cuerpo-de-la-enumeración</non_terminal> del tipo (incluyendo
  posiblemente tipos que están anidados dentro del propio tipo). </paragraph>

  <paragraph>El dominio de accesibilidad de un tipo predefinido (tal como un
  objeto <keyword>int</keyword>, or <keyword>double</keyword>) es ilimitado</paragraph>
  <paragraph>El dominio de accesibilidad de un tipo T de nivel superior que está
  declarado en un programa P se define de la siguiente manera:
  <list>
          <list_item>Si la accesibilidad declarado de T es pública, el dominio
          de accesibilidad de T es el texto del programa P y cualquier programa
          que haga referncia a P</list_item>
          <list_item>Si la accesibilidad declarada de T es internal, el dominio
          de accesibilidad de T es texto del programa P</list_item>
  </list></paragraph>
  
    <paragraph><note>[Note: De estas definiciones se deduce que el dominio de accesibilidad
    de un tipo de nivel superior siempre es al menos el texto del programa en el
    que el tipo está declarado. fin nota]</note>
  </paragraph>
  
  <paragraph>El dominio de accesibilidad de un tipo anidado M en un tipo T
  dentro de un programa P, se define de la siguiente manera (nótese que el
  propio M posiblemente sea un tipo):
  <list>
  <list_item> Si la accesibilidad declarada de M es pública, el dominio de
  accesibilidad de M es el dominio de accesibilidad de T</list_item>
  <list_item> Si la accesibilidad decalarado de M es <keyword>protected
  internal</keyword>, sea D la unión del texto del programa de P y el texto del
  programa de cualquier tipo derivado de T, el cual se declara fuera de P. El
  dominio de accesibilidad de M es es la intersección del dominio de
  accesibilidad de T con D. </list_item>
  <list_item> Si la accesibilidad declarada de M es internal, el dominio de
  accesibilidad de M es la intersección del dominio de accesibilidad de T con el
  texto del programa de P
  </list_item>
  <list_item> Si la accesibilidad declarada de M es private, el dominio de
  accesibilidad de M es texto de T.
  </list_item></list>
  </paragraph>
  <paragraph>
    <note>[Nota: de estas definiciones se deduce que el dominio de accesibilidad
    de un tipo anidado siempre el al menos texto del programa del tipo en el que
    el miembro es declarado. Además, se sigue que el dominio de accesibilidad de
    un miembro nunca es más inclusivo que el dominio de accesibilidad de un tipo
    en el que el miembro es declarado.fin nota]</note>
  </paragraph>
  <paragraph>
    <note>[Nota: En terminos intuitivos, cuando se accede a un tipo o miembro de
    M, se siguen los siguientes pasos para asegurar que se permite el acceso:
    <list>
    <list_item> Primero, si M se declara dentro de un tipo (en contraposición a
    una unidad de compilación o un espacio de nombres), se produce un error en
    tiempo de compilación si dicho tipo no es accesible. </list_item>
    <list_item> Después, si m es public, se permite el acceso. </list_item>
    <list_item> En caso contrario, si M es protected internal, se permite el
    acceso si ésto sucede dentro del programa en el que se declara M, o si
    sucede dentro de una clase derivada de la clase en la que M es declarada y
    sucede dentro del tipo de la clase derivada  (<hyperlink>10.5.3</hyperlink>). </list_item>
    <list_item> En caso contrario, si M es protected, se permite el acceso si
    ésto ocurre dentro de la clase en la que M es declarada, o si sucede dentro
    de la clase derivada de la clase en al que M es declarada y sucede dentro
    del tipo derivado de la clase (<hyperlink>10.5.3</hyperlink>). </list_item>
    <list_item> En caso contrario, si M es internal, se permite el accesi si
    ésto sucede dentro del programa en el que M es declarado.</list_item>
    <list_item> En caso contrario, si M es private, se permite el acceso si ésto
    sucede dentro del tipo M en el que éste es declarado. </list_item>
    <list_item> En caso contrario, el tipo o miembro no es accesible, y se
    produce un error en tiempo de compilación. fin nota
    </list_item></list></note>
  </paragraph>
  <paragraph>
    <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
public class A  
{  
   public static int X;  
   internal static int Y;  
   private static int Z;  
}  
internal class B  
{  
   public static int X;  
   internal static int Y;  
   private static int Z;  
   public class C  
   {  
      public static int X;  
      internal static int Y;  
      private static int Z;  
   }  
   private class D  
   {  
      public static int X;  
      internal static int Y;  
      private static int Z;  
   }  
}  
]]></code_example>las clases y sus miembros tienen los siguientes dominios de
accesibilidad
        <list>
        <list_item> El dominio de accesibilidad de A y A.X es ilimitado.</list_item>
        <list_item> El dominio de accesibilidad de A.Y, B, B.X, B.Y, B.C, B.C.X,
        y B.C.Y es el texto del programa del tipo contenedor. </list_item>
        <list_item> El dominio de accesibilidad de A.Z es el texto del programa
        de A. </list_item>
        <list_item> El dominio de accesibilidad de B.Z y B.D es el texto del
        programa de B, incluyendo el texto del programa de B.C y B.D . </list_item>
        <list_item> El dominio de accesibilidad de B.C.Z es el texto del
        programa de B.C .</list_item>
        <list_item> El dominio de accesibilidad de B.D.X, B.D.Y, y B.D.Z es el
        texto del programa de B.D. </list_item></list>
        </example>
  </paragraph>
  <paragraph>
    <example>Como muestra el ejemplo, el dominio de accesibilidad de un miembro
    nunca es más grande el el del tipo contenedor. Por ejemplo, aunque todos los
    miembros X tienen accesibilidad pública declarado, todos menos A.X tienen
    dominios de accesibilidad que están limitados por el tipo contenedor. fin
    ejemplo]
    </example>
  </paragraph>
  <paragraph>Como se describe en <hyperlink>10.4</hyperlink>, todos los miembros
  de una clase base, salto los constructores de instancia, destructores, y
  constructores estáticos se heredan por tipos derivados. Esto incluye incluso a
  miembros privados de la clase base. De todas formas, el dominio de
  accesibilidad de un miembro privado incluye solamente el texto del programa
  del tipo en el que el miembro es declarado<example>[Ejemplo: En el ejemplo <code_example><![CDATA[
class A  
{  
   int x;  
   static void F(B b) {  
      b.x = 1;   // Ok  
   }  
}  
class B: A  
{  
   static void F(B b) {  
      b.x = 1;   // Error, x es es accesible  
   }  
}  
]]></code_example>la clase B hereda el miembro privado x de la clase A. Porque
el miembro es private, solamente es accesible dentro del <non_terminal
where="17.1.3">cuerpo-de-la-clase</non_terminal> A. Por lo tanto, el acceso a
b.x tiene éxito en el método A.T, pero fracasa en el método B.F. fin ejemplo]</example> </paragraph>
</clause>

<!-- Traducción Fabian Seoane fabian@fseoane.net -->
