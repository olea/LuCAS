<?xml version="1.0"?>
<clause number="11.1.1" title="Constructores por defecto">
  <paragraph>Todos los valores de tipo declaran implícitamente una instancia publica de un constructor sin parámetros llamada constructor por defecto.</paragraph>
  <paragraph>El constructor por defecto regresa una instancia inicializada a cero como el valor por defecto para el tipo por valor: <list><list_item> Para todos los <non_terminal where="11.1">tipos-simples</non_terminal>, el valor por defecto es producido por un patrón de bits de todos ceros: </list_item><list><list_item> Para <keyword>sbyte</keyword>, <keyword>byte</keyword>, <keyword>short</keyword>, <keyword>ushort</keyword>, <keyword>int</keyword>, <keyword>uint</keyword>, <keyword>long</keyword>, and <keyword>ulong</keyword>, el valor por defecto es 0. </list_item><list_item> Para <keyword>char</keyword>, el valor por defecto es '\x0000'. </list_item><list_item> Para <keyword>float</keyword>, el valor por defecto es 0.0f. </list_item><list_item> Para <keyword>double</keyword>, el valor por defecto es 0.0d. </list_item><list_item> Para <keyword>decimal</keyword>, el valor por defecto es 0.0m. </list_item><list_item> Para <keyword>bool</keyword>, el valor por defecto es false. </list_item></list><list_item> Para una <non_terminal where="11.1">tipo-enumeración</non_terminal> E, el valor por defecto es 0. </list_item><list_item> Para una <non_terminal where="11.1">tipo-estructura</non_terminal>, el valor por defecto es producido al establecer todos los campos de tipo por valor a su valor por defecto y todos los tipos por referencias a null.</list_item></list></paragraph>
  <paragraph>Como otra instancia de constructor, el constructor por defecto de un tipo por valor es invocado usando el operador new. <note>[Nota: Por razones de eficiencia, este requerimiento actualmente no tiene la intención de que la implementación genere una llamada al constructor. fin nota]</note> En el ejemplo de abajo, variables i y j son inicializadas a cero. <code_example><![CDATA[
class A  
{  
   void F() {  
      int i = 0;  
      int j = new int();  
   }  
}  
]]></code_example></paragraph>
  <paragraph>Porque cada valor toma implícitamente una instancia de un constructor publico sin parámetros, eso no es posible para un tipo estructura que contenga una declaración explicita de un constructor sin parámetros. Un tipo estructura es permitido de cualquier forma para declarar instancias de constructores con parámetros. (<hyperlink>18.3.8</hyperlink>). </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
