<?xml version="1.0"?>
<clause number="15.1" title="Puntos terminales y alcance">
  <paragraph>Cada sentencia tiene un punto final. En términos intuitivos, el punto final de una sentencia es la localización que sigue inmediatamente a la sentencia. Las reglas de ejecución para componer sentencias  (sentencias que contienen sentencias incrustadas) esspecifican la accion que es tomada cuando el  control alcanza el punto final de una sentencia anidada. Por ejemplo, cuando el control alcanza el punto final de una sentencia en un bloque, el control es transferido a la siguiente sentencia en el bloque. </paragraph>
  <paragraph>Si una sentencia puede posiblemente ser alcanzada en tiempo de ejecución, se dice que la sentencia es alcanzable . Por otro lado, si no existe posibilidad de que una sentencia sea ejecutada, se dice que la sentencia es inalcanzable. </paragraph>
  <paragraph>
    <example>[Ejemplo: En el ejemplo  <code_example><![CDATA[
void F() {  
   Console.WriteLine("alcanzable");  
   goto Label;  
   Console.WriteLine("inalcanzable");  
   Label:  
   Console.WriteLine("alcanzable");  
}  
]]></code_example>la segunda invocación de Console.WriteLine es inalcanzable debido a que no existe posibilidad de que la sentencia sea ejecutada. Fin del ejemplo]</example>
  </paragraph>
  <paragraph>Se nos informará mediante un warning si el compilador determina que una sentencia es inalcanzable. Para la sentencia en específico, no es un error que ella sea inalcanzable. </paragraph>
  <paragraph>
    <note>[Nota: Para determinar cuando una sentencia en particular o punto final es alcanzable, el compilador ejecuta un analisis de flujo de acuerdo a las reglas de alcance definidas para cada sentencia. El analisis de flujo toma en cuenta los valores de expresiones constantes (<hyperlink>14.15</hyperlink>) que controlan el comportamiento de las sentencias, excepto los posibles valores de expresiones no constantes, que no son consideradas. En otras palabras, para propósitos de análisis de control de flujo, una expresión no constante de cualquier tipo dado, es considerado que tenga cualquier valor posible de ese tipo. </note>
  </paragraph>
  <paragraph>
    <note>En el ejemplo <code_example><![CDATA[
void F() {  
   const int i = 1;  
   if (i == 2) Console.WriteLine("inalcanzable");  
}  
]]></code_example>la expresion booleana de la sentencia IF es una expresion constante debido a que ambos operandos de el operador  == son constantes. Como la expresion constante es evaluada en tiempo de compilacion, produciendo el valor de falso, la invocacion a Console.WriteLine es considerada inalcanzable. Ahora, si i es declarado como variable local <code_example><![CDATA[
void F() {  
   int i = 1;  
   if (i == 2) Console.WriteLine("reachable");  
}  
]]></code_example>la invocación a Console.WriteLine es considerada alcanzable, inclusive pensando que en realidad nunca sera ejecutada. Fin de la nota]</note>
  </paragraph>
  <paragraph>El bloque de una función miembro es siempre considerada alcanzable. The block of a function member is always considered reachable. By successively evaluating the reachability rules of each statement in a block, the reachability of any given statement can be determined. </paragraph>
  <paragraph>
    <example>[Example: In the example <code_example><![CDATA[
void F(int x) {  
   Console.WriteLine("start");  
   if (x < 0) Console.WriteLine("negative");  
}  
]]></code_example>the reachability of the second Console.WriteLine is determined as follows: <list><list_item> The first Console.WriteLine expression statement is reachable because the block of the F method is reachable (<hyperlink>15.2</hyperlink>). </list_item><list_item> The end point of the first Console.WriteLine expression statement is reachable15.2 because that statement is reachable (<hyperlink>15.6</hyperlink> and <hyperlink>15.2</hyperlink>). </list_item><list_item> The if statement is reachable because the end point of the first Console.WriteLine expression statement is reachable (<hyperlink>15.6</hyperlink> and <hyperlink>15.2</hyperlink>). </list_item><list_item> The second Console.WriteLine expression statement is reachable because the boolean expression of the if statement does not have the constant value false. end example]</list_item></list></example>
  </paragraph>
  <paragraph>There are two situations in which it is a compile-time error for the end point of a statement to be reachable: <list><list_item> Because the switch statement does not permit a switch section to &quot;fall through&quot; to the next switch section, it is a compile-time error for the end point of the statement list of a switch section to be reachable. If this error occurs, it is typically an indication that a break statement is missing. </list_item><list_item> It is a compile-time error for the end point of the block of a function member that computes a value to be reachable. If this error occurs, it typically is an indication that a return statement is missing. </list_item></list></paragraph>
</clause>
