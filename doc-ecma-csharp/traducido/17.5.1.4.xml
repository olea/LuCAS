<?xml version="1.0"?>
<clause number="17.5.1.4" title="Arreglos como parámetros">
  <paragraph>Un parámetro declarado con un modificador params es un arreglo como parámetro. Si una lista de parámetros formales incluye un arreglo como parámetro, debe ser el ultimo parámetro en la lista y debe ser un arreglo de dimensión sencilla. </paragraph>
  <paragraph><example>[Ejemplo: Por ejemplo, los tipos string[] y string[][] pueden ser usados como tipos de arreglo como parámetro, pero el tipo string[,] no se puede. fin ejemplo]</example> No es posible combinar el modificador params con los modificadores ref y out. </paragraph>
  <paragraph>Un arreglo como parámetro permite que los argumentos sean especificados en dos formas en una invocación de método: <list><list_item> El argumento dado para un arreglo de parámetro puede ser un expresión sencilla de un tipo que es implícitamente convertible (<hyperlink>13.1</hyperlink>) a el tipo de arreglo como parámetro. En este caso, el arreglo como parámetro actual precisamente como un parámetro por valor. </list_item><list_item> Alternativamente, la invocación puede especificar cero o mas argumentos para el arreglo de parámetro, donde cada argumento es una expresión de un tipo que es implícitamente convertible (<hyperlink>13.1</hyperlink>) a un tipo de elemento de un arreglo como parámetro. En este caso, la invocación crea una instancia de un tipo de arreglo como parámetro con una longitud correspondiente al número de argumentos, inicializa los elementos de la instancia del arreglo con los valores de los argumentos dados, y usas las recién instancias de arreglos creados como el argumento actual. </list_item></list></paragraph>
  <paragraph>Excepto para permitir un número de variable de argumentos en una invocación, un arreglo como parámetro es precisamente equivalente a un parámetro por valor (<hyperlink>17.5.1.1</hyperlink>) del mismo tipo. </paragraph>
  <paragraph>
    <example>[Ejemplo: El ejemplo <code_example><![CDATA[
using System;  
class Test  
{  
   static void F(params int[] args) {  
      Console.Write("Arreglo que contiene {0} elementos:", args.Length);  
      foreach (int i in args)  
      Console.Write(" {0}", i);  
      Console.WriteLine();  
   }  
   static void Main() {  
      int[] arr = {1, 2, 3};  
      F(arr);  
      F(10, 20, 30, 40);  
      F();  
   }  
}  
]]></code_example>produce la salida <code_example><![CDATA[
Arreglo que contiene 3 elementos: 1 2 3  
Arreglo que contiene 4 elementos: 10 20 30 40  
Arreglo que contiene 0 elementos:  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>La primera invocación de F simplemente pasa el arreglo a como un parámetro por valor. La segunda invocación de F automáticamente crea un elemento de tamaño cuatro int[] con el valores de elementos dados y pasa esa instancia de arreglo como un parámetro por valor. De cualquier forma, la tercera invocación de F crea un elemento de tamaño cero int[] y pasa esa instancia como un parámetro por valor. La segunda y tercera invocaciones son precisamente equivalentes a escribir: <code_example><![CDATA[
F(new int[] {10, 20, 30, 40});  
F(new int[] {});  
]]></code_example>fin ejemplo]</example>
  </paragraph>
  <paragraph>Cuando se realiza una resolución de sobrecarga, un método con un arreglo como parámetro puede ser aplicable ya sea en su forma normal o en su forma expandida (<hyperlink>14.4.2.1</hyperlink>). La forma expandida de un método es disponible únicamente si la forma norma del método no es aplicable y únicamente si un método con la misma firma como la forma expandida no esta ya declarada en el mismo tipo. </paragraph>
  <paragraph>
    <example>[Ejemplo: El ejemplo <code_example><![CDATA[
using System;  
class Test  
{  
   static void F(params object[] a) {  
      Console.WriteLine("F(object[])");  
   }  
   static void F() {  
      Console.WriteLine("F()");  
   }  
   static void F(object a0, object a1) {  
      Console.WriteLine("F(object,object)");  
   }  
   static void Main() {  
      F();  
      F(1);  
      F(1, 2);  
      F(1, 2, 3);  
      F(1, 2, 3, 4);  
   }  
}  
]]></code_example>produce la salida <code_example><![CDATA[
F();  
F(object[]);  
F(object,object);  
F(object[]);  
F(object[]);  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>En el ejemplo, dos de las posibles formas expandidas del método con un arreglo como parámetro son ya incluidas en la clase como métodos regulares. Esas formas expandidas por lo tanto no son consideradas cuando se realiza una resolución de sobrecargado, y la primera y tercera invocación al método de esta forma seleccionan a los métodos regulares.</example>
  </paragraph>
  <paragraph>
    <example>Cuando una clase declara un método con un arreglo como parámetro, es común también incluir algunas de las formas expandidas de los métodos regulares. Al hacer eso es posible evitar la asignación de una instancia de un arreglo que ocurre cuando una forma expandida de un método con un arreglo como parámetro es invocado. fin ejemplo]</example>
  </paragraph>
  <paragraph>Cuando el tipo de un arreglo como parámetro es object[], una ambigüedad potencial surge entre la forma normal del método y la forma extendida para un parámetro de objeto sencillo. La razón para la ambigüedad es que el object[] es en si mismo implícitamente convertible al tipo object. La ambigüedad no presenta problema, de cualquier forma, debido a que puede ser resuelta al insertar un moldeado (cast) si es necesario. </paragraph>
  <paragraph>
    <example>[Ejemplo: El ejemplo <code_example><![CDATA[
using System;  
class Test  
{  
   static void F(params object[] args) {  
      foreach (object o in args) {  
         Console.Write(o.GetType().FullName);  
         Console.Write(" ");  
      }  
      Console.WriteLine();  
   }  
   static void Main() {  
      object[] a = {1, "Hola", 123.456};  
      object o = a;  
      F(a);  
      F((object)a);  
      F(o);  
      F((object[])o);  
   }  
}  
]]></code_example>produce la salida <code_example><![CDATA[
System.Int32 System.String System.Double  
System.Object[]  
System.Object[]  
System.Int32 System.String System.Double  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>En las primera y ultima invocaciones de F, la forma normal de F es aplicable porque una conversión implícita existe desde el tipo de argumento hacia el tipo de parámetro (ambos de tipo object[]). De esta forma, la resolución de sobrecarga selecciona la forma normal de F, y el argumento es pasado como un parámetro de valor regular. En las segunda y tercera invocaciones, la forma normal de F no es aplicable porque no existe conversión implícita desde el tipo de argumento al tipo de parámetro (tipo objeto no puede ser implícitamente convertido al tipo object[]). De cualquier forma, la forma expandida de F es aplicable, y el elemento sencillo del arreglo es inicializado con el valor del argumento dado (el cual en si mismo es una referencia a un object[]). fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
