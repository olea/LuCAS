<?xml version="1.0"?>
<clause number="14.2.6.2" title="Promociones numéricas binarias" informative="true">
  <paragraph>Esta clausula es informativa. </paragraph>
  <paragraph>La promoción numérica binaria ocurre par los operandos de los operadores binarios predefinidos +, -, *, /, %, &amp;, |, ^, ==, !=, &gt;, &lt;, &gt;=, y &lt;=. La promoción numérica binaria implícita convierte ambos operandos a un tipo común, el cual, en caso de operadores no-relacionales, también convierte el tipo del resultado de la operación. La promoción numérica binaria consiste en aplicar las siguientes reglas, en el orden que aquí aparecen: <list><list_item> Si algún operando es del tipo <keyword>decimal</keyword>, el otro operador es convertido al tipo <keyword>decimal</keyword>, o un error en tiempo de compilación ocurre si el otro operando es del tipo <keyword>float</keyword> o <keyword>double</keyword>. </list_item><list_item> De otra forma, si algún operando es del tipo <keyword>double</keyword>, el otro operando es convertido al tipo <keyword>double</keyword>. </list_item><list_item> De otra forma, si algún operando es de tipo <keyword>float</keyword>, el otro operando es convertido al tipo <keyword>float</keyword>. </list_item><list_item> De otra forma, si algún operando es de tipo <keyword>ulong</keyword>, el otro operando es convertido al tipo <keyword>ulong</keyword>, o un error en tiempo de compilación ocurre si el otro operando es de tipo <keyword>sbyte</keyword>, <keyword>short</keyword>, <keyword>int</keyword>, o <keyword>long</keyword>. </list_item><list_item> De otra forma, si algún operador es de tipo <keyword>long</keyword>, el otro operando es convertido al tipo <keyword>long</keyword>. </list_item><list_item> De otra fora, si algún operando es del tipo <keyword>uint</keyword> y el otro operando es de tipo <keyword>sbyte</keyword>, <keyword>short</keyword>, o <keyword>int</keyword>, ambos operandos son convertidos al tipo <keyword>long</keyword>. </list_item><list_item> De otra fora, si algún operando es del tipo <keyword>uint</keyword>, el otro operando es convertido al tipo <keyword>uint</keyword>. </list_item><list_item> De otra forma, ambos operandos son convertidos al tipo <keyword>int</keyword>. </list_item></list></paragraph>
  <paragraph>
    <note>[Nota: Note que la primera regla deshabilita cualquier operación que mezcle el tipo <keyword>decimal</keyword> con los tipos <keyword>double</keyword> y <keyword>float</keyword>. Esta regla sigue del hecho que no hay conversiones implícitas entre el tipo <keyword>decimal</keyword> y los tipos <keyword>double</keyword> y <keyword>float</keyword>. fin nota]</note>
  </paragraph>
  <paragraph>
    <note>[Nota: También note que no es posible para un operando ser de tipo <keyword>ulong</keyword> cuando el otro operando es de un tipo entero con signo. La razón es que no existe tipo entero que represente un rango completo de <keyword>ulong</keyword> al igual que los tipos enteros con signo. fin nota]</note>
  </paragraph>
  <paragraph>En ambos casos anteriores, una expresión cast puede ser usada para explícitamente convertir un operando de un tipo que es compatible con el otro operando. </paragraph>
  <paragraph>
    <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
decimal AddPercent(decimal x, double percent) {  
   return x * (1.0 + percent / 100.0);  
}  
]]></code_example>un error en tiempo de compilación ocurre porque un <keyword>decimal</keyword> no puede ser multiplicado por un <keyword>double</keyword>. El error es resuelto al convertir explícitamente al segundo operando a <keyword>decimal</keyword>, como sigue: <code_example><![CDATA[
decimal AddPercent(decimal x, double percent) {  
   return x * (decimal)(1.0 + percent / 100.0);  
}  
]]></code_example>fin ejemplo]</example>
  </paragraph>
  <paragraph>Fin del texto informativo. </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
