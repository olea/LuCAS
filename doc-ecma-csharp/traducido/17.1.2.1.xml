<?xml version="1.0"?>
<clause number="17.1.2.1" title="Clases base">
  <paragraph>Cuando un <non_terminal where="11.2">tipo-clase</non_terminal> es incluido en la <non_terminal where="17.1.2">clase-base</non_terminal>, especifica la clase base directa de la clase que esta siendo declarada. Si la declaración de una clase no tiene <non_terminal where="17.1.2">clase-base</non_terminal>, o si la <non_terminal where="17.1.2">clase-base</non_terminal> lista únicamente tipos interfaz, la clase base directa asumida es object. Una clase hereda miembros de su clase base directa, como esta descrito en <hyperlink>17.2.1</hyperlink>. </paragraph>
  <paragraph>
    <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
class A {}  
class B: A {}  
]]></code_example>la clase A se dice que es la clase base directa de B, y B se dice que es la clase derivada de A. Debido a que A no especifica explícitamente una clase base directa, su clase base directa es implícitamente object. fin ejemplo]</example>
  </paragraph>
  <paragraph>La clase base directa un tipo clase debe ser al menos accesible como el tipo de clase en si mismo (<hyperlink>10.5.4</hyperlink>). Por ejemplo, es un error en tiempo de compilación para una clase publica que se deriva de una clase privada (private) o interna (internal). </paragraph>
  <paragraph>La clase base directa de un tipo clase no debe ser cualquiera de los siguientes tipos: System.Array, System.Delegate, System.Enum, o System.ValueType. </paragraph>
  <paragraph>Las clases base de una clase son las clases base directas y sus clases base. En otras palabras, el juego de unas clases base es la cercanía transitiva de una relación de la clase base. <note>[Nota: Refiriéndose al ejemplo anterior, las clases base de B son A y object. fin nota]</note> </paragraph>
  <paragraph>Excepto para un clase object, cada clase tiene exactamente una clase base directa. La clase object no tiene clase base directa y es la clase base principal de otras clases. </paragraph>
  <paragraph>Cuando una clase B se deriva de una clase A, es un error en tiempo de compilación que A dependa de B. Una clase directamente depende de su clase base directa (si hay alguna) y directamente en la clase dentro de la cual este anidada (si hay alguna). Dada esta definición, el juego completo de clases a través del cual una clase depende de su cercania transitiva es de dependencia directa de la relacion. </paragraph>
  <paragraph>
    <example>[Ejemplo: El ejemplo <code_example><![CDATA[
class A: B {}  
class B: C {}  
class C: A {}  
]]></code_example>es un error porque las clases dependen circularmente en ellas. Por medio, del ejemplo <code_example><![CDATA[
class A: B.C {}  
class B: A  
{  
   public class C {}  
}  
]]></code_example>resulta en un error en tiempo de compilación porque A depende de B.C (su clase base directa), la cual depende de B (su clase que la encierra inmediatamente), la cual depende circularmente de A. fin ejemplo]</example>
  </paragraph>
  <paragraph>Note que una clase no depende de las clases que anida dentro de ella. <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
class A  
{  
   class B: A {}  
}  
]]></code_example></example></paragraph>
  <paragraph>
    <example>B depende de A (porque A su clase base directa y la clase inmediata que la encierra), pero A no depende de B (debido a que B no es su clase base ni tampoco una clase que encierre a A). Debido a esto, el ejemplo es valido. fin ejemplo]</example>
  </paragraph>
  <paragraph>No es posible derivar de una clase base sellada (sealed). <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
sealed class A {}  
class B: A {}      // Error, no se puede derivar de una clase sellada (sealed)
]]></code_example>la clase B resulta en un error en tiempo de compilación porque intenta derivarse de una clase sellada A. fin ejemplo]</example> </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
