<?xml version="1.0"?>
<clause number="17.2.1" title="Herencia">
  <paragraph>Una clase hereda los miembros de su clase base directa. Herencia significa que una clase implícitamente contiene todos los miembros de su clase base directa, excepto por los constructores de instancia, destructores, y constructores estáticos de la clase base. Algunos aspectos importantes de la herencia son: <list><list_item> Herencia es transitiva. Si C es derivada de B, y B es derivada de A, entonces C hereda los miembros declarados en B como también los miembros heredados en A. </list_item><list_item> Una clase derivada extiende su clase base directa. Una clase derivada puede agregar nuevos miembros a esos que hereda, pero no puede remover la definición de un miembro heredado. </list_item><list_item> Constructores de instancia, destructores, y constructores estáticos no son heredados, pero todos los otros miembros son, a pesar de su accesibilidad declarada (<hyperlink>10.5</hyperlink>). De cualquier forma, dependiendo de su accesibilidad declarada, miembros heredados pueden no ser accesibles en clases derivadas. </list_item><list_item> Una clase derivada puede ocultar (<hyperlink>10.7.1.2</hyperlink>) miembros heredados declarando nuevos miembros con el mismo nombre o firma. Note que de cualquier forma esa ocultación de un miembro heredado no remueve ese miembro, únicamente hace inaccesible a su clase derivada. </list_item><list_item> Una instancia de clase contiene un juego de todos los campos de instancia declarados en la clase y en su clase base, y una conversión implícita (<hyperlink>13.1.4</hyperlink>) existe de un tipo de clase derivada a cualquiera de sus tipos de clase base. De esta forma, una referencia a una instancia de alguna clase derivada puede ser tratada como una referencia de una instancia de cualquiera de sus clases base.</list_item><list_item> Una clase puede declara métodos virtuales, propiedades, e indexadores, y clases derivadas pueden reemplazar la implementación de esas miembros función. Esto permite a las clases exhibir comportamiento polimórfico donde las acciones realizadas por una invocación a un miembro función depende del tipo en tiempo de ejecución de la instancia a través del cual esa función miembro es invocada. </list_item></list></paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
