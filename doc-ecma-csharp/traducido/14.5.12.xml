<?xml version="1.0"?>
<clause number="14.5.12" title="Los operadores checked y unchecked">
  <paragraph>Los operadores checked y unchecked son usados para controlar el flujo de contexto de checado para operaciones de ariméticas  y conversiones de <non_terminal where="11.1">tipo-entero</non_terminal>. <grammar_production><name><non_terminal where="14.5.12">expresión-checked</non_terminal></name> : <rhs><keyword>checked</keyword><terminal>(</terminal><non_terminal where="14.14">expresión</non_terminal><terminal>)</terminal></rhs></grammar_production><grammar_production><name><non_terminal where="14.5.12">expresión-unchecked</non_terminal></name> : <rhs><keyword>unchecked</keyword><terminal>(</terminal><non_terminal where="14.14">expresión</non_terminal><terminal>)</terminal></rhs></grammar_production></paragraph>
  <paragraph>El operador checked evalua la expresión contenida en un contexto checado, y el operador unchecked evalua la expresión contenida en un contexto sin checar. Una <non_terminal where="14.5.12">expresión-checked</non_terminal> o <non_terminal where="14.5.12">expresión-unchecked</non_terminal> corresponde exactamente a la <non_terminal where="14.5.3">expresión-con-paréntesis</non_terminal> (<hyperlink>14.5.3</hyperlink>), excepto que la expresión contenida es evaluada dado el flujo del contexto del checado. </paragraph>
  <paragraph>El sobreflujo del contexto de checado puede también ser controlado a través de las sentencias checked y unchecked (<hyperlink>15.11</hyperlink>). </paragraph>
  <paragraph>Las siguientes operaciones son afectadas por el sobreflujo de contexto de checado estabilizado por los operadores checked y unchecked y sentencias: <list><list_item> Los operadores unarios predefinidos ++ y  -- (<hyperlink>14.5.9</hyperlink> y <hyperlink>14.6.5</hyperlink>), cuando el operando es de un tipo entero. </list_item><list_item> El operadores unario predefinido - (<hyperlink>14.6.2</hyperlink>), cuando el operando es de un tipo entero. </list_item><list_item> Los operadores binarios predefinidos +, -, *, y / (<hyperlink>14.7</hyperlink>), cuando ambos operandos son tipos enteros. </list_item><list_item> Conversiones explícitas numéricas (<hyperlink>13.2.1</hyperlink>) de un tipo entero para otro tipo entero. </list_item></list></paragraph>
  <paragraph>Cuando uno de los operadores anteriores producen un resultado que es muy grande para representar en el tipo destino, el contexto en el cual la operación es realizada controla el comportamiento resultante: <list><list_item> En un contexto checked, si la operación es una expresión constante (<hyperlink>14.15</hyperlink>), un error en tiempo de compilación ocurre. De otra forma, cuando la operación es realizada en un tiempo de ejecución, una System.OverflowException es lanzada. </list_item><list_item> En un contexto sin checar, el resultado es truncado al descartar cualquier orden de bits altos que no entren en el tipo destino. </list_item></list></paragraph>
  <paragraph>Para expresiones no-constantes (expresiones que son evaluadas en tiempo de ejecución) que no son encerradas por cualquiera de los operadores checked o unchecked o sentencias, el sobreflujo por defecto de contexto de checado es sin sin checar (unchecked), a menos que factores externos (como un cambio de compilador y configuración de ambiente de ejecución) llame a la evaluación de para checked. </paragraph>
  <paragraph>Para expresiones constantes (expresiones que puede sen totalmente evaluadas en tiempo de compilación), el sobreflujo por defecto de contexto de checado es siempre checado (checked). A menos que un expresión constante es explícitamente asignada en un contexto unchecked, sobreflujos que ocurren durante la evaluación de tiempo de compilación de la expresión siempre causan errores en tiempo de compilación. </paragraph>
  <paragraph>
    <note>[Nota: Desarrolladores pueden beneficiarse si ejercitan su código usando el modo checado así como el sin checar. </note>
  </paragraph>
  <paragraph>
    <note>También es razonable que, a menos que otros especifique, el sobreflujo por defecto de contexto de checado este establecido a cuando el debugging este habilitado. fin nota]</note>
  </paragraph>
  <paragraph>
    <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
class Test  
{  
   static readonly int x = 1000000;  
   static readonly int y = 1000000;  
   static int F() {  
      return checked(x * y);    // Lanza OverflowException  
   }  
   static int G() {  
      return unchecked(x * y);  // Regresa -727379968  
   }  
   static int H() {  
      return x * y;      // Depende del defecto
   }  
}  
]]></code_example>no se reportan errores en tiempo de compilación debido a que ninguna de las expresiones puede ser evaluada en tiempo de compilación. En tiempo de ejecución, el método F lanza una System.OverflowException, y el método G regresa -727379968 (los 32 bits más bajos del resultado fuera de rango). El comportamiento del método H depende en el sobreflujo por defecto de contexto de checado para la compilación, pero este no es ni alguno mismo para F o para el mismo G. fin ejemplo]</example>
  </paragraph>
  <paragraph>
    <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
class Test  
{  
   const int x = 1000000;  
   const int y = 1000000;  
   static int F() {  
      return checked(x * y);    // Error de compilación, sobreflujo
   }  
   static int G() {  
      return unchecked(x * y);  // Regresa -727379968  
   }  
   static int H() {  
      return x * y;      // Error de compilación, sobreflujo
   }  
}  
]]></code_example>el sobreflujo que ocurre cuando se evalúan las expresiones constantes en F y H causan errores en tiempo de compilación que sean reportadas porque la expresiones son evaluadas en un contexto checado. Un sobrecarga ocurre cuando se evalua la expresión constante en G, debido a que la evaluación toma lugar en un contexto sin checar, el sobreflujo no es reportado. fin ejemplo]</example>
  </paragraph>
  <paragraph>Los operadores checked y unchecked únicamente afectan el sobreflujo de contexto de checado para esas operaciones que textualmente son contenidas dentro de los símbolos &quot;(&quot; y &quot;)&quot;. Los operadores no tienen efecto en miembros función que son invocados como un resultado de la evaluación de la expresión contenida. <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
class Test  
{  
   static int Multiply(int x, int y) {  
      return x * y;  
   }  
   static int F() {  
      return checked(Multiply(1000000, 1000000));  
   }  
}  
]]></code_example>el uso de checked en F no afecta la evaluación de x * y en Multiply, así que x * y es evaluado en el sobreflujo de contexto de checado por defecto. fin ejemplo]</example> </paragraph>
  <paragraph>El operador unchecked es conveniente cuando se escriben constantes de tipos enteros con signo en notación hexadecimal. <example>[Ejemplo: Por ejemplo: <code_example><![CDATA[
class Test  
{  
   public const int AllBits = unchecked((int)0xFFFFFFFF);  
   public const int HighBit = unchecked((int)0x80000000);  
}  
]]></code_example></example></paragraph>
  <paragraph>
    <example>Ambas constantes anteriores son de tipo <keyword>uint</keyword>. Por las constantes están fuera del rango de  <keyword>int</keyword>, sin el operador unchecked, los casts para <keyword>int</keyword> producirían errores en tiempo de compilación. fin ejemplo]</example>
  </paragraph>
  <paragraph>
    <note>[Nota: Los operadores checked y unchecked son sentencias que permiten a los programadores controlar ciertos aspectos de algunos cálculos numéricos. De cualquier forma, el comportamiento de algunos operadores numéricos dependen de los tipos de datos de los operados. Por ejemplo, multiplicar dos decimales siempre resulta en una excepción en sobrecarga inclusive dentro de una construcción explícita unchecked. Similarmente, multiplicar dos flotantes nunca resulta en excepción en sobreflujo inclusive dentro de una construcción explícita checked. En adición, otros operadores nunca son afectados por el modo de checado, sin importar que sea por defecto o explícito. Como un servicio a programadores, es recomendado que el compilar lance una advertencia cuando una expresión aritmética dentro de un contexto checked o unchecked  (por operador o sentencia) que no pueda ser posiblemente afectada por el modo especificado de checado. Debido a que dicha advertencia no es requerida, el compilador tiene flexibilidad en determinadas circunstancias el merito de lanzar dichas advertencias. fin nota]</note>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
