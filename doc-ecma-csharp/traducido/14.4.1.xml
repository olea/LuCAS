<?xml version="1.0"?>
<clause number="14.4.1" title="Listas de argumentos">
  <paragraph>Cada invocación de miembros de función incluye una lista de argumentos, la cual provee valores actuales o referencias a variables para los parámetros del miembro función. La sintaxis para especificar la lista de argumentos de una invocación a un miembro función depende la categoría del miembro función: <list><list_item> Para constructores de instancia, métodos, y delegados, los argumentos son especificados como una <non_terminal where="14.4.1">lista-de-argumentos</non_terminal>, como esta descrito más adelante. </list_item><list_item> Para propiedades, la lista de argumentos esta vacía cuando se invoca al accesor get, y consiste de la expresión especificada como el operando derecho del operador de asignación cuando se invoca al accesor set. </list_item><list_item> Para eventos, la lista de argumentos consiste de la expresión especificada como el operando derecho del operador += o -=. </list_item><list_item> Para indexadores, la lista de argumentos consiste de expresiones especificadas entre los paréntesis cuadrados en el índice de acceso. Cuando se invoca al accesor set, la lista de argumentos adicionalmente incluye la expresión especificada como el operando derecho del operador de asignación.</list_item><list_item>Para operadores definidos por el usuario, la lista de argumentos consiste de un único operando de el operador unario o los dos operandos del operador binario. </list_item></list></paragraph>
  <paragraph>Los argumentos de propiedades (<hyperlink>17.6</hyperlink>), eventos (<hyperlink>17.7</hyperlink>), indexadores (<hyperlink>17.8</hyperlink>), y operadores definidos por el usuario (<hyperlink>17.9</hyperlink>) son siempre pasados como parámetros por valor (<hyperlink>17.5.1.1</hyperlink>). Parámetros por referencía y output no son soportados por esas categorías de miembros función. </paragraph>
  <paragraph>Los argumentos de un constructor de instancia, método, o invocación de delegado son especificados como una lista-de-argumentos: <grammar_production><name><non_terminal where="14.4.1">lista-de-argumentos</non_terminal></name> : <rhs><non_terminal where="14.4.1">argumento</non_terminal></rhs><rhs><non_terminal where="14.4.1">lista-de-argumentos</non_terminal><terminal>,</terminal><non_terminal where="14.4.1">argumento</non_terminal></rhs></grammar_production><grammar_production><name>argumento</name> : <rhs><non_terminal where="14.14">expresión</non_terminal></rhs><rhs><keyword>ref</keyword><non_terminal where="12.4">referencia-a-variable</non_terminal></rhs><rhs><keyword>out</keyword><non_terminal where="12.4">referencia-a-variable</non_terminal></rhs></grammar_production></paragraph>
  <paragraph>Una <non_terminal where="14.4.1">lista-de-argumentos</non_terminal> consiste de uno o más argumentos, separados por comas. Cada argumento puede tomar una de las siguientes formas: <list><list_item> Una expresión, indicando que el argumento es pasado como un parámetro por valor (<hyperlink>17.5.1.1</hyperlink>). </list_item><list_item> La palabra reservada ref seguida por una <non_terminal where="12.4">referencia-a-variable</non_terminal> (<hyperlink>12.3.3</hyperlink>), indicando que el argumento es pasado como un parámetro por referencia (<hyperlink>17.5.1.2</hyperlink>). Una variable debe ser definitivamente asignada (<hyperlink>12.3</hyperlink>) antes de que puede ser pasado como un parámetro por referencia. Un campo volatile (<hyperlink>17.4.3</hyperlink>) no puede ser pasado como parámetro por referencia.</list_item><list_item> La palabra clave out seguida por una <non_terminal where="12.4">referencia-a-variable</non_terminal> (<hyperlink>12.3.3</hyperlink>), indicando que el argumento es pasado como un parámetro de salida (<hyperlink>17.5.1.3</hyperlink>). Una variable es considerada definitivamente asignada (<hyperlink>12.3</hyperlink>) siguiendo una invocación de miembro de función en la cual la variable es pasada como parámetro de salida. Un campo volatile (<hyperlink>17.4.3</hyperlink>) no puede ser pasado como un parámetro de salida. </list_item></list></paragraph>
  <paragraph>Durante el procesamiento en tiempo de ejecución de una invocación a miembro función (<hyperlink>14.4.3</hyperlink>), las expresiones o referencias a variable de una lista de argumento son evaluadas en orden, de izquierda a derecha, como sigue: <list><list_item> Para un parámetro por valor, la expresión de argumento es evaluada y una conversión implícita (<hyperlink>13.1</hyperlink>) al tipo de parámetro correspondiente es realizado. El valor resultante se convierte en el valor inicial del parámetro por valor en la invocación al miembro función. </list_item><list_item>Para un parámetro por referencia o por salida, la referencia de variable es evaluado y la localidad de almacenamiento resultante se convierte en la localidad de almacenamiento representada por el parámetro en la invocación al miembro función. Si la referencia de variable dado como parámetro de referencia o salida es un elemento arreglo de un <non_terminal where="11.2">tipo-referencia</non_terminal>, un chequeo en tiempo de ejecución es realizado para asegurar que el tipo elemento es identifico al tipo de el parámetro. Si este chequeo falla, una System.ArrayTypeMismatchException es lanzada. </list_item></list></paragraph>
  <paragraph>Métodos, indexadores, y constructores de instancia pueden declarar sus parámetros más-a-la-derecha para ser un arreglo de parámetro (<hyperlink>17.5.1.4</hyperlink>). Dichas miembros función son invocados en su forma normal o en su forma expandida dependiendo de cual sea aplicable (<hyperlink>14.4.2.1</hyperlink>): <list><list_item> Cuando un miembro función con un parámetro de arreglo es invocado en su forma normal, el argumento dado para el parámetro de arreglo debe ser una expresión sencilla del tipo que es implícitamente convertible (<hyperlink>13.1</hyperlink>) para el tipo de parámetro de arreglo. En este caso, el parámetro de arreglo actua precisamente como un parámetro por valor.</list_item><list_item>Cuando un miembro función con un parámetro arreglo es invocado en su forma expandida, la invocación debe especificar cero o más argumentos para el parámetro arreglo, cuando cada argumento es una expresión de un tipo que es implícitamente convertible (<hyperlink>13.1</hyperlink>) para el tipo de elemento del parámetro como arreglo. En este caso, la invocación crea una instancia del tipo de parámetro de arreglo con una longitud correspondiente al número de argumentos, inicializa los elementos de la instancia del arreglo con los valores de argumento dados, y usa las recién creadas instancias como argumento actual. </list_item></list></paragraph>
  <paragraph>Las expresiones de una lista de argumentos son siempre evaluadas en el orden que son escritas. <example>[Ejemplo: Así, el ejemplo <code_example><![CDATA[
class Test  
{  
   static void F(int x, int y, int z) {  
      System.Console.WriteLine("x = {0}, y = {1}, z = {2}", x, y, z);  
   }  
   static void Main() {  
      int i = 0;  
      F(i++, i++, i++);  
   }  
}  
]]></code_example>produce la salida <code_example><![CDATA[
x = 0, y = 1, z = 2  
]]></code_example>fin ejemplo]</example> </paragraph>
  <paragraph>Las reglas de covariancia del arreglo (<hyperlink>19.5</hyperlink>) permiten que un valor de un tipo arreglo A[] sea una referencia a una instancia de un tipo arreglo B[], provisto por una conversión de referencia implícita de B a A. Debido a estas reglas, cuando un elemento de arreglo de un <non_terminal where="11.2">tipo-referencia</non_terminal> es pasado como una referencia o como parámetro de salida, un chequeo en tiempo de ejecución es requerido para asegurar que el tipo de elemento actual del arreglo es idéntico al ese del parámetro. <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
class Test  
{  
   static void F(ref object x) {...}  
   static void Main() {  
      object[] a = new object[10];  
      object[] b = new string[10];  
      F(ref a[0]);    // Ok  
      F(ref b[1]);   // ArrayTypeMismatchException  
   }  
}  
]]></code_example>la segunda invocación de F causa que se lance una System.ArrayTypeMismatchException porque el tipo de elemento actual de b es string y no object. fin ejemplo]</example> </paragraph>
  <paragraph>Cuando un miembro función, con una arreglo como parámetro es invocado en su forma expandida, la invocación es procesada exactamente como si una expresión de creación de arreglo con un inicializador de arreglo (<hyperlink>14.5.10.2</hyperlink>) hubiera sido insertada alrededor de los parámetros expandidos. <example>[Ejemplo: Por ejemplo, dada la declaración <code_example><![CDATA[
void F(int x, int y, params object[] args);  
]]></code_example>las siguientes invocaciones de forma expandida del método <code_example><![CDATA[
F(10, 20);  
F(10, 20, 30, 40);  
F(10, 20, 1, "hello", 3.0);  
]]></code_example>corresponden exactamente a <code_example><![CDATA[
F(10, 20, new object[] {});  
F(10, 20, new object[] {30, 40});  
F(10, 20, new object[] {1, "hello", 3.0});  
]]></code_example>fin ejemplo]</example> En particular, note que un arreglo vacío es creado cuando hay argumentos dados en cero para el parámetro arreglo. </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
