<?xml version="1.0"?>
<clause number="14.6.6" title="Expresiones de moldeo (cast)">
  <paragraph>Una <non_terminal where="14.6.6">expresión-de-moldeo</non_terminal> es usada para explícitamente convertir una expresión a un tipo dado. <grammar_production><name><non_terminal where="14.6.6">expresión-de-moldeo</non_terminal></name> : <rhs><terminal>(</terminal><non_terminal where="11">tipo</non_terminal><terminal>)</terminal><non_terminal where="14.6">expresión-unaria</non_terminal></rhs></grammar_production></paragraph>
  <paragraph>Una <non_terminal where="14.6.6">expresión-de-moldeo</non_terminal> de la forma (T)E, donde T es un tipo y E es una <non_terminal where="14.6">expresión-unaria</non_terminal>, realiza una conversión explícita (<hyperlink>13.2</hyperlink>) del valor de E para tipo T. Si no existe una conversión explícita del tipo de E a T, un error en tiempo de compilación ocurre. De otra forma, el resultado es el valor producido por la conversión explícita. El resultado es siempre clasificado como un valor, inclusive si E denota una variable. </paragraph>
  <paragraph>La gramática para una <non_terminal where="14.6.6">expresión-de-moldeo</non_terminal> lleva a ciertas ambigüedades sintácticas. Por ejemplo, la expresión (x)-y puede ya sea ser interpretada como una <non_terminal where="14.6.6">expresión-de-moldeo</non_terminal> (un moldeo de -y al tipo x) o como una <non_terminal where="14.7">expresión-aditiva</non_terminal> combinada con una  <non_terminal where="14.5.3">expresión-con-paréntesis</non_terminal> (que computa el valor de x - y). </paragraph>
  <paragraph>Para resolver ambigüedades en la <non_terminal where="14.6.6">expresión-de-moldeo</non_terminal>, la siguiente regla existe: Una secuencia de uno o más símbolos (<hyperlink>9.4</hyperlink>) encerrados en paréntesis es considerado el inicio de una <non_terminal where="14.6.6">expresión-de-moldeo</non_terminal> únicamente si al menos uno de lo siguiente es verdadero: <list><list_item> La secuencia de símbolos es gramática correcta para un tipo, pero no para una expresión. </list_item><list_item> La secuencia de símbolos es gramática correcta para un tipo, y el símbolo inmediato seguido por los paréntesis encerrados es el símbolo &quot;~&quot;, el símbolo &quot;!&quot;, el símbolo &quot;(&quot;, un identificador (<hyperlink>9.4.1</hyperlink>), una literal (<hyperlink>9.4.4</hyperlink>), o cualquier palabra reservada (<hyperlink>9.4.3</hyperlink>) excepto as e is. </list_item></list></paragraph>
  <paragraph>
    <note>[Nota: La siguiente regla significa que únicamente si el constructor no es ambiguamente una <non_terminal where="14.6.6">expresión-de-moldeo</non_terminal> este es considerado como una <non_terminal where="14.6.6">expresión-de-moldeo</non_terminal>. fin nota]</note>
  </paragraph>
  <paragraph>El termino &quot;gramática correcta&quot; anterior significa únicamente que la secuencia de símbolos debe conformar a la producción gramatical particular. Si específicamente no se considera el actual significado para cualquier identificador constituyente. Por ejemplo, si x y y son identificadores, entonces x.y es una gramática correcta para un tipo, inclusive si x.y actualmente no denota un tipo. </paragraph>
  <paragraph>
    <note>[Nota: Para la regla de no ambigüedad, sigue que, si x y y son identificadores, (x)y, (x)(y), y (x)(-y) son <non_terminal where="14.6.6">expresiones-de-moldeo</non_terminal>, pero (x)-y no es, inclusive si x identifica un tipo. De cualquier forma, si x es una palabra reservada que identifica un tipo predefinido (como un <keyword>int</keyword>), entonces las cuatro formas son <non_terminal where="14.6.6">expresiones-de-moldeo</non_terminal> (porque una palabra reservada no puede ser una expresión por si misma). fin nota]</note>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, mario.carrion@gmail.com -->
