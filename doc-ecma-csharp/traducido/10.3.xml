<?xml version="1.0"?>
<clause number="10.3" title="Declaraciones">
    <paragraph>Las declaraciones en un programa C# definen los 
        elementos constituyentes del programa. Los programas C# están 
        organizados usando espacios de nombres (<hyperlink>16</hyperlink>), los 
        cuales pueden contener declaraciones de tipos y declaraciones anidadas 
        de espacios de nombres. Las declaraciones de tipos 
        (<hyperlink>16.5</hyperlink>) son usadas para definir clases 
        (<hyperlink>17</hyperlink>), estructurass (<hyperlink>18</hyperlink>), 
        interfaces (<hyperlink>20</hyperlink>), enumeraciones 
        (<hyperlink>21</hyperlink>), y delegados (<hyperlink>22</hyperlink>). 
        El tipo de miembros permitidos en una declaración depende en la forma 
        de declaración del tipo. Por ejemplo, la declaración de una clase puede 
        contener declaración para constantes (<hyperlink>17.3</hyperlink>), 
        campos (<hyperlink>17.4</hyperlink>), métodos 
        (<hyperlink>17.5</hyperlink>), propiedades 
        (<hyperlink>17.6</hyperlink>), eventos (<hyperlink>17.7</hyperlink>), 
        indexadores (<hyperlink>17.8</hyperlink>), operadores 
        (<hyperlink>17.9</hyperlink>), constructores de instancia 
        (<hyperlink>17.10</hyperlink>), destructores 
        (<hyperlink>17.12</hyperlink>), constructores estáticos 
        (<hyperlink>17.11</hyperlink>), y tipos anidados. </paragraph>
    <paragraph> Una declaración define un nombre en el espacio de declaración 
        al que pertece la declaración. Salvo para miembros sobrecargados 
        (<hyperlink>10.6</hyperlink>), es un error en tiempo de compilación el 
        tener dos miembros de igual nombre en el mismo espacio de declaración. 
        De todas formas, no se produce error si el espacio de declaración es un 
        espacio de nombres para el espacio de declaración global y las 
        declaraciones conflictivas están en programas separados. Nunca es 
        posible para un espacio de declaración contener diferentes tipos de 
        miembros con el mismo nombre <example>[Ejemplo: Por ejemplo, un espacio 
        de declaración nunca puede contener un campo y un método con el mismo 
        nombre. fin del ejemplo]</example> 
        </paragraph>
    <paragraph>Hay varios tipos diferentes de espacios de declaración, como se 
        descibe en la siguiente lista. 
        <list>
        <list_item> Dentro de los 
        archivos con el código fuente del programa <non_terminal 
        where="16.4">declaración-miembro(s)-del espacio de nombres 
        </non_terminal>sin estar contenidos en una <non_terminal 
        where="16.2">declaración-de espacio de nombres</non_terminal> son 
        miembros de un único espacio de declaración combinado llamado el 
        espacio de declaración global.</list_item> 
        <list_item> Dentro de los 
        archivos con el código fuente del programa <non_terminal 
        where="16.4">declaración-miembro(s)-de espacio de nombres 
        </non_terminal>dentro de <non_terminal 
        where="16.2">declaración-espcio de nombres</non_terminal>que tienen el
        mismo nombre calificado del espacio de nombres son miembros de un único
        espacio de declaración combinado. </list_item>
        <list_item> Cada clase, estructura o declaración de interfaz crea un
        nuevo espacio de declaración. Los nombres son introducidos en este
        espacio de declaración a través de <non_terminal 
        where="17.2">declaración-miembros-de la(s) clase(s)</non_terminal>, <non_terminal 
        where="18.2">declaración-miembros-de la(s) estructura(s)</non_terminal>
        ó<non_terminal where="20.2">declaración-miembros-de
        interfaz(/ces)</non_terminal>. Salvo para constructores de instancia
        y constructores estáticos sobrecargados, una clase o estructura no puede 
        introducir un miembro con el mismo nombre que la clase o estructura. Una
        clase, estructura o interfaz permite la declaración de métodos
        sobrecargados y de indexadores. Además, una clase o estructura permite
        la declaración de constructores de instancia y operadores sobrecargados
        <example>[Ejemplo: Por ejemplo, una clase, estructura o interfaz puede
        contener múltiples declaraciones de métodos con el mismo nombre, siempre
        y cuando estos métodos difieran en su
        firma(<hyperlink>10.6</hyperlink>). fin ejemplo]</example> Nótese que
        las clases base no contibuyen al espacio de declaración de una clase, y
        que las interfaces base no contrubuyen al espacio de declaración de una
        interfaz. Sin embargo, se le permite a una clase derivada o interfaz
        declarar un miembro con el mismo nombre que el miembro heredado. Tal
        miembro se dice que esconde al miembro heredado. </list_item>
        <list_item> 
        Cada declaración de una enumeración crea un nuevo espacio de
        declaración. Los nombres son introducidos en este espacio de declaración
        a través de <non_terminal 
        where="21.3">declaración-miembros-de una(s) enumeración(es)</non_terminal>. 
        </list_item>
        <list_item> Cada bloque o <non_terminal 
        where="15.7.2">bloque-switch</non_terminal> crea un espacio de
        declaración diferente para variables locales. Los nombres son
        introducidos en este espacio de declaración a través de <non_terminal 
        where="15.5.1">declaración(es)-de variable(s)-local(es)</non_terminal>.
        Si un bloque es el cuerpo de un constructor de instancia, método, o
        declaración de operador, o una propiedad get o set para la declaración
        de un indexador, los parámetros declarados en tal declaración son
        miembros del espacio local de las variables locales del bloque. El
        espacio de declaración de variables locales de un bloque incluye
        cualquier bloque anidado. Por lo tanto, en un bloque anidado no es
        posible declarar una variable local con el mismo nombre que la variable
        local del bloque superior. 
        . </list_item>
        <list_item> Cada bloque o <non_terminal where="15.7.2">bloque-switch</non_terminal> 
        crea un espacio de declaración separado para las etiquetas. Los nombres
        son introducidos en este espacio de decalración a través de  <non_terminal 
        where="15.4">sentencia(s)-etiquetada(s)</non_terminal>, y los nombres
        son referidos a través de <non_terminal 
        where="15.9.3">sentencia(s)-goto</non_terminal>. El espacio de
        declaración de etiquetas de un bloque incluye cualquier bloque anidado.
        Poe esto, en un bloque anidado no es
        posible declarar una etiqueta con el mismo nombre que la etiqueta del bloque
        superior. </list_item></list>
        
        </paragraph>
        
  <paragraph>El orden textual en el que los nombres son declarados no tiene
  importacia en general. En particualer, el orden textual no es significante
  para las declaraciones y suo de espacios de nombres, constantes, métodos,
  propiedades, eventos, indexadores, operadores, constructores de instancia,
  destructores, constructores estáticos, y tipo. El orden de declaración es
  significante en los siguientes casos
    <list><list_item>El orden de declaración para la declaración de campos y
    variables locales determina el orden en el que se producen sus
    (posibles) inicializaciones.
    </list_item>
    <list_item>Las variables locales deben ser definidas antes de que sean
    usadas(<hyperlink>10.7</hyperlink>). 
    </list_item>
    <list_item> Orden de declaración de los miembros de una enumeración
    (<hyperlink>21.3</hyperlink>) es significante cuando los valores de las
    <non_terminal where="14.15">expresiones-constantes</non_terminal> son
    omitidas. </list_item></list></paragraph>
  <paragraph>
    <example>[Ejemplo: El espacio de declaración de un espacio de nombres es
    &quot;de final abierto&quot;, y dos declaraciones de espaico de nombres con
    el mismo nombre completo influyen en el mismo espacio de declaración. Por
    ejemplo <code_example><![CDATA[
namespace Megacorp.Data  
{  
   class Cliente  
   {  
      ...  
   }  
}  
namespace Megacorp.Data  
{  
   class Orden  
   {  
      ...  
   }  
}  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>Las dos declaraciones de espacio de nombres influyen en el mismo
    espaioc de declaración, en este caso declarando de clases con el nombre
    completo  Megacorp.Data.Cliente y Megacorp.Data.Orden. Porque estas dos
    declaraciones influyen en el mismo espacio de declaración, hibiera sido un
    error en tiempo de compilación que cada espacio de nombres contuviera la
    declaración de una clase con el mismo nombre. fin ejemplo]</example>
  </paragraph>
  <paragraph>
    <note>[Nota: Como se especifica arriba, el espacio de declaración de un
    bloque incluye bloques anidados. Por ello, en el siguiente ejemplo, los
    métodos F y G producen un error en tiempo de compilación porque el nombre i
    es declarado en el bloque exterior y no puede ser redeclarado en el bloque
    interior. De todas formas, los métodos H e I son válidos pués las dos i's
    son declaradas en bloques separados y no anidados <code_example><![CDATA[
class A  
{  
   void F() {  
      int i = 0;  
      if (true) {  
         int i = 1;        
      }  
   }  
   void G() {  
      if (true) {  
         int i = 0;  
      }  
      int i = 1;          
   }  
   void H() {  
      if (true) {  
         int i = 0;  
      }  
      if (true) {  
         int i = 1;  
      }  
   }  
   void I() {  
      for (int i = 0; i < 10; i++)  
      H();  
      for (int i = 0; i < 10; i++)  
      H();  
   }  
}  
]]></code_example>fin nota]</note>
  </paragraph>
</clause>

<!-- Traducción Fabian Seoane fabian@fseoane.net -->
