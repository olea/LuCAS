<?xml version="1.0"?>
<clause number="14.7.3" title="Operador de módulo">
  <paragraph>Para una operación de la forma x % y, la resolución de sobrecarga de operador binario (<hyperlink>14.2.4</hyperlink>) es aplicada para seleccionar una implementación de operador específica. Los operandos son convertidos a los tipos de parámetros del operador seleccionado, y el tipo del resultado es el tipo de retorno del operador. </paragraph>
  <paragraph>Los operadores módulo predefinidos son listados a continuación. Todos los operadores computan el valor sobrante de la división entre x y y. <list><list_item> Módulo entero: <code_example><![CDATA[
int operator %(int x, int y);  
uint operator %(uint x, uint y);  
long operator %(long x, long y);  
ulong operator %(ulong x, ulong y);  
]]></code_example>El resultado de x % y es el valor producido por x - (x / y) * y. Si y es cero, una System.DivideByZeroException es lanzada. El valor sobrante jamás causa un sobreflujo. </list_item><list_item> Módulo de punto-flotante: <code_example><![CDATA[
float operator %(float x, float y);  
double operator %(double x, double y);  
]]></code_example>La siguiente tabla lista los resultados de todas las posibles combinaciones de los valores finitos no-cero, ceros, infinitos, y NaN's. En la tabla, x y y son valores positivos finitos. z es el resultado de x % y y es computado como x - n * y, donde n es el entero posible mayor que es menor o igual a x / y. Este método de computar el sobrante es análogo para ser usado a operandos enteros, pero difiere de la definición IEEE 754 (en la cual n es el entero cercano a x / y). <table_line>+y <unicode>150</unicode>y +0 <unicode>150</unicode>0 +<infinity/> <unicode>150</unicode><infinity/> NaN </table_line>
<table_line>+x +z +z NaN NaN x x NaN </table_line>
<table_line><unicode>150</unicode>x <unicode>150</unicode>z <unicode>150</unicode>z NaN NaN <unicode>150</unicode>x <unicode>150</unicode>x NaN </table_line>
<table_line>+0 +0 +0 NaN NaN +0 +0 NaN </table_line>
<table_line><unicode>150</unicode>0 <unicode>150</unicode>0 <unicode>150</unicode>0 NaN NaN <unicode>150</unicode>0 <unicode>150</unicode>0 NaN </table_line>
<table_line>+<infinity/> NaN NaN NaN NaN NaN NaN NaN </table_line>
<table_line><unicode>150</unicode><infinity/> NaN NaN NaN NaN NaN NaN NaN </table_line>
<table_line>NaN NaN NaN NaN NaN NaN NaN NaN </table_line>
</list_item><list_item> Decimal remainder: <code_example><![CDATA[
decimal operator %(decimal x, decimal y);  
]]></code_example>Si el valor del operando de la derecha es cero, una System.DivideByZeroException es lanzada. Si el valor resultante es muy largo para ser representado en un formato <keyword>decimal</keyword>, una System.OverflowException es lanzada. Si el valor es muy pequeño para ser representando en forma <keyword>decimal</keyword>,  el resultado es cero.  La escala del resultado, antes de cualquier redondeo, es la misma escala de y, y el signo del resultado, si no es cero, es la misma que la de x. El sobrante de Decimal es equivalente a usar el operador módulo del tipo. </list_item></list></paragraph>
</clause>
<!-- Traducido por Mario Carrión, mario.carrion@gmail.com -->
