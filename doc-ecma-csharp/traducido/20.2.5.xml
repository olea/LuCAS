<?xml version="1.0"?>
<clause number="20.2.5" title="Acceso a miembros de interfaz">
  <paragraph>Los miembros de interfaz se acceden a través de expresiones de acceso a miembros (<hyperlink>14.5.4</hyperlink>) y acceso a indexadores (<hyperlink>14.5.6.2</hyperlink>) en la forma I.M e I[A], donde I es la instancia de un tipo interfaz, M es un método, propiedad o evento de ese tipo interfaz, y A es una lista de argumentos de indexador. </paragraph>
  <paragraph>Para interfaces que son estrictamente de herencia simple (cada interfaz en la cadena de herencia tiene exactamente cero o una interfaz base directa), los efectos de las reglas de búsqueda de miembro (<hyperlink>14.3</hyperlink>), invocación de método (<hyperlink>14.5.5.1</hyperlink>) y acceso a indexador (<hyperlink>14.5.6.2</hyperlink>) son exactamente los mismos que para clases y estructuras: los miembros más derivados ocultan aquellos miembros menos derivados con el mismo nombre o firma. Sin embargo, para interfaces con herencia múltiple, pueden ocurrir ambigüedades cuando dos o más interfaces base no relacionadas declaran miembros con el mismo nombre o firma. Esta sección muestra varios ejemplos de tales situaciones. En todos los casos, se pueden usar cast explícitos para resolver las ambigüedades. </paragraph>
  <paragraph>
    <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
interface IList  
{  
   int Count { get; set; }  
}  
interface ICounter  
{  
   void Count(int i);  
}  
interface IListCounter: IList, ICounter {}  
class C  
{  
   void Test(IListCounter x) {  
      x.Count(1);      // Error  
      x.Count = 1;          // Error  
      ((IList)x).Count = 1;   // Ok, invoca IList.Count.set  
      ((ICounter)x).Count(1);  // Ok, invoca ICounter.Count  
   }  
}  
]]></code_example>las dos primeras sentencias causan errores en tiempo de compilación porque la búsqueda de miembro (<hyperlink>14.3</hyperlink>) de Count en IListCounter es ambigua. Como se ilustra en el ejemplo, la ambigüedad se resuelve convirtiendo x al tipo de interfaz base apropiado. Estas conversiones no tienen costo en tiempo de ejecución - meramente consisten en ver la instancia como un tipo menos derivado en tiempo de compilación. fin del ejemplo]</example>
  </paragraph>
  <paragraph>
    <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
interface IInteger  
{  
   void Add(int i);  
}  
interface IDouble  
{  
   void Add(double d);  
}  
interface INumber: IInteger, IDouble {}  
class C  
{  
   void Test(INumber n) {  
      n.Add(1);      // Error, los dos métodos Add son aplicables  
      n.Add(1.0);     // Ok, solo IDouble.Add es aplicable
      ((IInteger)n).Add(1);  // Ok, solo IInteger.Add es un candidato
      ((IDouble)n).Add(1);   // Ok, solo IDouble.Add es un candidato
   }  
}  
]]></code_example>la invocación de n.Add(1) es ambigua porque una invocación de método (<hyperlink>14.5.5.1</hyperlink>) requiere que todos los métodos candidatos sobrecargados estén declarados en el mismo tipo. Sin embargo, la invocación n.Add(1.0) está permitida porque solo IDouble.Add es aplicable. Cuando se insertan conversiones explícitas, hay solo un método candidato, y por tanto no hay ambigüedad. fin del ejemplo]</example>
  </paragraph>
  <paragraph>
    <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
interface IBase  
{  
   void F(int i);  
}  
interface ILeft: IBase  
{  
   new void F(int i);  
}  
interface IRight: IBase  
{  
   void G();  
}  
interface IDerived: ILeft, IRight {}  
class A  
{  
   void Test(IDerived d) {  
      d.F(1);      // Invoca ILeft.F  
      ((IBase)d).F(1);   // Invoca IBase.F  
      ((ILeft)d).F(1);   // Invoca ILeft.F  
      ((IRight)d).F(1);  // Invoca IBase.F  
   }  
}  
]]></code_example>el miembro IBase.F está oculto por el miembro ILeft.F. Así, 
la invocación d.F(1) elige ILeft.F, a pesar de que IBase.F aparece no escondida en el camino de acceso que llega a través de IRight. </example>
  </paragraph>
  <paragraph>
    <example>La regla intuitiva para el ocultamiento en interfaces con herencia múltiple es simplemente así: si un miembro es escondido en cualquier camino de acceso, está escondido en todos los caminos de acceso. Como el camino de acceso desde IDerived hacia ILeft hacia IBase esconde IBase.F, el miembro está también escondido en el camino de acceso desde IDerived hacia IRight hacia IBase. fin del ejemplo]</example>
  </paragraph>
</clause>
<!-- traducción Rodolfo Campero, rodolfo.campero@gmail.com -->
