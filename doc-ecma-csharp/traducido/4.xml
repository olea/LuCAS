<?xml version="1.0" encoding="utf-8"?>
<clause number="4" title="Definiciones">
  <paragraph>Para los propósitos de este estándar ECMA, se aplican 
  las siguientes difiniciones. Los otros términos están definidos 
  donde aparezcan con letra cursiva en el lado izquierdo de una regla 
  sintáctica. Los términos explícitamente definidos en este estándar 
  ECMA no tienen porqué significar lo mismo que términos similares definidos 
  en otros lugares. Términos no definidos en este estándar ECMA deben
  ser interpretados de acuerdo con ISO 31.11. 
  </paragraph>
  

  <paragraph><term_definition>Aplicaciones</term_definition> - se 
  refieren a un ensamblado que tiene un punto de entrada  
  (<hyperlink>10.1</hyperlink>). Cuando una aplicación se
  ejecuta, un se crea un nuevo dominio de aplicación. Distintas
  instancias de una aplicación pueden existir en la misma máquina
  al mismo tiempo, y cada una con su propio dominio de aplicación 
  </paragraph> 

  <paragraph><term_definition>Dominio de aplicacion</term_definition> -una entidad que permite el aislamiento de aplicaciones actuando como un contenedor para los estados de las aplicaciones. Un dominio de aplicaciones actúa como un contenedor para los tipos definidos en la aplicación y en la librería de clases que utilice. Los tipos cargados en una dominio de aplicación son distintos del mismo tipo cargado en otro dominio de aplicación. Por ejemplo, cada dominio de aplicación tiene su propia copia de variables estáticas para estos tipos, y un constructor estático para un tipo es ejecutado como máximo una vez por cada dominio de aplicación. Las implementaciones son libres de suministrar un mecanismo para la creación y destrucción de dominio de aplicaciones dependientes de la implementación. </paragraph>
  
  <paragraph><term_definition>Argumento</term_definition> -una expresión en una lista separada por comas y acotada por paréntesis dentro de un método o una expresión de llamada al constructor de una instancia. También es conocido como un argumento </paragraph> 
  
  <paragraph><term_definition>Ensamblado</term_definition> -se refiere a uno o varios ficheros que son devueltos por el compilador como resultado de la compilación de un programa. Por lo que un ensamblado es un conjunto configurado de módulos de código que se pueden cargar junto con otros recursos, tales que juntos implementen alguna funcionalidad. Un ensamblado puede contener tipos, el código ejecutable usado para implementar dichos tipos, y referencias a otros ensamblados. La representación física de un ensamblado no queda definida por esta especificación. En esencia, un ensamblado es la salida del compilador</paragraph>
  
  <paragraph><term_definition>Comportamiento</term_definition> -aspecto externo o acción. </paragraph>
  
  <paragraph><term_definition>Comportamiento, dependiente de la implementación</term_definition> -comportamiento no especificado en el que cada implementación describe su propia elección.</paragraph>
  
  <paragraph><term_definition>Comportamiento, no definido</term_definition> -comportamiento para el cual este estándar ECMA no impone requerimientos. </paragraph>
  
  <paragraph><term_definition>Comportamiento, no especificado</term_definition> -comportamiento donde este estándar ECMA ofrece dos o más posibilidades y no impone ningún requerimiento sobre cuál es elegido en cada instancia. </paragraph>
  
  <paragraph><term_definition>Librería de clases</term_definition> -se refiere a un ensamblado que puede ser usado por otros ensamblados. El uso de la librería de clases no provoca la creación de un nuevo dominio de aplicación. En su lugar, una librería de clases es cargada en el mominio de aplicación que la usa. Por ejemplo, cuando una aplicación utiliza una librería de clases, esa librería de clases es cargada en dominio de la aplicación para esa aplicación. Si la aplicación utiliza una librería de clases A que a su vez utiliza una librería de clases B, entonces ambas A y B son cargadas en el dominio de la aplicación. </paragraph>
  
  <paragraph><term_definition>Mensaje de diagnóstico</term_definition> -un mensaje de salida definido en la implementación </paragraph> 
  
  <paragraph><term_definition>Error en tiempo de compilación</term_definition> -un error producido durante la traducción de programa </paragraph>
  
  <paragraph><term_definition>Excepción</term_definition> -un error producido por una condición que se sale fuera del comportamiento esperado. </paragraph>
  
  <paragraph><term_definition>Implementación</term_definition> -conjunto particular de software ( ejecutándose en un entorno de traducción particular bajo opciones de control particulares) que produce traducciones de programas para, y soporta la ejecución de métodos en un entorno de ejecución particular. </paragraph>
  
  <paragraph><term_definition>Espacio de nombres</term_definition> -un sistema de organización lógica que ofrece una forma de presentar los elementos de un programa que están expuestos a otros programas. </paragraph> 
  
  <paragraph><term_definition>Parámetros</term_definition> -una variable declarada como parte de un método, constructor de instancia, o definición de indexeador, el cuál adquiere un valor a la entrada a dicho método. También es conocido como parámetro formal. </paragraph>
  
  <paragraph><term_definition>Programa</term_definition> -se refiere a uno o varios ficheros fuente que están presentes al compilador. En esencia, un programa es la entrada del compilador. </paragraph>
  
  <paragraph><term_definition>Programa válido</term_definition> -un programa en C# estructurado de acuerdo con las reglas sintácticas y semánticas. </paragraph>

  <paragraph><term_definition>Iniciación del programa</term_definition> -la ejecución de una aplicación. </paragraph>
  
  <paragraph><term_definition>Prácticas recomendadas</term_definition> -especificaciones que son fuertemente recomendadas por ser intención del estándar, pero pueden no ser prácticas para algunas implementaciones. </paragraph>
  
  <paragraph><term_definition>Código fuete</term_definition> -una secuencia ordenada de caractéres Unicode. Típicamente los ficheros que contien el código fuente están en correspondencia de uno-a-uno con los ficheros en el sistema de ficheros, pero esta correspondencia es requerida </paragraph>
  
  <paragraph><term_definition>Código no seguro</term_definition> -código que tiene permisos para llevar a cabo operaciones de bajo nivel, como declarar y operar con punteros, hacer conversiones entre punteros y tipos integrales, y obtener la dirección de una variables. Tales operaciones proporcionan funcionalidades tales como interactuar con el sistema operativo, acceder a dispositivos apuntados en memoria, o implementar algoritmos en los que el tiempo de ejecución es crucial. </paragraph> 
  
  <paragraph><term_definition>Atención, tiempo de compilación</term_definition> -un mensaje informativo generado durante la traducción del programa, que está destinado a identificar un uso potencialmente cuestionable de un elemento del programa. </paragraph>
  
</clause>
