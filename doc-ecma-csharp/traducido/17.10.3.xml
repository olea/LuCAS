<?xml version="1.0"?>
<clause number="17.10.3" title="Ejecución del constructor">
  <paragraph>Inicializadores de variables son transformados a sentencias de asignación, y esas sentencias de asignación son ejecutadas antes de la invocación de la instancia del constructor de la clase base. Esta ordenación asegura que todos los campos de instancia sean inicializados por sus inicializadores de variable antes que cualquier sentencia que tenga acceso a esa instancia sea ejecutada. <example>[Ejemplo: Por ejemplo: <code_example><![CDATA[
using System;  
class A  
{  
   public A() {  
      PrintFields();  
   }  
   public virtual void PrintFields() {}  
}  
class B: A  
{  
   int x = 1;  
   int y;  
   public B() {  
      y = -1;  
   }  
   public override void PrintFields() {  
      Console.WriteLine("x = {0}, y = {1}", x, y);  
   }  
}  
]]></code_example></example></paragraph>
  <paragraph>
    <example>Cuando new B() es usando para crear una instancia de B, la siguiente salida es producida: <code_example><![CDATA[
x = 1, y = 0  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>El valor de x es 1 porque el inicializador de variable es ejecutado antes que la instancia del constructor de la clase base sea invocado. De cualquier forma, el valor de y es 0 (el valor por defecto es un <keyword>int</keyword>) porque esta asignación a y no es ejecutado hasta que el constructor de la clase base regrese.</example>
  </paragraph>
  <paragraph>
    <example>Es útil pensar que los inicializadores de variables de instancia e inicializadores de constructor son sentencias que son automáticamente insertadas antes del <non_terminal where="17.10">cuerpo-del-constructor</non_terminal>. El ejemplo <code_example><![CDATA[
using System;  
using System.Collections;  
class A  
{  
   int x = 1, y = -1, count;  
   public A() {  
      count = 0;  
   }  
   public A(int n) {  
      count = n;  
   }  
}  
class B: A  
{  
   double sqrt2 = Math.Sqrt(2.0);  
   ArrayList items = new ArrayList(100);  
   int max;  
   public B(): this(100) {  
      items.Add("default");  
   }  
   public B(int n): base(n - 1) {  
      max = n;  
   }  
}  
]]></code_example>contiene varios inicializadores de variables; también contiene inicializadores de constructor de las formas (base y this). El ejemplo corresponde al código mostrado abajo, cuando cada comentario indica una sentencia automáticamente insertada (la sintaxis usada para las invocaciones de constructor insertadas automáticamente no son validas, pero cercanamente sirven para ilustrar el mecanismo). <code_example><![CDATA[
using System.Collections;  
class A  
{  
   int x, y, count;  
   public A() {  
      x = 1;         // Inicializador de variable
      y = -1;         // Inicializador de variable
      object();        // Invoca al constructor object()
      count = 0;  
   }  
   public A(int n) {  
      x = 1;         // Inicializador de variable
      y = -1;         // Inicializador de variable
      object();        // Invoca al constructor object()
      count = n;  
   }  
}  
class B: A  
{  
   double sqrt2;  
   ArrayList items;  
   int max;  
   public B(): this(100) {  
      B(100);         // Invoca al constructor B(int)
      items.Add("default");  
   }  
   public B(int n): base(n - 1) {  
      sqrt2 = Math.Sqrt(2.0);   // Inicializador de variable
      items = new ArrayList(100);  // Inicializador de variable
      A(n - 1);        // Invoca al constructor A(int)
      max = n;  
   }  
}  
]]></code_example>fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
