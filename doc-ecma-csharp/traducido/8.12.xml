<?xml version="1.0"?>
<clause number="8.12" title="Espacios de nombres y ensamblados" informative="true">
  <paragraph>Los programas presentados hasta ahora han sido autocontenidos
  excepto para dependencias en unas pocas clases proporcionadas por el sistema,
  como System.Console. Sin embargo, es mucho más común para aplicaciones
  completas consistir en varias piezas diferentes, cada una compilada por separado. Por
  ejemplo, una aplicación corporativa puede depender de distintos componentes,
  incluyendo algunos desarrollados internamente y otros comprados a terceros. </paragraph>
  
  <paragraph>Los espacios de nombres y los ensamblados hacen posible este
  sistema basado en componentes. Los espacios de nombres proporcionan un sistema
  de organización lógico. Los espacios de nombres son usados tanto como sistema
  de organización &quot;interna&quot; para un programa, como un sistema sisitema
  de organización &quot;externa&quot; -una forma de presentar los elementos de
  un programa para ser expuestos a otros programamas. </paragraph>
  
  <paragraph>Los ensamblados son usados para en empaquetamiento físico y el
  despliegue. Un ensamblado puede contener tipos, el código ejecutable usado
  para implementar dichos tipos, y referencias a otros ensamblados. </paragraph>
  
  <paragraph>Para demostrar el uso de espacios de nombres y ensamblados, esta
  sección vuelve a implementar el programa &quot;hola mundo&quot; presentado
  anteriormente, y lo divide en dos piezas, una librería de clases que
  proporciona el mensaje y la aplicación de consola para imprimirlo</paragraph>
  <paragraph>Esta librería de clases contendrá una única clase llamada HolaMEnsaje. El ejemplo <code_example><![CDATA[
// HolaLibreria.cs  
namespace CSharp.Introduccion  
{  
   public class HolaMensaje  
   {  
      public string Mensaje {  
         get {  
            return "hola mundo";  
         }  
      }  
   }  
}  
]]></code_example>muestra la clase HolaMensaje en un espacio de nombres llamado CSharp.Introduccion. La clase HolaMensaje proporciona una propiedad de solo lectura llamada Mensaje. Los espaciones de nombres se puede anidar, y la declaración<code_example><![CDATA[
namespace CSharp.Introduccion  
{...}  
]]></code_example>es una forma corta de escribir dos niveles de anidamiento de espacios de nombres: <code_example><![CDATA[
namespace CSharp  
{  
   namespace Introduccion  
   {...}  
}   
]]></code_example></paragraph>
  <paragraph>El siguiente paso en la componentización de &quot;hola mundo&quot; es escribir una aplicación consola que use la clase HolaMEnsaje. Se podría usar el nombre completo de la clase CSharp.Introduccion.HolaMensaje, pero este nombre es bastante largo y poco manejable. Un forma más s fÃ¡cil es usar una directiva using, que hace posible usar todos los tipos en el espacio de nombres sin usar la ruta completa. El ejemplo<code_example><![CDATA[
// HolaApp.cs  
using CSharp.Introduccion;  
class HolaApp  
{  
   static void Main() {  
      HolaMensaje m = new HolaMensaje();  
      System.Console.WriteLine(m.Mensaje);  
   }  
}  
]]></code_example>muestra una directiva usign que se refiere al espacio de nombres CSharp.Introduccion. Las ocurrencias de HolaMensaje son una forma corta de escribir CSharp.Introduccion.HolaMensaje. </paragraph>
  <paragraph>C# también permite la definición y uso de alias. Una
  directiva de alias using define un alias para un tipo. Dichos alias
  pueden ser útiles en situaciones en las que ocurren colisiones de
  nombres entre dos librerías de clases, o cuando se está usando un
  pequeño número de tipos de un espacio de nombres mucho más s largo. El ejemplo<code_example><![CDATA[
using MensajeFuente = CSharp.Introduccion.HolaMensaje;  
]]></code_example>, muestra una directiva de alias using que define MensajeFuente como un alias para la clase HolaMensaje</paragraph>

  <paragraph>El código que hemos escrito puede ser compilado en una librería de clases que contiene la clase HolaMensaje y una aplicación que contiene la clase HolaApp. Los detalles de esta compilación pueden depender del compilador. Un compilador por línea de comandos puede permitir la compilación de una librería de clases y de una aplicación que use esa librería con las siguientes invocaciones de la línea de comandos: <code_example><![CDATA[
msc -target:library HolaLibreria.cs   
csc -reference:HolaLibreria.dll HolaApp.cs  
]]></code_example>lo cual produce una librería de clases llamada HolaLibreria.dll y una aplicación llamada HolaApp.exe. </paragraph>
</clause>


<!-- Traducción: Fabian Seoane fseoane@wanadoo.es -->
