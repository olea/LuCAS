<?xml version="1.0"?>
<clause number="8.7.3" title="Métodos" informative="true">
  <paragraph>Un método es un miembro que implementa una computación ó acción que puede ser realizada por
  un objeto o clase. Los métodos tienen una lista (posiblemente vacía) de parámetros formales, un valor devuelto
  ( a menos que el <non_terminal where="17.5">tipo-de-retorno</non_terminal> sea <keyword>void</keyword>), 
  y pueden ser estáticos (static) o no-estáticos (non-static). Los métodos no estáticos, que también son
  llamados métodos instancia, son accedidos a traves de instancias de la clase. El ejemplo <code_example><![CDATA[
using System;  
public class Stack  
{  
   public static Stack Clone(Stack s) {...}  
   public static Stack Flip(Stack s) {...}  
   public object Pop() {...}  
   public void Push(object o) {...}  
   public override string ToString() {...}  
   ...  
}  
class Test  
{  
   static void Main() {  
      Stack s = new Stack();  
      for (int i = 1; i < 10; i++)  
      s.Push(i);  
      Stack flipped = Stack.Flip(s);  
      Stack cloned = Stack.Clone(s);  
      Console.WriteLine("Original stack: " + s.ToString());  
      Console.WriteLine("Flipped stack: " + flipped.ToString());  
      Console.WriteLine("Cloned stack: " + cloned.ToString());  
   }  
}  
]]></code_example>muestra una pila (Stack) que tiene varios método estáticos (Clone y Flip) y algunos 
  métodos instancia (Pop, Push y ToString ). </paragraph>

  <paragraph>Los métodos pueden ser sobrecargados, lo cual significa que múltiples método pueden pueden
  tener el mismo nombre siempre y cuando tenga una signatura única. La signatura de un método consiste
  en un nombre del método y el numero, modificadores y tipos de sus parámetros formales. La signatura de 
  un método no incluye el tipo que devuelve. El ejemplo <code_example><![CDATA[
using System;  
class Test  
{  
   static void F() {  
      Console.WriteLine("F()");  
   }  
   static void F(object o) {  
      Console.WriteLine("F(object)");  
   }  
   static void F(int value) {  
      Console.WriteLine("F(int)");  
   }  
   static void F(ref int value) {  
      Console.WriteLine("F(ref int)");  
   }  
   static void F(int a, int b) {  
      Console.WriteLine("F(int, int)");  
   }  
   static void F(int[] values) {  
      Console.WriteLine("F(int[])");  
   }  
   static void Main() {  
      F();  
      F(1);  
      int i = 10;  
      F(ref i);  
      F((object)1);  
      F(1, 2);  
      F(new int[] {1, 2, 3});  
   }  
}  
]]></code_example>muestra una clse con varios métodos llamados F. 
La salida producida es <code_example><![CDATA[
F()  
F(int)  
F(ref int)  
F(object)  
F(int, int)  
F(int[])  
]]></code_example></paragraph>
</clause>

<!-- Traducción Fabian Seoane fabian@fseoane.net -->
