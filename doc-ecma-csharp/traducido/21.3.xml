<?xml version="1.0"?>
<clause number="21.3" title="Miembros de Enumeración">
  <paragraph>El cuerpo de la declaración de un tipo enumeración define cero o más miembros de enumeración, las cuales son llamados constantes del tipo enumeración. Dos miembros de enumeración no pueden tener el mismo nombre. <grammar_production><name><non_terminal where="21.3">declaración-de-miembros-de-una-enumeración</non_terminal></name> : <rhs><non_terminal where="21.3">declaración-de-miembros-de-una-enumeración</non_terminal></rhs><rhs><non_terminal where="21.3">declaración-de-miembros-de-unas-enumeraciones</non_terminal><terminal>,</terminal><non_terminal where="21.3">declaración-de-miembros-de-una-enumeración</non_terminal></rhs></grammar_production><grammar_production><name><non_terminal where="21.3">declaración-de-miembros-de-una-enumeración</non_terminal></name> : <rhs><non_terminal where="24.2">atributos</non_terminal><opt/><non_terminal where="9.4.2">identificador</non_terminal></rhs><rhs><non_terminal where="24.2">atributos</non_terminal><opt/><non_terminal where="9.4.2">identificador</non_terminal><terminal>=</terminal><non_terminal where="14.15">expresión-constante</non_terminal></rhs></grammar_production></paragraph>
  <paragraph>Cada miembro de enumeración tiene asociado un valor constante. El tipo de este valor constante es el tipo subyacente para la enumeración que lo conteniene. El valor constante de cada miembro de enumeración debe estar en el rango del tipo subyacente para la enumeración. <example>[Ejemplo: El Ejemplo <code_example><![CDATA[
enum Color: uint  
{  
   Red = -1,  
   Green = -2,  
   Blue = -3  
}  
]]></code_example>resulta en un error en tiempo de compilación porque los valores constantes -1, -2, y -3 no están en el rango del tipo numérico subyacente <keyword>uint</keyword>. Fin Ejemplo]</example> </paragraph>
  <paragraph>Multiples miembros de enumeración pueden compartir el mismo valor asociado. <example>[Ejemplo: El Ejemplo <code_example><![CDATA[
enum Color   
{  
   Red,  
   Green,  
   Blue,  
   
   Max = Blue  
}  
]]></code_example>muestra una enumeración que tiene dos miembros de enumeración-Blue y Max-que tienen el mismo valor asociado. Fin Ejemplo]</example> </paragraph>
  <paragraph>El valor asociado de un miembro de enumeración puede ser asignado ya sea implicita o explicitamente. Si la declaración del miembro de enumeración tiene un inicializador de <non_terminal where="14.15">expresión-constante</non_terminal>, el valor de esa expresión constante, implicitamente convertida al tipo subyacente de la enumeración, es el valor asociado del miembro de enumeración. Si la declaración de un miembro de enumeración no tiene inicializador, su valor asociado es establecido implicitamente, como sigue: <list><list_item> Si el miembro de la enumeración es el primer miembro de enumeración declarado en el tipo enumeración, su valor asociado es cero. </list_item><list_item> Si no, el valor asociado del miembro de enumeración es obtenido incrementando el valor asociado del miembro de enumeración que textualmente precede en uno. Este valor incrementado debe estar entre el rango de valores que puede ser representado por el tipo subyacente. </list_item></list></paragraph>
  <paragraph>
    <example>[Ejemplo: El Ejemplo <code_example><![CDATA[
using System;  
enum Color  
{  
   Red,  
   Green = 10,  
   Blue  
}  
class Test  
{  
   static void Main() {  
      Console.WriteLine(StringFromColor(Color.Red));  
      Console.WriteLine(StringFromColor(Color.Green));  
      Console.WriteLine(StringFromColor(Color.Blue));  
   }  
   static string StringFromColor(Color c) {  
      switch (c) {  
         case Color.Red:   
         return String.Format("Red = {0}", (int) c);  
         case Color.Green:  
         return String.Format("Green = {0}", (int) c);  
         case Color.Blue:  
         return String.Format("Blue = {0}", (int) c);  
         default:  
         return "Invalid color";  
      }  
   }  
}  
]]></code_example>imprime los nombres de los miembros de la enumeración y sus valores asociados. La salida es: <code_example><![CDATA[
Red = 0  
Green = 10  
Blue = 11  
]]></code_example>por las siguientes razones: <list><list_item> el miembro de enumeración Red es automáticamente asignado al valor cero (debido a que no tiene inicializador y es el primer miembro de la enumeración); </list_item><list_item> el miembro de la enumeración Green es explicitamente asignado al valor 10; </list_item><list_item> y el miembro de enumeración Blue es automáticamente asignado al valor uno más que el miembro que textualmente precede. Fin Ejemplo]</list_item></list></example>
  </paragraph>
  <paragraph>El valor asociado de un miembro de enumeración no puede usar, directa o inderectamente, el valor de su propio miembro asociado de enumeración. Con excepción de esta restricción de circularidad, inicializadores de miembros de enumeración puede libremente referir a otros inicializadores de miembros de enumeración, sin importar su posición textual. Dentro de un inicializador de miembro de enumeración , los valores de otros miembros de enumeración se tratan siempre como conociendo el tipo de su tipo subyacente, así que las conversiones no son necesarias cuando se refieran a otro miembros de la enumeración. </paragraph>
  <paragraph>
    <example>[Ejemplo: El Ejemplo <code_example><![CDATA[
enum Circular  
{  
   A = B,  
   B  
}  
]]></code_example>resulta en un error en tiempo-de-compilación porque la declaración de A y B son circulares. A depende de B explicitamente, y B depende de A implicitamente. Fin Ejemplo]</example>
  </paragraph>
  <paragraph>Los miembros de enumeracion son llamados y tienen ámbito de forma exactamente análoga a los campos dentro de las clases. El ámbito de un miembro de enumeración es el cuerpo del tipo enumeración que lo contiene. Dentro de ese ámbito, los miembros de enumeración pueden ser referenciados por su nombre simple. Desde el resto del código, el nombre de un miembro de enumeración debe ser calificado con el nombre de su tipo enumeración. Los miembros de enumeración no tienen ninguna accesibilidad declarada - un miembro de enumeración es accesible si el tipo enumeración que lo contiene es accesible. </paragraph>
</clause>

<!-- Traducido por Gonzalo Antonio Sosa M - gonzaloantonio@gmail.com -->