<?xml version="1.0"?>
<clause number="8.1" title="Primeros Pasos" informative="true">
  <paragraph>El tradicional programa &quot;hola mundo&quot; se escribe
  de la siguiente forma: <code_example><![CDATA[
using System;  
class Hola  
{  
   static void Main() {  
      Console.WriteLine("hola mundo!");  
   }  
}  
]]></code_example></paragraph>

  <paragraph>En la mayoría de los casos, el código fuente de un programa
  en C# está guardado en un archivo de texto con la extensión .cs, como 
  en hola.cs. Usando un compilador por línea de comandos, tal programa 
  se compilaría si usamos el compilador de Mono con una orden como esta: <code_example><![CDATA[
msc hola.cs  
]]></code_example>y si usamos el de Microsoft, la orden sería 
<code_example><![CDATA[
csc hola.cs  
]]></code_example>
los cuales produce una aplicación llamada hola.exe. 
La salida producida al ejecutar la aplicación es: 
<code_example><![CDATA[
hola mundo! 
]]></code_example></paragraph>
  <paragraph>Examinemos este programa más detenidamente: 
  <list>
  <list_item> using System; es una directiva que se refiere a un 
  espacio de nombres llamado System que a su vez es proporcionado por la 
  librería de clases de la Infraestructura Común de Lenguajes. Este
  espacio de nombres contiene a la clase Console a la que se hace 
  referencia en el método Main. Los espacios de nombres ofrecen una 
  forma jerárquica de organizar los elementos de uno o más programas.
  Una <non_terminal where="16.3">directiva-using</non_terminal> permite llamar a los tipos de ese espacio de 
  nombres sin necesidad de especificar la ruta completa. El programa
  &quot;hola mundo &quot; utiliza Console.WriteLine como abreviatura
  para Syste.Console.WriteLine 
  </list_item>
  
  <list_item> El método Main es un miembro de la clase Hola. Tiene el 
  modificador static (estático), por lo que se trata de un método en 
  la clase Hola y no necesita de una instancia de esta clase. 
  </list_item>

  <list_item> El punto de entrada para una aplicación que es llamada 
  siemre es un método estátic llamado Main.
  </list_item>

  <list_item> La salida del programa &quot;hola mundo&quot; es producido
  usando una librería de clases. Este estándar no cubre la librería de 
  clases. En su lugar, hace referencia a la librería de clases que forma 
  parte del CLI 
  </list_item>
  </list>
    
  </paragraph> 
  
  <paragraph>Para los programadores de C y C++, es interesante resaltar
  algunas cosas que no aparecen en el programa &quot;hola, mundo&quot; 
  <list>
  <list_item> El programa no utiliza un método global para Main. 
  Los métodos y las variables no están soportadas a nivel global; 
  tales elementos siempre están contenidos dentro de algún otro tipo
  ( como clases o estructuras ). 
  </list_item>
  <list_item> El programa no utiliza los operadores &quot;::&quot; 
  ni &quot;-&gt;&quot;. &quot;::&quot; ni siquiera es un operador,
  mientras que &quot;-&gt;&quot; sólo es usado en pequeñas porciones 
  de programa ( que involucran código no seguro ). El separador
  &quot;.&quot; es usado en nombres compuestos tales como Console.WriteLine.
  </list_item>
  <list_item> El programa no contiene declaraciones previas. Éstas no 
  son necesarias, puesto que el orden de las declaraciones no es significativo.
  </list_item>
  <list_item> El programa no usa la directica #include para importar programas.   Las dependencias entre programas son manipuladas simbólicamente más que 
  textualmente. Esta aproximación elemina las barreras entre aplicaciones 
  escritas en múltiples lenguajes. Por ejemplo, la clase Console no tiene
  porqué estar escrita en C#, y sin embargo se puede usar desde un programa 
  en C# como si estuviera escrita en C#. 
  </list_item>
  </list>
  </paragraph>
  
</clause>

	<!-- traducción Fabian Seoane, fabian@fseoane.net -->
