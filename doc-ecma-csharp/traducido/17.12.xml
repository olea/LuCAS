<?xml version="1.0"?>
<clause number="17.12" title="Destructores">
  <paragraph>Un destructor es un miembro que implementa las acciones requeridas para destruir una instancia de una clase. Un destructor es declarado usando una declaración-del-destructor: <grammar_production><name><non_terminal where="17.12">declaración-del-destructor</non_terminal></name> : <rhs><non_terminal where="24.2">atributos</non_terminal><opt/><keyword>extern</keyword><opt/><terminal>~</terminal><non_terminal where="9.4.2">identificador</non_terminal><terminal>(</terminal><terminal>)</terminal><non_terminal where="17.12">cuerpo-del-destructor</non_terminal></rhs></grammar_production><grammar_production><name><non_terminal where="17.12">cuerpo-del-destructor</non_terminal></name> : <rhs><non_terminal where="15.2">bloque</non_terminal></rhs><rhs><terminal>;</terminal></rhs></grammar_production></paragraph>
  <paragraph>Una <non_terminal where="17.12">declaración-del-destructor</non_terminal> puede incluir un juego de atributos (<hyperlink>24</hyperlink>). </paragraph>
  <paragraph>El identificador un declarador-de-destructor debe nombrar la clase en la cual el destructor es declarado. Si otro nombre es especificado, un error en tiempo de compilación ocurre. </paragraph>
  <paragraph>Cuando una declaración de destructor incluye un modificador extern, se dice que el destructor es un destructor externo. Porque una declaración de destructor externo no provee implementación actual, su <non_terminal where="17.12">cuerpo-del-destructor</non_terminal> consiste en un punto y coma. Para todos los otros destructores, el <non_terminal where="17.12">cuerpo-del-destructor</non_terminal> consiste en un juego, el cual especifica las sentencias ejecutadas en orden para destruir la instancia de la clase. Un <non_terminal where="17.12">cuerpo-del-destructor</non_terminal> corresponde exactamente al <non_terminal where="17.5">cuerpo-del-método</non_terminal> de una método de instancia con la el tipo de retorno <keyword>void</keyword> (<hyperlink>17.5.8</hyperlink>). </paragraph>
  <paragraph>Destructores no son heredados. De esta forma, una clase no tiene otros destructores que esos que han sido declarados en la clase. </paragraph>
  <paragraph>
    <note>[Nota: Debido a que un constructor requiere no tener parámetros, no puede ser sobrecargado, así una clase puede tener, como máximo, un destructor. fin nota]</note>
  </paragraph>
  <paragraph>Destructores son invocados automáticamente, y no pueden ser invocados explícitamente. Una instancia se convierte elegible para destrucción cuando no es posible que algún código use esa instancia. Ejecución del destructor para la instancia puede ocurrir en cualquier momento después que la instancia se convierte elegible para destrucción. Cuando una instancia es destruida, los destructores en esa cadena de herencia de la instancia son llamados, en orden, desde el mas derivados al menos derivado. <example>[Ejemplo: La salida del ejemplo <code_example><![CDATA[
using System;  
class A  
{  
   ~A() {  
      Console.WriteLine("Destructor de A");  
   }  
}  
class B: A  
{  
   ~B() {  
      Console.WriteLine("Destructor de B");  
   }  
}  
class Test  
{  
   static void Main() {  
      B b = new B();  
      b = null;  
      GC.Collect();  
      GC.WaitForPendingFinalizers();  
   }  
}  
]]></code_example>es <code_example><![CDATA[
Destructor de B
Destructor de A
]]></code_example>debido a que los destructores en cadenas de herencia son llamados en orden, desde el mas derivado al menos derivado. fin ejemplo]</example> </paragraph>
  <paragraph>Destructores pueden ser implementados sobrecargando el método virtual Finalize en System.Object. En cualquier evento, programas en C# no están permitidos a reemplazar (override) este método o llamarlo directamente. </paragraph>
  <paragraph>
    <example>[Ejemplo: Por instancia, el programa <code_example><![CDATA[
class A  
{  
   override protected void Finalize() {}  // error  
   public void F() {  
      this.Finalize();   // error  
   }  
}  
]]></code_example>contiene dos errores. fin ejemplo]</example>
  </paragraph>
  <paragraph>El compilador se comporta como si este método no existiera y lo reemplazada. <example>[Ejemplo: De esta manera, el programa: <code_example><![CDATA[
class A  
{  
   void Finalize() {}   // permitido  
}  
]]></code_example>es valido y el método mostrado oculta el método Finalize de System.Object. fin ejemplo]</example> </paragraph>
  <paragraph>Para un discusión del comportamiento cuando una excepción es lanzada desde el constructor, mire <hyperlink>23.3</hyperlink>. <table_line/>
</paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
