<?xml version="1.0"?>
<clause number="17.4.2.2" title="Versiones de campos constantes y estáticos solo lectura">
  <paragraph>Constantes y campos de solo lectura tienen distintas semánticas de versiones binarias. Cuando una expresión referencia una constante, el valor de la constante es obtenida en tiempo de compilación, pero cuando una expresión referencia un campo de solo lectura, el valor del campo no es obtenido hasta tiempo de ejecución. <example>[Ejemplo: Considere una aplicación que consiste de dos programas separados: <code_example><![CDATA[
using System;  
namespace Program1  
{  
   public class Utils  
   {  
      public static readonly int X = 1;  
   }  
}  
namespace Program2  
{  
   class Test  
   {  
      static void Main() {  
         Console.WriteLine(Program1.Utils.X);  
      }  
   }  
}  
]]></code_example></example></paragraph>
  <paragraph>
    <example>Los espacios de nombres Program1 y Program2 denotan dos programas que son compilados separadamente. Debido a que Program1.Utils.X es declarado como un campo estático de solo lectura, el valor de salida de la sentencia Console.WriteLine es conocido en tiempo de compilación, diciéndolo mejor es obtenido en tiempo de compilación. De esta forma, si el valor de X es cambiado y Program1 es recompilado, la sentencia Console.WriteLine tendrá como salida el nuevo valor inclusive si Program2 no es recompilado. De cualquier forma, X ha sido una constante, el valor de X podría haber sido obtenido en el instante que Program2 fuera compilado, y podría quedarse sin ser afectado por los cambios en Program1 hasta que Program2 sea recompilado. fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
