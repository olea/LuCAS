<?xml version="1.0"?>
<clause number="14.5.11" title="El operador typeof">
  <paragraph>El operador typeof es usado para obtener el objeto System.Type para un tipo. <grammar_production><name><non_terminal where="14.5.11">expresión-typeof</non_terminal></name> : <rhs><keyword>typeof</keyword><terminal>(</terminal><non_terminal where="11">tipo</non_terminal><terminal>)</terminal></rhs><rhs><keyword>typeof</keyword><terminal>(</terminal><keyword>void</keyword><terminal>)</terminal></rhs></grammar_production></paragraph>
  <paragraph>La primera forma de <non_terminal where="14.5.11">expresión-typeof</non_terminal> consiste de una palabra reservada typeof seguida por un tipo con paréntesis. El resultado de una expresión de esta forma es el objeto System.Type para el tipo indicado. Solo existe un objeto System.Type object para cualquier tipo dado. <note>[Nota: Esto significa para este tipo T, typeof(T) == typeof(T) es siempre verdadero. fin nota]</note> </paragraph>
  <paragraph>La segunda forma <non_terminal where="14.5.11">expresión-typeof</non_terminal> consiste de una palabra reservada typeof seguida por una palabra reservada con paréntesis <keyword>void</keyword>. El resultado de una expresión de esta forma es el objeto System.Type que representa la ausencia de un tipo. EL objeto de tipo regresado por typeof(<keyword>void</keyword>) es distinto al tipo regresado por cualquier tipo. </paragraph>
  <paragraph>
    <note>[Nota: Este objeto de tipo especial es útil en librerías de clases para permitir reflexión en métodos en el lenguaje, donde esos métodos desearían tener una forma para representar el tipo de retornor de cualquier método, incluyendo métodos <keyword>void</keyword>, con una una instancia de System.Type. fin nota]</note>
  </paragraph>
  <paragraph>
    <example>[Ejemplo: El ejemplo <code_example><![CDATA[
using System;  
class Test  
{  
   static void Main() {  
      Type[] t = {  
         typeof(int),  
         typeof(System.Int32),  
         typeof(string),  
         typeof(double[]),  
      typeof(void)   };  
      for (int i = 0; i < t.Length; i++) {  
         Console.WriteLine(t[i].FullName);  
      }  
   }  
}  
]]></code_example>produce la siguiente salida: <code_example><![CDATA[
System.Int32  
System.Int32  
System.String  
System.Double[]  
System.Void  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>Note que <keyword>int</keyword> y System.Int32 son del mismo tipo. fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
