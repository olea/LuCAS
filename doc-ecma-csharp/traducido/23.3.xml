<?xml version="1.0"?>
<clause number="23.3" title="Como son manipuladas las excepciones">
  <paragraph>Las excepciones son manipuladas por una sentencia try (<hyperlink>15.10</hyperlink>). </paragraph>
  <paragraph>Cuando una excepción ocurre, el sistema busca la cláusula catch mas cercana capaz de manipular la excepción,tal como lo determina el tipo de dato en tiempo de ejecución de la excepción. Primero, se busca en el método actual la sentencia try más próxima que contenga al código examinado,y su cláusula catch asociada para ser consideradas en ese orden. Si esto falla, se busca en el método que hizo la llamada al método actual la sentencia try más próxima que contenga el punto de llamada al método actual. Esta búsqueda continua hasta que se encuentra una cláusula catch que pueda manipular la excepción actual, al declarar una clase de excepción de la misma clase ó de una clase ancestro,del tipo en tiempo de ejecución de la excepción que esta siendo lanzada. Una cláusula catch que no especifica una determinada clase de excepción puede manipular cualquier excepción. </paragraph>
  <paragraph>Una vez que una cláusula catch coincidente es encontrada, el sistema se prepara a transferir el control a la primera sentencia de dicha cláusula catch. Antes de que se inicie la ejecución de la cláusula catch, primero el sistema ejecuta, en orden cualquier cláusula finally que estuviera asociada a la sentencia try pero que se encuentra más anidada que la cláusula catch que capturó la excepción. </paragraph>
  <paragraph>Si no es encuentra una cláusula catch ocurre una de dos cosas: <list><list_item> Si la búsqueda de una cláusula  catch alcanza un constructor estático (<hyperlink>17.11</hyperlink>) ó un inicializador de campo estático, una excepción del tipo System.TypeInitializationException en el punto que lanzó la llamada al constructor estático. La excepción interna de System.TypeInitializationException contiene la excepción que fue lanzada originalmente. </list_item><list_item> Si la búsqueda de una cláusula catch alcanza el código que originalmente inicio el hilo, la ejecución del hilo es terminada. El impacto de dicha terminación está definido por la implementación. </list_item></list></paragraph>
  <paragraph>Las excepciones que ocurren durante la ejecución de un destructor merecen una mención especial. Si una excepción ocurre durante la ejecución de un destructor, y la excepción no es capturada, la ejecución del destructor es terminada y el destructor de la clase padre (si existe) es llamado. Si no existe un clase padre (como es el caso del tipo object) o si no existe un destructor definido en la clase padre, la excepción es descartada. </paragraph>
</clause>
<!-- Traducido por Antonio Ognio <aognio@gmail.com> -->
