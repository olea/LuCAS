<?xml version="1.0"?>
<clause number="17.5.4" title="Métodos reemplazados">
  <paragraph>Cuando una declaración de método de instancia incluye un modificador override, se dice que el método es un método reemplazado. Un método reemplazado reemplaza un método virtual heredado con la misma firma. Mientras que una declaración de un método virtual introduce un nuevo método, una declaración de método reemplazado se especializa en un método virtual heredado al proveer una nueva implementación de ese método. </paragraph>
  <paragraph>El reemplazado del método por una declaración de reemplazado es conocido como el método base de reemplazado. Para un método reemplazado M declarado en la clase C, el método base reemplazado es determinado al examinar cada clase base de C, comenzando con la clase base directa de C y continuando con cada clase base directa sucesiva, hasta que un método accesible con la misma firma de M sea localizado. Para los propósitos de localizar el método base sobrecargado, un método es considerado accesible si es público (public), si es protegido (protected), o si es protegido interno (protected internal), o si es interno (internal) y esta declarado en el mismo programa que C.</paragraph>
  <paragraph>Un error en tiempo de compilación ocurre a menos que todos lo siguiente sea verdadero para una declaración de reemplazado: <list><list_item> Un método base de sobrecargado puede ser localizado como se describe adelante. </list_item><list_item> El método base sobrecargado es virtual, abstract, o método override. En otras palabras, el método base sobrecargado no puede ser estático (static) o no virtual. </list_item><list_item> El método base sobrecargado no es método sellado (sealed). </list_item><list_item> La declaración de reemplazado y el método base de sobrecargado tienen la misma accesibilidad declarada. En otras palabras, una declaración de reemplazado no puede cambiar la accesibilidad del método virtual. </list_item></list></paragraph>
  <paragraph>Una declaración de reemplazado puede accesar el método base sobrecargado usando un <non_terminal where="14.5.8">acceso-base</non_terminal> (<hyperlink>14.5.8</hyperlink>). <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
class A  
{  
   int x;  
   public virtual void PrintFields() {  
      Console.WriteLine("x = {0}", x);  
   }  
}  
class B: A  
{  
   int y;  
   public override void PrintFields() {  
      base.PrintFields();  
      Console.WriteLine("y = {0}", y);  
   }  
}  
]]></code_example>la invocación base.PrintFields() en B invoca al método PrintFields declarado en A. Un  <non_terminal where="14.5.8">acceso-base</non_terminal> deshabilita el mecanismo de invocación virtual y trata simplemente el método base como un método no virtual. </example></paragraph>
  <paragraph>
    <example>Teniendo la invocación en B escrita ((A)this).PrintFields(), podría recursivamente invocar el método PrintFields declarado en B, no el declarado en A, debido a que PrintFields es virtual y el tipo en tiempo de ejecución de ((A)this) es B. fin ejemplo]</example>
  </paragraph>
  <paragraph>Únicamente al incluir un modificador override puede un método reemplazar otro método. En todos los otros casos, un método con la misma firma como el método heredado simplemente oculta el método heredado. <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
class A  
{  
   public virtual void F() {}  
}  
class B: A  
{  
   public virtual void F() {}   // Advertencia, ocultando F() heredado
}  
]]></code_example>el método F en B no incluye un modificador de reemplazado (override) y por lo tanto no reemplaza el método F en A. Mejor dicho, el método F en B oculta el método en A, y una advertencia es reportada porque la declaración no incluye un modificador new. fin ejemplo]</example> </paragraph>
  <paragraph>
    <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
class A  
{  
   public virtual void F() {}  
}  
class B: A  
{  
   new private void F() {}     // Oculta A.F dentro B  
}  
class C: B  
{  
   public override void F() {}  // Ok, reemplaza A.F  
}  
]]></code_example>el método F en B oculta el método F heredado de A. Debido a que el nuevo F en B tiene acceso privado, su ámbito únicamente incluye el cuerpo de la clase de B no extiende a C. Mejor dicho, la declaración de F en C es permitida que reemplace la F heredada de A. fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
