<?xml version="1.0"?>
<clause number="14.7.1" title="Operador de multiplicación">
  <paragraph>Para una operación de la forma x * y, la resolución de sobrecarga de operador binario (<hyperlink>14.2.4</hyperlink>) es aplicada para seleccionar una implementación de operador específica. Los operandos son convertidos a los tipos de parámetros del operador seleccionado, y el tipo del resultado es el tipo de retorno del operador. </paragraph>
  <paragraph>Los operadores de multiplicación predefinidos están listados abajo.  Todos los operadores el producto de x y y. <list><list_item> Multiplicación entera: <code_example><![CDATA[
int operator *(int x, int y);  
uint operator *(uint x, uint y);  
long operator *(long x, long y);  
ulong operator *(ulong x, ulong y);  
]]></code_example>En un contexto checado (checked), si el producto esta fuera del rango del tipo de resultado, una System.OverflowException es lanzada. En un contexto sin checado (unchecked), los sobreflujos no son reportados y cualquier bits significante de alto orden fuera del rango del resultado es descartado. </list_item><list_item> Multiplicación de punto-flotante: <code_example><![CDATA[
float operator *(float x, float y);  
double operator *(double x, double y);  
]]></code_example>El producto es computado de acuerdo a las reglas de la aritmética de IEEE 754. La siguiente tabla lista los resultados de todas las posibles combinaciones de valores no-cero finitos, ceros, infinitos, y NaN. En la tabla, x y y son valores finitos positivos. z es el resultado de x * y. Si el resultado es muy largo para el tipo de destino, z es infinito. Si el resultado es muy pequeño para el tipo de destino, z es cero. <table_line>+y <unicode>150</unicode>y +0 <unicode>150</unicode>0 +<infinity/> <unicode>150</unicode><infinity/> NaN </table_line>
<table_line>+x +z <unicode>150</unicode>z +0 <unicode>150</unicode>0 +<infinity/> <unicode>150</unicode><infinity/> NaN </table_line>
<table_line><unicode>150</unicode>x <unicode>150</unicode>z +z <unicode>150</unicode>0 +0 <unicode>150</unicode><infinity/> +<infinity/> NaN </table_line>
<table_line>+0 +0 <unicode>150</unicode>0 +0 <unicode>150</unicode>0 NaN NaN NaN </table_line>
<table_line><unicode>150</unicode>0 <unicode>150</unicode>0 +0 <unicode>150</unicode>0 +0 NaN NaN NaN </table_line>
<table_line>+<infinity/> +<infinity/> <unicode>150</unicode><infinity/> NaN NaN +<infinity/> <unicode>150</unicode><infinity/> NaN </table_line>
<table_line><unicode>150</unicode><infinity/><unicode>150</unicode><infinity/> +<infinity/> NaN NaN <unicode>150</unicode><infinity/> +<infinity/> NaN </table_line>
<table_line>NaN NaN NaN NaN NaN NaN NaN NaN </table_line>
</list_item><list_item> Multiplicación de decimal: <code_example><![CDATA[
decimal operator *(decimal x, decimal y);  
]]></code_example>Si el valor resultante es muy largo para representarse en el formato <keyword>decimal</keyword>, una System.OverflowException es lanzada. Si el resultado del valor es muy pequeño para representar en el formato <keyword>decimal</keyword>, el resultado es cero. La escala del resultado, antes de cualquier redondeo, es la suma de las escalas de los dos operandos. Multiplicación decimal es equivalente a usar el operador de multiplicación del tipo System.Decimal. </list_item></list></paragraph>
</clause>
<!-- Traducido por Mario Carrión, mario.carrion@gmail.com -->
