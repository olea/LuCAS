<?xml version="1.0"?>
<clause number="9.4.4.5" title="Literales de cadena">C# soporta dos formas de cadenas literales: literales de cadena regular y literales de cadena literal. Una literal de cadena regular consiste de cero o mas caracteres cerradores en doble comilla, como en &quot;hola, mundo&quot;, y pueden incluir ambas secuencias de escape simple (como \t para el caracter tabulador), y secuencias de escape hexadecimal y Unicode. <paragraph>Una literal de cadena literal consiste de un caracter @ seguido por un caracter con comilla doble, cero o mas </paragraph><paragraph>caracteres, y un caracter de doble comilla que cierre. <example>[Ejemplo: Un ejemplo simple es @&quot;hola, mundo&quot;. fin ejemplo]</example> En una literal de cadena literal, los caracteres entre los delimitadores son interpretados literalmente, con la única excepción siendo una <non_terminal where="9.4.4.5">secuencia-de-escape-encomillada</non_terminal>. En particular, secuencias simples de escape, y secuencias de escape hexadecimal y Unicode no son procesadas en literales de cadena literales. Una literal de cadena literal se puede expandir en líneas múltiples. <grammar_production><name><non_terminal where="9.4.4.5">literal-de-cadena</non_terminal></name> :: <rhs><non_terminal where="9.4.4.5">literal-de-cadena-regular</non_terminal></rhs><rhs><non_terminal where="9.4.4.5">literal-de-cadena-literal</non_terminal></rhs></grammar_production><grammar_production><name><non_terminal where="9.4.4.5">literal-de-cadena-literal</non_terminal></name> :: <rhs><terminal>&quot;</terminal><non_terminal where="9.4.4.5">caracteres-de-literal-de-cadena-regular</non_terminal><opt/><terminal>&quot;</terminal></rhs></grammar_production><grammar_production><name><non_terminal where="9.4.4.5">caracter-de-literal-de-cadena-regular</non_terminal>s</name> :: <rhs><non_terminal where="9.4.4.5">caracter-de-literal-de-cadena-regular</non_terminal></rhs><rhs><non_terminal where="9.4.4.5">caracteres-literales-de-cadena-regular</non_terminal><non_terminal where="9.4.4.5">caracter-de-literal-de-cadena-literal</non_terminal></rhs></grammar_production><grammar_production><name><non_terminal where="9.4.4.5">caracter-de-literal-de-cadena-regular</non_terminal></name> :: <rhs><non_terminal where="9.4.4.5">caracter-de-literal-de-cadena-regular-sencilla</non_terminal></rhs><rhs><non_terminal where="9.4.4.4">secuencia-de-escape-simple</non_terminal></rhs><rhs><non_terminal where="9.4.4.4">secuencia-de-escape-hexadecimal</non_terminal></rhs><rhs><non_terminal where="9.4.1">secuencia-de-escape-unicode</non_terminal></rhs></grammar_production><grammar_production><name><non_terminal where="9.4.4.5">caracter-de-literal-de-cadena-regular-sencilla</non_terminal></name> :: <rhs>Cualquier caracter excepto &quot; (U+0022), \ (U+005C), y <non_terminal where="9.3.2">caracter-de-nueva-línea</non_terminal> </rhs></grammar_production><grammar_production><name><non_terminal where="9.4.4.5">literal-de-cadena-literal</non_terminal></name> :: <rhs><terminal>@&quot;</terminal><non_terminal where="9.4.4.5">caracteres-de-literal-de-cadena-literal</non_terminal><opt/><terminal>&quot;</terminal></rhs></grammar_production><grammar_production><name><non_terminal where="9.4.4.5">caracter-de-literal-de-cadena-literal</non_terminal>s</name> :: <rhs><non_terminal where="9.4.4.5">caracter-de-literal-de-cadena-literal</non_terminal></rhs><rhs><non_terminal where="9.4.4.5">caracteres-de-literal-de-cadena-literal</non_terminal><non_terminal where="9.4.4.5">caracter-de-literal-de-cadena-literal</non_terminal></rhs></grammar_production><grammar_production><name><non_terminal where="9.4.4.5">caracter-de-literal-de-cadena-literal</non_terminal></name> :: <rhs><non_terminal where="9.4.4.5">caracter-sencillo-de-literal-de-cadena-literal</non_terminal></rhs><rhs><non_terminal where="9.4.4.5">secuencia-encomillada-de-escape</non_terminal></rhs></grammar_production><grammar_production><name><non_terminal where="9.4.4.5">caracter-sencillo-de-literal-de-cadena-literal</non_terminal></name> :: <rhs>Cualquier caracter excepto &quot; </rhs></grammar_production><grammar_production><name><non_terminal where="9.4.4.5">secuencia-encomillada-de-escape</non_terminal></name> :: <rhs><terminal>&quot;&quot;</terminal></rhs></grammar_production></paragraph><paragraph><note>[Nota: Un caracter que le sigue un caracter de barra invertida (\) en un <non_terminal where="9.4.4.5">caracter-literal-de-cadena-regular</non_terminal> debe ser uno de los siguientes caracteres: ', &quot;, \, 0, a, b, f, n, r, t, u, U, x, v. De otra forma, un error en tiempo de compilación ocurre. fin nota]</note></paragraph><paragraph><example>[Ejemplo: El ejemplo <code_example><![CDATA[
string a = "Feliz cumpleaños, Joel";      // Feliz cumpleaños, Joel  
string b = @"Feliz cumpleaños, Joel";     // Feliz cumpleaños, Joel  
string c = "hola \t mundo";          // hola    mundo  
string d = @"hola \t mundo";         // hola \t mundo  
string e = "Joe dijo \"Hola\" a mi";   // Joe dijo "Hola" a mi  
string f = @"Joe dijo ""Hola"" a mi";  // Joe dijo "Hola" a mi  
string g = "\\\\servidor\\compartido\\archivo.txt"; // \\servidor\compartido\archivo.txt  
string h = @"\\servidor\compartido\archivo.txt";   // \\servidor\compartido\archivo.txt  
string i = "uno\r\ndos\r\ntres";  
string j = @"uno  
dos  
tres";  
]]></code_example>muestra una variedad de literales de cadena. La ultima literal de cadena, j, es una literal de cadena literal que se expande en líneas múltiples. Los caracteres entre las comillas, incluyendo espacios en blanco así como nuevas líneas son preservados literalmente. fin ejemplo]</example></paragraph><paragraph><note>[Nota: Debido a que una secuencia de escape hexadecimal puede tener un numero variables de dígitos hexadecimales, la literal de cadena &quot;\x123&quot; contiene un caracter sencillo con el valor hexadecimal 123. Para crear una cadena que contenga el caracter con un valor hexadecimal 12 seguido del caracteres 3, uno puede escribir &quot;\x00123&quot; o &quot;\x12&quot; + &quot;3&quot; en vez. fin nota]</note></paragraph><paragraph>El tipo de una <non_terminal where="9.4.4.5">literal-de-cadena</non_terminal> es cadena. </paragraph><paragraph>Cada cadena literal no necesariamente resulta en una nueva instancia de cadena. Cuando dos o mas cadenas literales que son equivalentes de acuerdo al operador de igualdad (<hyperlink>14.9.7</hyperlink>), aparecen en el mismo ensamblado, esas literales de cadena se refieren a la misma instancia de cadena. <example>[Ejemplo: Por instancia, la salida producida por <code_example><![CDATA[
class Test  
{  
   static void Main() {  
      object a = "hola";  
      object b = "hola";  
      System.Console.WriteLine(a == b);  
   }  
}  
]]></code_example>es verdadera porque las dos literales se refieres a la misma instancia de la cadena. fin ejemplo]</example> </paragraph></clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
