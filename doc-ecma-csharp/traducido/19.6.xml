<?xml version="1.0"?>
<clause number="19.6" title="Inicializadores de Arreglos">
  <paragraph>Los inicializadores de arreglos pueden ser especificados en declaraciones de campo (<hyperlink>17.4</hyperlink>), declaración de variables locales (<hyperlink>15.5.1</hyperlink>), y expresiones de creación de arreglos (<hyperlink>14.5.10.2</hyperlink>): <grammar_production><name><non_terminal where="19.6">inicializador-de-arreglo</non_terminal></name> : <rhs><terminal>{</terminal><non_terminal where="19.6">lista-de-inicializadores-de-variables</non_terminal><opt/><terminal>}</terminal></rhs><rhs><terminal>{</terminal><non_terminal where="19.6">lista-de-inicializadores-de-variables</non_terminal><terminal>,</terminal><terminal>}</terminal></rhs></grammar_production><grammar_production><name><non_terminal where="19.6">lista-de-inicializadores-de-variables</non_terminal></name> : <rhs><non_terminal where="19.6">inicializador-de-variable</non_terminal></rhs><rhs><non_terminal where="19.6">lista-de-inicializadores-de-variables</non_terminal><terminal>,</terminal><non_terminal where="19.6">inicializador-de-variable</non_terminal></rhs></grammar_production><grammar_production><name><non_terminal where="19.6">inicializador-de-variable</non_terminal></name> : <rhs><non_terminal where="14.14">expresión</non_terminal></rhs><rhs><non_terminal where="19.6">inicializador-de-arreglo</non_terminal></rhs></grammar_production></paragraph>
  <paragraph>Un inicializador de arreglo consiste de un secuencia de inicializadores de variables, encerradas por símbolos &quot;{&quot; y &quot;}&quot; y separadas por símbolos &quot;,&quot;. Cada inicializador de variable es una expresión o, en el caso de arreglos multi-dimensionales, un inicializador de arreglo correspondiente. </paragraph>
  <paragraph>El contexto en el cual un inicializador de arreglo es usado determina el tipo arreglo que está siendo inicializado. En una expresión de creación de arreglos, el tipo arreglo inmediatamente precede al inicializador. En un campo o declaración de variable, el tipo arreglo es el tipo de campo o variable que está siendo declarada. Cuando un inicializador de arreglo es usado en una declaración campo o variable, <example>[Ejemplo: Por Ejemplo: <code_example><![CDATA[
int[] a = {0, 2, 4, 6, 8};  
]]></code_example>Fin Ejemplo]</example> es simplemente la forma sencilla para una expresión de creación de arreglos equivalente: <example>[Ejemplo: <code_example><![CDATA[
int[] a = new int[] {0, 2, 4, 6, 8};  
]]></code_example>Fin Ejemplo]</example> </paragraph>
  <paragraph>Para un arreglo uni-dimensional, el inicializador de arreglo debe consistir de un secuencia de expresiones que son asignaciones compatibles con el tipo de elementos del arreglo. Las expresiones de inicialización de los elementos del arreglo en orden ascendente, inician con el elemento de índice cero. El número de expresiones en el inicializador de arreglo determinada la longitud de la instancia de arreglo que está siendo creada. <example>[Ejemplo: Por ejemplo, el inicializador de arreglo mostrado arriba crea una instancia de int[] de longitud 5 y entonces inicializa la instancia con los siguientes valores: <code_example><![CDATA[
a[0] = 0; a[1] = 2; a[2] = 4; a[3] = 6; a[4] = 8;  
]]></code_example>Fin Ejemplo]</example> </paragraph>
  <paragraph>Para un arreglo multi-dimensional, el inicializador de arreglo debe tener tantos niveles como dimensiones el arreglo. El nivel anidado exterior corresponde a la dimensión en el extremo izquierdo y el nivel anidado interno corresponde a la dimensión del extremo derecho. La longitud de cada dimensión del arreglo está determinado por el número de elementos anidados del nivel correspondiente en el inicializador de arreglo. Por cada inicializador de arreglo anidado, el número de elementos debe ser el mismo que los otros inicializadores de arreglo en el mismo nivel. <example>[Ejemplo: El Ejemplo: <code_example><![CDATA[
int[,] b = {{0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}};  
]]></code_example>crea un arreglo de dos-dimensiones con un longitud de cinco para la dimensión en el extremo izquierdo y una longitud de dos para la dimensión en el extremo derecho: <code_example><![CDATA[
int[,] b = new int[5, 2];  
]]></code_example>y entonces inicializa la instancia de arreglo con los siguientes valores: <code_example><![CDATA[
b[0, 0] = 0; b[0, 1] = 1;  
b[1, 0] = 2; b[1, 1] = 3;  
b[2, 0] = 4; b[2, 1] = 5;  
b[3, 0] = 6; b[3, 1] = 7;  
b[4, 0] = 8; b[4, 1] = 9;  
]]></code_example>Fin Ejemplo]</example> </paragraph>
  <paragraph>Cuando una expresión de creación de arreglos incluye ambos, longitud de dimensiones explicitas y un inicializador de arreglo, la longitud debe ser una expresión constante y el número de elementos en cada nivel anidado deben ser iguales a la longitud de la dimensión correspondiente. <example>[Ejemplo: Aquí algunos ejemplos: <code_example><![CDATA[
int i = 3;  
int[] x = new int[3] {0, 1, 2};    // OK  
int[] y = new int[i] {0, 1, 2};    // Error, i no es una constante
int[] z = new int[3] {0, 1, 2, 3};  // Error, longitud/inicializador no son iguales
]]></code_example></example></paragraph>
  <paragraph>
    <example>Aquí, el inicializador para y resulta en un error en tiempo-de-compilación porque la expresión de longitud de la dimensión no es una constante, y el inicializador para z resulta en un error en tiempo-de-compilación porque la longitud y el número de elementos en el inicializador no son iguales. Fin Ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Gonzalo Antonio Sosa M. - gonzaloantonio@gmail.com -->
