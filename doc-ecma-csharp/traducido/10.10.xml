<?xml version="1.0"?>
<clause number="10.10" title="Execution order">
  <paragraph>La ejecución deberá proceder de forma que los efectos laterales
  de cada hilo de ejecución es preservado en puntos de ejecución críticos. Un
  efecto lateral se define como la lectura o escritura de un campo volátil,
  escritura a una variable no-volátil, escritura a un recurso externo, y el
  lanzado de una excepción. Los puntos de ejecución críticos en los que el orden
  de estos efectos laterales debe ser preservado hace referencia a campos
  volátiles (<hyperlink>17.4.3</hyperlink>), sentencias lock
  (<hyperlink>15.12</hyperlink>), y creación y terminación de hilos. Las
  implementaciones son libres de cambiar el orden de ejecución de un programa
  C#, siempre y cuando se verifiquen las siguientes restricciones: 
  <list>
  	<list_item>La dependencia de datos queda preservada dentro de un hilo de
	ejecución. Esto es, el valor de cada variable se computa como si todas
	las sentencias en el hilo fueran a ser ejecutadas en el orden original
	del programa. </list_item>
	<list_item> Las reglas de ordenamiento de la inicialización son
	preservadas  (<hyperlink>17.4.4</hyperlink> y <hyperlink>17.4.5</hyperlink>). </list_item>
  <list_item> El ordenamiento de efectos lateras queda preservado respecto a las
  lecturas y escrituras volátiles (<hyperlink>17.4.3</hyperlink>). Además, una
  implementación no necesita evaluar parte de la expresión si puede deducir que
  el valor de la expresión no está siendo usada y que no se producen efectos
  laterales necesarios (incluyendo cualesquiera causados por la llamada a un
  método o el acceso a un campo volátil ). Cuando se interrumpe la ejecución de
  un programa por un evento asíncrono (tal como el lanzamiento de una excepción
  por otro hilo), no queda garantizado que el efecto lateral observable son
  visibles en el orden original del programa. </list_item></list></paragraph>
</clause>
