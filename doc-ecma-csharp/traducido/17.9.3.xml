<?xml version="1.0"?>
<clause number="17.9.3" title="Operadores de conversión">
  <paragraph>Una declaración de operador de conversión introduce una conversión definida por el usuario (<hyperlink>13.4</hyperlink>), cuales argumentos son conversiones predefinidas implícitas y explícitas. </paragraph>
  <paragraph>Una declaración de operador de conversión que incluye la palabra reservada implicit introduce una conversión implícita. Conversión implícitas pueden ocurrir en una variedad de situaciones, incluyendo invocaciones de miembros de función, expresiones cast, y asignaciones. Esto es descrito mas adelante en <hyperlink>13.1</hyperlink>. </paragraph>
  <paragraph>Una declaración de operador de conversión que incluye la palabra reservada explicit introduce una conversión explícita definida por el usuario. Conversiones explícitas pueden ocurrir en expresiones cast, y son descritas mas adelante en <hyperlink>13.2</hyperlink>. </paragraph>
  <paragraph>Un operador de conversión convierte de un tipo fuente, indicado por el tipo parámetro del operador de conversión, a un tipo objetivo, indicado por el tipo de retorno del operador conversión. Una clase o estructura permite declarar una conversión de un tipo fuente S a un tipo objetivo T de modo que todo lo siguiente sea verdadero: <list><list_item> S y T son tipos diferentes. </list_item><list_item> Ya sea que S o T sean tipo clase o estructura  en donde la operación toma lugar. </list_item><list_item> Ningún S ni T son objeto de un <non_terminal where="11.2">tipo-interfaz</non_terminal>. </list_item><list_item> T no es un clase base de S, y S no es una clase base de T. </list_item></list></paragraph>
  <paragraph>Para la segunda regla sigue que un operador de conversión debe convertir ya sea para o desde el tipo de la clase o estructura en cual el operador es declarado. <example>[Ejemplo: Por ejemplo, es posible para un tipo clase o estructura C definir una conversión desde C para <keyword>int</keyword> y desde <keyword>int</keyword> para C, pero no desde <keyword>int</keyword> a <keyword>bool</keyword>. fin ejemplo]</example> </paragraph>
  <paragraph>No es posible redifinir una conversión predefinida. De esta forma, operadores de conversión no se les permite convertir desde o para objetos porque conversiones explícitas e implícitas ya existen entre los objetos y los otros tipo. De cualquier forma, ni el tipo fuente ni el tipo objetivo de una conversión pueden ser tipos base de los otros, debido a que una conversión podría ya existir. </paragraph>
  <paragraph>Conversiones definidas por el usuario no están permitidas para convertir desde o para un <non_terminal where="11.2">tipos-interfaz</non_terminal>. En particular, esta restricción se asegura que no ocurran transformaciones definidas por el usuario cuando se convierte de un <non_terminal where="11.2">tipo-interfaz</non_terminal>, y que una conversión para un <non_terminal where="11.2">tipo-interfaz</non_terminal> se exitosa únicamente si el objeto que esta siendo convertido actualmente implemente el <non_terminal where="11.2">tipo-interfaz</non_terminal> especificado. </paragraph>
  <paragraph>La firma de un operador de conversión consiste de un tipo fuente y un tipo objetivo. (Note que esto es la única forma de un miembro para cual el tipo de retorno participa en laf firma.) La clasificación implícita o explícita de un operador de conversión no es parte de la firma del operador. De esta forma, una clase o estructura no puede declarar al mismo tiempo una conversión de operador implícita y explícita con el mismo tipo fuente y tipo objetivo. </paragraph>
  <paragraph>
    <note>[Nota: En general, conversiones implícitas definidas por el usuario deben ser designadas  para nunca lanzar excepciones y nunca perder información. Si una conversión definida por el usuario puede crear excepciones (por ejemplo, porque el argumento fuente esta fuera de rango) o perdida de información (como descartar bits de alto orden), entonces esa conversión debería ser definida como una conversión explícita. fin nota]</note>
  </paragraph>
  <paragraph>
    <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
using System;  
public struct Digit  
{  
   byte value;  
   public Digit(byte value) {  
      if (value < 0 || value > 9) throw new ArgumentException();  
      this.value = value;  
   }  
   public static implicit operator byte(Digit d) {  
      return d.value;  
   }  
   public static explicit operator Digit(byte b) {  
      return new Digit(b);  
   }  
}  
]]></code_example>la conversión de Digit a <keyword>byte</keyword> es implícita porque nunca lanza excepciones o pierde información, pero la conversión de <keyword>byte</keyword> a Digit es explícita debido a que Digit solo puede representar un subjuego de los posibles valores de <keyword>byte</keyword>. fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
