<?xml version="1.0"?>
<clause number="20.4.3" title="Herencia de implementación de interfaz">
  <paragraph>Una clase hereda todas las implementaciones de interfaz provistas por sus clases base. </paragraph>
  <paragraph>Sin re-implementar explícitamente una interfaz, una clase derivada no puede de ninguna manera alterar las correlaciones de interfaz que hereda de sus clases base. <example>[Ejemplo: Por ejemplo, en las declaraciones <code_example><![CDATA[
interface IControl  
{  
   void Paint();  
}  
class Control: IControl  
{  
   public void Paint() {...}  
}  
class TextBox: Control  
{  
   new public void Paint() {...}  
}  
]]></code_example>el método Paint en TextBox esconde el método Paint en Control, pero no altera la correlación de Control.Paint con IControl.Paint, y las llamadas a Paint a través de instancias de clase e instancias de interfaz tendrán los siguientes efectos
 <code_example><![CDATA[
Control c = new Control();  
TextBox t = new TextBox();  
IControl ic = c;  
IControl it = t;  
c.Paint();    // invoca Control.Paint();  
t.Paint();    // invoca TextBox.Paint();  
ic.Paint();   // invoca Control.Paint();  
it.Paint();   // invoca Control.Paint();  
]]></code_example>fin del ejemplo]</example> </paragraph>
  <paragraph>Sin embargo, cuando un método de interfaz se correlaciona con un método virtual de una clase, es posible para las clases derivadas sobreescribir el método virtual y alterar la implementación de la interfaz. <example>[Ejemplo: Por ejemplo, reescribiendo las declaraciones de arriba a <code_example><![CDATA[
interface IControl  
{  
   void Paint();  
}  
class Control: IControl  
{  
   public virtual void Paint() {...}  
}  
class TextBox: Control  
{  
   public override void Paint() {...}  
}  
]]></code_example>los siguientes efectos se observan ahora <code_example><![CDATA[
Control c = new Control();  
TextBox t = new TextBox();  
IControl ic = c;  
IControl it = t;  
c.Paint();    // invoca Control.Paint();  
t.Paint();    // invoca TextBox.Paint();  
ic.Paint();   // invoca Control.Paint();  
it.Paint();   // invoca TextBox.Paint();  
]]></code_example>fin del ejemplo]</example> </paragraph>
  <paragraph>Ya que las implementaciones explícitas de miembros de interfaz no pueden declararse virtuales, no es posible sobreescribir una implementación explícita de miembro de interfaz. Sin embargo, es perfectamente válido para una implementación explícita de miembro de interfaz llamar a otro método, y ese otro método puede declararse virtual para permitir a las clases derivadas sobreescribirlo. <example>[Ejemplo: Por ejemplo <code_example><![CDATA[
interface IControl  
{  
   void Paint();  
}  
class Control: IControl  
{  
   void IControl.Paint() { PaintControl(); }  
   protected virtual void PaintControl() {...}  
}  
class TextBox: Control  
{  
   protected override void PaintControl() {...}  
}  
]]></code_example></example></paragraph>
  <paragraph>
    <example>Aquí, las clases derivadas de Control pueden especializar la implementación de IControl.Paint sobreescribiendo el método PaintControl. fin del ejemplo]</example>
  </paragraph>
</clause>
<!-- traducción Rodolfo Campero, rodolfo.campero@gmail.com -->
