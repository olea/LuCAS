<?xml version="1.0"?>
<clause number="17.2.6.2" title="Accesibilidad declarada">
  <paragraph>Tipos no-anidados puede tener accesibilidad publica (public) o interna (internal) declarada, tienen accesibilidad interna por defecto. Tipos anidados puede tener esas forma de accesibilidad declarada también, mas otra o mas formas adicionales de accesibilidad declarada, dependiendo si el tipo contenedor es clase o estructura: <list><list_item> Un tipo anidado que es declarado en una clase puede tener cualquiera de las cinco formas de accesibilidad declarada (public, protected internal, internal, o private) y, como otros miembros de clase, accesibilidad privada declarada es la accesibilidad por defecto. </list_item><list_item> Un tipo anidado que es declarado en una estructura puede tener una de las tres formas de accesibilidad declarada (public, internal, o privada) y, como otros miembros estructura, accesibilidad privada declarada es la accesibilidad por defecto. </list_item></list></paragraph>
  <paragraph>
    <example>[Ejemplo: El ejemplo <code_example><![CDATA[
public class List  
{  
   // Estructura de datos privada
   private class Node  
   {   
      public object Data;  
      public Node Next;  
      public Node(object data, Node next) {  
         this.Data = data;  
         this.Next = next;  
      }  
   }  
   private Node first = null;  
   private Node last = null;  
   // Interfaz pública
   public void AddToFront(object o) {...}  
   public void AddToBack(object o) {...}  
   public object RemoveFromFront() {...}  
   public object AddToFront() {...}  
   public int Count { get {...} }  
}  
]]></code_example>declara una clase privada anidada llamada Node. fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
