<?xml version="1.0"?>
<clause number="8.9" title="Interfaces" informative="true">
  <paragraph>Una interfaz define un contrato. Una clase o estructura que
  implementa una interfaz debe adherirse a su contrato. Las interfaces pueden
  contener métodos, propiedades, eventos e indexadores como miembros.</paragraph>
  <paragraph>El ejemplo <code_example><![CDATA[
interface IEjemplo  
{  
   string this[int index] { get; set; }  
   event EventHandler E;  
   void F(int value);  
   string P { get; set; }  
}  
public delegate void EventHandler(object sender, EventArgs e);  
]]></code_example>muestra una interfaz que contiene un indexador, un evento E, un método F y una propiedad P.</paragraph>
  <paragraph>Las interfaces pueden emplear herencia múltiple. En el ejemplo<code_example><![CDATA[
interface IControl  
{  
   void Pinta();  
}  
interface ICajaTexto: IControl  
{  
   void FijaTexto(string text);  
}  
interface IListaCaja: IControl  
{  
   void SetItems(string[] items);  
}  
interface IComboCaja: ICajaTexto, IListaCaja {}  
]]></code_example>the interfaz IComboCaja hereda ambas CajaTexto y IListaCaja. </paragraph>
  <paragraph>Clases y estructuras pueden implementar múltiples interfaces. En el ejemplo <code_example><![CDATA[
interface IDataTope  
{  
   void Bind(Binder b);  
}  
public class CajaEdita: Control, IControl, IDataTope  
{  
   public void Dibuja() {...}  
   public void Bind(Binder b) {...}  
}   
]]></code_example>la clase CajaEdita deriva de la clase Control e implementa ambos IControl e IDataTope. </paragraph>

  <paragraph>En el ejemplo previo, el método Dibuja de la interfaz IControl y en método Bind de la interfaz IDataTope son implementados usando miembros públicos en la clase CajaEdita. C# proporciona una forma alternativa de implementar estos métodos que permite a la clase implementadora evitar tener estos miembros como públicos.  Los miembros de una interfaz pueden ser implementados usando nombres completos. Por ejemplo, la clase CajaEdita podría haber sido implementada proporcionando los métodos IControl.Dibuja y IDataTope.Bind . <code_example><![CDATA[
public class CajaEdita: IControl, IDataTope  
{  
   void IControl.Dibuja() {...}  
   void IDataTope.Bind(Binder b) {...}  
}  
]]></code_example></paragraph>
  <paragraph>Los miembros implementados de esta forma de una interfaz son llamados miembros explícitos de la interfaz porque cada miembro designa explícitamente el miembro de la interfaz que implementa. Miembros explícitos de una interfaz solo pueden ser llamados via la interfaz. Por ejemplo, la implementación del método Dibuja en CajaEdita puede ser llamado únicamente por la conversión a la interfaz IControl<code_example><![CDATA[
class Test  
{  
   static void Main() {  
      CajaEdita CajaEdita = new CajaEdita();  
      CajaEdita.Dibuja();  // error: no existe tal método  
      IControl control = CajaEdita;  
      control.Dibuja();  // llama a la implementación de Dibuja en  CajaEdita
   }  
}  
]]></code_example></paragraph>
</clause>


<!-- Traducción Fabian Seoane: fseoane@wanadoo.es -->
