<?xml version="1.0"?>
<clause number="9.5.1" title="Símbolos de compilación condicional">
  <paragraph>La funcionalidad de compilación condicional provista por las
  directivas de símbolo <symbol>#if</symbol>, <symbol>#elif</symbol>,
  <symbol>#else</symbol>, y <symbol>#endif</symbol> son controladas a traves de
  expresiones de pre-procesamiento (<hyperlink>9.5.2</hyperlink>) y símbolos de
  compilación condicional. <grammar_production><name><non_terminal
  where="9.5.1">símbolo-condicional</non_terminal></name> :: <rhs>Cualquier <non_terminal where="9.4.2">identificador-o-palabra-reservada</non_terminal> excepto <keyword>true</keyword> o <keyword>false</keyword> </rhs></grammar_production></paragraph>
  <paragraph>Un símbolo de compilación condicional tiene dos posibles estados: definido o indefinido. En el principio de un procesamiento léxico de un archivo fuente, un símbolo de compilación condicional es indefinido a menos que haya sido explícitamente definido por un mecanismo externo (como una opción de línea de comandos). Cuando una directiva <symbol>#define</symbol> es procesada, el símbolo de compilación condicional llamado en esa directiva se convierte definido en ese archivo fuente. El símbolo permanece definido hasta que una directiva <symbol>#undef</symbol> para el mismo símbolo sea procesado, o hasta el fin del mismo archivo fuente sea alcanzado. Una implicacion de esto es que las directivas <symbol>#define</symbol> y <symbol>#undef</symbol> en un archivo fuente no tienen efecto sobre otros archivos fuente en el mismo programa. </paragraph>
  <paragraph>El espacio de nombres para los símbolos de la compilación condicional es distinta y separada de otras entidades llamadas en un programa C#. símbolos de compilación condicional pueden ser únicamente referenciadas en directivas <symbol>#define</symbol> y <symbol>#undef</symbol> y en expresiones de pre-procesamiento. </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->

