<?xml version="1.0"?>
<clause number="22.1" title="Declaración de Delegados">
  <paragraph>Una <non_terminal where="22.1">declaración-de-delegado</non_terminal> es una<non_terminal where="16.5">declaración-de-tipo</non_terminal> (<hyperlink>16.5</hyperlink>) que declara un nuevo tipo. <grammar_production><name><non_terminal where="22.1">declaración-de-delegado</non_terminal></name> : <rhs><non_terminal where="24.2">atributos</non_terminal><opt/><non_terminal where="22.1">modificadores-de-delegado</non_terminal><opt/><keyword>delegado</keyword><non_terminal where="17.5">tipo-de-retorno</non_terminal><non_terminal where="9.4.2">identificador</non_terminal><terminal>(</terminal><non_terminal where="17.5.1">lista-formal-de-parámetros</non_terminal><opt/><terminal>)</terminal><terminal>;</terminal></rhs></grammar_production><grammar_production><name><non_terminal where="22.1">modificadores-de-delegado</non_terminal></name> : <rhs><non_terminal where="22.1">modificador-de-delegado</non_terminal></rhs><rhs><non_terminal where="22.1">modificador-de-delegado</non_terminal><non_terminal where="22.1">modificador-de-delegado</non_terminal></rhs></grammar_production><grammar_production><name><non_terminal where="22.1">modificador-de-delegado</non_terminal></name> : <rhs><keyword>new</keyword></rhs><rhs><keyword>public</keyword></rhs><rhs><keyword>protected</keyword></rhs><rhs><keyword>internal</keyword></rhs><rhs><keyword>private</keyword></rhs></grammar_production>Es un error en timpo-de-compilación que el mismo modificador aparezca multiples ocasiones en una declaración de delegado. </paragraph>
  <paragraph>El modificador new sólo está permitido en delegados declarados dentro de otro tipo, en cuyo caso ello especifica que ese delegado esconde un miembro heredado con el mismo nombre, cómo se describe en <hyperlink>17.2.2</hyperlink>. </paragraph>
  <paragraph>Los modificadores public, protected, internal, y private controlan la accesibilidad del tipo delegado. Dependiendo del contexto en el cual la declaración de delagado ocurre, algunos de estos modificadores pueden no estar permitidos (<hyperlink>10.5.1</hyperlink>). </paragraph>
  <paragraph>El nombre del tipo de delegado es el identificador. </paragraph>
  <paragraph>La <non_terminal where="17.5.1">lista-formal-de-parámetros</non_terminal> opcional especifica los parámetros del delegado, y el <non_terminal where="17.5">tipo-de-retorno</non_terminal> indica el tipo de retorno del delegado. Un método y un tipo delegado son compatibles si las siguientes sentencias son verdaderas: <list><list_item> Tienen el mismo número de parámetros, con el mismo tipo, en el mismo orden, con los mismos modificadores de parámetro. </list_item><list_item> Su <non_terminal where="17.5">tipo-de-retorno</non_terminal> es el mismo. </list_item></list></paragraph>
  <paragraph>Los tipos delegado en C# son equivalentes en nombre, no equivalentes estructuralmente. <note>[Nota: Sin embargo, instancias de dos tipos delegado distintos pero estructuralmente equivalentes pueden compararse como iguales (<hyperlink>14.9.8</hyperlink>). Fin Nota]</note> Especificamente, dos tipos delegado diferentes que tiene la misma lista de parámetros y tipo de retorno son considerados tipos delegado diferentes. <example>[Ejemplo: Por Ejemplo: <code_example><![CDATA[
delegate int D1(int i, double d);  
class A  
{  
   public static int M1(int a, double b) {...}  
}  
class B  
{  
   delegate int D2(int c, double d);  
   public static int M1(int f, double g) {...}  
   public static void M2(int k, double l) {...}  
   public static int M3(int g) {...}  
   public static void M4(int g) {...}  
}  
]]></code_example></example></paragraph>
  <paragraph>
    <example>El tipo delegado D1 y D2 son compatibles con los métodos A.M1 and B.M1, puesto que tienen el mismo tipo de retorno y lista de parámetros; sin embargo, éstos tipos delegado son dos tipos diferentes, así que no son intercambiables. Los tipos delegado D1 y D2 son incompatibles con los métodos B.M2, B.M3, y B.M4, puesto que tienen diferente tipo de retorno o lista de parámetros. Fin Ejemplo]</example>
  </paragraph>
  <paragraph>La única forma de declarar un tipo delegado es via una <non_terminal where="22.1">declaración-de-delegado</non_terminal>. Un tipo delegado es un tipo clase que deriva de System.Delegate. Los tipos Delegado son implicitamente sealed, así que no es permitido derivar cualquier tipo de un tipo delegado. De igual forma no es permitido derivar un tipo clase no-delegado de System.Delegate. Notar que System.Delegate no es en sí mismo un tipo delegado; es un tipo clase del cual todos los tipos delegado derivan. </paragraph>
  <paragraph>C# proporciona una sintáxis especial para la creación e invocación de delgados. Excepto la creación, cualquier operación que pueda ser aplicada a una clase o instancia de clase puede también ser aplicada a una clase o instancia de delegado, respectivamente. En particular, es posible acceder a miembros del tipo System.Delegate vía la sintáxis de acceso a miembros usual. </paragraph>
  <paragraph>El conjunto de métodos encapsulados por una instancia de delegado es llamado lista de invocación. Cuando una instancia de delegado es creada (<hyperlink>22.2</hyperlink>) desde un método sencillo, encapsula ese método, y su lista de invocación contienen sólo una entrada. Sin embargo, cuando dos instancias de delegado no-nulas son combinadas, sus listas de invocación son concatenadas-en el orden de operador izquierdo a operador derecho-para formar una nueva lista de invocación, la cuál contiene dos o más entradas. </paragraph>
  <paragraph>Los delegados son combinados usando el operador binario + (<hyperlink>14.7.4</hyperlink>) y los operadores += (<hyperlink>14.13.2</hyperlink>). Un delegado puede ser removido de una combinación de delegados, usando el operador binario (<hyperlink>14.7.5</hyperlink>) - y los operadores -= (<hyperlink>14.13.2</hyperlink>). Los delegados pueden ser comparados para igualdad (<hyperlink>14.9.8</hyperlink>). </paragraph>
  <paragraph>
    <example>[Ejemplo: El siguiente ejemplo muestra la creación de un número de delegados, y sus correspondientes listas de invocación: <code_example><![CDATA[
delegate void D(int x);  
class Test  
{  
   public static void M1(int i) {...}  
   public static void M2(int i) {...}  
}  
class Demo  
{  
   static void Main() {   
      D cd1 = new D(Test.M1); // M1  
      D cd2 = new D(Test.M2); // m2  
      D cd3 = cd1 + cd2;    // M1 + M2  
      D cd4 = cd3 + cd1;     // M1 + M2 + M1  
      D cd5 = cd4 + cd3;     // M1 + M2 + M1 + M1 + M2  
   }  
}  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>Cuando cd1 y cd2 son creados, encapsulan un método. Cuando cd3 es creado, tiene una lista de invocación de dos métodos, M1 y M2, en ese orden. La lista de invocación de cd4 contiene M1, M2, y M1, en ese orden. Finalmente, la lista de invocación de cd5 contiene M1, M2, M1, M1, y M2, en ese orden. </example>
  </paragraph>
  <paragraph>
    <example>Para más ejemplos de combinación (así como eliminación) de delegados, vea <hyperlink>22.3</hyperlink>. Fin Ejemplo]</example>
  </paragraph>
</clause>
