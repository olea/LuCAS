<?xml version="1.0"?>
<clause number="14.7.2" title="Operador de división">
  <paragraph>Para una operación de la forma x /y,la resolución de sobrecarga de operador binario (<hyperlink>14.2.4</hyperlink>) es aplicada al seleccionar la implementación específica del operador. Los operandos son convertidos a los tipos de parámetros del operador seleccionado, y el tipo del resultado es el tipo de retorno del operador. </paragraph>
  <paragraph>Los operadores de división predefinidos son listados a continuación. Todos los operadores computan el cociente de x y y. <list><list_item> División entera: <code_example><![CDATA[
int operator /(int x, int y);  
uint operator /(uint x, uint y);  
long operator /(long x, long y);  
ulong operator /(ulong x, ulong y);  
]]></code_example>Si el valor del operando derecho es cero, una System.DivideByZeroException es lanzada. La división redondea el resultado hacia cero, y el valor absoluto del resultado es el mayor entero posible que es menor que el valor absoluto del cociente de los dos operandos. El resultado es cero o positivo cuando los dos operando tienen la misma firma y cero o negativo cuando los dos operandos tienen signos opuestos. Si el operando de la izquierda es el valor <keyword>int</keyword> o <keyword>long</keyword> máximo negativo  y el operando de la izquierda es -1, un sobreflujo ocurre. En un contexto checado (checked), esto causa que System.OverflowException sea lanzada. En un contexto sin checar (unchecked), el sobreflujo no es reportado y el resultado es entonces el valor del operando izquierdo. </list_item><list_item> División de punto flotante: <code_example><![CDATA[
float operator /(float x, float y);  
double operator /(double x, double y);  
]]></code_example>El cociente es computado de acuerdo a las reglas de la aritmética IEEE 754.  La siguiente tabla lista los resultados de todas las posibles combinaciones de valores finitos, ceros, infinitos y NaN's. En la tabla, x y y son valores finitos positivos. z es el resultado de x / y. Si el resultado es tan largo para el tipo destino, z es infinito. Si el resultado es muy pequeño para el tipo destino, z es cero.. <table_line>+y <unicode>150</unicode>y +0 <unicode>150</unicode>0 +<infinity/> <unicode>150</unicode><infinity/> NaN </table_line>
<table_line>+x +z <unicode>150</unicode>z +<infinity/> <unicode>150</unicode><infinity/> +0 <unicode>150</unicode>0 NaN </table_line>
<table_line><unicode>150</unicode>x <unicode>150</unicode>z +z <unicode>150</unicode><infinity/> +<infinity/><unicode>150</unicode>0 +0 NaN </table_line>
<table_line>+0 +0 <unicode>150</unicode>0 NaN NaN +0 <unicode>150</unicode>0 NaN </table_line>
<table_line><unicode>150</unicode>0 <unicode>150</unicode>0 +0 NaN NaN <unicode>150</unicode>0 +0 NaN </table_line>
<table_line>+<infinity/> +<infinity/> <unicode>150</unicode><infinity/> +<infinity/> <unicode>150</unicode><infinity/> NaN NaN NaN </table_line>
<table_line><unicode>150</unicode><infinity/><unicode>150</unicode><infinity/> +<infinity/><unicode>150</unicode><infinity/> +<infinity/> NaN NaN NaN </table_line>
<table_line>NaN NaN NaN NaN NaN NaN NaN NaN </table_line>
</list_item><list_item> División decimal: <code_example><![CDATA[
decimal operator /(decimal x, decimal y);  
]]></code_example>Si el valor del operando derecho es cero, una System.DivideByZeroException es lanzada. Si el valor resultante es muy largo para representarse en el formato <keyword>decimal</keyword>, una System.OverflowException es lanzada. Si el valor resultante es muy pequeño para representar el formato <keyword>decimal</keyword>, el resultado es cero. La escala del resultado, antes del redondeo, es la escala más pequeña que preservará un resultado igual al resultado exacto. La división decimal es equivalente a usar el operador de tipo System.Decimal. </list_item></list></paragraph>
</clause>
<!-- Traducido por Mario Carrión, mario.carrion@gmail.com -->
