<?xml version="1.0"?>
<clause number="10.1" title="Inicio de aplicaciones">
  <paragraph>El inicio de una aplicación sucede cuando el entorno de ejecución llama al método designado, al cual se refiere como el punto de entrada de la aplicación. Este punto de entrada siempre es llamado Main, y se deberá ajustar a alguna de las siguientes firmas: <code_example><![CDATA[
static void Main() {...}  
static void Main(string[] args) {...}  
static int Main() {...}  
static int Main(string[] args) {...}  
]]></code_example></paragraph>
  <paragraph>Por lo tanto, el punto de entrada puede de forma opcionas devolver un valor <keyword>int</keyword>. Este valor es usado en la terminación de la aplicación (<hyperlink>10.2</hyperlink>). 
</paragraph>
  <paragraph>El punto de entrada puede de forma opcional tener un parámetro formal, y este parámetro formal puede tener cualquier nombre. Si se declara dicho parámetro, debe de obedecer a las siguientes reglas: 

<list>
<list_item> La implementación deberá asegurar que el valor de este parámetro no es vacío (null). </list_item>
<list_item> Sea args el nombre del parámetro. Si la longitud del arreglo designado por args es mayor que cero, los miembros desde args[0] hasta args[args.Length-1] inclusive, deben referirse a cadenas de texto (string), llamados parámetros de la aplicación, los cuales han recibido valores definidos por la implmentación en el entorno huesped antes del comienzo de la aplicación. El objetivo es proporcionar a la aplicación determinada antes de su comienzo proveniente de alguna parte del entorno huesped. Si el entorno no es capaz de proporcionar cadenas de texto con letras tanto en minúscula como en mayúscula, la implementación deberá asegurar que las cadenas se reciben en minúscula. <note>[Nota: En sistemas que soportan la línea de comandos, los parámetros de la aplicación corresponden a lo que generalmente se conoce como argumentos de la línea de comandos. fin nota]</note>
</list_item>
</list>
</paragraph>
  <paragraph>Puesto que C# soporta sobrecarga de métodos, una clase o estructura puede contener múltiples definiciones de un mismo método, siempre y cuando cada uno tenga una firma distinta. Por el contrario, en un mismo programa no habrá clase o estructura que contenga más de un método llamado Main tal que su definición lo cualifique para ser usado como punto de entrada de la aplicación. Sin embargo, se admiten versiones versiones sobrecargadas de Main siembre y cuando tengas más de un parámetro, o su único parámetro no sea de tipo string[].
</paragraph>
  <paragraph>Una aplicacioón puede contener varias clases o estructuras. Es posible que más de una de estas clases o estructuras contenga un método llamado Main tal que su definición le permita ser utilizado como punto de entrada de la aplicación. En tales casos, uno de estos métodos Main debe ser escogido como el punto de entrada de forma que la aplicación se pueda poner en marcha. La elección del punto de entrada sobrepasa el alcance de esta especificación -no se proporciona ningún mecanismo para especificar o determinar el punto de entrada. 
</paragraph>
  <paragraph>El C#, cada método debe ser definido como un miembro de una clase o estructura. Normalmente, la accesibilidad de un método (<hyperlink>10.5.1</hyperlink>) se determina con los modificadores de acceso (<hyperlink>17.2.3</hyperlink>) especificados en su declaración. Para que un método de un determinado tipo pueda ser llamado, tanto el tipo como el miembro deben de ser accesible. De todas formas, el punto de entrada de una aplicación es caso especial. Más específicamente, el entorno de ejecución puede acceder al punto de entrada de la aplicación sin importar la accesibilidad de su tipo contener. 
</paragraph>
  <paragraph>En todos los demás aspectos, los métodos que son puntos de entrada se comportan de la misma forma que los que no son puntos de entrada
 </paragraph>
</clause>
