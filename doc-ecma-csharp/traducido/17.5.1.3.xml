<?xml version="1.0"?>
<clause number="17.5.1.3" title="Parámetros por salida">
  <paragraph>Un parámetro declarado con un modificador out es un parámetro por salida. Similar a los parámetros por referencia, un parámetro por salida no crea una nueva localidad de almacenamiento. En vez de eso, una parámetro por salida representa la misma localidad de memoria como la variable dada en el argumento en la invocación del método. </paragraph>
  <paragraph>Cuando un parámetro formal es un parámetro de salida, el argumento correspondiente es una invocación de método debe consistir de una palabra reservada out seguida por una <non_terminal where="12.4">referencia-de-variable</non_terminal> (<hyperlink>12.3.3</hyperlink>) del mismo tipo que el parámetro formal. Una variable no necesita ser definitivamente asignada antes de que pueda ser pasada como un parámetro por salida, pero siguiendo una invocación donde una variable fue pasada como un parámetro por salida, la variable es considerada definitivamente asignada. </paragraph>
  <paragraph>Dentro de un método, solo como una variable local, un parámetro por salida es inicialmente considerado sin asignar y debe ser definitivamente asignado antes que su valor sera usado.</paragraph>
  <paragraph>Cada parámetro por salida es un método que debe ser definitivamente asignado antes que el método regrese.</paragraph>
  <paragraph>Parámetro de salida son típicamente usados en métodos que producen múltiples valores de retorno.<example>[Ejemplo: Por ejemplo: <code_example><![CDATA[
using System;  
class Test  
{  
   static void SplitPath(string path, out string dir, out string name) {  
      int i = path.Length;  
      while (i > 0) {  
         char ch = path[i - 1];  
         if (ch == '\\' || ch == '/' || ch == ':') break;  
         i--;  
      }  
      dir = path.Substring(0, i);  
      name = path.Substring(i);  
   }  
   static void Main() {  
      string dir, name;  
      SplitPath("c:\\Windows\\System\\hola.txt", out dir, out name);  
      Console.WriteLine(dir);  
      Console.WriteLine(name);  
   }  
}  
]]></code_example></example></paragraph>
  <paragraph>
    <example>El ejemplo produce la salida: <code_example><![CDATA[
c:\Windows\System\  
hola.txt  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>Note que las variables dir y name pueden no estar asignadas antes que sean pasadas a SplitPath, y que ellas pueden ser consideradas asignadas definitivamente después de seguir la llamada. fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
