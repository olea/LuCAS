<?xml version="1.0"?>
<clause number="8.2" title="Tipos" informative="true">
  <paragraph>C# soporta dos tipos claramente diferenciados: tipos por valor y por referencia. 
  Los tipos por valor icluyen a los tipos simples ( es decir, <keyword>char</keyword>,  <keyword>int</keyword>, y <keyword>float</keyword>), enumeraciones y estructuras. Los tipos por referencia incluyen clases, interfaces, delegados y arreglos. </paragraph>
  
  <paragraph>Los tipos por valor difieren de los tipos por referencia en que las variables de los tipos por valor contienen directamente su valor, mientras que las variables de los tipos por referencia almacenan referencias a objetos. 
  Con los tipos por referencia, es posible que dos variables se refieran al mismo objeto, y por tanto es posible que las operaciones sobre una variable afecten al objeto al que hace referencia otra variable. Con los tipos por valor, cada variable tienen su propia copia de los datos, y las operaciones sobre una no afectará a la otra. </paragraph>
  
  <paragraph>El ejemplo <code_example><![CDATA[
using System;  
class Class1  
{  
   public int Value = 0;  
}  
class Test  
{  
   static void Main() {  
      int val1 = 0;  
      int val2 = val1;  
      val2 = 123;  
      Class1 ref1 = new Class1();  
      Class1 ref2 = ref1;  
      ref2.Value = 123;  
      Console.WriteLine("Values: {0}, {1}", val1, val2);  
      Console.WriteLine("Refs: {0}, {1}", ref1.Value, ref2.Value);  
   }  
}  
]]></code_example>ilustra la diferencia. La salida producida es<code_example><![CDATA[
Values: 0, 123  
Refs: 123, 123  
]]></code_example></paragraph>
  <paragraph>La asignación de la variable local val2 no modifica la variable local val1 porque ambas variables locales son tipos por valor ( de tipo <keyword> int </keyword>) y cada variable local de un tipo por valor tiene su propio almacenamiento. En contraste, la asignación ref2.Value = 123; afecta al objeto que tiene tanto a ref1 como ref2 como referencia, pues ref1 y ref 2 son clases y, por tanto, tipos por referencia. </paragraph>
  
  <paragraph>Las líneas <code_example><![CDATA[
Console.WriteLine("Values: {0}, {1}", val1, val2);  
Console.WriteLine("Refs: {0}, {1}", ref1.Value, ref2.Value);  
]]></code_example>merecen comentarse en más detalle, pues muestran algunos comportamientos de formateo de texto en Console.WriteLine, la cual, de hecho, puede tomar un número variable de argumentos. El primer argumento es una cadena, la cual puede contener indicadores numerados como {0} ó {1}. Cada indicador se refiere a un argumento. Por ejemplo, {0} se refiere al primer argumeto, {1} al segundo y así seguidamente. Antes de que la salida sea enviada a la consola, cada indicador es reemplazado con el valor formateado del argumento correspondiente. </paragraph>

  <paragraph>Los programadores pueden definir nuevos tipos de valor a traves de las declaraciones enum ( tipo enumerado ) o struct ( estructuras ), y pueden definirse nuevos tipos por referencia mediante declaración de clases, interfaces y delegados. El ejemplo <code_example><![CDATA[
using System;  
public enum Color  
{  
   Red, Blue, Green  
}  
public struct Point   
{   
   public int x, y;   
}  
public interface IBase  
{  
   void F();  
}  
public interface IDerived: IBase  
{  
   void G();  
}  
public class A  
{  
   protected virtual void H() {  
      Console.WriteLine("A.H");  
   }  
}  
public class B: A, IDerived   
{  
   public void F() {  
      Console.WriteLine("B.F, implementation of IDerived.F");  
   }  
   public void G() {  
      Console.WriteLine("B.G, implementation of IDerived.G");  
   }  
   override protected void H() {  
      Console.WriteLine("B.H, override of A.H");  
   }  
}  
public delegate void EmptyDelegate();  
]]></code_example>ilustra un ejemplo de cada clase de declaración. Más tarde se describirá la declaración de los distintos tipos más en detalle. </paragraph>
</clause>

	<!-- traducción Fabian Seoane, fseoane@wanadoo.es -->
