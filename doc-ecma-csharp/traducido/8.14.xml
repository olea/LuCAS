<?xml version="1.0"?>
<clause number="8.14" title="Attributos" informative="true">
  <paragraph>C# es un lenguaje imperativo, pero como todos los lenguajes
  imperativos, tiene algunos elementos declarativos. Por ejemplo, la
  accesibilidad de un método en una clase se especifica declarándo el método
  como  public,
  protected, internal, protected internal, o private. C# generaliza esta
  capacidad, de forma que los programadores pueden inventar nuevos tipos de
  información declarativa, adjuntarlo a varias entidades del programa, y
  recuperar esta información en tiempo de ejecución. Los programas especifican
  esta información declarativa adicional declarando y usando atributos
  (<hyperlink>24</hyperlink>). </paragraph>
  
  <paragraph>Por ejemplo, una plataforma puede definir un atributo
	  AyudaAttribute,
  de forma que éste puede ser emplazado en elementos del programa tales como clases o metodos
  permitiendo a los desarrolladores proporcionar una relación entre los elementos
  del programa y la documentación para éstos. El ejemplo <code_example><![CDATA[
using System;  

[AttributeUsage(AttributeTargets.All)]  
public class AyudaAttribute: Attribute  
{  
   public AyudaAttribute(string url) {  
      this.url = url;  
   }  
   public string Tema = null;  
   private string url;  
   public string Url {   
      get { return url; }  
   }  
}  
]]></code_example>define una clase Atributo llamada AyudaAttribute, o Ayuda para
abreviar (los atributos que terminan en el sufijo Attribute, cuando son
utilizados con la notación de atributos [] pueden ser llamados sin el sufijo
Attribute), que tiene un parámetro posicional (string url) y un parámetro de
nombre (String Tema), Los parámetros posicionales son definidos por los
parámetros formales para los constructores de instancia públicos de la clase
atributo, y los parámetros por nombre son definidos por campos no-estáticos de
lectura-escritura y propiedades de la clase atributo. </paragraph>
  <paragraph>El ejemplo <code_example><![CDATA[
[Ayuda("http://www.mycompany.com/.../Class1.htm")]  
public class Class1   
{  
   [Ayuda("http://www.mycompany.com/.../Class1.htm", Tema = "F")]  
   public void F() {}  
}  
]]></code_example>muestra varios usos del atributo Ayuda. </paragraph>
  <paragraph>La información de los atributos para un elemento del programa dado
  puede ser utilizada en tiempo de ejecución usando soporte para reflexión. El
  ejemplo <code_example><![CDATA[
using System; 

class Test  
{  
   static void Main() {  
      Type type = typeof(Class1);  
      object[] arr = type.GetCustomAttributes(typeof(AyudaAttribute),  
      true);  
      if (arr.Length == 0)  
      Console.WriteLine("Class1 no tiene atributo Ayuda.");  
      else {  
         AyudaAttribute ha = (AyudaAttribute) arr[0];  
         Console.WriteLine("Url = {0}, Tema = {1}", ha.Url, ha.Topic);  
      }  
   }  
}  
]]></code_example>mira si Class1 tiene un atributo Ayuda, y escribe los valores
asociados Url y Tema si el atributo está presente. </paragraph>
  <paragraph>Fin del texto informativo. </paragraph>
</clause>

<!-- Traducción Fabian Seoane, fabian@fseoane.net -->
