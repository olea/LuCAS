<?xml version="1.0"?>
<clause number="10.6" title="Firmas y sobrecarga">
  <paragraph>Los métodos, constructores de instancia, indexadores, y operadores
  quedan caracterizados por su firma: 
  <list>
  <list_item>La firma de un método consiste en el nombre del método y el tipo y
  la clase (por valor, referencia o de salida) de cada uno de sus parámetros
  formales, considerados en el orden de izquierda a derecha. La firma de un
  método no incluye el tipo de retorno, y tampoco incluye el modificador params
  que puede ser especificado para el último parámetro de la aderecha </list_item>
  <list_item> La firma de un constructor de instancia consiste en el tipo y
  la clase (por valor, referencia o de salida) de cada uno de sus parámetros
  formales, considerados en el orden de izquierda a derecha.  La firma de un
  constructor de instancia no incluye el modificador params
  que puede ser especificado para el último parámetro de la aderecha. </list_item>
  <list_item> La firma de un indexador consiste en el tipo de cada uno de sus
  parámetros formales, considerando el orden de izquierda a derecha. La firma de
  un indexador no incluye el tipo del elemento. </list_item>
  <list_item> La firma de un operador consiste en el nombre del operador y el
  tipo de cada uno de sus parámetros formales, considerados con el orden de
  izquierda a derecha. La firma de un operador de no incluye el tipo devuelto. </list_item>
  </list></paragraph>
  <paragraph>Las firmas son el mecanismo que posibilita la sobrecarga de métodos
  en clases, estructuras e interfaces: 
  <list>
  <list_item>La sobrecarga de método le permite a una clase, estructura o
  interfaz declarar varios métodos con el mismo nombre, siempre y cuando su
  firma sea única a lo largo de dicha clase, estructura o interfaz. </list_item>
  <list_item>La sobrecarga de constructores de instancia le permite a una clase
  o estructura declarar varios métodos con el mismo nombre, siempre y cuando su
  firma sea única a lo largo de dicha clase o estructura. </list_item>
  <list_item>La sobrecarga de indexadores le permite a una clase, estructura o
  interfaz declarar varios indexadores con el mismo nombre, siempre y cuando su
  firma sea única a lo largo de dicha clase, estructura o interfaz. </list_item>

<list_item>La sobrecarga de operadores le permite a una clase o estructura 
declarar varios operadores con el mismo nombre, siempre y cuando su
  firma sea única a lo largo de dicha clase o estructura. </list_item>
  </list></paragraph>
  <paragraph>
    <example>[Ejemplo: El siguiente ejemplo muestra un conjunto de declaraciones
    de de métodos sobrecargados junto a su firma. <code_example><![CDATA[
interface ITest  
{  
   void F();              // F()  
   void F(int x);      // F(int)  
   void F(ref int x);     // F(ref int)  
   void F(out int x);     // F(out int)  
   void F(int x, int y);      // F(int, int)  
   int F(string s);      // F(string)  
   int F(int x);            // F(int)        error   
   void F(string[] a);     // F(string[])  
   void F(params string[] a);   // F(string[])   error  
}  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>Nóte que los modificadores ref y out forman parte de la firma
    (<hyperlink>17.5.1</hyperlink>). Por lo tanto,
    F(<keyword>int</keyword>), F(ref <keyword>int</keyword>), y F(out
    <keyword>int</keyword>) son todas firmas diferentes. También, nótese que el
    tipo devuelto y el modificador params no son parte de la firma, por lo que
    no es posible sobrecargar basándonos en el tipo devuelto o en la inclusión o
    exclusión del modificador params. Por lo tanto, la declaración de los
    métodos As such, F(<keyword>int</keyword>) y F(params string[]) expuestos
    anteriormente dan lugar a un error en tiempo de compilación. fin ejemplo]</example>
  </paragraph>
</clause>
