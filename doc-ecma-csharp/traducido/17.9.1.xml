<?xml version="1.0"?>
<clause number="17.9.1" title="Operadores unarios">
  <paragraph>Las siguientes reglas aplican a las declaraciones de los operadores unarios, cuando T denota el tipo clase o estructura que contiene la declaración de operador: <list><list_item> Un operador unario +, -, !, o ~ debe tomar un único parámetro de tipo T y puede regresar un tipo. </list_item><list_item> Un operador unario ++ o -- debe tomar un parámetro sencillo de tipo T y regresar un tipo de retorno T. </list_item><list_item> Un operador unario true o false debe tomar un único parámetro de tipo T y debe regresar un tipo <keyword>bool</keyword>. </list_item></list></paragraph>
  <paragraph>La firma de un operador unario consiste un símbolo operador (+, -, !, ~, ++, --, true, o false) y el tipo del parámetro formal único. El tipo de retorno no es parte de una firma de operador unario, tampoco es el nombre del parámetro formal. </paragraph>
  <paragraph>Los operadores true y false requieren una declaración de par. Un error en tiempo de compilación ocurre si la clase declara uno de esos operadores sin el otro. Los operadores true y false son descritos más adelante en <hyperlink>14.16</hyperlink>. </paragraph>
  <paragraph>
    <example>[Ejemplo: El siguiente ejemplo muestra una implementación y uso subsecuente del operador ++ para una clase vector de enteros: <code_example><![CDATA[
public class IntVector  
{  
   public int Length { ... }    // propiedad solo lectura
   public int this[int index] { ... } // indexador de solo-escritura
   public IntVector(int vectorLength) { ... }  
   public static IntVector operator++(IntVector iv) {  
      IntVector temp = new IntVector(iv.Length);  
      for (int i = 0; i < iv.Length; ++i)  
      temp[i] = iv[i] + 1;  
      return temp;  
   }  
}  
class Test  
{  
   static void Main() {  
      IntVector iv1 = new IntVector(4);  // vector de 4x0  
      IntVector iv2;  
      
      iv2 = iv1++;  // iv2 contiene 4x0, iv1 contiene 4x1  
      iv2 = ++iv1;  // iv2 contiene 4x2, iv1 contiene 4x2  
   }  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>Note como el método operador regresa el valor producido al agregar 1 al operando, solo como los operadores de incremento y decremento posfijo (<hyperlink>14.5.9</hyperlink>), 
    y los operadores de incremento y decremento prefijos (<hyperlink>14.6.5</hyperlink>). </example>
  </paragraph>
  <paragraph>
    <example>Nada parecido en C++, este método no necesita, y de hecho, no debe, modificar el valor de su operando directamente. fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
