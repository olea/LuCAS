<?xml version="1.0"?>
<clause number="8.5" title="Expresiones" informative="true">
  <paragraph>C# incluye operadores unarios, binarios, y uno ternario. La siguiente tabla hace un sumario de los 
  operadores, listándolos por orden de preferencia del más alto al más bajo: 
<table_line>Sección donde se describen los operadores</table_line>
<table_line><hyperlink>14.5</hyperlink> Primarios: x.y f(x) a[x] x++  x-- new typeof checked unchecked </table_line>
<table_line><hyperlink>14.5</hyperlink> Unarios:  + -! ~ ++x --x (T)x </table_line>
<table_line><hyperlink>14.7</hyperlink> Multiplicativo: * / % </table_line>
<table_line><hyperlink>14.7</hyperlink> Additivos: +</table_line>
<table_line><hyperlink>14.8</hyperlink> Desplazamiento:  &lt;&lt; &gt;&gt; </table_line>
<table_line><hyperlink>14.9</hyperlink> Relacional y de prueba de tipos: &lt; &gt; &lt;= &gt;= is as </table_line>
<table_line><hyperlink>14.9</hyperlink> De igualdad: == != </table_line>
<table_line><hyperlink>14.10</hyperlink> AND Lógico: &amp;</table_line>
<table_line><hyperlink>14.10</hyperlink> XOR Lógico; ^</table_line>
<table_line><hyperlink>14.10</hyperlink> OR Lógico: |</table_line>
<table_line><hyperlink>14.11</hyperlink> AND Condicional: &amp;&amp;</table_line>
<table_line><hyperlink>14.11</hyperlink> OR Condicional: ||</table_line>
<table_line><hyperlink>14.12</hyperlink> Condicional: ?:</table_line>
<table_line><hyperlink>14.13</hyperlink> De asignación: = *= /= %= += -= &lt;&lt;= &gt;&gt;= &amp;= ^= |= </table_line>
  Cuando una expresión contiene múltiples operadores, la precedencia de los operadores controla el orden en
  en que los operadores individuales son evaluados. Por ejemplo, la expresión x + y * z se evalúa como 
  x + (y * z) porque el operador * tiene una precedencia más alta que el operador +. </paragraph>

  <paragraph>Cuando se debe realizar una operación entre dos operadores de la misma precedencia, la asociatividad
  de los operadores controla en orden en el que se realizan las operaciones: 
  <list>
    <list_item>Salvo para los operadores de asignación, todos los operadores binarios son asociativos por la 
    izquierdo, esto es, que las operaciones se realizan de izqueirda a derecha. Por ejemplo, x + y + z se
    evalúa como (x + y) + z. 
    </list_item>
    <list_item>El operador de asignación y el operador ternario (?:) son asociativos por la derecha, 
    esto es, que las operaciones se realizan de derecha a izquierda. Por ejemplo, x = y = z se evalúa como
    x = (y = z). 
    </list_item>
  </list>
  </paragraph>
  
  <paragraph>La precedencia y asociatividad puede ser controlada usando paréntesis. Por ejemplo, x + y * z 
  primero multiplica y por z y luego añade x al resultado, pero (x + y) * z primero suma x e y, y multiplica
  el resultado por z. </paragraph>
  
</clause>


<!-- traducción Fabian Seoane, fseoane@wanadoo.es -->
