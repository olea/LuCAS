<?xml version="1.0" encoding="utf-8"?>
<clause number="8.4" title="Gestion Automatica de memoria" informative="true">
  <paragraph>La gestión manual de memoria requiere que el programador se ocupe del alojamiento y la liberación de bloques de memoria. Esto consume grandes cantidades de tiempo y puede ser difícil. En C#, se proporciona gestión automática de memoria para que los desarrolladores se liberen de esta pesada tarea. En la gran mayoría de los casos, la gestión automática de memoria aumenta la calidad del código y aumenta la productividad del programador sin impactar negativamente en la expresividad o el rendimiento
  </paragraph>
  <paragraph>El ejemplo<code_example><![CDATA[
using System;  
public class Stack  
{  
   private Node first = null;  
   public bool Empty {  
      get {  
         return (first == null);  
      }  
   }  
   public object Pop() {  
      if (first == null)   
      throw new Exception("Can't Pop from an empty Stack.");  
      else {  
         object temp = first.Value;  
         first = first.Next;  
         return temp;  
      }  
   }  
   public void Push(object o) {  
      first = new Node(o, first);  
   }  
   class Node  
   {  
      public Node Next;  
      public object Value;  
      public Node(object value): this(value, null) {}  
      public Node(object value, Node next) {  
         Next = next;  
         Value = value;  
      }  
   }  
}  
]]></code_example>muestra una pila (stack) implementado como una lista enlazada de insancias de nodos. Las instancias de nodos se crean en el método Push y son eliminadas automáticamente cuando ya no son necesarias. Una instancia del nodo se vuelve elegible para el recolector de basura cuando ya no le es posible al código acceder a él. Por ejemplo, cuando se quita un elemento de la pila, 
  el nodo asociado se vuelve elegible para la gestión automática de memoria. </paragraph>
<paragraph>El ejemplo <code_example><![CDATA[
class Test  
{  
   static void Main() {  
      Stack s = new Stack();  
      for (int i = 0; i < 10; i++)  
      s.Push(i);  
      s = null;  
   }  
}  
]]></code_example>muestra código que usa la clase Stack (pila). Se crea una pila (Stack) con 10 elementos  y se inicializa, y se les asigna el valor nulo (null). Una vez que se le ha asignado a la variable s el valor null, la pila y las instancias de los 10 nodos asociados se vuelven elegibles para el recolector de basura. Éste puede limpiar la memoria que no utilizada inmediatamente, pero no se requiere que lo haga así. </paragraph>

  <paragraph>La gestión automática de memoria subyacente en C# puede trabajar moviendo objetos continuamente en memoria, pero este movimiento es invisible a la mayoría de programadores. Para los programadores que necesitan un control
  muy fino o ese pequeño extra de rendimiento, C# proporciona la abilidad para escribir código &quot;no seguro&quot;. Dicho código puede manipular explícitamente tipos puntero direcciones de memoria, a pesar de que es preciso fijar los objetos temporalmente para prevenir que la gestión automática de memoria los mueva. </paragraph>
  
  <paragraph>La posibilidad de escribir código &quot;no seguro&quot; es en realidad una característica muy  &quot;segura&quot; tanto de la persectica del programador como de la del usuario. El código seguro debe de ser marcado con el modificador <keyword>unsafe</keyword>, y así los programadores no pueden usar las características del código no seguro
  accidentalmente, y el compilador y el motor de ejecución traban juntos para asegurar que el código no seguro no puede camuflarse como código seguro. Estas restricciones limitan el uso de código no seguro a situaciones
  en las que se tiene confianza en el código. </paragraph> 
  
  <paragraph>El ejemplo <code_example><![CDATA[
using System;  
class Test  
{  
   static void WriteLocations(byte[] arr) {  
      unsafe {  
         fixed (byte* pArray = arr) {  
            byte* pElem = pArray;  
            for (int i = 0; i < arr.Length; i++) {  
               byte value = *pElem;  
               Console.WriteLine("arr[{0}] at 0x{1:X} is {2}",  
               i, (uint)pElem, value);  
               pElem++;  
            }  
         }  
      }  
   }  
   static void Main() {  
      byte[] arr = new byte[] {1, 2, 3, 4, 5};  
      WriteLocations(arr);  
   }  
}  
]]></code_example>muestra un bloque no seguro en un método llamado WriteLocations que fija una instancia de un arreglos y usa manipulación de punteros para iterar sobre los elementos. El índice, valor y dirección de cada elemento del arreglo se muestran en la consola. Un posible ejemplo de salida es:
  <code_example><![CDATA[
arr[0] at 0x8E0360 is 1  
arr[1] at 0x8E0361 is 2  
arr[2] at 0x8E0362 is 3  
arr[3] at 0x8E0363 is 4  
arr[4] at 0x8E0364 is 5  
]]></code_example>pero, por supuesto, la dirección exacta de memoria puede ser diferente en diferentes ejecuciones
  de la aplicación. </paragraph>
</clause>


<!-- Traducción Fabian Seoane, fseoane@wanadoo.es -->

