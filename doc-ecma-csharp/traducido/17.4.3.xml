<?xml version="1.0"?>
<clause number="17.4.3" title="Campos volátiles">
  <paragraph>Cuando una <non_terminal where="17.4">declaración-de-campo</non_terminal> incluye un modificador volátil (volatile), los campos introducidos por la declaración son campos volátiles. Para campos no volátiles, técnicas de optimización que reodernan instrucciones pueden dejar resultados indeseados e impredecibles en programas multi-hilo que accesan a los campos sin sincronización como la provista por la <non_terminal where="15.12">sentencia-lock</non_terminal> (<hyperlink>15.12</hyperlink>). Esas optimizaciones pueden ser realizadas por el compilador, por el sistema de ejecución, o por el hardware. Para campos volátiles, dichas optimizaciones de reordenamiento son restringidas: <list><list_item> Una lectura de un campo volátil es llamada una lectura volátil. Una lectura volátil tiene &quot;semánticas adquiridas&quot;; esto es, garantiza que ocurrir previa cualquier referencia de memoria que ocurra después de la secuencia de instrucción.</list_item><list_item> Una escritura de un campo volátil es llamado una escritura volátil. Una escritura volátil tiene &quot;semánticas liberadas&quot;; esto es, garantiza realizarse después de cualquier referencia de memoria previa a la instrucción de escritura en la secuencia de instrucción. </list_item></list></paragraph>
  <paragraph>Esas restricciones aseguran que todos los hilos observaran escrituras volátiles realizadas por cualquier otro hilo en el orden en el cual fueron realizados. Una implementación ajustada no requiere proveer una ordenación total sencilla de las escrituras volátiles como es visto desde todos los hilos de ejecución. El tipo de un campo volátil debe ser uno de los siguientes. <list><list_item> Un <non_terminal where="11.2">tipo-por-referencia</non_terminal>. </list_item><list_item> El tipo <keyword>byte</keyword>, <keyword>sbyte</keyword>, <keyword>short</keyword>, <keyword>ushort</keyword>, <keyword>int</keyword>, <keyword>uint</keyword>, <keyword>char</keyword>, <keyword>float</keyword>, o <keyword>bool</keyword>. </list_item><list_item> Un <non_terminal where="11.1">tipo-enumeración</non_terminal> teniendo un tipo base enum de <keyword>byte</keyword>, <keyword>sbyte</keyword>, <keyword>short</keyword>, <keyword>ushort</keyword>, <keyword>int</keyword>, o <keyword>uint</keyword>. </list_item></list></paragraph>
  <paragraph>
    <example>[Ejemplo: El ejemplo <code_example><![CDATA[
using System;  
using System.Threading;  
class Test  
{  
   public static int result;  
   public static volatile bool finished;  
   static void Thread2() {  
      result = 143;  
      finished = true;  
   }  
   static void Main() {  
      finished = false;  
      // Ejecuta Thread2() en un nuevo hilo
      new Thread(new ThreadStart(Thread2)).Start();  
      // Esperar por Thread2 para que señale que tiene una señal al establecer
      // finished a true.  
      for (;;) {  
         if (finished) {  
            Console.WriteLine("result = {0}", result);  
            return;  
         }  
      }  
   }  
}  
]]></code_example>produce la salida: <code_example><![CDATA[
result = 143  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>En el ejemplo, el método Main inicia un nuevo hilo que ejecuta el método Thread2. Este método almacena un valor dentro de un campo no volátil llamado result, entonces almacena true en el campo volatil finished. El hilo principal espera que el campo finished sea establecido a true, entonces lee el campo result. Debido a que el campo result ha sido declarado como volátil, el hilo principal debe leer el valor 143 desde el campo result. Si el campo finished no ha sido declarado volátil, entonces podría ser permisible para almacenar result y ser visible para el hilo principal antes del almacenamiento de finished, y por lo tanto para el hilo principal leer el valor 0 del campo result. Declarando finished como campo volátil previene de dicha inconsistencia. fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
