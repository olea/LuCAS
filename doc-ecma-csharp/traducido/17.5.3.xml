<?xml version="1.0"?>
<clause number="17.5.3" title="Métodos virtuales">
  <paragraph>Cuando una declaración de un método de instancia incluye un modificador virtual, se dice que ese método es un método estático. Cuando no hay modificador virtual presente, el método se dice que es método virtual. </paragraph>
  <paragraph>La implementación de un método no virtual es invariante: La implementación es la misma si el método es invocado en una instancia de la clase en la cual es declarado o una instancia de una clase derivada. En contraste, la implementación de un método virtual puede ser suplantado por clases derivadas. El proceso de suplantar la implementación de un método virtual heredado es conocido como reemplazado del método (<hyperlink>17.5.4</hyperlink>). </paragraph>
  <paragraph>En una invocación de un método virtual, el tipo en tiempo de ejecución de la instancia de la cual esa invocación toma lugar determina la implementación del método actual a invocar. En una invocación de un método no virtual, el tipo en tiempo de compilación de la instancia es el factor determinante. En términos precisos, cuando un método llamado N es invocado con una lista de argumentos A en una instancia con el tipo de tiempo de compilación C y un tiempo de tiempo de ejecución R (cuando R es ya sea C o una clase derivada de C), la invocación es procesada como sigue: <list><list_item> Primero, la resolución de la sobrecarga es aplicada a C, N, y A, para seleccionar un método específico M desde el juego de métodos declarados heredados y en C. Esto esta descrito en <hyperlink>14.5.5.1</hyperlink>. </list_item><list_item> Entonces, si M es un método no virtual, M es invocado. </list_item><list_item> De cualquier forma, M es un método virtual, y las implementación más derivada de M que respecta a R es invocada. </list_item></list></paragraph>
  <paragraph>Para cada método virtual declarada en o heredad por una clase, ahí existe una implementación derivada del método con respecto a esa clase. La implementación más derivada de un método virtual M con respecto a clase R es determinada como sigue: <list><list_item> Si R contiene la declaración introductoria virtual de M, entonces esa es la implementación más derivada de M. </list_item><list_item> De otro modo, si R contiene un reemplazo de M, entonces este es la implementación mas derivada de M. </list_item><list_item> De otro modo, la implementación más derivada de M es la misma que su clase base directa de R. </list_item></list></paragraph>
  <paragraph>
    <example>[Ejemplo: El siguiente ejemplo ilustra las diferencias entre el los métodos virtuales y no virtuales: <code_example><![CDATA[
using System;  
class A  
{  
   public void F() { Console.WriteLine("A.F"); }  
   public virtual void G() { Console.WriteLine("A.G"); }  
}  
class B: A  
{  
   new public void F() { Console.WriteLine("B.F"); }  
   public override void G() { Console.WriteLine("B.G"); }  
}  
class Test  
{  
   static void Main() {  
      B b = new B();  
      A a = b;  
      a.F();  
      b.F();  
      a.G();  
      b.G();  
   }  
}  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>En el ejemplo, A introduce un método no virtual F y un método virtual G. La clase B introduce un método new virtual F, de esta manera oculta el heredado F, y también reemplaza el método heredado G. El ejemplo produce la salida: <code_example><![CDATA[
A.F  
B.F  
B.G  
B.G  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>Note que la sentencia a.G() invoca B.G, no A.G. Esto es porque el tipo en tiempo de ejecución de la instancia (la cual es B), no el tipo en tiempo de compilación de la instancia (la cual es A), determina la implementación del método actual a invocar. fin ejemplo]</example>
  </paragraph>
  <paragraph>Porque los métodos permiten ocultar métodos heredados, es posible para un clase contener varios métodos virtuales con la misma firma. Esto no presenta un problema de ambigüedad, debido a que todos excepto el método más derivado es oculto. <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
using System;  
class A  
{  
   public virtual void F() { Console.WriteLine("A.F"); }  
}  
class B: A  
{  
   public override void F() { Console.WriteLine("B.F"); }  
}  
class C: B  
{  
   new public virtual void F() { Console.WriteLine("C.F"); }  
}  
class D: C  
{  
   public override void F() { Console.WriteLine("D.F"); }  
}  
class Test  
{  
   static void Main() {  
      D d = new D();  
      A a = d;  
      B b = d;  
      C c = d;  
      a.F();  
      b.F();  
      c.F();  
      d.F();  
   }  
}  
]]></code_example>las clases C y D contienen dos métodos virtuales con la misma firma: Una introducida por A y la otra introducida por C. El método introducido por C oculta el método heredado por A. De cualquier manera, la declaración reemplazada en D reemplaza el método introducido por C, y no es posible para D reemplazar el método introducido por A. El ejemplo produce la salida: <code_example><![CDATA[
B.F  
B.F  
D.F  
D.F  
]]></code_example></example></paragraph>
  <paragraph>
    <example>Note que no es posible invocar el método virtual oculto por accesar una instancia de D a través como un tipo menos derivado en el cual el método no esta oculto. fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
