<?xml version="1.0"?>
<clause number="20.4.5" title="Clases abstractas e interfaces">
  <paragraph>Al igual que una clase no-abstracta, una clase abstracta debe proveer implementaciones para todos los miembros de las interfaces que están listados en la lista de clases base de una clase. Sin embargo, a una clase abstracta se le permite correlacionar métodos de interfaces con métodos abstractos. <example>[Ejemplo: Por ejemplo <code_example><![CDATA[
interface IMethods  
{  
   void F();  
   void G();  
}  
abstract class C: IMethods  
{  
   public abstract void F();  
   public abstract void G();  
}  
]]></code_example></example></paragraph>
  <paragraph>
    <example>Aquí, la implementación de IMethods correlaciona F y G con métodos abstractos, los cuales deben ser sobreescritos en las clases no-abstractas que deriven de C. fin del ejemplo]</example>
  </paragraph>
  <paragraph>Note que las implementaciones explícitas de miembros de interfaz no pueden ser abstractas, pero, por supuesto, a las implementaciones explícitas de miembros de interfaz se les permite llamar a métodos abstractos. <example>[Ejemplo: Por ejemplo <code_example><![CDATA[
interface IMethods  
{  
   void F();  
   void G();  
}  
abstract class C: IMethods  
{  
   void IMethods.F() { FF(); }  
   void IMethods.G() { GG(); }  
   protected abstract void FF();  
   protected abstract void GG();  
}  
]]></code_example></example></paragraph>
  <paragraph>
    <example>Aquí, a las clases no-abstractas que deriven de C les sería requerido sobreescribir FF y GG, proveyendo así la implementación real de IMethods. fin del ejemplo]</example>
  </paragraph>
</clause>
<!-- traducción Rodolfo Campero, rodolfo.campero@gmail.com -->
