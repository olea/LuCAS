<?xml version="1.0"?>
<clause number="8.2.4" title="Unificación del sistema de tipos" informative="true">
  <paragraph>C# proporciona un &quot;sistema unificado de tipos&quot;. 
    Todos los tipos, incluyendo los tipo por valor, derivan del tipo
    object (objeto). Es posible llamar a todos los métodos de object
    para cualquier valor, incluso en valores &quot; primitivos &quot; 
    , como pueden ser <keyword>int</keyword>. El ejemplo 
    <code_example><![CDATA[
using System;  
class Test  
{  
   static void Main() {  
      Console.WriteLine(3.ToString());  
   }  
}  
]]></code_example>llama al método ToString definido mediante object
  en un entero literal, dando la salida &quot;3&quot;. </paragraph>
  <paragraph>El ejemplo <code_example><![CDATA[
class Test  
{  
   static void Main() {  
      int i = 123;  
      object o = i;   // boxing  
      int j = (int) o;  // unboxing  
   }  
}  
]]></code_example>es mas interesante. Un valor <keyword>int</keyword> puede
    ser convertido en object y luego ser convertido de nuevo a int. 
    Este ejemplo muestra a la vez lo que se conoce como emnmarcar
    y desmarcaro. Cuando una variable que es un tipo por valor 
    necesita ser un tipo por referencia, se puede enmarcar como 
    un objeto object que almacene su valor. Desenmarcar es justamente
    lo contrario, y el valor se copia fuera de el objeto object en
    un emplazamiento apropiado
  </paragraph>

  <paragraph>Este sistema de unificación de tipos proporciona
  tipos por valor con los beneficios de orientación a objetos sin
  introducir demasiada sobrecarga. Para programas que no necesitan
  que los valores <keyword>int</keyword> actúen como objetos, 
  los tipos <keyword>int</keyword> son simplemente valores 
  de 32 bits. Para programas que necesitan que los valores
  <keyword>int</keyword> se comporten como objetos, se 
  puede activar este comportamiento bajo demanda. Esta habilidad
  de tratar a los tipos por valor como objetos llena la laguna
  existente en la mayoría de los lenguajes entre tipos por valor
  y tipos por referencia. Por ejemplo, la clase Stack puede proporcionar
  métodos Push y Pop que toman y devuelven valores object. 
  <code_example><![CDATA[
public class Stack  
{  
   public object Pop() {...}  
   public void Push(object o) {...}  
}  
]]></code_example></paragraph>
  <paragraph>Puesto que C# tiene un sistema unificado de tipos, la clase
  Stack puede ser usada con elementos de cualquier tipo, incluyendo
  tipos por valor, como <keyword>int</keyword>.</paragraph>
</clause>

	<!-- traducción Fabian Seoane, fseoane@wanadoo.es -->
