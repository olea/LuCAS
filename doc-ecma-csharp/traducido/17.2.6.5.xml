<?xml version="1.0"?>
<clause number="17.2.6.5" title="Acceso a miembros privados y protegidos de un tipo contenedor">
  <paragraph>Un tipo anidado tiene acceso a todos los miembros que son accesibles a su tipo contenedor, incluyendo miembros de tipo contenedor que tienen accesibilidad privada y protegida declarada. <example>[Ejemplo: El ejemplo <code_example><![CDATA[
using System;  
class C   
{  
   private static void F() {  
      Console.WriteLine("C.F");  
   }  
   public class Nested   
   {  
      public static void G() {  
         F();  
      }  
   }  
}  
class Test   
{  
   static void Main() {  
      C.Nested.G();  
   }  
}  
]]></code_example>muestra una clase C que contiene una clase anidada llamada Nested. Dentro de Nested, el metodo G llama al metodo estatico F definido en C, y F tiene accesibilidad privada declarada. fin ejemplo]</example> </paragraph>
  <paragraph>Un tipo anidado tambien puede acceder a miembros protegidos definidos en un tipo base de tu tipo contenedor. <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
using System;  
class Base   
{  
   protected void F() {  
      Console.WriteLine("Base.F");  
   }  
}  
class Derived: Base   
{  
   public class Nested   
   {  
      public void G() {  
         Derived d = new Derived();  
         d.F();    // ok  
      }  
   }  
}  
class Test   
{  
   static void Main() {  
      Derived.Nested n = new Derived.Nested();  
      n.G();  
   }  
}  
]]></code_example>la clase anidada Derived.Nested accesa al método protegido F definido en la clase base de Derived, llamada Base, al llamarle a través de una instancia de Derived. fin ejemplo]</example> </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
