<?xml version="1.0"?>
<clause number="8.7.5" title="Eventos" informative="true">
  <paragraph>Un evento es un miembro que permite a un objeto o clase
  proporcionar notificaciones. Una clase define un evento proporcionando una
  declaración de evento ( lo que se parece a una declaración de campo con una
  palabra reservada añadida) y un conjunto opcional de accesores de evento. El tipo
  de esta declaración debe de tipo delegado. </paragraph>
  
  <paragraph>Una instancia de un tipo delegado encapsula uno o más entidades
  susceptibles de ser llamadas. Para los métodos instancia, una entidad
  susceptible de ser llamada consiste en una instancia y un método en dicha
  instancia. Para los métodos estáticos, una entidad susceptible de ser llamada
  consiste simplemente en un método. Dada una instancia de un delegado y un
  conjunto apropiado de argumentos, es posible invocar a todos los métodos
  instancia del delegado con ese conjunto de argumentos </paragraph>
  <paragraph>En el ejemplo <code_example><![CDATA[
public delegate void EventHandler(object sender, System.EventArgs e);  
public class Boton   
{  
   public event EventHandler Click;  
   public void Reset() {  
      Click = null;  
   }  
}  
]]></code_example>la clase Boton define un evento Click de tipo EventHandler.
Dentro de la clase Boton, el miembro Click es exactamente como el campo privado
de un tipo EventHAndler. De todas formas, fuera de la clase Boton, el miembro
Click solamente puede ser usado en el lado izquierdo de los operadores += y -=.
El operador += añade un manipulador para el evento, y el operador -= quita un manipulador para el evento. El ejemplo <code_example><![CDATA[
using System;  
public class Form1   
{  
   public Form1() {  
      // Añade Boton1_Click como manipulador de evento para el evento Click de Boton1  
      Boton1.Click += new EventHandler(Boton1_Click);  
   }  
   Boton Button1 = new Boton();  
   void Boton1_Click(object sender, EventArgs e) {  
      Console.WriteLine("Boton1 was clicked!");  
   }  
   public void Desconectar() {  
      Boton1.Click -= new EventHandler(Boton1_Click);  
   }  
}  
]]></code_example>muestra una clase Form1 que añade Boton1_Click como un
manipulador de evento para el evento Click de Boton1. En el método Desconectar, ese manipulador de eventos es quitado. </paragraph>
  <paragraph>Para una simple declaración de un evento como por ejemplo <code_example><![CDATA[
public event EventHandler Click;  
]]></code_example>el compilador autmáticamente proporciona la implementación subyacente a los operadores += y -= . </paragraph>
  <paragraph>Un programador que quiera más control puede proporcionar
  explÃ­citamente los accesores add ( añade ) y remove ( quita ). Por ejemplo, la
  clase Boton podrÃ­a haber sido escrita de la siguiente manera: <code_example><![CDATA[
public class Boton   
{  
   private EventHandler handler;  
   public event EventHandler Click {  
      add { handler += value; }       
      remove { handler -= value; }  
   }  
}  
]]></code_example></paragraph>
  <paragraph>Este cambio no tiene ningún efecto en código cliente, pero permite
  más flexibilidad en la implementación de la clase Boton. Por ejemplo, el manipulador de eventos para Clik no necesita ser representado por un campo. </paragraph>
</clause>

<!-- Traducción Fabian Seoane fabian@fseoane.net -->
