<?xml version="1.0"?>
<clause number="17.6.2" title="Accesores">
  <paragraph>Las <non_terminal where="17.6.2">declaraciones-de-accesor</non_terminal> de una propiedad especifican las sentencias ejecutables asociadas con la lectura y escritura de esa propiedad. <grammar_production><name><non_terminal where="17.6.2">declaraciones-de-accesor</non_terminal></name> : <rhs><non_terminal where="17.6.2">obtener-declaración-de-accesor</non_terminal><non_terminal where="17.6.2">establecer-declaración-de-accesor</non_terminal><opt/></rhs><rhs><non_terminal where="17.6.2">establecer-declaración-de-accesor</non_terminal><non_terminal where="17.6.2">obtener-declaración-de-accesor</non_terminal><opt/></rhs></grammar_production><grammar_production><name><non_terminal where="17.6.2">obtener-declaración-de-accesor</non_terminal></name> : <rhs><non_terminal where="24.2">atributos</non_terminal><opt/><terminal>get</terminal><non_terminal where="17.6.2">cuerpo-del-accesor</non_terminal></rhs></grammar_production><grammar_production><name><non_terminal where="17.6.2">establecer-declaración-de-accesor</non_terminal></name> : <rhs><non_terminal where="24.2">atributos</non_terminal><opt/><terminal>set</terminal><non_terminal where="17.6.2">cuerpo-del-accesor</non_terminal></rhs></grammar_production><grammar_production><name><non_terminal where="17.6.2">cuerpo-del-accesor</non_terminal></name> : <rhs><non_terminal where="15.2">bloque</non_terminal></rhs><rhs><terminal>;</terminal></rhs></grammar_production></paragraph>
  <paragraph>Las declaraciones del accesor consisten de <non_terminal where="17.6.2">obtener-declaración-de-accesor</non_terminal>,  <non_terminal where="17.6.2">establecer-declaración-de-accesor</non_terminal>, o ambos. Cada declaración de accesor consiste del símbolo get o set seguido por un <non_terminal where="17.6.2">cuerpo-del-accesor</non_terminal>. Para propiedades abstract o extern, el <non_terminal where="17.6.2">cuerpo-del-accesor</non_terminal> para cada accesor especificado es simplemente un punto y coma. Para los accesores de cualquier propiedad no-abstract, no-extern, el <non_terminal where="17.6.2">cuerpo-del-accesor</non_terminal> es un bloque que especifica las sentencias a ser ejecutadas cuando el accesor correspondiente sea invocado. </paragraph>
  <paragraph>Un accesor get corresponde a un método sin parámetros con un valor de retorno del tipo de la propiedad. Excepto como la meta de una asignación, cuando una propiedad es referenciada en una expresión, el accesor get de la propiedad es invocado para computar el valor de la propiedad (<hyperlink>14.1.1</hyperlink>). El cuerpo de un accesor get debe conformar las reglas de los métodos que retornan un valor descritas en<hyperlink>17.5.8</hyperlink>. En particular, todas las sentencias de retorno en el cuerpo de un accesor get deben especificar una expresión que es implícitamente convertible al tipo de la propiedad. Además, el punto final de un accesor get no debe ser alcanzable. </paragraph>
  <paragraph>Un accesor get corresponde al método con un parámetro por valor sencillo del tipo de la propiedad y un tipo de retorno <keyword>void</keyword>. El parámetro implícito de un accesor set es siempre llamado value. cuando una propiedad es referenciada como la meta de una asignación (<hyperlink>14.13</hyperlink>), o como el operando de ++ o (<hyperlink>14.5.9</hyperlink>, --14.6.5), el accesor set es invocado con un argumento (cuyo valor es el que se encuentra del lado derecho de la asignación del operando de ++ o el operador --) que provee el nuevo valor (<hyperlink>14.13.1</hyperlink>). El cuerpo de un accesor set debe conformar a las reglas para  los métodos <keyword>void</keyword> descritos en <hyperlink>17.5.8</hyperlink>. En particular, sentencias de retorno en el cuerpo del accesor set no son permitidas para especificar una expresión. Debido a que un accesor set implícitamente tiene un parámetro llamado value, es un error en tiempo de compilación para una declaración de variable local en un accesor set tener ese nombre. </paragraph>
  <paragraph>Basado en la presencia o abstinencia de los accesores get y set, una propiedad es clasificada como sigue: <list><list_item> Una propiedad que incluye ambos accesores get y set se dice que es una propiedad de lectura-escritura. </list_item><list_item> Una propiedad que solo tiene un accesor get se dice que es una propiedad de sólo-lectura. Es un error en tiempo de compilación para un propiedad de sólo-lectura ser la meta para una asignación. </list_item><list_item> Una propiedad que únicamente tiene un accesor set se dice que es una propiedad de sólo-escritura. Excepto como meta de una asignación, es un error en tiempo de compilación referenciar a la propiedad de sólo-escritura en una expresión. <note>[Nota: Los operadores prefijos y posfijos ++ y -- no pueden ser aplicados como propiedades de sólo-escritura, debido a que esos operador leen el valor viejo y su operando antes que escriban uno nuevo. fin nota]</note> </list_item></list></paragraph>
  <paragraph>
    <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
public class Button: Control  
{  
   private string caption;  
   public string Caption {  
      get {  
         return caption;  
      }  
      set {  
         if (caption != value) {  
            caption = value;  
            Repaint();  
         }  
      }  
   }  
   public override void Paint(Graphics g, Rectangle r) {  
      // Código de pintado va aquí
   }  
}  
]]></code_example>el control Button declarara una propiedad publica Caption. El accesor get de la propiedad Caption regresa la cadena almacenada en el campo privado caption. El accesor set checa si el nuevo valor es diferente del valor actual, y si lo es, almacena el nuevo valor y repinta el control. Propiedades a menudo siguen un patrón mostrado anteriormente: El accesor get simplemente regresa un valor almacenado en un campo privado, y el accesor set modificar ese campo privado y entonces realiza acciones adicionales requeridas para totalmente actualizar el estado del objeto. </example>
  </paragraph>
  <paragraph>
    <example>Dada la clase Button anterior, el siguiente es un ejemplo del uso de la propiedad Caption: <code_example><![CDATA[
Button okButton = new Button();  
okButton.Caption = "OK";      // Invoca al accesor set
string s = okButton.Caption;    // Invoca al accesor get
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>Aquí, el accesor set es invocado al asignar un valor a la propiedad, y el accesor get es invocado al referenciar la propiedad en una expresión. fin ejemplo]</example>
  </paragraph>
  <paragraph>Los accesores get y set de una propiedad no son miembros distintos, y no es posible declarar accesores de una propiedad separadamente.<note>[Note: En si, no es posible para dos accesores de propiedad lectura-escritura tener una diferente accesibilidad. fin nota]</note> <example>[Ejemplo: El ejemplo <code_example><![CDATA[
class A  
{  
   private string name;  
   public string Name {       // Error, nombre del miembro duplicado
      get { return name; }  
   }  
   public string Name {       // Error, nombre del miembro duplicado
      set { name = value; }  
   }  
}  
]]></code_example>no declara una propiedad de lectura-escritura sencilla. En vez, declara dos propiedades con el mismo nombre, una sólo-lectura y una sólo-escritura. Debido a que dos miembros en la misma clase no pueden tener el mismo nombre, el ejemplo causa que un error en tiempo de compilación ocurra. fin ejemplo]</example> </paragraph>
  <paragraph>Cuando una clase derivada declara una propiedad con el mismo nombre que la propiedad heredada, la propiedad derivada oculta la propiedad heredada con respecto a la lectura y escritura. <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
class A  
{  
   public int P {  
      set {...}  
   }  
}  
class B: A  
{  
   new public int P {  
      get {...}  
   }  
}  
]]></code_example>la propiedad P en B oculta la propiedad P en A con respecto a lectura y escritura. De esta manera, en las sentencias <code_example><![CDATA[
B b = new B();  
b.P = 1;     // Error, B.P es sólo-lectura
((A)b).P = 1;  // Ok, referencia a A.P  
]]></code_example>la asignación de b.P causa que un error en tiempo de compilación sea reportado, debido a que la propiedad de sólo-lectura P en B oculta la propiedad de sólo-escritura P en A. Note, que de cualquier forma, ese moldeado puede ser usado para accesar a la propiedad oculta de P. fin ejemplo]</example> </paragraph>
  <paragraph>Nada parecido a los campos públicos, propiedades proveen una separación entre el estado interno del objeto y su interfaz pública. <example>[Ejemplo: Considere el ejemplo: <code_example><![CDATA[
class Label  
{  
   private int x, y;  
   private string caption;  
   public Label(int x, int y, string caption) {  
      this.x = x;  
      this.y = y;  
      this.caption = caption;  
   }  
   public int X {  
      get { return x; }  
   }  
   public int Y {  
      get { return y; }  
   }  
   public Point Location {  
      get { return new Point(x, y); }  
   }  
   public string Caption {  
      get { return caption; }  
   }  
}  
]]></code_example></example></paragraph>
  <paragraph>
    <example>Aquí, la clase Label usa dos campos <keyword>int</keyword>, x y y, para almacenar su localización. La localización. La localización es públicamente expuesta como una propiedad X y Y y como una propiedad Location de tipo Point. Si, en una futura versión de Label, se convierte mas conveniente almacenar la localización internamente como un Point, el cambio puede ser hecho sin afectar la interfaz publica de la clase: <code_example><![CDATA[
class Label  
{  
   private Point location;  
   private string caption;  
   public Label(int x, int y, string caption) {  
      this.location = new Point(x, y);  
      this.caption = caption;  
   }  
   public int X {  
      get { return location.x; }  
   }  
   public int Y {  
      get { return location.y; }  
   }  
   public Point Location {  
      get { return location; }  
   }  
   public string Caption {  
      get { return caption; }  
   }  
}  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>Han sido x y y en vez de campos de sólo-lectura, podría haber sido imposible hacer dicho cambio a la clase Label. fin ejemplo]</example>
  </paragraph>
  <paragraph>
    <note>[Nota: Exponer estado a través de propiedades no es necesariamente menos eficiente que exponer campos directamente. En particular, cuando una propiedad es no-virtual y contiene únicamente un poco de código, el ambiente de ejecución puede reemplazar llamadas a los accesores con el código actual de los accesores. Este proceso es conocido como inlining, y hace que los accesos a las propiedades tan eficientes como acceso a los campos, aun preserva la incrementada flexibilidad de propiedades. fin nota]</note>
  </paragraph>
  <paragraph>
    <example>[Ejemplo: Debido a que el accesor get es conceptualmente equivalente a la lectura de un campo, es considerado un estilo de mala programación para los accesores get tener efectos-de-lado observables. En el ejemplo <code_example><![CDATA[
class Counter  
{  
   private int next;  
   public int Next {  
      get { return next++; }  
   }  
}  
]]></code_example>el valor de la propiedad Next depende del número de veces que la propiedad ha sido previamente accesada. </example>
  </paragraph>
  <paragraph>
    <example>De esta forma, accesar la propiedad produce un observable efecto de lado, y la propiedad debe ser implementada en vez como un método. fin ejemplo]</example>
  </paragraph>
  <paragraph>
    <note>[Nota: La convención &quot;sin efectos-de-lado&quot; para accesores get no significa que accesores get deban siempre ser escritos para simplemente regresar valores almacenados en campos. En efecto, accesores get a menudo computan el valor de una propiedad al accesar múltiples campos o invocando métodos. De cualquier forma, un accesor get bien diseñado no realiza acciones que pueden realizar campos observables en el estado del objeto. fin nota]</note>
  </paragraph>
  <paragraph>Propiedades pueden ser usadas para retardar la inicialización de un recurso hasta el momento que es primero referenciado. <example>[Ejemplo: Por ejemplo: <code_example><![CDATA[
using System.IO;  
public class Console  
{  
   private static TextReader reader;  
   private static TextWriter writer;  
   private static TextWriter error;  
   public static TextReader In {  
      get {  
         if (reader == null) {  
            reader = new StreamReader(Console.OpenStandardInput());  
         }  
         return reader;  
      }  
   }  
   public static TextWriter Out {  
      get {  
         if (writer == null) {  
            writer = new StreamWriter(Console.OpenStandardOutput());  
         }  
         return writer;  
      }  
   }  
   public static TextWriter Error {  
      get {  
         if (error == null) {  
            error = new StreamWriter(Console.OpenStandardError());  
         }  
         return error;  
      }  
   }  
}  
]]></code_example></example></paragraph>
  <paragraph>
    <example>La clase Console contiene tres propiedades, In, Out, y Error, que representan los dispositivos estándar de  entrada, salida, y de error, respectivamente. Al exponer esos miembros como propiedades, la clase Console pude retardar su inicialización hasta que es actualmente usado. Por ejemplo, sobre la primera referencia de la propiedad Out como en <code_example><![CDATA[
Console.Out.WriteLine("Hola, mundo");  
]]></code_example>la fundamental TextWriter para el dispositivo de salida es creado. Pero si la aplicación no hace referencia a las propiedades In y Error, entonces no se crean objetos para esos dispositivos. fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
