<?xml version="1.0"?>
<clause number="17.6.3" title="Accesores virtuales, sellados, reemplazados, y abstractos">
  <paragraph>Una declaración de propiedad virtual (virtual) especifica que los accesores de la propiedad son virtual. El modificador virtual aplica a ambos accesores de propiedad lectura-escritura, no es posible para un solo accesor de lectura-escritura ser virtual. </paragraph>
  <paragraph>Una declaración de propiedad abstracta (abstract) especifica  que los accesores de la propiedad son virtual, pero no provee una implementación de los accesores. En vez de esto, clases derivadas no abstractas requieren proveer su propia implementación para los accesores al reemplazar la propiedad. Porque un accesor para una declaración de propiedad abstracta no provee implementación actual, su <non_terminal where="17.6.2">cuerpo-del-accesor</non_terminal> simplemente consiste de un punto y coma. </paragraph>
  <paragraph>Una declaración que incluya modificadores abstract y override especifica que la propiedad es abstracta y reemplaza a la propiedad base. Los accesores de dicha propiedad son también abstractos. </paragraph>
  <paragraph>Declaraciones de propiedades abstractas son solo permitidas en clases abstractas (<hyperlink>17.1.1.1</hyperlink>). Los accesores de una propiedad virtual hereda pueden ser reemplazadas en una clase derivada al incluir una declaración de propiedad que especifique la directiva override. Esto es conocido como una declaración de propiedad reemplazada. Una declaración de propiedad reemplazada no declara una nueva propiedad. En vez de eso, simplemente especializa las implementaciones de los accesores una propiedad virtual existente. </paragraph>
  <paragraph>Una declaración de propiedad reemplazada debe especificar los mismos modificadores de accesibilidad, tipo, y nombre como la propiedad heredada. Si la propiedad heredada tiene únicamente un accesor sencillo (ej. si la propiedad heredada es sólo-lectura o sólo-escritura), la propiedad reemplazante debe incluir únicamente ese accesor. Si la propiedad heredada incluye ambos accesores (ej. si la propiedad heredada es lectura-escritura), la propiedad reemplazante puede incluir ya sea un accesor sencillo o ambos accesores. </paragraph>
  <paragraph>Una declaración de propiedad reemplazante puede incluir un modificador sellado (sealed). Uso de este modificador previene que una clase derivada puede reemplazar la propiedad. Los accesores de una propiedad sellada también son sellados. </paragraph>
  <paragraph>Excepto por las diferencias en la sintaxis de invocación y declaración de los accesores virtual, sealed, override, y abstract se comportan exactamente como los métodos virtual, sealed, override y abstract. Específicamente, las reglas descritas en <hyperlink>17.5.3</hyperlink>, <hyperlink>17.5.4</hyperlink>, <hyperlink>17.5.5</hyperlink>, y <hyperlink>17.5.6</hyperlink> aplican como si los accesores fueran métodos de una forma correspondiente: <list><list_item> Un accesor get corresponde a un método sin parámetros con un valor de retorno de la tipo de la propiedad y los mismos modificadores como la propiedad contenedora. </list_item><list_item> Un accesor set corresponde a un método con un parámetro value sencillo del tipo de la propiedad, un tipo de retorno <keyword>void</keyword>, y los mismos modificadores que los que contenidos en la propiedad. </list_item></list></paragraph>
  <paragraph>
    <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
abstract class A  
{  
   int y;  
   public virtual int X {  
      get { return 0; }  
   }  
   public virtual int Y {  
      get { return y; }  
      set { y = value; }  
   }  
   public abstract int Z { get; set; }  
}  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>X es una propiedad virtual de sólo-lectura, Y es una propiedad virtual de sólo-escritura, y Z es una propiedad abstracta de lectura-escritura. </example>
  </paragraph>
  <paragraph>
    <example>Debido a que Z es abstracta, la clase contenedora A debe también ser declarada como abstracta. </example>
  </paragraph>
  <paragraph>
    <example>Una clase que deriva de A A es mostrada a continuación: <code_example><![CDATA[
class B: A  
{  
   int z;  
   public override int X {  
      get { return base.X + 1; }  
   }  
   public override int Y {  
      set { base.Y = value < 0? 0: value; }  
   }  
   public override int Z {  
      get { return z; }  
      set { z = value; }  
   }  
}  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>Aquí las declaraciones, de X, Y y Z son declaraciones de propiedades reemplazadas. Cada declaración de propiedad exactamente iguala los modificadores de accesibilidad, tipo, y nombre de la propiedad heredada correspondiente. El accesor get de X y el accesor set de Y usan la palabra reservada base para accesar los accesores heredados. La declaración de Z reemplaza los accedadores abstract, de esta forma, no hay miembros de función abstractos sobresalientes en B, y B permite ser una clase no-abstracta. fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
