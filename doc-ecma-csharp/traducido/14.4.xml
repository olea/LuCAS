<?xml version="1.0"?>
<clause number="14.4" title="Miembros función">
  <paragraph>Miembros función son miembros que contienen sentencias ejecutables. Miembros función son siempre miembros de tipos y no pueden ser miembros de espacios de nombres. C# define las siguientes categorías de miembros función: <list><list_item> Métodos </list_item><list_item> Propiedades </list_item><list_item> Eventos </list_item><list_item> Indexadores </list_item><list_item> Operadores definidos por el usuario </list_item><list_item> Constructores de instancia </list_item><list_item> Constructores estáticos </list_item><list_item> Destructores </list_item></list></paragraph>
  <paragraph>Excepto por los constructores estáticos y destructores (que no pueden ser invocados explícitamente), las sentencias contenidas en miembros función son ejecutados a través de invocaciones de miembros función. La actual sintaxis para escribir un miembro función depende en la categoría actual de miembros función. </paragraph>
  <paragraph>La lista de argumentos (<hyperlink>14.4.1</hyperlink>) de una invocación de miembro función provee valores actual o referencias de variable para los parámetros del miembro función. </paragraph>
  <paragraph>Invocaciones de métodos, indexadores, operadores, y constructores de instancia ocupan resolución de sobrecarga para determinar cúal de un juego de miembros función candidatos sea invocado. Este proceso es descrito en <hyperlink>14.4.2</hyperlink>. </paragraph>
  <paragraph>Una vez que un miembro función particular ha sido identificado en tiempo de compilación, posiblemente a través de resolución de sobrecarga, el proceso actual en tiempo de ejecución de invocar al miembro función es descrito en <hyperlink>14.4.3</hyperlink>. </paragraph>
  <paragraph>
    <note>[Nota: La siguiente tabla resume el procedimiento que toma lugar en constructores involucrando las seis categorías de miembros función que pueden ser explícitamente invocados. En la tabla, e, x, y, y value indican expresiones clasificadas como variables o valores, T indica una expresión clasificada como un tipo, F es un nombre sencillo de un método, y P es un nombre sencillo de una propiedad. <table_line>Constructor Ejemplo Descripción </table_line>
<table_line>F(x, y) Resolución de sobrecarga es aplicada para seleccionar el mejor método F en la </table_line>
<table_line>clase contenedora o estructura. El método es invocado con la </table_line>
<table_line>lista de argumentos (x, y). Si el método no es estático, la </table_line>
<table_line>expresión de instancia es this. </table_line>
<table_line>Invocación de </table_line>
<table_line>método </table_line>
<table_line>T.F(x, y) Resolución de sobrecarga es aplicada para seleccionar el mejor método F en la </table_line>
<table_line>clase o estructura T. Un error en tiempo de compilación ocurre si el método no es </table_line>
<table_line>estático. El método es invocado con la lista de argumentos </table_line>
<table_line>(x, y). </table_line>
<table_line>Constructor Ejemplo Descripción </table_line>
<table_line>e.F(x, y) Resolución de sobrecarga es aplicada para seleccionar el mejor método F en la </table_line>
<table_line>clase, estructura, o interfaz dada por el tipo de e. Un error en tiempo de compilación </table_line>
<table_line>ocurre si el método es estático. El método es invocado </table_line>
<table_line>con la expresión de instancia e y la lista de argumentos (x, y). </table_line>
<table_line>P el accesor get de la propiedad P en la clase contenedora o </table_line>
<table_line>estructura es invocado. Un error en tiempo de compilación ocurre si P es solo lectura. </table_line>
<table_line>Si P no es estático, la expresión de instancia es this. </table_line>
<table_line>P = value El accesor set de la propiedad P en la clase contenedora o </table_line>
<table_line>estructura es invocado con la lista de argumentos (value). Un error en tiempo de </table_line>
<table_line>compilación ocurre si P es sólo lectura. Si P no es estático, la  </table_line>
<table_line>expresión de instancia es this. </table_line>
<table_line>T.P El accesor get de propiedad P en la clase o estructura T es </table_line>
<table_line>invocado. Un error en tiempo de compilación ocurre si P no es estático o si P </table_line>
<table_line>es sólo-escritura. </table_line>
<table_line>T.P = value El accesor set de la propiedad P en la clase o estructura T es </table_line>
<table_line>invocado con la lista de argumentos (value). Un error en tiempo de compilación </table_line>
<table_line>ocurre si P no es estático o si P es sólo lectura. </table_line>
<table_line>e.P El accesor get de la propiedad P en la clase, estructura, o </table_line>
<table_line>interfaz dada del tipo e es invocada con la expresión de </table_line>
<table_line>instancia e. Un error en tiempo de compilación ocurre si P es estático o si </table_line>
<table_line>P es sólo-escritura. </table_line>
<table_line>Acceso de </table_line>
<table_line>propiedad </table_line>
<table_line>e.P = value El accesor set de la propiedad P en la clase, estructura, o </table_line>
<table_line>interfaz dada por el tipo de e es invocado con la expresión de </table_line>
<table_line>instancia e y la lista de argumentos (value). Un error en tiempo de compilación </table_line>
<table_line>ocurre si P es estático o si P es sólo lectura. </table_line>
<table_line>E += value El accesor add del evento E en la clase contenedora o estructura </table_line>
<table_line>es invocado. Si E no es estático, la expresión de instancia es this. </table_line>
<table_line>E -= value El accesor remove del evento E en la clase contenedora o estructura </table_line>
<table_line>es invocado. Si E no es estático, la expresión de instancia es </table_line>
<table_line>this. </table_line>
<table_line>T.E += value El accesor add del evento E en la clase o estructura T es </table_line>
<table_line>invocado. Un error en tiempo de compilación ocurre si E no es estático. </table_line>
<table_line>T.E -= value El accesor remove del evento E en la clase o estructura T e </table_line>
<table_line>invocado. Un error en tiempo de compilación ocurre si E no es estático. </table_line>
<table_line>e.E += value El accesor add del evento E en la clase, estructura o interfaz </table_line>
<table_line>dado por el tipo de e es invocado con la expresión de instancia </table_line>
<table_line>e. Un error en tiempo de compilación ocurre si E es estático. </table_line>
<table_line>Acceso de Eventos </table_line>
<table_line>e.E -= value El accesor remove del evento E en la clase, estructura, o </table_line>
<table_line>interfaz dada por el tipo de e es invocado con la expresión de </table_line>
<table_line>instancia e. Un error en tiempo de compilación ocurre si E es estático. </table_line>
<table_line>Acceso de </table_line>
<table_line>indexador </table_line>
<table_line>e[x, y] Resolución de sobrecarga es aplicada para seleccionar el mejor indexador en la </table_line>
<table_line>clase, estructura, o interfaz dada por el tipo de e. El accesor </table_line>
<table_line>get del indexador es invocado con la expresión de instancia </table_line>
<table_line>e y la lista argumentos (x, y). Un error en tiempo de compilación ocurre si </table_line>
<table_line>el indexador es sólo-escritura. </table_line>
<table_line>Constructor Ejemplo Descripción </table_line>
<table_line>e[x, y] = value Resolución de sobrecarga es aplicado para seleccionar al mejor indexador en la </table_line>
<table_line>clase, estructura, o interfaz dada por el tipo de e. El accesor </table_line>
<table_line>set de un indexador es invocado con la expresión de instancia </table_line>
<table_line>e y la lista de argumentos (x, y, value). Un error en tiempo de compilación </table_line>
<table_line>ocurre si el indexador es sólo lectura. </table_line>
<table_line>-x Resolución de sobrecarga es aplicada para seleccionar al mejor operador unario en </table_line>
<table_line>la clase o estructura dada por el tipo de x. El operador </table_line>
<table_line>seleccionado es invocado con la lista de argumentos (x). </table_line>
<table_line>Invocación de </table_line>
<table_line>operador </table_line>
<table_line>x + y Resolución de sobrecarga es aplicado para seleccionar al mejor operadora binario</table_line>
<table_line>en las clases o estructuras dadas por los tipos de x y y. El operador</table_line>
<table_line>seleccionado es invocado con la lista de argumentos (x, y). </table_line>
<table_line>Invocación de </table_line>
<table_line>constructor de </table_line>
<table_line>instancia </table_line>
<table_line>new T(x, y) Resolución de sobrecarga es aplicada para seleccionar al mejor constructor</table_line>
<table_line>de instancia en la clase o estructura T. El constructor de instancia es </table_line>
<table_line>invocado con la lista de argumentos (x, y). </table_line>
fin nota]</note>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
