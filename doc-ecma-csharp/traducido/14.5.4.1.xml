<?xml version="1.0"?>
<clause number="14.5.4.1" title="Nombres simples idénticos y nombres de tipo">
  <paragraph>En un acceso a miembro de la forma E.I, si E es un identificador sencillo, y si el significado de E como un <non_terminal where="14.5.2">nombre-simple</non_terminal> (<hyperlink>14.5.2</hyperlink>) es una constante, campo, propiedad, variable local, o parámetro con el mismo tipo que el significado de E como un <non_terminal where="10.8">nombre-de-tipo</non_terminal> (<hyperlink>10.8</hyperlink>), entonces ambos posibles significados de E son permitidos. Los dos posibles significados de E.I nunca son ambiguos, debido a que I necesariamente es un miembro de tipo E n ambos casos. En otras palabras, la reglas simplemente permite acceso a miembros estáticos de E donde un error en tiempo de compilación puede de otra forma tener ocurrencia. </paragraph>
  <paragraph>
    <example>[Ejemplo: Por ejemplo: <code_example><![CDATA[
struct Color  
{  
   public static readonly Color White = new Color(...);  
   public static readonly Color Black = new Color(...);  
   public Color Complement() {...}  
}  
class A  
{  
   public Color Color;          // Campo Color de tipo Color  
   void F() {  
      Color = Color.Black;       // Referencia al miembro estático Color.Black
      
      Color = Color.Complement();  // Invoca Complement() en campo Color
      
   }  
   static void G() {  
      Color c = Color.White;    // Referencia al miembro estático Color.White
      
   }  
}  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>Dentro de la clase A, esas ocurrencia del identificador Color que referencia al tipo Color son subrayadas, y esas que hacen referencia al campo Color no son subrayadas. fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
