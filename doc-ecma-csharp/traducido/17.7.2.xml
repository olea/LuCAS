<?xml version="1.0"?>
<clause number="17.7.2" title="Accesores de eventos">
  <paragraph>
    <note>[Nota: Las declaraciones de eventos típicamente omiten <non_terminal where="17.7">declaraciones-de-accesores-de-evento</non_terminal>, como el ejemplo Button anterior. Una situación para hacer eso involucra el caso en el cual el costo de almacenamiento de un campo por evento no es aceptable. En dichos caso, una clase puede incluir <non_terminal where="17.7">declaraciones-de-accesores-de-evento</non_terminal> y usar un mecanismo privado para almacenar la lista de manejadores de eventos. Similarmente, en caso donde el manejador de eventos de un evento requiere acceso a los recursos externos, accesores de eventos pueden ser usados para administrar dichos recursos. fin nota]</note>
  </paragraph>
  <paragraph>Las <non_terminal where="17.7">declaraciones-de-accesores-de-evento</non_terminal> de un evento especifican las sentencias ejecutables asociadas cuando se agregan o remueven manejadores de eventos. </paragraph>
  <paragraph>Las declaraciones de accesores consisten de una <non_terminal where="17.7">declaración-de-accesor-agregador</non_terminal> y una <non_terminal where="17.7">declaración-de-accesor-removedor</non_terminal>. Cada declaración de accesor consiste de un símbolo add o remove seguido de un bloque. El bloque asociado con una  <non_terminal where="17.7">declaración-de-accesor-agregador</non_terminal> especifica las sentencias para ejecutar cuando un manejador de evento es agregado, y el bloque asociado con una  <non_terminal where="17.7">declaración-de-accesor-removedor</non_terminal> especifica las sentencias a ejecutar cuando un evento manejador es removido. </paragraph>
  <paragraph>Cada <non_terminal where="17.7">declaración-de-accesor-agregador</non_terminal> y cada <non_terminal where="17.7">declaración-de-accesor-removedor</non_terminal> corresponde a un método con el cual un parámetro de valor sencillo de un tipo event, y un tipo de retorno <keyword>void</keyword>. El parámetro implícito de un accesor de vento es llamado valor. Cuando un evento es usado en una asignación de evento, el accesor de evento apropiado es usado. Específicamente, si el operador de asignación es += entonces el accesor add es usado, y si el operador de asignación es -= entonces el accesor remove es usado. En cualquier caso, el operador de la derecha de la asignación es usado como argumento del accesor del evento. El bloque de un <non_terminal where="17.7">declaración-de-accesor-agregador</non_terminal> o una  <non_terminal where="17.7">declaración-de-accesor-removedor</non_terminal> debe seguir las reglas para métodos <keyword>void</keyword> descritos en <hyperlink>17.5.8</hyperlink>. En particular, sentencias de retorno en cual un bloque no esta permito que especifique una expresión. </paragraph>
  <paragraph>Debido a que un accesor de evento implícitamente tiene un parámetro llamado value, es un error en tiempo de compilación para una variable local declarada en un accesor de evento tener ese nombre. </paragraph>
  <paragraph>
    <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
class Control: Component  
{  
   // Llaves únicas para eventos
   static readonly object mouseDownEventKey = new object();  
   static readonly object mouseUpEventKey = new object();  
   // Manejador de evento de retorno asociado con una llave
   protected Delegate GetEventHandler(object key) {...}  
   // Manejador de evento agregador con una llave
   protected void AddEventHandler(object key, Delegate handler) {...}  
   // Manejador de evento removedor con una llave
   protected void RemoveEventHandler(object key, Delegate handler) {...}  
   // Evento MouseDown
   public event MouseEventHandler MouseDown {  
      add { AddEventHandler(mouseDownEventKey, value); }  
      remove { RemoveEventHandler(mouseDownEventKey, value); }  
   }  
   // Evento MouseUp
   public event MouseEventHandler MouseUp {  
      add { AddEventHandler(mouseUpEventKey, value); }  
      remove { RemoveEventHandler(mouseUpEventKey, value); }  
   }  
   // Invoca al evento MouseUp
   protected void OnMouseUp(MouseEventArgs args) {  
      MouseEventHandler handler;   
      handler = (MouseEventHandler)GetEventHandler(mouseUpEventKey);  
      if (handler != null)  
      handler(this, args);  
   }  
}  
]]></code_example>la clase Control implementa un mecanismo de almacenamiento interno para eventos. El método AddEventHandler asocia un valor delegado con una llave, el método GetEventHandler regresa el delegado actual asociado con la llave, el método RemoveEventHandler remueve un delegado de un manejador de evento para el evento especificado. Presumiblemente, el mecanismo de almacenamiento fundamental esta diseñado para que hay un costo asociado al valor delegado null con una llave, y de esta manera eventos sin manejador no consumen almacenamiento. fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
