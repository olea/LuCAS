<?xml version="1.0"?>
<clause number="17.2.5" title="Miembros de instancia y estáticos">
  <paragraph>Los miembros de son una clase son miembros estáticos o miembros de instancia. <note>[Nota: Hablando generalmente, es útil pensar como miembros estáticos a esos que pertenecen a clases y miembros de instancia a esos que pertenecen a objetos (instancias de clases). fin nota]</note> </paragraph>
  <paragraph>Cuando un campo, método, propiedad, evento, operador, o declaración de constructor incluye un modificador static, declara un miembro estático. En adición, una declaración implícita de constante o tipo declara un miembro estático. Miembros estáticos tienen las siguientes características: <list><list_item> Cuando un miembro estático es referenciado en un <non_terminal where="14.5.4">acceso-al-miembro</non_terminal> (<hyperlink>14.5.4</hyperlink>) de la forma E.M, E debe denotar a un tipo que tiene un miembro M. Es un error en tiempo de compilación para E denota una instancia. </list_item><list_item> Un campo estático identificar exactamente una localización de almacenamiento. No importa cuantos instancias de clase son creatas, solo hay una copia de un campo estático. </list_item><list_item> Un miembro de función estático (método, propiedad, evento, operador,  o constructor) no opera en una instancia especifica, y es un error de tiempo de compilación referirse a esto como un miembro función. </list_item></list></paragraph>
  <paragraph>Cuando un campo, método, propiedad, evento, indexador, constructor, o declaración de destructor no incluye un método estático, declara un miembro de instancia. (Un miembro de instancia es algunas veces llamado como miembro no-estático.) Miembros de instancia tienen las siguientes características: <list><list_item> Cuando un miembro de instancia es referenciado en un <non_terminal where="14.5.4">acceso-al-miembro</non_terminal> (<hyperlink>14.5.4</hyperlink>) de la forma E.M, E debe denotar una instancia de un tipo que tiene un miembro M. Es un error en tiempo de compilación para E denotar un tipo. </list_item><list_item> Cada instancia de una clase contiene un juego separado de todos los campos de instancia de la clase. </list_item><list_item> Un miembro de función de instancia (método, propiedad, indexador, constructor de instancia, o destructor) opera en una instancia de clase dada, y esta instancia puede ser accesada como this (<hyperlink>14.5.7</hyperlink>). </list_item></list></paragraph>
  <paragraph>
    <example>[Ejemplo: El siguiente ejemplo ilustra las reglas de acceso estático y miembros de instancia: <code_example><![CDATA[
class Test  
{  
   int x;  
   static int y;  
   void F() {  
      x = 1;      // Ok, lo mismo que this.x = 1  
      y = 1;      // Ok, lo mismo que Test.y = 1  
   }  
   static void G() {  
      x = 1;      // Error, no se puede accesar this.x  
      y = 1;      // Ok, lo mismo que Test.y = 1  
   }  
   static void Main() {  
      Test t = new Test();  
      t.x = 1;     // Ok  
      t.y = 1;     // Error, no se puede accesar un miembro estático a través de la instancia
      Test.x = 1;   // Error, no se puede accesar un miembro de instancia a través del tipo
      Test.y = 1;   // Ok  
   }  
}  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>El método F muestra que en un miembro de función de instancia, un <non_terminal where="14.5.2">nombre-simple</non_terminal> (<hyperlink>14.5.2</hyperlink>) puede ser usado para tener acceso a miembros estáticos y miembros de instancia. El método G muestra que en un miembro de función estático, es un error en tiempo de compilación accesar un miembro de instancia a través de un <non_terminal where="14.5.2">nombre-simple</non_terminal>. El método Main muestra que en un <non_terminal where="14.5.4">acceso-al-miembro</non_terminal> (<hyperlink>14.5.4</hyperlink>), miembros de instancia deben ser accesados a través de instancias, y miembros estáticos debe ser accesados a través de tipo. fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
