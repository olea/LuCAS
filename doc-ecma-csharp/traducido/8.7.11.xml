<?xml version="1.0"?>
<clause number="8.7.11" title="Herencia" informative="true">
  <paragraph>Las clases soportan herencia única, y el tipo object (objeto) es la clase base para todas las clases. </paragraph>

    <paragraph>Las clases mostradas en ejemplos anterioras derivan todas 
        implícitamente de object. El ejemplo <code_example><![CDATA[
using System;  
class A  
{  
   public void F() { Console.WriteLine("A.F"); }  
}  
]]></code_example>muestra una clase A que implícitamente deriva de object. El 
        ejmplo <code_example><![CDATA[
class B: A  
{  
   public void G() { Console.WriteLine("B.G"); }  
}  
class Test  
{  
   static void Main() {  
      B b = new B();  
      b.F();    // Heredado de A  
      b.G();      // Introdido en B  
      
      A a = b;     // Trata a B como una A 
      a.F();  
   }  
}  
]]></code_example>muestra una clase B que deriva de A. La clarse B hereda el 
        método F de A, e introduce su propio método G </paragraph>
    <paragraph>Métodos, propiedades e indexadores pueden ser virtual, lo que 
        significa que su implementación puede ser sobreescrita en clases 
        derivadas. El ejemplo <code_example><![CDATA[
using System;  
class A  
{  
   public virtual void F() { Console.WriteLine("A.F"); }  
}  
class B: A  
{  
   public override void F() {   
      base.F();  
      Console.WriteLine("B.F");   
   }  
}  
class Test  
{  
   static void Main() {  
      B b = new B();  
      b.F();  
      A a = b;   
      a.F();  
   }  
}   
]]></code_example>muestra una clase A con un método virtual F, y una clase B 
        que sobreescribe F. El método sobreescrito en B contiene una llamada, 
        base.F(), el cual llama al método sobreescrito en A. </paragraph>
    <paragraph>Una clase puede indicar que es incompleta, y que solo debe ser 
        usada como clase base para otras clases incluyendo el modificador 
        abstract. Una clase así es llamada clase abstracta. Una clase abstracta 
        puede especificar miembros abstractos (miembros que una clase derivada 
        no-abstracta debe implementar). El ejemplo <code_example><![CDATA[
using System;  
abstract class A  
{  
   public abstract void F();  
}  
class B: A  
{  
   public override void F() { Console.WriteLine("B.F"); }  
}  
class Test  
{  
   static void Main() {  
      B b = new B();  
      b.F();  
      A a = b;  
      a.F();  
   }  
}  
]]></code_example>introduce un método abstracto F en la clase abstracta A. La 
        clase no-abstracta B proporciona una implementación para éste método 
        </paragraph>
</clause>

<!-- Traducción: Fabian Seoane fabian@fseoane.net -->
