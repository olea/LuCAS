<?xml version="1.0"?>
<clause number="8.2.1" title="Tipos predefinidos" informative="true">
  <paragraph>C# proporciona un conjunto de tipos predefinidos, de los cuales muchos serás familiares a programadores de C y C++. </paragraph>
  <paragraph>Los tipos predefinidos por referencia son objetos y cadenas de caracteres.
  El tipo objeto es es tipo base para todos los demás tipos. El tipo cadena de caractéres
  es usado para representar cadenas de caracteres en formato Unicode. Los valores de tipo 
  cadena de caractéres son inmutables.
</paragraph>
  
  <paragraph>Los tipos por valor predefinidos incluyen tipos integrales con signo y sin signo,
  tipos de coma flotante, y los tipos <keyword>bool</keyword> , <keyword>char</keyword>, y <keyword>decimal</keyword>.
  Los tipos integrales con signo son  <keyword>sbyte</keyword>, <keyword>short</keyword>, <keyword>int</keyword>,
  y <keyword>long</keyword>; los tipos integrales sin signo son <keyword>byte</keyword>, <keyword>ushort</keyword>,
  <keyword>uint</keyword>, y ulong; y los tipos de coma flotante son  <keyword>float</keyword> y
  <keyword>double</keyword>.
</paragraph>

  <paragraph>El tipo <keyword>bool</keyword> es usado para representar valores booleanos, esto es,
  valores que son o bien verdadero, o bien falso. La inclusión de <keyword>bool</keyword> hace más fácil el
  escribir código auto-documentado, y también ayuda a eliminar el error tan frecuente en programadores
  de C/C++ cuando usa &quot;=&quot; en lugar de &quot;==&quot;. En C#, el ejemplo <code_example><![CDATA[
int i = ...;  
F(i);  
if (i = 0)  // Error: debería ser (i == 0)  
G();  
]]></code_example>produce un error en tiempo de compilación porque la expresión i = 0 es de 
tipo <keyword>int</keyword>, mientras que una expresión if requiere que el argumento sea de
tipo <keyword>bool</keyword>. </paragraph>

  <paragraph>El tipo <keyword>char</keyword> es usado para representar caracteres Unicode. Una
  variable de tipo <keyword>char</keyword> representa un único caracter Unicode de 16-bit. </paragraph>
<paragraph>El tipo <keyword>decimal</keyword> es apropiado para cálculos en los que se desea evita
r errores de redondeo. Algunas aplicaciones se pueden encontrar en cálculos financieros tales como 
computar impuestos o conversiones entre monedas. El tipo <keyword>decimal</keyword> proporciona 
28 dígitos significativos.
</paragraph>

  
  <paragraph>La sigiente tabla lista los tipos predefinidos, y muestra cómo escribir valores
  literales para cada uno de ellos. <table_line>Descripción de tipos </table_line>
  <table_line>object es el tipo base de todos los demás tipos </table_line>

<table_line>tipo String; cadena de caracteres Unicode </table_line>
<table_line>carateres </table_line>
<table_line>string s = &quot;hola&quot;; </table_line>
<table_line><keyword>sbyte</keyword> Tipo entero con signo de  8-bits <keyword>sbyte</keyword> val = 12; </table_line>
<table_line><keyword>short</keyword> Tipo entero con signo de 16-bits <keyword>short</keyword> val = 12; </table_line>
<table_line><keyword>int</keyword> Tipo entero con signo de 32-bits  <keyword>int</keyword> val = 12; </table_line>
<table_line><keyword>long</keyword> Tipo entero con sigo de 64-bits <keyword>long</keyword> val1 = 12; </table_line>
<table_line><keyword>long</keyword> val2 = 34L; </table_line>
<table_line><keyword>byte</keyword> Tipo entero de 8-bits sin signo <keyword>byte</keyword> val1 = 12; </table_line>
<table_line><keyword>ushort</keyword> Tipo entero sin signo de 16-bits <keyword>ushort</keyword> val1 = 12; </table_line>
<table_line><keyword>uint</keyword> Tipo entero sin signo de 32-bits <keyword>uint</keyword> val1 = 12; </table_line>
<table_line><keyword>uint</keyword> val2 = 34U; </table_line>
<table_line><keyword>ulong</keyword> Tipo entero sin signo de 64-bits <keyword>ulong</keyword> val1 = 12; </table_line>
<table_line><keyword>ulong</keyword> val2 = 34U; </table_line>
<table_line><keyword>ulong</keyword> val3 = 56L; </table_line>
<table_line><keyword>ulong</keyword> val4 = 78UL; </table_line>
<table_line><keyword>float</keyword> Tipo en coma flotante de precisión simple <keyword>float</keyword> val = 1.23F; </table_line>
<table_line><keyword>double</keyword> Tipo en coma flotante de doble precisión <keyword>double</keyword> val1 = 1.23; </table_line>
<table_line><keyword>double</keyword> val2 = 4.56D; </table_line>
<table_line><keyword>bool</keyword> Tipo booleano; un valor <keyword>booleano</keyword> en o verdadero o falso <keyword>bool</keyword> val1 = true; </table_line>
<table_line><keyword>bool</keyword> val2 = false; </table_line>
<table_line><keyword>char</keyword> Tipo caracter; un tipo <keyword>caracter</keyword> es un caracter Unicode <keyword>char</keyword> val = 'h'; </table_line>
<table_line><keyword>decimal</keyword> Tipo <keyword>decimal</keyword> con 28 cifras significativas <keyword>decimal</keyword> val = 1.23M; </table_line>
</paragraph>
  <paragraph>Cada uno de los tipos predecifinidos no es más que una abreviatura de un tipo existente en System. 
  Por ejemplo, <keyword>int</keyword> se refierea a la estructura System.Int32. Por razones de estilo, se 
  recomienda el uso de la palabra reservada sobre la palabra completa del espacio de nombres System. 
</paragraph>
<paragraph>Tipos predefinidos, tales como <keyword>int</keyword> son tratados de forma específica en unas pocas 
  ocasiones, pero por lo general son tratados igual que otras estructuras. La sobrecarga de operadores permite
  a los desarrolladores definir nuevas estructuras que se comporten de forma muy similar a los tipos predefinidos.
  Por ejemplo, una estructura Digit puede soportar las mismas operaciones matemáticas que que los tipos enteros
  predefinidos, así como definir conversiones entre Digit y los tipos predefinidos. </paragraph>
  
  <paragraph>Los tipos predefinidos usan su propia sobrecarga de operadores. Por ejemplo, el operador
  de comparación == y != tienen diferente significado según el tipo predefinido:
  <list>
    <list_item> Dos expresiones de tipo <keyword>int</keyword> son consideradas iguales si representan el mismo 
    valor entero </list_item>
    <list_item> Dos expresiones de tipo object son consideradas iguales si ambas se refieren al mismo objeto, o si ambas
    son null. </list_item>
    <list_item>Dos cadenas de caractéres son consideradas iguales si ambas cadenas tienen idéntica longitud e 
    idénticos caractéres en cada posición, o si ambos son null. </list_item>
    </list>
 </paragraph>
  
  <paragraph>El ejemplo <code_example><![CDATA[
using System;  
class Test  
{  
   static void Main() {  
      string s = "Test";  
      string t = string.Copy(s);  
      Console.WriteLine(s == t);  
      Console.WriteLine((object)s == (object)t);  
   }  
}  
]]></code_example>produce la salida <code_example><![CDATA[
True  
False  
]]></code_example>porque la primera comparación se hace con dos expresiones de tipo cadena de caracteres, y 
  mientras que la segunda lo hace con expresiones de tipo object (objeto).
  </paragraph>
</clause>

	<!-- traducción Fabian Seoane, fseoane@wanadoo.es -->
