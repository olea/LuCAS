<?xml version="1.0"?>
<clause number="10.7.1.1" title="Ocultar nombres a través de anidamiento">
  <paragraph>El ocultamiento de nombres por medio de anidamiento puede ocurrir
  como resultado del anidar espacios de nombres o tipos con espacios de nombres,
  como restultado de anidar tipos dentro de clases o estructuras, y como
  resultado de declaración de parámetros y variables locales.</paragraph>
  <paragraph>
    <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
class A  
{  
   int i = 0;  
   void F() {  
      int i = 1;  
   }  
   void G() {  
      i = 1;  
   }  
}  
]]></code_example>dentro del método F, la variable instancia i queda escondida
por la variable local i, pero dentro del método G i sigue haciendo referencia a
la variable instancia. fin ejemplo]</example>
  </paragraph>
  <paragraph>Cuando un nombre en un nivel interior oculta un nombre definido en
  un nivel superior, oculta todas las ocurrencias sobrecargadas de dicho nombre.
  <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
class Exterior  
{  
   static void F(int i) {}  
   static void F(string s) {}  
   class Interior  
   {  
      void G() {  
         F(1);    // Invoca Exterior.Interior.F  
         F("Hola");  // Error  
      }  
      static void F(long l) {}  
   }  
}  
]]></code_example>La llamada F(1) llama al F declarado en Interior porque todas
las coincidencias de F quedan ocultadas por la declaración interior. Por la
mismo razón, la llamada F(&quot;Hola&quot;) produce un error en tiempo de
compilación. fin ejemplo]</example> </paragraph>
</clause>
