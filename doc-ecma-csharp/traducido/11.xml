<?xml version="1.0"?>
<clause number="11" title="Tipos">
  <paragraph>Los tipos del lenguaje C# son divididos en dos grandes categorías: tipos por valor y tipos por referencia. <grammar_production><name>tipo</name> : <rhs><non_terminal where="11.1">tipo-por-valor</non_terminal></rhs><rhs><non_terminal where="11.2">tipo-por-referencia</non_terminal></rhs></grammar_production></paragraph>
  <paragraph>Una tercera categoría de tipos, los punteros, esta disponible solo
  cuando se usa código no seguro. Esto se discute más adelante, en <hyperlink>25.2</hyperlink>. </paragraph>
  <paragraph>Tipos por valor difieren de los tipos por referencia en que las variables de tipo po valor directamente contienen sus datos, mientras que variables de tipo por referencia almacenan referencias a sus datos, los últimos conocidos como objetos. Con tipos por referencia, es posible para dos variables referenciar al mismo objeto, y de esta manera es posible hacer operaciones en una variable para afectar el objeto referenciado en la otra variable. Con tipos por valor, cada variable tiene su propia copia de los datos, y no es posible que una afecte la otra. </paragraph>
  <paragraph>El sistema de tipos de C# es unificado pues el valor de cualquier tipo puede ser tratado como objeto. Cada tipo en C# directamente o indirectamente se deriva del tipo de clase object, y object es la clase fundamental de todos los tipos. Valores de tipos por referencia son tratados sencillamente como objetos mirando los valores del tipo del objeto. Valores de tipos por valor son tratados como objetos al realizar operaciones de empaquetado o desempaquetado. (<hyperlink>11.3</hyperlink>). </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
