<?xml version="1.0"?>
<clause number="17.5.6" title="Métodos abstractos">
  <paragraph>Cuando una declaración de métodos de instancia incluye un modificador abstracto (abstract), se dice que este método es un método abstracto. Aunque un método abstracto es implícitamente también un método virtual, no puede tener el modificador virtual. </paragraph>
  <paragraph>Una declaración de método abstracto introduce un método virtual nuevo pero no provee una implementación para ese método. En vez de esto, clases derivadas no abstractas requieren proveer su propia implementación al sobrecargar ese método. Debido a que un método abstracto no provee un implementación actual, el <non_terminal where="17.5">cuerpo-del-método</non_terminal> de un método abstracto simplemente consiste de un punto y coma. </paragraph>
  <paragraph>Declaraciones de métodos abstractos son únicamente permitidos en clases abstractas (<hyperlink>17.1.1.1</hyperlink>). </paragraph>
  <paragraph>
    <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
public abstract class Shape  
{  
   public abstract void Paint(Graphics g, Rectangle r);  
}  
public class Ellipse: Shape  
{  
   public override void Paint(Graphics g, Rectangle r) {  
      g.DrawEllipse(r);  
   }  
}  
public class Box: Shape  
{  
   public override void Paint(Graphics g, Rectangle r) {  
      g.DrawRect(r);  
   }  
}  
]]></code_example>la clase Shape define la noción abstracta del objeto de la figura geométrica que puede pintarse pro si mismo. El método Paint es abstracto porque no hay una implementación con sentido por defecto. Las clases Ellipse y Box son implementaciones de Shape concretas. Debido a que esas clases no son abstractas, ellas requieren reemplazar el método Paint y proveer una implementación actual. fin ejemplo]</example>
  </paragraph>
  <paragraph>Es un error en tiempo de compilación para un <non_terminal where="14.5.8">acceso-base</non_terminal> (<hyperlink>14.5.8</hyperlink>) referenciar un método abstracto. <example>[Ejemplo: el ejemplo <code_example><![CDATA[
abstract class A  
{  
   public abstract void F();  
}  
class B: A  
{  
   public override void F() {  
      base.F();            // Error, base.F es abstracto
   }  
}  
]]></code_example>un error en tiempo de compilación es reportado por la invocación de base.F() porque este referencia a un método abstracto. fin ejemplo]</example> </paragraph>
  <paragraph>Una declaración de método abstracto es permitido que reemplace un método virtual. Esto permite que una clase abstracta force la reimplementación del método en clases derivadas, y haga la implementación original del método no disponible. <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
using System;  
class A  
{  
   public virtual void F() {  
      Console.WriteLine("A.F");  
   }  
}  
abstract class B: A  
{  
   public abstract override void F();  
}  
class C: B  
{  
   public override void F() {  
      Console.WriteLine("C.F");  
   }  
}  
]]></code_example>clase A declara un método virtual, clase B reemplaza este método con un método abstracto, y clase C reemplaza ese método abstracto al proveer su propia implementación. fin ejemplo]</example> </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
