<?xml version="1.0"?>
<clause number="8.3" title="Variables y parámetros" informative="true">
  <paragraph>Las variables representan un espacio donde alojar información. 
  Toda variable tiene un tipo que determina qué valor puede ser almacenado 
  en la variabe. Las variables locales son variables que son declaradas 
  dentro de métodos, propiedades o indexadores. Una variable local queda 
  definida especificando su tipo y una declaración que especifica el nombre de
  la variable y un valor inicial opcional, como en: <code_example><![CDATA[
int a;  
int b = 1;  
]]></code_example>pero también es posible declarar varias variables locales 
del mismo tipo de la siguente forma: <code_example><![CDATA[
int a, b = 1;  
]]></code_example></paragraph>
  <paragraph>La variable debe tener asignado un valor antes de que pueda ser 
  utilizada. El ejemplo: <code_example><![CDATA[
class Test  
{  
   static void Main() {  
      int a;  
      int b = 1;  
      int c = a + b; // error, a no tiene valor asignado
      ...  
   }  
}  
]]></code_example>da como resultado un error en tiempo de compilación porque
  intenta usar la variable antes de que ésta haya tomado ningún valor. Las 
  reglas que gobiernan estas asignación quedan definidas en 
  <hyperlink>12.3</hyperlink>. </paragraph>

  <paragraph> Un campo (<hyperlink>17.4</hyperlink>) es una variable asociada
  a una clase o estructura, o un instancia de clase o estructura. Un campo
  declarado con el modificador static define una variable estática, esto es, 
  que no necesita que se haya creado una instancia de la clase en la que está
  contenida, mientras que un campo declarado sin este modificador define una
  variable instancia. Un campo estático está asociado a un tipo, mientras que 
  una variable instancia está asociada con una instancia. El ejemplo
  <code_example><![CDATA[
using Personnel.Data;  
class Trabajador  
{  
   private static DataSet ds;  
   public string Nombre;  
   public decimal Salario;  
   ...  
}  
]]></code_example>muestra la clase Empleado que tiene una variable estática
privada y dos variables instancia públicas. </paragraph>
  <paragraph>La declaración formal de parámetros también define variables. 
  Hay cuatro tipos de parámetros: parámetros por valor, por referencia, 
  parámetros de salida, y arreglos de parámetros. </paragraph>
  
  <paragraph>Un parámetros por valor es usado para pasar parámetros a métodos
  en el que el no queremos que se modifique el valor original del 
  parámetro. Cuando se pasa un parámetro por valor a una función
  realmente se está pasando una copia de dicho parámetro, por lo que podemos
  modificarlo sin modificar el parámetro original. El ejemplo 
  <code_example><![CDATA[
using System;  
class Test {  
   static void F(int p) {  
      Console.WriteLine("p = {0}", p);  
      p++;  
   }  
   static void Main() {  
      int a = 1;  
      Console.WriteLine("pre:  a = {0}", a);  
      F(a);  
      Console.WriteLine("post: a = {0}", a);  
   }  
}  
]]></code_example>muestra un método F que tiene un parámetro por valor
llamado p. El ejemplo produce la salida: <code_example><![CDATA[
pre:  a = 1  
p = 1  
post: a = 1  
]]></code_example>aunque el valor del parámetro p haya sido modificado
dentro del método. </paragraph>

  <paragraph>Un parámetro por referencia sirven para pasar argumentos 
  directamente a una función, no como en los argumentos por valor, en 
  el que se pasaba la copia del argumento en cuestión. Un parámetro
  por referecia no define en sí una variable, sino que más bien se refiere
  a la variable del correspondiente argumento. Un parámetro por referencia
  se declara con el modificador ref. El ejemplo <code_example><![CDATA[
using System;  
class Test {  
   static void Swap(ref int a, ref int b) {  
      int t = a;  
      a = b;  
      b = t;  
   }  
   static void Main() {  
      int x = 1;  
      int y = 2;  
      
      Console.WriteLine("pre:  x = {0}, y = {1}", x, y);  
      Swap(ref x, ref y);  
      Console.WriteLine("post: x = {0}, y = {1}", x, y);  
   }  
}  
]]></code_example>muestra un método swap que tiene dos parámetros por 
referencia. La salida producida es:  <code_example><![CDATA[
pre:  x = 1, y = 2  
post: x = 2, y = 1  
]]></code_example></paragraph>
  <paragraph>La palabra reservada ref debe de ser usada tanto en la declaración
  formal de la función como en los usos que se hace de ésta. 
  </paragraph>
  
  <paragraph>El parámetro de salida es similar al parámetro por referencia, 
  salvo que el valor inicial de dicho argumento carece de importancia. 
  Un argumento de salida se declara con el modificador our. El ejemplo
  <code_example><![CDATA[
using System;  
class Test {  
   static void Divide(int a, int b, out int result, out int remainder) {  
      result = a / b;  
      remainder = a % b;  
   }  
   static void Main() {  
      for (int i = 1; i < 10; i++)  
      for (int j = 1; j < 10; j++) {  
         int ans, r;  
         Divide(i, j, out ans, out r);  
         Console.WriteLine("{0} / {1} = {2}r{3}", i, j, ans, r);  
      }  
   }  
}  
]]></code_example>muestra un método Divide que incluye dos parámetros de 
salida. Uno para el resultado de la división y otro para el resto. 
</paragraph>

  <paragraph>Para los parámetros descritos anteriormente hay una correspondencia unívoca entre los
  argumentos que puede tomar la función y los parámetros que los representan. Un arreglo de parámetros
  permite guardar una relación de varios-a-uno: varios argumentos pueden ser representados
  por un único arreglo de parámetros. En otras palabras, los arreglos de parámetros permiten listas de 
  argumentos de tamaño variable. 
  </paragraph>
  
  <paragraph>Un arreglo de parámetros se declara con el modificador params. Sólo puede haber un arreglo de 
  parámetros en cada método, y siempre debe ser el último método especificado. El tipo del arreglo de parámetros
  siempre es un siempre es un tipo arreglo unidimensional. Al llamar a la función se puede pasar un único argumento
  de su tipo o bien cualquier número de argumentos de tipo del tipo del arreglo. El ejemplo<code_example><![CDATA[
using System;  
class Test  
{  
   static void F(params int[] args) {  
      Console.WriteLine("# of arguments: {0}", args.Length);  
      for (int i = 0; i < args.Length; i++)  
      Console.WriteLine("\targs[{0}] = {1}", i, args[i]);  
   }  
   static void Main() {  
      F();  
      F(1);  
      F(1, 2);  
      F(1, 2, 3);  
      F(new int[] {1, 2, 3, 4});  
   }  
}  
]]></code_example>muestra un método F que toma un número variable de argumentos <keyword>int</keyword>, 
y varias llamadas a este método. La salida es: <code_example><![CDATA[
# of arguments: 0  
# of arguments: 1  
args[0] = 1  
# of arguments: 2  
args[0] = 1  
args[1] = 2  
# of arguments: 3  
args[0] = 1  
args[1] = 2  
args[2] = 3  
# of arguments: 4  
args[0] = 1  
args[1] = 2  
args[2] = 3  
args[3] = 4  
]]></code_example></paragraph>
  <paragraph>La mayoría de los ejemplos presentes en esta introducción utilizan el método WriteLine
  de la clase Console. El comportamiento para las sustituciones, como muestra el ejemplo<code_example><![CDATA[
int a = 1, b = 2;  
Console.WriteLine("a = {0}, b = {1}", a, b);  
]]></code_example>se consigue usando un arreglo de parámetros. El método WriteLine proporciona varios métodos
sobrecargados para el caso común en el que se pasan un pequeño números de argumentos, y un método que usa
un arreglo de parámetros.<code_example><![CDATA[
namespace System  
{  
   public class Console  
   {  
      public static void WriteLine(string s) {...}  
      public static void WriteLine(string s, object a) {...}  
      public static void WriteLine(string s, object a, object b) {...}  
      ...  
      public static void WriteLine(string s, params object[] args) {...}  
   }  
}  
]]></code_example></paragraph>
</clause>

	<!-- traducción Fabian Seoane, fseoane@wanadoo.es -->
