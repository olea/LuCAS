<?xml version="1.0"?>
<clause number="14.9.6" title="Operadores de igualdad de tipo referenciado">
  <paragraph>Los operadores de igualdad de tipo referencia predefinidos son: <code_example><![CDATA[
bool operator ==(object x, object y);  
bool operator !=(object x, object y);  
]]></code_example></paragraph>
  <paragraph>Los operadores regresan el resultado de la comparación de las dos referencias para la igualdad o la no-igualdad. </paragraph>
  <paragraph>Debido a que los operadores de igualdad de tipo de referencia predefinidos aceptan operandos de tipo object, estos aplican para todos los tipos que no se declaran miembros de operador aplicables == y !=. A la inversa, cualquier operadores aplicables de usuario-definido efectivamente ocultan los operadores de igualdad de tipo de referencia predefinidos. </paragraph>
  <paragraph>Los operadores de igualdad de tipo de referencia predefinidos requieren que los operandos sean valores de <non_terminal where="11.2">tipos-por-referencia</non_terminal> o el valor null; además, ellos requieren que una conversión implícita estándar (<hyperlink>13.3.1</hyperlink>) exista del tipo de ya sea un operando para el tipo del otro operando. A menos que ambos de esas condiciones son verdaderas, un error en tiempo de compilación ocurre. <note>[Nota: Implicaciones notables de esas reglas son: <list><list_item> Es un error en tiempo de compilación para usar los operadores de igualdad de tipo de referencia predefinidos para comparar dos referencias que son conocidas para ser diferentes en tiempo de compilación. Por ejemplo, si el tipo en tiempo de compilación de los operandos son dos tipos de clases A y B, y si ninguno de A ni B deriva del otro, entonces podría ser imposible para los dos operandos para referencias al mismo objeto. De esta forma, la operación es considerada un error en tiempo de compilación </list_item><list_item> Los operadores de igualdad de tipo de referencia predefinidos no permiten que los operandos de valor de tipo sean comparados. Por lo tanto, a menos que un tipo estructura declare sus propios operadores de igualdad, no es posible comparar valores de este tipo de estructura. </list_item><list_item> Los operadores de igualdad de tipo de referencia predefinidos nunca causan operaciones de enmarcado para ocurrir para sus operandos. Podría no tener sentido realizar dichas operaciones de enmarcado, debido a que las referencias a las recién asignadas instancias podrían necesariamente diferir de otras referencias. fin nota]</list_item></list></note> </paragraph>
  <paragraph>Para una operación de la forma x == y o x != y, si es aplicable el operador == o el operador != existe, la resolución de sobrecarga de operador (<hyperlink>14.2.4</hyperlink>) manda, seleccionará el operador en ves del operador de tipo de igualdad de referencia predefinido. De cualquier forma, es siempre posible seleccionar la referencia de tipo de igualdad de operador al castear explícitamente uno o ambos de los operandos del tipo object. <example>[Ejemplo: El ejemplo <code_example><![CDATA[
using System;  
class Test  
{  
   static void Main() {  
      string s = "Prueba";  
      string t = string.Copy(s);  
      Console.WriteLine(s == t);  
      Console.WriteLine((object)s == t);  
      Console.WriteLine(s == (object)t);  
      Console.WriteLine((object)s == (object)t);  
   }  
}  
]]></code_example>produce la salida <code_example><![CDATA[
True  
False  
False  
False  
]]></code_example></example></paragraph>
  <paragraph>
    <example>Las variables s y t se refieren a dos diferentes instancias conteniendo los mismos caracteres. Las primera comparación despliega True porque el operador de igualdad de cadena (<hyperlink>14.9.7</hyperlink>) es seleccionado cuando ambos operandos son de tipo string. Todas las comparaciones faltantes despliegan False porque el operador de igualdad de tipo de referencia predefinido es seleccionado cuando uno o ambos de los operados son del tipo object. </example>
  </paragraph>
  <paragraph>
    <example>Nota que la siguiente técnica no tiene significado para tipos por valor. El ejemplo <code_example><![CDATA[
class Test  
{  
   static void Main() {  
      int i = 123;  
      int j = 123;  
      System.Console.WriteLine((object)i == (object)j);  
   }  
}  
]]></code_example>despliega False porque castea la creación de las referesncias de dos instancias separadas de valores enmarcados de <keyword>int</keyword>. fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, mario.carrion@gmail.com -->
