<?xml version="1.0"?>
<clause number="8.10" title="Delegados" informative="true">
  <paragraph>Los delegados ocupan el lugar de lo que otros lenguajes han
  conseguido con punteros a funciones. De todas formas, al contrario que los
  punteros a funciones, los delegados son orientados a objetos y de tipado seguro </paragraph>
  
	<paragraph>La declaración de un delegado define una clase que es derivada 
		de la clase System.Delegate. Una instancia de un delegado encapsula uno 
		o más métodos, cada uno de los cuales se refiere a una entidad 
		susceptible de ser llamada. Para métodos instancia, una entidad 
		susceptible de ser llamada consiste en una instancia y un método en esa 
		instancia. Para métodos estáticos, una entidad susceptible de ser 
		llamada consiste simplemente en un método. Dado una instancia de 
		delegado y un conjunto apropiado de argumentos, uno puede invocar todos 
		los métodos de dicha instancia de delegado con ese conjunto de 
		argumentos. 
   </paragraph>
  
  <paragraph>Una propiedad útil e interesante de las instancias de delegados es que no sabe nada sobre las clases de los métodos que encapsula; lo que importa es que los métodos sean compatibles
  (<hyperlink>22.1</hyperlink>) con el tipo del delegado. Esto hace que los delegados sean especialmente útiles para invocación &quot;anónimo&quot;. Esta es una capacidad muy potente. </paragraph> 

  <paragraph>Hay tres pasos para definir y usar delegados: declaración, instanciación e invocación. Los delegados se declaracn usando la sintaxis de declaración de los delegados. El ejemplo<code_example><![CDATA[
delegate void DelegadoSimple();  
]]></code_example>declara un delegados llamado DelegadoSimple que no toma argumentos y no devuelve ningún resultado. </paragraph>
  <paragraph>El ejemplo <code_example><![CDATA[
class Test  
{  
   static void F() {  
      System.Console.WriteLine("Test.F");  
   }  
   static void Main() {  
      DelegadoSimple d = new DelegadoSimple(F);  
      d();  
   }  
}  
]]></code_example>crea una instancia de DelegadoSimple e inmedatamente se le hace una llamada. </paragraph>
  
  <paragraph>No es muy práctico inicializar un delegado para un método y llamarlo inmediatamente al método via el delegado, pués sería más simple llamar al método directamente. Los delegados se muestran realmente útiles cuando se usa su anonimato. El ejemplo<code_example><![CDATA[
void LlamadaMultiple(DelegadoSimple d, int cuenta) {  
   for (int i = 0; i < cuenta; i++) {  
      d();  
   }  
}  
]]></code_example>muestra un método LlamadaMultiple que llama repetidamente a DelegadoSimple. El método LlamadaMultiple no sabe nada ni le importa el tipo del método al que hace llamada DelegadoSimple, qué accesibilidad tiene el método, o si dicho método es estático. Todo lo que importa es que dicho método sea compatible (<hyperlink>22.1</hyperlink>) con DelegadoSimple. </paragraph>
</clause>

<!-- Traducción Fabian Seoane fabian@fseoane.net -->
