<?xml version="1.0"?>
<clause number="17.8" title="Indexadores">
  <paragraph>Un indexador es un miembro que habilita un que un objeto sea indexado de la misma forma que un arreglo. Indexadores son declarados usando declaraciones-de-indexador: <grammar_production><name><non_terminal where="17.8">declaración-de-indexador</non_terminal></name> : <rhs><non_terminal where="24.2">atributos</non_terminal><opt/><non_terminal where="17.8">modificador-de-indexador</non_terminal><opt/><non_terminal where="17.8">declarador-de-indexador</non_terminal><terminal>{</terminal><non_terminal where="17.6.2">declaraciones-de-accesor</non_terminal><terminal>}</terminal></rhs></grammar_production><grammar_production><name><non_terminal where="17.8">modificador-de-indexador</non_terminal>s</name> : <rhs><non_terminal where="17.8">modificador-de-indexador</non_terminal></rhs><rhs><non_terminal where="17.8">modificador-de-indexador</non_terminal><non_terminal where="17.8">modificador-de-indexador</non_terminal></rhs></grammar_production><grammar_production><name><non_terminal where="17.8">modificador-de-indexador</non_terminal></name> : <rhs><keyword>new</keyword></rhs><rhs><keyword>public</keyword></rhs><rhs><keyword>protected</keyword></rhs><rhs><keyword>internal</keyword></rhs><rhs><keyword>private</keyword></rhs><rhs><keyword>virtual</keyword></rhs><rhs><keyword>sealed</keyword></rhs><rhs><keyword>override</keyword></rhs><rhs><keyword>abstract</keyword></rhs><rhs><keyword>extern</keyword></rhs></grammar_production><grammar_production><name><non_terminal where="17.8">declarador-de-indexador</non_terminal></name> : <rhs><non_terminal where="11">type</non_terminal><keyword>this</keyword><terminal>[</terminal><non_terminal where="17.5.1">lista-de-parámetros-formales</non_terminal><terminal>]</terminal></rhs><rhs><non_terminal where="11">type</non_terminal><non_terminal where="11.2">tipo-interfaz</non_terminal><terminal>.</terminal><keyword>this</keyword><terminal>[</terminal><non_terminal where="17.5.1">lista-de-parámetros-formales</non_terminal><terminal>]</terminal></rhs></grammar_production></paragraph>
  <paragraph>Una <non_terminal where="17.8">declaración-de-indexador</non_terminal> puede incluir un juego de atributos (<hyperlink>24</hyperlink>) y una valida combinación de los cuatro modificadores de acceso (<hyperlink>17.2.3</hyperlink>), new (<hyperlink>17.2.2</hyperlink>), virtual (<hyperlink>17.5.3</hyperlink>), override (<hyperlink>17.5.4</hyperlink>), sealed (<hyperlink>17.5.5</hyperlink>), abstract (<hyperlink>17.5.6</hyperlink>), y extern (<hyperlink>17.5.7</hyperlink>). </paragraph>
  <paragraph>declaraciones de indexador están sujetas a las mismas reglas que las declaraciones de métodos (<hyperlink>17.5</hyperlink>) con respecto a combinaciones validas de modificadores, con la única excepción que el modificador static no esta permitido como una declaración de indexador. </paragraph>
  <paragraph>Los modificadores virtual, override, y abstract son mutualmente exclusivos excepto en un caso. Los modificadores abstract y override pueden ser usados juntos asi para que un indexador abstract puede reemplazar uno virtual. </paragraph>
  <paragraph>El tipo de una declaración de indexador especifica el tipo de elemento de un indexador introducido por la declaración. A menos que el indexador sea una implementación de miembros de interfaz explicito, el tipo es seguido por la palabra reservada this. Para implementación de interfaz explicita, el tipo es seguido por un <non_terminal where="11.2">tipo-interfaz</non_terminal>, un &quot;.&quot;, y la palabra reservada this. No como otros elementos miembros que no tienen nombres de usuario definidos. </paragraph>
  <paragraph>La <non_terminal where="17.5.1">lista-de-parámetros-formales</non_terminal> especifica los parámetros del indexador. La lista de parámetros formales de un indexador corresponde para esto de un método (<hyperlink>17.5.1</hyperlink>), excepto este ultimo parámetro que debe ser especificado, y los modificadores de parámetros red y out no están permitidos. </paragraph>
  <paragraph>El tipo de un indexador y cada de los tipos referenciados en la <non_terminal where="17.5.1">lista-de-parámetros-formales</non_terminal> debe ser al menos accesible para el mismo indexador (<hyperlink>10.5.4</hyperlink>). </paragraph>
  <paragraph>Las <non_terminal where="17.6.2">declaraciones-de-accesor</non_terminal> (<hyperlink>17.6.2</hyperlink>), las cuales deben ser encerrados en símbolos &quot;{&quot; y &quot;}&quot;, declaran los accesores del indexador. Los accesores especifican las sentencias ejecutables asociadas con la lectura y escritura de los elementos indexadores. </paragraph>
  <paragraph>Inclusive aunque la sintaxis para accesar un elemento indexador es la misma que la de un elemento arreglo, un elemento indexador no esta clasificado como variable. De esta manera, no es posible pasar un elemento indexador como un argumento out o ref. </paragraph>
  <paragraph>La <non_terminal where="17.5.1">lista-de-parámetros-formales</non_terminal> de un indexador define la firma (<hyperlink>10.6</hyperlink>) del indexador. Específicamente, la firma de un indexador consiste del número de tipos de sus parámetros formales. El tipo de elemento y nombres los parámetros formales no son parte de la firma del indexador. </paragraph>
  <paragraph>La firma de un indexador debe diferir de las firmas de otros indexadores declaradores en la misma clase. </paragraph>
  <paragraph>Indexadores y propiedades son similares en concepto, pero difieren en las siguientes cosas: <list><list_item> Una propiedad es identifica por su nombre, donde un indexador es identificado por su firma. </list_item><list_item> Una propiedad es accesada a través de  <non_terminal where="14.5.2">nombre-simple</non_terminal> (<hyperlink>14.5.2</hyperlink>) or a <non_terminal where="14.5.4">acceso-al-miembro</non_terminal> (<hyperlink>14.5.4</hyperlink>), donde un elemento indexador es accesado a través de <non_terminal where="14.5.6">accesor-de-elemento</non_terminal> (<hyperlink>14.5.6.2</hyperlink>). </list_item><list_item> Una propiedad puede ser miembro estático, donde un indexador es simple una instancia miembro. </list_item><list_item>Un accesor obtenedor de una propiedad corresponde a un método sin parámetros, mientras que el accesor obtenedor corresponde al método con la misma lista de parámetros formales que el indexador. </list_item><list_item> Un accesor establecedor de una propiedad coresponde al método con la misma lista de parámetros formales como el indexador, además de una parámetro llamado value. </list_item><list_item> Es un error en tiempo de compilación para un accesor indexador declarar una variable local con el mismo nombre que el parámetro indexador. </list_item><list_item> En una declaración de propiedad, la propiedad heredada es accesada usando la sintaxis base.P, cuando P es el nombre de la propiedad. En una declaración de reemplazo de indexador, el indexador heredado es accesado usando la sintaxis base[E], donde E es una lista de expresiones separadas por coma. </list_item></list></paragraph>
  <paragraph>Al lado de esas diferencias, todas las reglas definidas en <hyperlink>17.6.2</hyperlink> y <hyperlink>17.6.3</hyperlink> aplican a los accesores indexadores como tambien a los accesores de propiedades. </paragraph>
  <paragraph>Cuando una declaración de indexador incluye un modificador extern, se dice que el indexador es un indexador external. Debido a que una declaración de indexador externo no provee una implementación actual, cada de sus <non_terminal where="17.6.2">declaraciones-de-accesor</non_terminal> consiste de un punto y coma. </paragraph>
  <paragraph>
    <example>[Ejemplo: El ejemplo siguiente una clase BitArray implementa un indexador para accesar los bits individuales de un arreglo de bits. <code_example><![CDATA[
using System;  
class BitArray  
{  
   int[] bits;  
   int length;  
   public BitArray(int length) {  
      if (length < 0) throw new ArgumentException();  
      bits = new int[((length - 1) >> 5) + 1];  
      this.length = length;  
   }  
   public int Length {  
      get { return length; }  
   }  
   public bool this[int index] {  
      get {  
         if (index < 0 || index >= length) {  
            throw new IndexOutOfRangeException();  
         }  
         return (bits[index >> 5] & 1 << index) != 0;  
      }  
      set {  
         if (index < 0 || index >= length) {  
            throw new IndexOutOfRangeException();  
         }  
         if (value) {  
            bits[index >> 5] |= 1 << index;  
         }  
         else {  
            bits[index >> 5] &= ~(1 << index);  
         }  
      }  
   }  
}  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>Una instancia de la clase BitArray consume substancialmente menos memoria que un  correspondiente bool[] (debido a que cada valor anterior ocupa solo un bit en vez del más reciente <keyword>byte</keyword>), pero permite las mismas operaciones que en un bool[]. </example>
  </paragraph>
  <paragraph>
    <example>La siguiente clase CountPrimes usa un BitArray y clásico algoritmo &quot;tamiz&quot; para computar el número de primos entre 1 y el número máximo: <code_example><![CDATA[
class CountPrimes  
{  
   static int Count(int max) {  
      BitArray flags = new BitArray(max + 1);  
      int count = 1;  
      for (int i = 2; i <= max; i++) {  
         if (!flags[i]) {  
            for (int j = i * 2; j <= max; j += i) flags[j] = true;  
            count++;  
         }  
      }  
      return count;  
   }  
   static void Main(string[] args) {  
      int max = int.Parse(args[0]);  
      int count = Count(max);  
      Console.WriteLine("Found {0} primes between 1 and {1}", count,  
      max);  
   }  
}  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>Note que la sintaxis para accesar elementos del BitArray es precisamente el mismo que para un bool[]. fin ejemplo]</example>
  </paragraph>
  <paragraph>
    <example>[Ejemplo: Los siguientes exemplos muestran una clase Grid 26<unicode>215</unicode>10 que tiene un indexador con dos parámetros. El primer parámetro es requerido para una letra mayúscula-minúscula en el rango A-Z, y el segundo es requerido para ser un entero en rango 0-9. <code_example><![CDATA[
using System;  
class Grid  
{  
   const int NumRows = 26;  
   const int NumCols = 10;  
   int[,] cells = new int[NumRows, NumCols];  
   
   public int this[char c, int colm]  
   {  
      get {  
         c = Char.ToUpper(c);  
         if (c < 'A' || c > 'Z') {  
            throw new ArgumentException();  
         }  
         if (colm < 0 || colm >= NumCols) {  
            throw new IndexOutOfRangeException();  
         }  
         return cells[c - 'A', colm];  
      }  
      set {  
         c = Char.ToUpper(c);  
         if (c < 'A' || c > 'Z') {  
            throw new ArgumentException();  
         }  
         if (colm < 0 || colm >= NumCols) {  
            throw new IndexOutOfRangeException();  
         }  
         cells[c - 'A', colm] = value;  
      }  
   }  
}  
]]></code_example>fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
