<?xml version="1.0"?>
<clause number="11.3.1" title="Conversiones de enmarcado">
  <paragraph>Una conversión de enmarcado permite que cualquier <non_terminal
  where="11.1">tipo-por-valor</non_terminal> sea convertido implícitamente al
  tipo objeto de cualquier <non_terminal
  where="11.2">tipo-interfaz</non_terminal> implementada por el  <non_terminal
  where="11.1">tipo-por-valor</non_terminal>. Enmarcar un valor de <non_terminal where="11.1">tipo-por-valor</non_terminal> consiste en la asignación de una instancia del objeto y copiando el valor del <non_terminal where="11.1">tipo-por-valor</non_terminal> en la instancia. </paragraph>
  <paragraph>El proceso actual de enmarcar un valor de un <non_terminal
  where="11.1">tipo-por-valor</non_terminal> es explicado mejor imaginando la
  existencia de enmarcar una clase para ese tipo. <example>[Ejemplo: Para
  cualquier <non_terminal where="11.1">tipo-por-valor</non_terminal> T, la clase
  enmarcada se comporta como si fuera declarada como sigue: <code_example><![CDATA[
sealed class T_Box  
{  
   T value;  
   public T_Box(T t) {  
      value = t;  
   }  
}  
]]></code_example></example></paragraph>
  <paragraph>
    <example>Enmarcar un valor v de tipo T consiste en la ejecución de la expresión new T_Box(v), y regresando la instancia resultante como valor de tipo objeto. De esta forma, las sentencias <code_example><![CDATA[
int i = 123;  
object box = i;  
]]></code_example>conceptualmente corresponden a <code_example><![CDATA[
int i = 123;  
object box = new int_Box(i);  
]]></code_example>. fin ejemplo]</example>
  </paragraph>
  <paragraph>Las clases enmarcadas como T_Box y int_Box de arriba actualmente no
  existen y el tipo dinámico de un valor enmarcado no es actualmente un valor de
  tipo de clase. De cualquier forma, un valor enmarcado de tipo T tiene el tipo dinámico T, y el checado de tipo dinámico al usar el operador is puede simplemente referenciar al tipo T.
 <example>[Ejemplo: Por ejemplo, <code_example><![CDATA[
int i = 123;  
object box = i;  
if (box is int) {  
   Console.Write("Paquete que contiene un entero");  
}  
]]></code_example>imprimirá la cadena &quot;Paquete que contiene un entero&quot; en la consola. fin ejemplo]</example> </paragraph>
  <paragraph>Una conversión de enmarcado implica hacer una copia del valor que
  esta siendo enmarcado. Esto es diferente de una conversión de un <non_terminal where="11.2">tipo-por-referencia</non_terminal> al tipo objeto, en el cual el valor continua referenciado la misma instancia y simplemente es considerada como un derivado menor del tipo objeto. <example>[Ejemplo: Por ejemplo, dada la declaración <code_example><![CDATA[
struct Point  
{  
   public int x, y;  
   public Point(int x, int y) {  
      this.x = x;  
      this.y = y;  
   }  
}  
]]></code_example>las siguientes sentencias <code_example><![CDATA[
Point p = new Point(10, 10);  
object box = p;  
p.x = 20;  
Console.Write(((Point)box).x);  
]]></code_example>imprimirán el valor 10 en la consola porque la operación de
enmarcado implícito que ocurre en la asignación de p al paquete causa que el valor de p sea copiado. En vez de esto Point ha sido declarado como clase, el valor 20 podría ser impreso porque p y el paquete referencian a la misma instancia. fin ejemplo]</example> </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
