<?xml version="1.0"?>
<clause number="11.1.3" title="Tipos simples">
  <paragraph>C# proporciona un juego de tipos de estructura predefinidos llamados tipos simples. Los tipos simples son identificados a través de palabras reservadas, pero esas palabras reservadas son alias simples para las tipos de estructuras en el espacio de nombres System, como esta descrito en la siguiente tabla. <table_line>Palabra reservada   Alias del tipo </table_line>
<table_line><keyword>sbyte</keyword> System.SByte </table_line>
<table_line><keyword>byte</keyword> System.Byte </table_line>
<table_line><keyword>short</keyword> System.Int16 </table_line>
<table_line><keyword>ushort</keyword> System.UInt16 </table_line>
<table_line><keyword>int</keyword> System.Int32 </table_line>
<table_line><keyword>uint</keyword> System.UInt32 </table_line>
<table_line><keyword>long</keyword> System.Int64 </table_line>
<table_line><keyword>ulong</keyword> System.UInt64 </table_line>
<table_line><keyword>char</keyword> System.Char </table_line>
<table_line><keyword>float</keyword> System.Single </table_line>
<table_line><keyword>double</keyword> System.Double </table_line>
<table_line><keyword>bool</keyword> System.Boolean </table_line>
<table_line><keyword>decimal</keyword> System.Decimal </table_line>
</paragraph>
<paragraph>Debido a que un tipo simple sobrenombra a un tipo de estructura, cada tipo simple tiene miembros. <example>[Ejemplo: Por ejemplo, <keyword>int</keyword> tiene los miembros declarados en System.Int32 y los miembros heredados de System.Object, y las siguientes declaraciones son permitidas: <code_example><![CDATA[
int i = int.MaxValue;      // Constante System.Int32.MaxValue
string s = i.ToString();    // Método System.Int32.ToString()
string t = 123.ToString();   // Método System.Int32.ToString()
]]></code_example>. fin ejemplo]</example> Los tipos simples se difieren de otros tipos de estructura en que ellos permiten algunas operaciones adicionales: <list><list_item> Muchos tipos simples permiten valores para ser creados por literales de escritura (<hyperlink>9.4.4</hyperlink>). <example>[Ejemplo: Por ejemplo, 123 es una literal de tipo <keyword>int</keyword> y 'a' es una literal de tipo <keyword>char</keyword>. fin ejemplo]</example> C# no hace provisión para literales de tipos de estructura en general, y tampoco para valores por defecto para otros tipo de estructura creadas a través de la instancia de constructores de esos tipos de estructura. </list_item><list_item> Cuando todos los operandos de una expresión son constantes simples, el compilador evalúa la expresión en tiempo de compilación. Como una expresión conocida como <non_terminal where="14.15">expresión-constante</non_terminal> (<hyperlink>14.15</hyperlink>). Expresiones que involucran operadores definidos por otros tipos de estructura no son considerados como expresiones constantes. </list_item><list_item> A través de declaraciones constantes, es posible declarar constantes de tipos simples (<hyperlink>17.3</hyperlink>). No es posible tener constantes de otros tipos de estructura, pero un efecto similar es provisto por campos de solo lectura. </list_item><list_item> Conversiones que involucran tipos simples pueden participan en evaluaciones de operadores de conversión por otras estructuras de tipos, pero un operador de conversión definida por el usuario nunca puede participar en la evaluación de otro operador definido por el usuario. (<hyperlink>13.4.2</hyperlink>). </list_item></list></paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
