<?xml version="1.0"?>
<clause number="14.2.2" title="Sobrecarga de operadores">
  <paragraph>Todos los operadores unarios y binarios tienen implementaciones predefinidas que estan automáticamente disponibles en cualquier expresión. En adición a las implementaciones predefindas, implementaciones definidas por el usuario pueden ser introducidas al incluir declaraciones de operador en clases y estructuras (<hyperlink>17.9</hyperlink>). Implementaciones de operador definidas por el usuario se apoderan de la precedencia de las implementaciones del operador predefinidas: Unicamente cuando no existen implementaciones de operador definidas por el usuario las implementaciones de operador predefinidas son consideradas. </paragraph>
  <paragraph>Los operadores unarios disponibles son: <code_example><![CDATA[
+   -   !   ~   ++   --   true   false  
]]></code_example></paragraph>
  <paragraph>
    <note>[Nota: Aunque true y false no son usados explicitamente en expresiones, son considerados operadores porque son invocados en muchos contextos de expresiones: expresiones booleanas (<hyperlink>14.16</hyperlink>) y expresiones que involucren el condicional (<hyperlink>14.12</hyperlink>), y operadores logicos condicionales (<hyperlink>14.11</hyperlink>). fin nota]</note>
  </paragraph>
  <paragraph>Los operadores binarios sobrecargables son: <code_example><![CDATA[
+   -   *   /   %   &   |   ^   <<   >>   ==   !=   >   <   >=   <=  
]]></code_example></paragraph>
  <paragraph>Unicamente los operadores listados antes pueden ser sobrecargados. En particular no es posible sobrecargar acceso a miembros, invocación a métodos, o los operadores =, &amp;&amp;, ||, ?:, checked, unchecked, new, typeof, as, e is. </paragraph>
  <paragraph>Cuando un operador binario es sobrecargado, el operador de asignación correspondiente, si hay alguno, es también implícitamente sobrecargado. Por ejemplo, una sobrecarga del operador * es también una sobrecarga del operador *=. Esto descrito más adelante en <hyperlink>14.13</hyperlink>. Note que el operador de asignación (=) por si mismo no puede ser sobrecargado. Una asignación siempre realiza una copia simple de nivel de bit de un valor a la variable. </paragraph>
  <paragraph>Operaciones de cast, como (T)x, son sobrecargas al proveer conversiones de usaurio definidas (<hyperlink>13.4</hyperlink>). </paragraph>
  <paragraph>Acceso a elementos, como a[x], no es considerdo un operador sobrecargable. En vez de eso, el indexamiento definido por el usuario es soportado a través de indexadores (<hyperlink>17.8</hyperlink>). </paragraph>
  <paragraph>En expresiones, operadores son referenciados usando notacion de operador, y en declaraciones, operadores son referenciados usando notación funcional. La siguiente tabla muestra la relación entre notaciones de operador y funcionales para operadores unarios y binarios. La primera entrada, op denota cualquier prefijo de operador unario sobrecargable. En la segunda entrada, op denota los operadores de postfijo unarios ++ y --. En la tercera entrada, op denota cualquier operador binario sobrecargable. <note>[Nota: Para un ejemplo de sobrecarga de operadores ++ y -- mire <hyperlink>17.9.1</hyperlink>. fin nota]</note> <table_line>Notación de operador Notación funcional </table_line>
<table_line>op x operator op(x) </table_line>
<table_line>x op operator op(x) </table_line>
<table_line>x opy operator op(x, y) </table_line>
</paragraph>
  <paragraph>Declaraciones de operador definidas por el usuario siempre requieren que al menos uno de los parámetros sea del tipo de la clase o estrucutra que contiene la declaración del operaor. <note>[Note: Así, no es posible para un operador definido por el usuario tener la misma firma que un operador predefinido. fin nota]</note> </paragraph>
  <paragraph>Declaraciones de operador definidas por el usuario no pueden modificar la sintaxis, precedencia, o asociatividad de un operador. </paragraph>
  <paragraph>
    <example>[Ejemplo: Por ejemplo, el operador / es siempre un operador binario, siempre tiene el nivel de precedencia especificado en <hyperlink>14.2.1</hyperlink>, y es siempre asociativo a la izquierda. fin ejemplo]</example>
  </paragraph>
  <paragraph>
    <note>[Nota: Mientras que es posible para un operador definido por el usuario realizar cualquier computación que satisfaga, implementaciones que producen resultados otros que esos que son intuitivamente espererados son altamente desalentados. </note>
  </paragraph>
  <paragraph>
    <note>Por ejemplo, una implementación del operador == debe comparar los dos operandos para ecualidad y retorno de un resultado <keyword>bool</keyword> apropiado. fin nota]</note>
  </paragraph>
  <paragraph>Las descripciones de operadores individuales en <hyperlink>14.5</hyperlink> a través de <hyperlink>14.13</hyperlink> especifican las implementaciones predefinidas de los operadores y cualquier regla adicional que aplique a cada operadore. Las descripciones hacen uso de terminos de resolución de sobrecarga de operador unario, resolución sobrecarga de operador binario, promoción numerica, definiciones las cuales se encuentran en las siguientes secciones. </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
