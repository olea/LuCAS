<?xml version="1.0"?>
<clause number="14.6.2" title="Operador unario menos">
  <paragraph>Para una operación de la forma -x, la resolución de sobrecarga de operador unario (<hyperlink>14.2.3</hyperlink>) es aplicada para seleccionar una implementación de operador específico. El operando es convertido al tipo parámetro del operador seleccionado, y el tipo del resultado es el tipo de retorno del operador. Los operadores de negación predefinidos son: <list><list_item> Negación entera: <code_example><![CDATA[
int operator -(int x);  
long operator -(long x);  
]]></code_example></list_item></list></paragraph>
  <paragraph>El resultado es computado sustrayendo x de cero. En un contexto checado (checked), si el valor de x es el máximo negativo <keyword>int</keyword> o <keyword>long</keyword>, una System.OverflowException se lanza. En un contexto sin checado (unchecked), si el valor de x es el máximo negativo <keyword>int</keyword> o <keyword>long</keyword>, el resultado es ese mismo valor y el sobreflujo no se reporta. Si el operando del operador de negación es de tipo <keyword>uint</keyword>, es convertido al tipo <keyword>long</keyword>, y el tipo del resultado es <keyword>long</keyword>. Una excepción es la regla que permite que el valor <keyword>int</keyword> <unicode>8722</unicode>2147483648 (<unicode>8722</unicode>2<super>31</super>) sea escrito como una literal entera <keyword>decimal</keyword>  (<hyperlink>9.4.4.2</hyperlink>). Si el operando del operador de la negación es de tipo <keyword>ulong</keyword>, un error en tiempo de compilación ocurre. Una excepción a la regla que permite el valor <keyword>long</keyword> <unicode>8722</unicode>9223372036854775808 (<unicode>8722</unicode>2<super>63</super>) para ser escrito como un literal entero <keyword>decimal</keyword> (<hyperlink>9.4.4.2</hyperlink>). <list><list_item> Negación de punto flotante: <code_example><![CDATA[
float operator -(float x);  
double operator -(double x);  
]]></code_example></list_item></list></paragraph>
  <paragraph>El resultado es el valor de x con su signo invertido. Si x es NaN (Not a Number, No un número), el resultado es también NaN. <list><list_item> Negación decimal: <code_example><![CDATA[
decimal operator -(decimal x);  
]]></code_example></list_item></list></paragraph>
  <paragraph>El resultado es computado al substraer x de cero. La negación decimal es equivalente a usar el operador unario menos (-) del tipo System.Decimal. </paragraph>
</clause>
<!-- Traducido por Mario Carrión, mario.carrion@gmail.com -->
