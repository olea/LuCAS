<?xml version="1.0"?>
<clause number="8.13" title="Versiones" informative="true">
  <paragraph>Hacer versiones es el proceso en el que un componente evoluciona de
  una forma compatible a lo largo del tiempo. Una nueva versión de un componente
  es compatible a nivel de código fuente si el codigo que dependía de la versión
  anterior puede funcionar al ser recompilado con la nueva versión. Por el
  contrario, una nueva versión de un componente es compatible a nivel binario si
  una aplicación que depende de la versión antigua puede funcionar con la nueva
  versión sin necesidad de ser recompilado. </paragraph>
  <paragraph>La mayoría de los lenguajes no proporcionan compatibilidad a nivel binario, y muchos hacen poco por facilitar la compatibilidad a nivel de código fuente. De hecho, algunos lenguajes contienen imperfecciones que hacen imposible la evolución de una clase a lo largo del tiempo sin romper al menos el código de alguna aplicación cliente. </paragraph>
  <paragraph>Como ejemplo, consideremos la sitiación de una clase base autora que proporciona una clase llamada Base. En la primera versión, Base no contiene ningún método F. Un componente llamado Derivado que es derivado de Base e introduce F. Esta clase Derivado, junto con la clase Base de la que depende, es utilizada por clientes, que sirven a varios clientes y servidores.<code_example><![CDATA[
// Autor A  
namespace A   
{  
   public class Base   // version 1  
   {  
   }  
}  
// Autor B  
namespace B  
{  
   class Derivado: A.Base  
   {  
      public virtual void F() {  
         System.Console.WriteLine("Derivado.F");   
      }  
   }  
}  
]]></code_example></paragraph>
  <paragraph>Hasta ahora todo bien, pero enseguida empiezan los problemas. El autor de Base produce una nueva versión, dando su propio método F. <code_example><![CDATA[
// Author A  
namespace A   
{  
   public class Base   // version 2  
   {  
      public virtual void F() {    // añadido en version 2  
         System.Console.WriteLine("Base.F");   
      }  
   }  
}  
]]></code_example></paragraph>
  <paragraph>Esta nueva versión de Base debería compatible tanto a nivel binario
  como a nivel de código fuente. (Si simplemente no fuera posible añadir un
  método entonces una clase base nunca evolucionaría.) Desafortunadamente, el
  nuevo método F en Base hace que no esté claro el significado de F. Quiso
  Derivada sobreescribir el F de Base?. Esto no parece posible, pués cuando se
  compiló Derivado, Base ni siquiera tenía a F!. Además, so el F de Derivado
  sobreescribe el F de Base, entonces se debe de adherir al contrato
  especificado por Base -un contrato que no estaba especificado cuando Derivado
  fue escrito. En algunos casos, esto es imposible. Por ejemplo, el F de Base
  puede requerir que método sobreescritos de este método siempre llamen a la
  base. Claramente, con el F de Derivado se pretende crear un nuevo método más
  que sobreescribir un método base, pués ningún método de la base se llama F. </paragraph>

  <paragraph>Si Base añade un F y produce una nueva versión, entonces en la versión binaria de la intención de Derivado está clara -Derivado no está relacionado semanticamente y no debería tratarse como una sobreescritura. </paragraph>

  <paragraph>De todas formas, cuando se recompila Derivado, el significado no está claro -el autor de devado tal vez tenía intención de sobreescribir el F de Base, o de esconderlo. Puesto que la intención no está clara, el compilador produce un aviso, y por defecto hace que el F de Derivado esconde el F de Base. Este hecho de duplicar la semántica se hace porque pudiera darse el caso en el que Derivado no estuviera recompilado. El aviso que se genera avisa al autor de Derivado de la presentcia de un método F en Base. </paragraph>
  <paragraph>Si el F de Derivado no está semánticamente relacionado al F de
  BAse, entonces el autor de Derivado puede expresar su intención -y, de hecho,
  quitar el aviso- usando la palabra reservada <keyword>new</keyword> en la
  declaración de F .<code_example><![CDATA[
// Autor A  
namespace A   
{  
   public class Base   // version 2  
   {  
      public virtual void F() { // añadido en version 2  
         System.Console.WriteLine("Base.F");   
      }  
   }  
}  
// Autor B  
namespace B  
{  
   class Derivado: A.Base  // version 2a: new  
   {  
      new public virtual void F() {  
         System.Console.WriteLine("Derivado.F");   
      }  
   }  
}  
]]></code_example></paragraph>
  <paragraph>Por otra parte, el autor de Derivado puede inverstigar un poco más y decidir que el F de Derivado debería sobreescribir el F de Base. Este intento puede ser especificado usando la palabra reservada <keyword>override</keyword>, como se muestra a continuación. <code_example><![CDATA[
// Autor A  
namespace A   
{  
   public class Base     // version 2  
   {  
      public virtual void F() { // añadido in version 2  
         System.Console.WriteLine("Base.F");   
      }  
   }  
}  
// Autor B  
namespace B  
{  
   class Derivado: A.Base  // version 2b: override (sobreescribe)
   {  
      public override void F() {  
         base.F();  
         System.Console.WriteLine("Derivado.F");   
      }  
   }  
}  
]]></code_example></paragraph>
  <paragraph>El autor de Derivado tiene otra opción más, esta es, cambiar el
  nombre de F, y por lo tanto evitar completamente la colisión de nombres. A
  pesar de que este cambio rompería la compatibilidad a nivel de código y
  binaria, la importancia de estas compatibilidades varían dependiendo del
  escenario. Si Derivado no está expuesta a otros programas, entonces cambiar el
  nombre de F es bastante buena idea, pués mejoraría la claridad del código -ya
  no habría confusiones en cuanto al significado de F. </paragraph>

</clause>


<!-- Traducción Fabian Seoane fabian@fseoane.net -->
