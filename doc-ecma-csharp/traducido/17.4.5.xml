<?xml version="1.0"?>
<clause number="17.4.5" title="Inicializadores de variable">
  <paragraph>Declaraciones de campo pueden incluir <non_terminal where="19.6">inicializadores-de-variable</non_terminal>. Para campos estáticos, inicializadores de variables corresponden a la asignación de sentencias que son ejecutadas durante la inicialización de la clase. Para campos de instancia, inicializadores de variable corresponden a sentencias de asignación que son ejecutadas cuando una instancia de la clase es creada. </paragraph>
  <paragraph>
    <example>[Ejemplo: El ejemplo <code_example><![CDATA[
using System;  
class Test  
{  
   static double x = Math.Sqrt(2.0);  
   int i = 100;  
   string s = "Hola";  
   static void Main() {  
      Test a = new Test();  
      Console.WriteLine("x = {0}, i = {1}, s = {2}", x, a.i, a.s);  
   }  
}  
]]></code_example>produce la salida <code_example><![CDATA[
x = 1.4142135623731, i = 100, s = Hola  
]]></code_example>porque una asignación para x ocurre cuando los inicializadores de campo estáticos se ejecutan y asignan a i y s ocurren cuando el inicializador de instancia de campo se ejecuta. fin ejemplo]</example>
  </paragraph>
  <paragraph>El valor por defecto de una inicialización descrita en <hyperlink>17.4.3</hyperlink> ocurre para todos los campos, incluyendo campos que tienen inicializadores de variable. De esta forma, cuando una clase es inicializada, todos los campos estáticos en esa clase son primero inicializados por sus valores por defecto, y entonces los inicializadores de campo estático son ejecutados en orden textual. De esta forma, cuando una instancia de una clase sea creada, todos los campos de instancia en esa instancia son primero inicializados por sus valores por defecto, y entonces los inicializadores de campos de instancia son ejecutados en orden textual. </paragraph>
  <paragraph>Es posible para campos estáticos con inicializadores de variables ser observados por su estado de valor por defecto. <example>[Ejemplo: De cualquier forma, este es fuertemente desaprobado como importancia de estilo. El ejemplo <code_example><![CDATA[
using System;  
class Test  
{  
   static int a = b + 1;  
   static int b = a + 1;  
   static void Main() {  
      Console.WriteLine("a = {0}, b = {1}", a, b);  
   }  
}  
]]></code_example>exhibe esta comportamiento. A pesar de las definiciones circulares de a y b, el programa es valido. Este resulta en la salida <code_example><![CDATA[
a = 1, b = 2  
]]></code_example>porque los campos estáticos a y b son inicializados a 0 (el valor por defecto para <keyword>int</keyword>) antes de que sus inicializadores sean ejecutados. Cuando el inicializador ejecuta, el valor de b es cero, y después es inicializado a 1. Cuando el inicializador de b ejecuta, el valor de a ya es 1, y b es inicializado a 2. fin ejemplo]</example> </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
