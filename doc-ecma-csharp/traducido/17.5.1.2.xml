<?xml version="1.0"?>
<clause number="17.5.1.2" title="Parámetros por referencia">
  <paragraph>Un parámetro declarado con un modificador ref es un parámetro por referencia. En diferencia a un parámetro por valor, un parámetro por referencia no crea una nueva localidad de almacenamiento. En vez de esto, un parámetro por referencia representa la misma localidad de almacenamiento como la variable dada como argumento en la invocación del método. </paragraph>
  <paragraph>Cuando un parámetro forma es un parámetro por referencia, el argumento correspondiente es una invocación al método que debe consistir de la palabra reservada ref seguida por una <non_terminal where="12.4">referencia-de-variable</non_terminal> (<hyperlink>12.3.3</hyperlink>) del mismo tipo que el parámetro formal. Una variable debe ser definitivamente asignada antes que puede ser pasada como parámetro por referencia. </paragraph>
  <paragraph>Dentro de un método, un parámetro por referencia es siempre considerado asignado definitivamente. </paragraph>
  <paragraph>
    <example>[Ejemplo: El ejemplo <code_example><![CDATA[
using System;  
class Test  
{  
   static void Swap(ref int x, ref int y) {  
      int temp = x;  
      x = y;  
      y = temp;  
   }  
   static void Main() {  
      int i = 1, j = 2;  
      Swap(ref i, ref j);  
      Console.WriteLine("i = {0}, j = {1}", i, j);  
   }  
}  
]]></code_example>produce la salida <code_example><![CDATA[
i = 2, j = 1  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>Para la invocación de Swap en Main, x representa i y y representa j. De esta forma, la invocación tiene el efecto de intercambiar los valores de i y j. fin ejemplo]</example>
  </paragraph>
  <paragraph>En un método que toma lo parámetros por referencia, es posible que múltiples nombres representen la misma localidad de almacenamiento. <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
class A  
{  
   string s;  
   void F(ref string a, ref string b) {  
      s = "Uno";  
      a = "Dos";  
      b = "Tres";  
   }  
   void G() {  
      F(ref s, ref s);  
   }  
}  
]]></code_example>la invocación de F en G pasa una referencia a s para ambos a y b. De esta forma, para esa invocación, todos los nombres s, a, y b se refieren a la misma localidad de almacenamiento, y todas las tres asignaciones modifican los campos de instancia. fin ejemplo]</example> </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
