<?xml version="1.0"?>
<clause number="20.4.1" title="Implementaciones explícitas de miembros de interfaz">
  <paragraph>Para implementar interfaces, una clase o estructura puede declarar implementaciones explícitas de miembros de interfaz. Una implementación explícita de miembro de interfaz es una declaración de método, propiedad, evento o indexador que referencia un nombre completamente calificado de miembro de interfaz. <example>[Ejemplo: Por ejemplo <code_example><![CDATA[
interface ICloneable  
{  
   object Clone();  
}  
interface IComparable  
{  
   int CompareTo(object other);  
}  
class ListEntry: ICloneable, IComparable  
{  
   object ICloneable.Clone() {...}  
   int IComparable.CompareTo(object other) {...}  
}  
]]></code_example></example></paragraph>
  <paragraph>
    <example>Aquí, ICloneable.Clone e IComparable.CompareTo son implementaciones explícitas de miembros de interfaz. fin del ejemplo]</example>
  </paragraph>
  <paragraph>
    <example>[Ejemplo: En algunos casos, el nombre de un miembro de interfaz puede no ser apropiado para la clase que la implementa. Una clase que implementa una abstracción de fichero, por ejemplo, muy probablemente podría implementar una función miembro Close que tenga el efecto de liberar el recurso del fichero, e implementar el método Dispose de la interfaz IDisposable usando una implementación explícita de miembro de interfaz: <code_example><![CDATA[
interface IDisposable {  
   void Dispose();  
}  
class MyFile: IDisposable {  
   void IDisposable.Dispose() {  
      Close();  
   }  
   public void Close() {  
      // Hacer lo que haga falta para cerrar el fichero
      System.GC.SuppressFinalize(this);  
   }  
}  
]]></code_example>fin del ejemplo]</example>
  </paragraph>
  <paragraph>No es posible acceder a una implementación explícita de miembro de interfaz a través de su nombre completamente calificado en una invocación de método, acceso a propiedad, o acceso a indexador. Una implementación explícita de miembro de interfaz solo puede ser accedida a través de una instancia de interfaz, y en tal caso es referenciada solo por su nombre. </paragraph>
  <paragraph>Es un error en tiempo de compilación que una implementación explícita de miembro de interfaz incluya modificadores de acceso, y es un error en tiempo de compilación incluir los modificadores abstract, virtual, override, o static. </paragraph>
  <paragraph>Las implementaciones explícitas de miembros de interfaz pueden tener características de accesibilidad distintas de otros miembros. Ya que las implementaciones explícitas de miembros de interfaz nunca son accesibles a través de su nombre completamente calificado en una invocación de método o acceso a propiedad, son en cierta forma privadas. Sin embargo, ya que pueden ser accedidas a través de una instancia de interfaz, son también en cierta forma también públicas. </paragraph>
  <paragraph>Las implementaciones explícitas de miembros de interfaz tienen dos propósitos principales: <list><list_item> Ya que las implementaciones explícitas de miembros de interfaz no son accesibles a través de instancias de clases o estructuras, permiten que las implementaciones de interfaces se excluyan de la interfaz pública de una clase o estructura. Esto es particularmente útil cuando una clase o estructura implementa una interfaz interna que no es de interés para un consumidor de dicha clase o estructura. </list_item><list_item> Las implementaciones explícitas de miembros de interfaz permiten eliminar la ambigüedad de miembros de interfaz con la misma firma. Sin implementaciones explícitas de miembros de interfaz sería imposible para una clase o estructura tener distintas implementaciones de miembros de interfaz con la misma firma y valor de retorno, así como sería imposible para una clase o estructura tener cualquier implementación de miembros de interfaz con la misma firma pero distintos tipos de retorno. </list_item></list></paragraph>
  <paragraph>Para que una implementación explícita de miembro de interfaz sea válida, la clase o estructura debe nombrar en su lista de clases base una interfaz que contenga un miembro cuyo nombre completamente calificado, tipo y tipos de parámetros coincidan exactamente aquellos de la implementación explícita de miembro de interfaz. <example>[Ejemplo: Por tanto, en la siguiente clase <code_example><![CDATA[
class Shape: ICloneable  
{  
   object ICloneable.Clone() {...}  
   int IComparable.CompareTo(object other) {...}  // no válido
}  
]]></code_example>la declaración de IComparable.CompareTo resulta en un error en tiempo de compilación porque IComparable no aparece en la lista de clases base de Shape y no es una interfaz base de ICloneable. De manera similar, en las declaraciones <code_example><![CDATA[
class Shape: ICloneable  
{  
   object ICloneable.Clone() {...}  
}  
class Ellipse: Shape  
{  
   object ICloneable.Clone() {...} // no válido
}  
]]></code_example>la declaración de ICloneable.Clone en Ellipse resulta en un error en tiempo de compilación porque ICloneable no está explícitamente indicado en la lista de clases base de Ellipse. fin del ejemplo]</example> </paragraph>
  <paragraph>El nombre completamente calificado de un miembro de interfaz debe referenciar la interfaz en la cual el miembro fue declarado. <example>[Ejemplo: Por tanto, en las declaraciones <code_example><![CDATA[
interface IControl  
{  
   void Paint();  
}  
interface ITextBox: IControl  
{  
   void SetText(string text);  
}  
class TextBox: ITextBox  
{  
   void IControl.Paint() {...}  
   void ITextBox.SetText(string text) {...}  
}  
]]></code_example>la implementación explícita del miembro de interfaz Paint debe ser escrita como IControl.Paint. fin del ejemplo]</example> </paragraph>
</clause>
<!-- traducción Rodolfo Campero, rodolfo.campero@gmail.com -->
