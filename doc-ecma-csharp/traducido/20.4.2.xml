<?xml version="1.0"?>
<clause number="20.4.2" title="Correlaciones de interfaz">
  <paragraph>Una clase o estructura debe proveer implementaciones de todos los miembros de las interfaces que están listadas en la lista de clases base de la clase o estructura. El proceso de ubicación de implementaciones de miembros de interfaz en una clase o estructura que la implementa se conoce como correlación de interfaz. </paragraph>
  <paragraph>La correlación de interfaz para una clase o estructura C ubica una implementación para cada miembro de cada interfaz especificada en la lista de clases base de C. La implementación de un miembro en particular I.M, donde I es la interfaz en la cual el miembro M está declarado, se determina examinando cada clase o estructura S, comenzando con C y repitiendo sucesivamente para cada clase base de C, hasta que se encuentre una concordancia: 
  <list>
    <list_item> Si S contiene una declaración de implementación explícita de miembro de interfaz que coincida con I y M, entonces este miembro es la implementación de I.M.</list_item>
    <list_item> Sino, si S contiene una declaración de un miembro público no estático que coincida con M, entonces este miembro es la implementación de I.M. </list_item></list></paragraph>
  <paragraph>Ocurre un error en tiempo de compilación si no pueden encontrarse implementaciones para todos los miembros de todas las interfaces especificadas en la lista de clases base de C. Note que los miembros de una interfaz incluyen aquellos miembros que están heredados de interfaces base. </paragraph>
  <paragraph>A los propósitos de la correlación de interfaz, un miembro de clase A coincide con un miembro de interfaz B cuando:
  <list>
    <list_item> A y B son métodos, y el nombre, tipo y lista de parámetros formales de A y B son idénticos. </list_item>
    <list_item> A y B son propiedades, el nombre y tipo de A son idénticos, y A tiene los mismos accesores que B (se le permite a A tener accesores adicionales si no es una implementación explícita de miembro de interfaz). </list_item>
    <list_item> A y B son eventos, y el nombre y tipo de A y B son idénticos. </list_item>
    <list_item> A y B son idexadores, y el tipo y lista de parámetros formales de A y B son idénticos, y A tiene los mismos accesores que B (a A se le permite tener accesores adicionales si no es una implementación explícita de miembro de interfaz). </list_item>
  </list></paragraph>
  <paragraph>Son implicaciones notables del algoritmo de correlación de interfaz:
  <list>
    <list_item> Las implementaciones explícitas de miembros de interfaz tienen precedencia sobre otros miembros en la misma clase o estructura al determinar el miembro de la clase o estructura que implementa un miembro de interfaz. </list_item>
    <list_item> Ni los miembros no públicos ni los estáticos pueden participar en la correlación de interfaz. </list_item></list></paragraph>
  <paragraph>
    <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
interface ICloneable  
{  
   object Clone();  
}  
class C: ICloneable  
{  
   object ICloneable.Clone() {...}  
   public object Clone() {...}  
}  
]]></code_example>el miembro ICloneable.Clone de C se vuelve la implementación de Clone en ICloneable porque las implementaciones explícitas de miembros de interfaz toman precedencia sobre otros miembros. fin del ejemplo]</example>
  </paragraph>
  <paragraph>Si una clase o estructura implementa dos o más interfaces que contienen un miembro con el mismo nombre, tipo y tipos de parámetros, es posible correlacionar cada uno de estos miembros de interfaz en un mismo miembro de clase o estructura. </paragraph>
  <paragraph>
    <example>[Ejemplo: Por ejemplo <code_example><![CDATA[
interface IControl  
{  
   void Paint();  
}  
interface IForm  
{  
   void Paint();  
}  
class Page: IControl, IForm  
{  
   public void Paint() {...}  
}  
]]></code_example></example>
  </paragraph>
  <paragraph>
    <example>Aquí, los métodos Paint de ambos IControl e IForm se correlacionan con el método Paint de Page. Por supuesto que también es posible tener implementaciones explícitas de miembros de interfaz separadas para cada método. fin del ejemplo]</example>
  </paragraph>
  <paragraph>Si una clase o estructura implementa una interfaz que contiene miembros escondidos, entonces algunos miembros deben implementarse necesariamente a través de implementaciones explícitas de de miembros de interfaz. <example>[Ejemplo: Por ejemplo <code_example><![CDATA[
interface IBase  
{  
   int P { get; }  
}  
interface IDerived: IBase  
{  
   new int P();  
}  
]]></code_example></example></paragraph>
  <paragraph>
    <example>Una implementación de esta interfaz requeriría al menos una implementación explícita de miembro de interfaz, y tomaría una de las siguientes formas <code_example><![CDATA[
class C: IDerived  
{  
   int IBase.P { get {...} }  
   int IDerived.P() {...}  
}  
class C: IDerived  
{  
   public int P { get {...} }  
   int IDerived.P() {...}  
}  
class C: IDerived  
{  
   int IBase.P { get {...} }  
   public int P() {...}  
}  
]]></code_example>fin del ejemplo]</example>
  </paragraph>
  <paragraph>Cuando una clase implementa múltiples interfaces que tienen la misma interfaz base, puede haber solo una implementación de la interfaz base. <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
interface IControl  
{  
   void Paint();  
}  
interface ITextBox: IControl  
{  
   void SetText(string text);  
}  
interface IListBox: IControl  
{  
   void SetItems(string[] items);  
}  
class ComboBox: IControl, ITextBox, IListBox  
{  
   void IControl.Paint() {...}  
   void ITextBox.SetText(string text) {...}  
   void IListBox.SetItems(string[] items) {...}  
}  
]]></code_example>no es posible tener implementaciones separadas para la IControl que aparece en la lista de clases base, la IControl heredada por ITextBox, y la IControl heredada por IListBox. De hecho, no hay noción de una identidad separada para estas interfaces. Más bien, las implementaciones de ITextBox y IListBox comparten la misma implementación de IControl, y se considera simplemente que ComboBox implementa tres interfaces, IControl, ITextBox e IListBox. fin del ejemplo]</example> </paragraph>
  <paragraph>Los miembros de una clase base participan en la correlación de interfaz. <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
interface Interface1  
{  
   void F();  
}  
class Class1  
{  
   public void F() {}  
   public void G() {}  
}  
class Class2: Class1, Interface1  
{  
   new public void G() {}  
}  
]]></code_example>el método F en Class1 se usa en la implementación de Class2 de Interface1. fin del ejemplo]</example> </paragraph>
</clause>
<!-- traducción Rodolfo Campero, rodolfo.campero@gmail.com -->
