<?xml version="1.0"?>
<clause number="16.3.2" title="Directivas using de espacio de nombres">
  <paragraph>Una <non_terminal where="16.3.2">directiva-using-de-espacio-de-nombres</non_terminal> importa los tipos contenidos en un espacio de nombres a la unidad de compilación o cuerpo de espacio de nombres que la contiene directamente, habilitando que el identificador de cada tipo sea usado sin calificación.
<grammar_production><name><non_terminal where="16.3.2">directiva-using-de-espacio-de-nombres</non_terminal></name> : <rhs><keyword>using</keyword><non_terminal where="10.8">nombre-de-espacio-de-nombres</non_terminal><terminal>;</terminal></rhs></grammar_production></paragraph>
  <paragraph>Dentro de las declaraciones de miembros en una unidad de compilación o cuerpo de espacio de nombres que contiene una <non_terminal where="16.3.2">directiva-using-de-espacio-de-nombres</non_terminal>, los tipos contenidos en el espacio de nombres dado pueden ser referenciados directamente. <example>[Ejemplo: Por ejemplo: <code_example><![CDATA[
namespace N1.N2  
{  
   class A {}  
}  
namespace N3  
{  
   using N1.N2;  
   class B: A {}  
}  
]]></code_example></example></paragraph>
  <paragraph>
    <example>Arriba, dentro de las declaraciones de miembros en el espacio de nombres N3, los tipos miembros de N1.N2 están disponibles directamente, y así la clase N3.B deriva de la clase N1.N2.A. fin del ejemplo]</example>
  </paragraph>
  <paragraph>Una <non_terminal where="16.3.2">directiva-using-de-espacio-de-nombres</non_terminal> importa los tipos contenidos en el espacio de nombres dado, pero específicamente no importa espacios de nombres anidados. <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
namespace N1.N2  
{  
   class A {}  
}  
namespace N3  
{  
   using N1;  
   class B: N2.A {}    // Error, N2 desconocido  
}  
]]></code_example>la <non_terminal where="16.3.2">directiva-using-de-espacio-de-nombres</non_terminal> importa los tipos contenidos en N1, pero no los espacios de nombres anidados en N1. Por tanto, la referencia a N2.A en la declaración de B resulta en un error en tiempo de compilación porque no hay ningún miembro llamado N2 en el alcance. fin del ejemplo]</example> </paragraph>
  <paragraph>A diferencia de la <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal>, una <non_terminal where="16.3.2">directiva-using-de-espacio-de-nombres</non_terminal> puede importar tipos cuyos identificadores ya están definidos dentro de la unidad de compilación o cuerpo de espacio de nombres que la contiene. En efecto, los nombres importados por una <non_terminal where="16.3.2">directiva-using-de-espacio-de-nombres</non_terminal> están escondidos por miembros de nombre similar en la unidad de compilación o cuerpo de espacio de nombres que la contiene.
<example>[Ejemplo: Por ejemplo:
<code_example><![CDATA[
namespace N1.N2  
{  
   class A {}  
   class B {}  
}  
namespace N3  
{  
   using N1.N2;  
   class A {}  
}  
]]></code_example></example></paragraph>
  <paragraph>
    <example>Aquí, entre las declaraciones de miembros del espacio de nombres N3, A se refiere a N3.A en vez de referirse a N1.N2.A. fin del ejemplo]</example>
  </paragraph>
  <paragraph>Cuando más de un espacio de nombres importado por <non_terminal where="16.3.2">directivas-using-de-espacio-de-nombres</non_terminal> en la misma unidad de compilación o cuerpo de espacio de nombres contienen tipos con el mismo nombre, las referencias a esos nombres se consideran ambiguas. </paragraph>
  <paragraph><example>[Ejemplo: En el ejemplo <code_example><![CDATA[
namespace N1  
{  
   class A {}  
}  
namespace N2  
{  
   class A {}  
}  
namespace N3  
{  
   using N1;  
   using N2;  
   class B: A {}     // Error, A es ambiguo
}  
]]></code_example>ambos N1 y N2 contienen un miembro A, y ya que N3 importa a ambos, referenciar A en N3 es un error en tiempo de compilación. fin del ejemplo]</example>
En esta situación, el conflicto puede resolverse ya sea a través del uso del nombre completo en referencias a A, o introduciendo una <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal> que escoja un A en particular. <example>[Ejemplo: por ejemplo: <code_example><![CDATA[
namespace N3  
{  
   using N1;  
   using N2;  
   using A = N1.A;  
   class B: A {}     // A significa N1.A  
}  
]]></code_example>fin del ejemplo]</example></paragraph>
  <paragraph>Como una <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal>, una <non_terminal where="16.3.2">directiva-using-de-espacio-de-nombres</non_terminal> no contribuye ningún miembro nuevo al espacio de declaraciones a la unidad de compilación o espacio de nombres subyacente, pero afecta solo a la unidad de compilación o cuerpo de espacio de nombres en el cual aparece. </paragraph>
  <paragraph>El <non_terminal where="10.8">nombre-de-espacio-de-nombres</non_terminal> referenciado por una <non_terminal where="16.3.2">directiva-using-de-espacio-de-nombres</non_terminal> se resuelve de la misma manera que los <non_terminal where="10.8">nombres-de-tipos-o-de-espacios-de-nombres</non_terminal> referenciados por una <non_terminal where="16.3.1">directiva-alias-de-using</non_terminal>. Así, las <non_terminal where="16.3.2">directivas-using-de-espacio-de-nombres</non_terminal> en una misma unidad de compilación o cuerpo de espacio de nombres no se afectan entre sí y pueden escribirse en cualquier orden. </paragraph>
</clause>
