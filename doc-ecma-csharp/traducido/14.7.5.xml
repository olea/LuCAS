<?xml version="1.0"?>
<clause number="14.7.5" title="Operador de sustracción">
  <paragraph>Para una operación de la forma x - y, la resolución de operador binario (<hyperlink>14.2.4</hyperlink>) es aplicada para seleccionar la implementación de operador específica. Los operandos son convertidos a los tipos de parámetros del operador seleccionado, y el tipo del resultado es el tipo de retorno del operador. </paragraph>
  <paragraph>Los operadores de sustracción predefinidos son listados a continuación. Todos los operadores sustraen y de x. <list><list_item> Sustracción entera: <code_example><![CDATA[
int operator -(int x, int y);  
uint operator -(uint x, uint y);  
long operator -(long x, long y);  
ulong operator -(ulong x, ulong y);  
]]></code_example>En un contexto checado, si la diferencia esta fuera del rango del tipo de resultado, una System.OverflowException es lanzada. En un contexto checado, los sobreflujos no son reportados y cualquier bits de orden alto fuera del rango del tipo de resultado son descartados. </list_item><list_item> Sustracción de punto-flotante: <code_example><![CDATA[
float operator -(float x, float y);  
double operator -(double x, double y);  
]]></code_example>La diferencia es computada de acuerdo a las reglas de la aritmética IEEE 754. Lo siguiente tabla lista todos los resultados de todas las posibles combinaciones de valores finitos no-cero, cero, infinitos, y NaNs. En la tabla, x y y son de valores no cero, y z es el resultado de x - y. Si x y y son iguales, z es un cero positivo. Si x - y es muy grande para representarse en el tipo destino, z es un infinito con la misma firma que x - y. Si x - y es muy pequeña para representar el tipo destino, z es un cero con la misma firma que x - y. <table_line>y +0 <unicode>150</unicode>0 +<infinity/> <unicode>150</unicode><infinity/> NaN </table_line>
<table_line>x z x x <unicode>150</unicode><infinity/> +<infinity/> NaN </table_line>
<table_line>+0 <unicode>150</unicode>y +0 +0 <unicode>150</unicode><infinity/> +<infinity/> NaN </table_line>
<table_line><unicode>150</unicode>0 <unicode>150</unicode>y <unicode>150</unicode>0 +0 <unicode>150</unicode><infinity/> +<infinity/> NaN </table_line>
<table_line>+<infinity/> +<infinity/> +<infinity/> +<infinity/> NaN +<infinity/> NaN </table_line>
<table_line><unicode>150</unicode><infinity/><unicode>150</unicode><infinity/><unicode>150</unicode><infinity/><unicode>150</unicode><infinity/><unicode>150</unicode><infinity/> NaN NaN </table_line>
<table_line>NaN NaN NaN NaN NaN NaN NaN </table_line>
</list_item><list_item> Sustracción decimal: <code_example><![CDATA[
decimal operator {UNICODE_150}(decimal x, decimal y);  
]]></code_example>Si el valor resultante es muy grande para representarse en el formato <keyword>decimal</keyword>,  una System.OverflowException es lanzada. La escala del resultado, antes del redondeo, es la mayor de las escalas de los dos operandos. Sustracción decimal es equivalente a usar el operador de sustracción de tipo System.Decimal. </list_item><list_item> Sustracción de enumeración. Cada tipo enumeración implícitamente provee el siguiente operador predefinido, donde E es el tipo enum, y U es el tipo fundamental de E: <code_example><![CDATA[
U operator -(E x, E y);  
]]></code_example>Este operador es evaluado exactamente como (U)((U)x  -(U)y). En otras palabras, el operador computa la diferencia entre los valores ordinales de x y y, y el tipo del resultado es el tipo fundamental de la enumeración. <code_example><![CDATA[
E operator -(E x, U y);  
]]></code_example>Este operador es evaluado exactamente como (E)((U)x  -y). En otras palabras, el operador sustrae un valor del tipo fundamental de la enumeración, produciendo un valor de la enumeración. </list_item><list_item> Borrado de delegado. Cada tipo delegado implícitamente provee el siguiente operador predefinido, donde D es el tipo delegado: <code_example><![CDATA[
D operator -(D x, D y);  
]]></code_example>El operador binario - realizar borrado de delegados cuando ambos operadores son del tipo delegado D. (Si los operandos tienen tipos delegados diferentes, un error en tiempo de compilación ocurre.) Si el primer operando es null, el resultado de la operación es null. De otra forma, si el segundo operando es null, entonces el resultado de la operación es el valor del primer operando. De otra forma, ambos operandos representan listas de invocación (<hyperlink>22.1</hyperlink>) teniendo una o más entradas, y el resultado es una nueva lista de invocación consistente de la lista del primer operando con las entradas del segundo operando removido de él, provisto la lista del segundo operando como un subjuego propio del primero. (Para determinar la igualdad del subjuego, entradas correspondientes son comparada con el operador de igualdad del delegado (<hyperlink>14.9.8</hyperlink>).) De otra forma, el resultado es el valor del operando de la izquierda. Ninguno de la lista de operandos es cambiado en el proceso. Si la lista del segundo operando concuerda con múltiples subjuegos de entradas contiguas en la lista del primer operando, el subjuego más a la derecha que concuerde de entradas contiguas es removido. Si el borrado resulta en una lista vacía, el resultado es null. <example>[Ejemplo: Por ejemplo: <code_example><![CDATA[
using System;  
delegate void D(int x);  
class Test  
{  
   public static void M1(int i) { /* ... */ }  
   public static void M2(int i) { /* ... */ }  
}  
class Demo  
{  
   static void Main() {   
      D cd1 = new D(Test.M1);  
      D cd2 = new D(Test.M2);  
      D cd3 = cd1 + cd2 + cd2 + cd1;  // M1 + M2 + M2 + M1  
      cd3 -= cd1;        // => M1 + M2 + M2  
      cd3 = cd1 + cd2 + cd2 + cd1;    // M1 + M2 + M2 + M1  
      cd3 -= cd1 + cd2;      // => M2 + M1  
      cd3 = cd1 + cd2 + cd2 + cd1;    // M1 + M2 + M2 + M1  
      cd3 -= cd2 + cd2;      // => M1 + M1  
      cd3 = cd1 + cd2 + cd2 + cd1;    // M1 + M2 + M2 + M1  
      cd3 -= cd2 + cd1;      // => M1 + M2  
      cd3 = cd1 + cd2 + cd2 + cd1;    // M1 + M2 + M2 + M1  
      cd3 -= cd1 + cd1;      // => M1 + M2 + M2 + M1  
   }  
}  
]]></code_example>fin ejemplo]</example> </list_item></list></paragraph>
</clause>
<!-- Traducido por Mario Carrión, mario.carrion@gmail.com -->
