<?xml version="1.0"?>
<clause number="17.1.1.1" title="Clases abstractas">
  <paragraph>El modificador abstract es usado para indicar que una clase es incompleta y que esta intencionada para ser usada como clase base. Una clase base se difiere de una clase no abstracta en las siguientes cosas: <list><list_item> Una clase abstracta no puede ser instanciada directamente, y es un error en tiempo de compilación usar el operador new en una clase abstracta. Mientras que es posible tener variables y valores que en tiempo de compilación tengan tipos abstractos, dichas variables y valores necesariamente serán null o contrendrán referencias a instancias de clases derivadas no-abstractas de tipos abstractos. </list_item><list_item> Una clase abstracta permite (pero no requiere) contener miembros abstractos. </list_item><list_item> Una clase abstracta no puede ser sellada (sealed). </list_item></list></paragraph>
  <paragraph>Cuando una clase no-abstracta es derivada de una clase abstracta, la clase no-abstracta debe incluir las implementaciones actuales de todos los miembros abstractos heredados, por medio de sobreescribir esos miembros abstractos. <example>[Ejemplo: En el ejemplo <code_example><![CDATA[
abstract class A  
{  
   public abstract void F();  
}  
abstract class B: A  
{  
   public void G() {}  
}  
class C: B  
{  
   public override void F() {  
      // implementación actual de F  
   }  
}  
]]></code_example>la clase abstracta A introduce un método abstracto F. Clase B introduce un método adicional G, pero debido a que no incluye la implementación de F, B debe declararse como abstracto. Clase C sobreescribe F y provee una implementación actual. Debido a que no hay miembros abstractos en C, C es permitido (pero no requerido) que sea no-abstracto. fin ejemplo]</example> </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
