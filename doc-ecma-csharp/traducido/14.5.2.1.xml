<?xml version="1.0"?>
<clause number="14.5.2.1" title="Significado invariante en bloques">
  <paragraph>Para cada ocurrencia de un identificador dado como un <non_terminal where="14.5.2">nombre-simple</non_terminal> en una expresión, cada otra ocurrencia del mismo identificador como un <non_terminal where="14.5.2">nombre-simple</non_terminal> en una expresión dentro del bloque inmediato que lo contenga (<hyperlink>15.2</hyperlink>) o <non_terminal where="15.7.2">bloque-switch</non_terminal> (<hyperlink>15.7.2</hyperlink>) debe referirse a la misma entidad. Esta regla asegura que el significado de un nombre en el contexto de una expresión refiere es siempre la misma dentro de un bloque. </paragraph>
  <paragraph>El ejemplo <code_example><![CDATA[
class Test  
{  
   double x;  
   void F(bool b) {  
      x = 1.0;  
      if (b) {  
         int x = 1;  
      }  
   }  
}  
]]></code_example>resulta en un error en tiempo de compilación porque x se refiere a dos diferentes entidades dentro dentro del bloque exterior (la extensión del cual incluye el bloque anidado en la sentencia if). En contraste, el ejemplo <code_example><![CDATA[
class Test  
{  
   double x;  
   void F(bool b) {  
      if (b) {  
         x = 1.0;  
      }  
      else {  
         int x = 1;  
      }  
   }  
}  
]]></code_example>es permitido porque el nombre x es nunca usado en el bloque exterior. </paragraph>
  <paragraph>Note que la regla de significado invariante aplica únicamente a nombres simples. Es perfectamente válido para el mismo identificador tener un significado como un nombre simple y otro significado como operando derecho de un acceso a miembro (<hyperlink>14.5.4</hyperlink>). <example>[Ejemplo: Por ejemplo: <code_example><![CDATA[
struct Point  
{  
   int x, y;  
   public Point(int x, int y) {  
      this.x = x;  
      this.y = y;  
   }  
}  
]]></code_example></example></paragraph>
  <paragraph>
    <example>El ejemplo anterior ilustra un patrón común de usar los nombres de los campos como nombres de parámetros en una constructor de instancia. En el ejemplo, los nombres simples x y y refieren a los parámetros, pero eso no previene que expresiones de acceso de miembro this.x y this.y de acceder a los campos. fin ejemplo]</example>
  </paragraph>
</clause>
<!-- Traducido por Mario Carrión, marioc@unixmexico.org -->
